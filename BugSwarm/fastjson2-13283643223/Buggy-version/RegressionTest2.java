import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter1.writeDouble((double) 1.0f, decimalFormat7);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        long long22 = jSONWriter12.getFeatures();
        boolean boolean23 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter12);
        java.math.BigInteger bigInteger24 = null;
        jSONWriter1.writeBigInt(bigInteger24, (-1L));
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) -1 };
        boolean boolean39 = jSONWriter30.writeTypeName(byteArray37, 0L);
        java.util.UUID uUID40 = null;
        jSONWriter30.writeUUID(uUID40);
        jSONWriter30.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context59.config(feature60, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean66 = jSONWriter64.isRefDetect((java.lang.Object) feature65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature65 };
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray67);
        context59.config(featureArray67);
        jSONWriter30.config(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray73 = null;
        jSONWriter72.writeDouble(doubleArray73);
        jSONWriter72.writeArrayNull();
        short[] shortArray79 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter72.writeInt16(shortArray79);
        jSONWriter30.writeInt16(shortArray79);
        java.time.Instant instant82 = null;
        jSONWriter30.writeInstant(instant82);
        boolean[] booleanArray89 = new boolean[] { true, false, false, true, true };
        jSONWriter30.writeBool(booleanArray89);
        jSONWriter1.writeBool(booleanArray89);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(booleanArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray89), "[true, false, false, true, true]");
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        boolean boolean23 = jSONWriter0.isRefDetect();
        java.util.Map map24 = null;
        jSONWriter0.write(map24);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter42 = context41.getPropertyFilter();
        long long43 = context41.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter44 = null;
        context41.setLabelFilter(labelFilter44);
        com.alibaba.fastjson2.filter.NameFilter nameFilter46 = null;
        context41.setNameFilter(nameFilter46);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter48 = null;
        context41.setAfterFilter(afterFilter48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.of(context41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class61 = null;
        boolean boolean63 = jSONWriter56.isWriteTypeInfo((java.lang.Object) jSONWriter58, class61, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        boolean boolean67 = jSONWriter65.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat69 = null;
        jSONWriter65.writeDouble(1.0d, decimalFormat69);
        boolean boolean72 = jSONWriter65.removeReference((java.lang.Object) (short) -1);
        jSONWriter65.writeArrayNull();
        long long74 = jSONWriter65.getFeatures();
        java.lang.Class<?> wildcardClass75 = jSONWriter65.getClass();
        boolean boolean77 = jSONWriter52.isWriteTypeInfo((java.lang.Object) boolean63, (java.lang.reflect.Type) wildcardClass75, 0L);
        jSONWriter52.writeStringNull();
        char[] charArray79 = new char[] {};
        jSONWriter52.writeString(charArray79);
        jSONWriter50.writeString(charArray79);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw(charArray79);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNull(propertyFilter42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[]");
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        boolean boolean14 = jSONWriter3.hasFilter();
        boolean boolean15 = jSONWriter3.utf8;
        boolean boolean16 = jSONWriter3.utf16;
        jSONWriter3.writeTypeName("[1][0]");
        jSONWriter3.startArray(8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal25 = null;
        jSONWriter22.writeDecimal(bigDecimal25);
        java.time.LocalDate localDate27 = null;
        jSONWriter22.writeLocalDate(localDate27);
        jSONWriter22.writeName("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        boolean boolean34 = jSONWriter32.utf16;
        jSONWriter32.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter37);
        long long39 = jSONWriter37.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter42.writeDouble(1.0d, decimalFormat46);
        boolean boolean49 = jSONWriter42.removeReference((java.lang.Object) (short) -1);
        jSONWriter42.writeArrayNull();
        long long51 = jSONWriter42.getFeatures();
        java.lang.Class<?> wildcardClass52 = jSONWriter42.getClass();
        boolean boolean54 = jSONWriter37.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass52, (long) (short) 10);
        int[] intArray61 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter37.writeInt32(intArray61);
        jSONWriter32.writeInt32(intArray61);
        jSONWriter22.writeInt32(intArray61);
        jSONWriter3.writeInt32(intArray61);
        com.alibaba.fastjson2.SymbolTable symbolTable66 = jSONWriter3.symbolTable;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNull(symbolTable66);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path8 = path6.parent;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertNotNull(path8);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.math.BigDecimal bigDecimal16 = null;
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter3.writeDecimal(bigDecimal16, (long) (byte) -1, decimalFormat18);
        java.time.ZonedDateTime zonedDateTime20 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime20);
        jSONWriter3.writeBooleanNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        int int9 = jSONWriter0.level();
        jSONWriter0.writeChar('#');
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean13 = jSONWriter12.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray21 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter14.writeRaw(charArray21);
        jSONWriter12.writeString(charArray21);
        jSONWriter0.writeRaw(charArray21, 0, 3);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        jSONWriter1.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        jSONWriter14.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        char[] charArray34 = new char[] {};
        jSONWriter28.writeString(charArray34);
        jSONWriter14.writeString(charArray34, (int) (byte) -1, 0, true);
        boolean boolean40 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) '#');
        jSONWriter1.startArray(0);
        jSONWriter1.writeInt32((int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter31);
        boolean boolean34 = jSONWriter32.hasFilter(0L);
        java.lang.String str35 = jSONWriter1.setPath((int) (byte) 1, (java.lang.Object) jSONWriter32);
        jSONWriter1.writeArrayNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider23 = context15.getProvider();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter24 = null;
        context15.setContextNameFilter(contextNameFilter24);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider23);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        jSONWriter16.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        jSONWriter16.writeBinary(byteArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean35 = jSONWriter34.isUseSingleQuotes();
        boolean boolean36 = jSONWriter34.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal41 = null;
        jSONWriter38.writeDecimal(bigDecimal41);
        boolean boolean44 = jSONWriter38.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter38.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        char[] charArray53 = new char[] { '#', ' ' };
        jSONWriter50.writeString(charArray53, (int) (byte) 0, (int) (short) 1);
        jSONWriter38.writeString(charArray53);
        jSONWriter34.writeString(charArray53, 1, (int) (short) 0, true);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter16.writeNameRaw(charArray53);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[#,  ]");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        short[] shortArray34 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt16(shortArray34);
        boolean boolean37 = jSONWriter1.isRefDetect((java.lang.Object) (-1.0f));
        jSONWriter1.writeNumberNull();
        java.io.Reader reader39 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader39);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.utf16;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeName((long) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        long long6 = jSONWriter1.getFeatures();
        jSONWriter1.writeRaw((byte) -1);
        jSONWriter1.writeString("");
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        boolean[] booleanArray18 = new boolean[] { false, true, true, true };
        jSONWriter13.writeBool(booleanArray18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter21);
        boolean boolean23 = jSONWriter21.utf16;
        long long25 = jSONWriter21.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = jSONWriter21.getSymbolTable();
        boolean boolean27 = jSONWriter13.isIgnoreNoneSerializable((java.lang.Object) jSONWriter21);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        jSONWriter21.writeEnum((java.lang.Enum) feature28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray37 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter30.writeRaw(charArray37);
        jSONWriter21.writeString(charArray37, (int) (short) 10, (int) (short) -1, true);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(charArray37, 0, 8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertNull(symbolTable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path4.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        boolean boolean29 = path4.equals((java.lang.Object) context23);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = context23.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = null;
        context23.setNameFilter(nameFilter31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context23);
        boolean boolean34 = jSONWriter33.utf8;
        jSONWriter33.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        java.time.LocalTime localTime38 = null;
        jSONWriter37.writeLocalTime(localTime38);
        java.time.LocalDateTime localDateTime40 = null;
        jSONWriter37.writeLocalDateTime(localDateTime40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter43);
        boolean boolean45 = jSONWriter43.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat51 = null;
        jSONWriter47.writeDouble(1.0d, decimalFormat51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean59 = jSONWriter54.writeTypeName(byteArray57, (long) 10);
        jSONWriter47.writeStringLatin1(byteArray57);
        jSONWriter43.writeStringLatin1(byteArray57);
        jSONWriter37.writeBinary(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter33.writeBase64(byteArray57);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1]" + "'", str7, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(afterFilter30);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        jSONWriter0.writeSymbol((int) (byte) 10);
        jSONWriter0.close();
        java.math.BigInteger bigInteger7 = null;
        jSONWriter0.writeBigInt(bigInteger7, 100L);
        jSONWriter0.writeRaw((byte) 10);
        byte[] byteArray12 = jSONWriter0.getBytes();
        boolean boolean13 = jSONWriter0.isWriteNulls();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-81, -81, 127, 10, -81, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        jSONWriter9.close();
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter9.writeFloat((float) 10, decimalFormat12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean20 = jSONWriter15.writeTypeName(byteArray18, (long) 10);
        boolean boolean22 = jSONWriter9.writeTypeName(byteArray18, (long) (byte) 100);
        jSONWriter9.writeInt16((short) (byte) 100);
        boolean boolean25 = jSONWriter9.hasFilter();
        java.nio.charset.Charset charset26 = jSONWriter9.getCharset();
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter9, (long) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        boolean boolean39 = jSONWriter30.isEnabled((long) ' ');
        jSONWriter30.writeString("hi!");
        boolean boolean42 = jSONWriter30.isUTF8();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        jSONWriter30.writeString((java.util.List<java.lang.String>) strList46);
        jSONWriter9.write((java.util.List) strList46);
        boolean boolean50 = jSONWriter9.isIgnoreNoneSerializable();
        java.time.Instant instant51 = null;
        jSONWriter9.writeInstant(instant51);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter9.writeName((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        java.time.LocalDateTime localDateTime4 = null;
        jSONWriter1.writeLocalDateTime(localDateTime4);
        byte[] byteArray6 = jSONWriter1.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter9.writeDecimal(bigDecimal12);
        boolean boolean15 = jSONWriter9.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter9.writeArrayNull();
        jSONWriter9.writeChar('a');
        jSONWriter9.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        jSONWriter27.close();
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter27.writeFloat((float) 10, decimalFormat30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean38 = jSONWriter33.writeTypeName(byteArray36, (long) 10);
        boolean boolean40 = jSONWriter27.writeTypeName(byteArray36, (long) (byte) 100);
        jSONWriter27.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        jSONWriter44.close();
        java.text.DecimalFormat decimalFormat47 = null;
        jSONWriter44.writeFloat((float) 10, decimalFormat47);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean55 = jSONWriter50.writeTypeName(byteArray53, (long) 10);
        boolean boolean57 = jSONWriter44.writeTypeName(byteArray53, (long) (byte) 100);
        jSONWriter27.writeBinary(byteArray53);
        jSONWriter9.writeHex(byteArray53);
        java.lang.String str60 = jSONWriter1.setPath("[1].hi\\!", (java.lang.Object) byteArray53);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-81, -81]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter3.writeDecimal(bigDecimal18, (long) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        java.math.BigDecimal bigDecimal28 = null;
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter14.writeDecimal(bigDecimal28, (long) '#', decimalFormat30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter14.getContext();
        boolean boolean33 = context32.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray19);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        boolean boolean35 = jSONWriter26.isEnabled((long) ' ');
        jSONWriter26.writeString("hi!");
        boolean boolean38 = jSONWriter26.isUTF8();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        jSONWriter26.writeString((java.util.List<java.lang.String>) strList42);
        jSONWriter26.writeRaw((byte) -1);
        java.math.BigInteger bigInteger47 = null;
        jSONWriter26.writeBigInt(bigInteger47, (long) '#');
        byte[] byteArray50 = jSONWriter26.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter24.writeRaw(byteArray50);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 104, 105, 33, -106, 76, 104, 105, 33, 73, -1, -81]");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        context15.setDateFormat("[1][0]");
        boolean boolean31 = context15.isEnabled((long) 'a');
        java.time.ZoneId zoneId32 = context15.getZoneId();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneId32);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        boolean boolean17 = jSONWriter3.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter19);
        boolean boolean21 = jSONWriter19.utf16;
        long long23 = jSONWriter19.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable24 = jSONWriter19.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        boolean boolean35 = jSONWriter26.isEnabled((long) ' ');
        jSONWriter26.writeString("hi!");
        char[] charArray38 = new char[] {};
        jSONWriter26.writeString(charArray38);
        jSONWriter19.writeString(charArray38);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeNameRaw(charArray38);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertNull(symbolTable24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONObject jSONObject7 = null;
        jSONWriter1.write(jSONObject7);
        java.time.LocalDate localDate9 = null;
        jSONWriter1.writeLocalDate(localDate9);
        java.time.ZonedDateTime zonedDateTime11 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime11);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        java.time.LocalDate localDate14 = null;
        jSONWriter3.writeLocalDate(localDate14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        boolean boolean17 = jSONWriter3.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        boolean boolean28 = jSONWriter19.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        jSONWriter32.writeInt8((byte) 1);
        jSONWriter32.close();
        boolean boolean45 = jSONWriter19.removeReference((java.lang.Object) jSONWriter32);
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        boolean[] booleanArray52 = new boolean[] { false, true, true, true };
        jSONWriter47.writeBool(booleanArray52);
        com.alibaba.fastjson2.SymbolTable symbolTable54 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        boolean boolean59 = jSONWriter57.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class60 = null;
        boolean boolean62 = jSONWriter55.isWriteTypeInfo((java.lang.Object) jSONWriter57, class60, (long) ' ');
        byte[] byteArray64 = new byte[] { (byte) -1 };
        boolean boolean66 = jSONWriter57.writeTypeName(byteArray64, 0L);
        jSONWriter47.writeBinary(byteArray64);
        jSONWriter19.writeRaw(byteArray64);
        jSONWriter3.writeRaw(byteArray64);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        jSONWriter1.writeFloat(1.0f);
        boolean boolean9 = jSONWriter1.utf16;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        boolean boolean9 = jSONWriter1.isIgnoreNoneSerializable();
        boolean boolean10 = jSONWriter1.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.getSymbolTable();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName((int) '4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(symbolTable11);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        boolean boolean18 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(contextNameFilter19);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray28);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context32.getProvider();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter34 = context32.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider35 = context32.provider;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertNull(propertyFilter34);
        org.junit.Assert.assertNotNull(objectWriterProvider35);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray27 = null;
        jSONWriter24.writeHex(byteArray27);
        boolean boolean29 = jSONWriter24.isRefDetect();
        jSONWriter24.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        java.util.UUID uUID44 = null;
        jSONWriter34.writeUUID(uUID44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = jSONWriter34.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter47 = context46.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        boolean boolean50 = jSONWriter49.isRefDetect();
        java.lang.String str53 = jSONWriter49.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter55);
        long long57 = jSONWriter55.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter60.writeDouble(1.0d, decimalFormat64);
        boolean boolean67 = jSONWriter60.removeReference((java.lang.Object) (short) -1);
        jSONWriter60.writeArrayNull();
        long long69 = jSONWriter60.getFeatures();
        java.lang.Class<?> wildcardClass70 = jSONWriter60.getClass();
        boolean boolean72 = jSONWriter55.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass70, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter73 = jSONWriter49.getObjectWriter((java.lang.Class) wildcardClass70);
        boolean boolean74 = jSONWriter24.isWriteTypeInfo((java.lang.Object) context46, (java.lang.reflect.Type) wildcardClass70);
        boolean boolean75 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter10, (java.lang.reflect.Type) wildcardClass70);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(context46);
        org.junit.Assert.assertNull(propertyFilter47);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objectWriter73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = context34.getPropertyFilter();
        long long36 = context34.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter37 = null;
        context34.setLabelFilter(labelFilter37);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter39 = null;
        context34.setValueFilter(valueFilter39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        jSONWriter42.close();
        jSONWriter42.writeSymbol("");
        jSONWriter42.writeBooleanNull();
        jSONWriter42.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class54 = null;
        boolean boolean56 = jSONWriter49.isWriteTypeInfo((java.lang.Object) jSONWriter51, class54, (long) ' ');
        byte[] byteArray58 = new byte[] { (byte) -1 };
        boolean boolean60 = jSONWriter51.writeTypeName(byteArray58, 0L);
        java.util.UUID uUID61 = null;
        jSONWriter51.writeUUID(uUID61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = jSONWriter51.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context63);
        java.time.format.DateTimeFormatter dateTimeFormatter65 = context63.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider66 = context63.getProvider();
        java.lang.String str67 = context63.getDateFormat();
        boolean boolean68 = jSONWriter42.removeReference((java.lang.Object) context63);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter69 = context63.getLabelFilter();
        java.time.ZoneId zoneId70 = context63.getZoneId();
        context34.setZoneId(zoneId70);
        context15.setZoneId(zoneId70);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter73 = context15.getBeforeFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNull(propertyFilter35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(context63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(objectWriterProvider66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(labelFilter69);
        org.junit.Assert.assertNotNull(zoneId70);
        org.junit.Assert.assertNull(beforeFilter73);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        boolean boolean23 = jSONWriter0.isRefDetect();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw('a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        java.time.LocalDateTime localDateTime4 = null;
        jSONWriter1.writeLocalDateTime(localDateTime4);
        byte[] byteArray6 = jSONWriter1.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter8.writeDouble(1.0d, decimalFormat12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean20 = jSONWriter15.writeTypeName(byteArray18, (long) 10);
        jSONWriter8.writeStringLatin1(byteArray18);
        jSONWriter8.writeFloat((java.lang.Float) 1.0f);
        int int24 = jSONWriter8.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray26 = null;
        jSONWriter25.writeDouble(doubleArray26);
        boolean boolean28 = jSONWriter25.utf16;
        java.math.BigDecimal bigDecimal29 = null;
        jSONWriter25.writeDecimal(bigDecimal29, 100L);
        boolean boolean32 = jSONWriter25.utf16;
        boolean boolean34 = jSONWriter25.isEnabled((long) '4');
        boolean boolean35 = jSONWriter8.containsReference((java.lang.Object) jSONWriter25);
        java.time.LocalDate localDate36 = null;
        jSONWriter8.writeLocalDate(localDate36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter39.writeDouble(1.0d, decimalFormat43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean51 = jSONWriter46.writeTypeName(byteArray49, (long) 10);
        jSONWriter39.writeStringLatin1(byteArray49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        java.time.LocalTime localTime55 = null;
        jSONWriter54.writeLocalTime(localTime55);
        java.time.LocalDateTime localDateTime57 = null;
        jSONWriter54.writeLocalDateTime(localDateTime57);
        byte[] byteArray59 = jSONWriter54.getBytes();
        jSONWriter39.writeNameRaw(byteArray59);
        jSONWriter8.writeHex(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(byteArray59, 12, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-81, -81]");
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-81, -81]");
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        jSONWriter20.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter23.writeDouble(1.0d, decimalFormat27);
        boolean boolean30 = jSONWriter23.removeReference((java.lang.Object) (short) -1);
        jSONWriter23.writeArrayNull();
        long long32 = jSONWriter23.getFeatures();
        java.lang.Class<?> wildcardClass33 = jSONWriter23.getClass();
        boolean boolean34 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter20, (java.lang.reflect.Type) wildcardClass33);
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter36.isWriteTypeInfo((java.lang.Object) jSONWriter38, class41, (long) ' ');
        byte[] byteArray45 = new byte[] { (byte) -1 };
        boolean boolean47 = jSONWriter38.writeTypeName(byteArray45, 0L);
        java.util.UUID uUID48 = null;
        jSONWriter38.writeUUID(uUID48);
        com.alibaba.fastjson2.JSONWriter.Context context50 = jSONWriter38.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter51 = context50.getPropertyFilter();
        long long52 = context50.getFeatures();
        long long53 = context50.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter54 = context50.getContextNameFilter();
        long long55 = context50.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        byte[] byteArray66 = new byte[] { (byte) -1 };
        boolean boolean68 = jSONWriter59.writeTypeName(byteArray66, 0L);
        java.util.UUID uUID69 = null;
        jSONWriter59.writeUUID(uUID69);
        com.alibaba.fastjson2.JSONWriter.Context context71 = jSONWriter59.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context71.config(feature72, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        com.alibaba.fastjson2.JSONWriter.Feature feature77 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean78 = jSONWriter76.isRefDetect((java.lang.Object) feature77);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature77 };
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray79);
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray79);
        context71.config(featureArray79);
        com.alibaba.fastjson2.JSONWriter.Context context83 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray79);
        com.alibaba.fastjson2.JSONWriter.Feature feature84 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        context83.config(feature84, false);
        boolean boolean87 = context50.isEnabled(feature84);
        boolean boolean88 = jSONWriter20.isEnabled(feature84);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(context50);
        org.junit.Assert.assertNull(propertyFilter51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNull(contextNameFilter54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(context71);
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature77.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertTrue("'" + feature84 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature84.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context22.setPropertyFilter(propertyFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context22.setLabelFilter(labelFilter25);
        long long27 = context22.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter28 = null;
        context22.setNameFilter(nameFilter28);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter30 = null;
        context22.setPropertyPreFilter(propertyPreFilter30);
        boolean boolean32 = context22.isDateFormatHasHour();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        boolean boolean11 = jSONWriter1.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context27.getPropertyFilter();
        long long29 = context27.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter30 = null;
        context27.setLabelFilter(labelFilter30);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider32 = context27.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter33 = null;
        context27.setPropertyPreFilter(propertyPreFilter33);
        com.alibaba.fastjson2.filter.NameFilter nameFilter35 = null;
        context27.setNameFilter(nameFilter35);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean38 = context27.isEnabled(feature37);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider39 = context27.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        java.util.UUID uUID53 = null;
        jSONWriter43.writeUUID(uUID53);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter43.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context55);
        java.time.format.DateTimeFormatter dateTimeFormatter57 = context55.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider58 = context55.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider58, featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider39, featureArray59);
        boolean boolean65 = jSONWriter1.isRefDetect((java.lang.Object) featureArray59);
        boolean boolean66 = jSONWriter1.isRefDetect();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(propertyFilter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider32);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(objectWriterProvider58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter2.writeTypeName("");
        jSONWriter2.writeBool(false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter8.writeDecimal(bigDecimal11);
        boolean boolean14 = jSONWriter8.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter8.writeArrayNull();
        jSONWriter8.writeChar('a');
        jSONWriter8.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        jSONWriter26.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter43.writeFloat((float) 10, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean54 = jSONWriter49.writeTypeName(byteArray52, (long) 10);
        boolean boolean56 = jSONWriter43.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter26.writeBinary(byteArray52);
        jSONWriter8.writeHex(byteArray52);
        jSONWriter2.writeNameRaw(byteArray52, (long) 'a');
        jSONWriter2.writeInt8((byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter2.writeDateTimeISO8601(4, (-1), (int) (short) 10, 3, 10, (int) (byte) -1, 0, 12, false);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeName("[1].hi\\!");
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = jSONWriter3.flushTo(outputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        jSONWriter1.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = jSONWriter1.symbolTable;
        double[] doubleArray18 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter1.writeDouble(doubleArray18);
        java.nio.charset.Charset charset20 = jSONWriter1.getCharset();
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter24.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context36);
        java.time.format.DateTimeFormatter dateTimeFormatter38 = context36.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider39 = context36.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider39);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter41 = null;
        context40.setAfterFilter(afterFilter41);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter43 = null;
        context40.setContextValueFilter(contextValueFilter43);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter45 = null;
        context40.setBeforeFilter(beforeFilter45);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter47 = null;
        context40.setValueFilter(valueFilter47);
        boolean boolean49 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) context40);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(objectWriterProvider39);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        jSONWriter5.writeArrayNull();
        short[] shortArray12 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter5.writeInt16(shortArray12);
        jSONWriter1.writeInt16(shortArray12);
        jSONWriter1.writeInt64((long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        boolean boolean32 = jSONWriter23.isEnabled((long) ' ');
        jSONWriter23.writeString("hi!");
        boolean boolean35 = jSONWriter23.isUTF8();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        jSONWriter23.writeString((java.util.List<java.lang.String>) strList39);
        jSONWriter18.writeString((java.util.List<java.lang.String>) strList39);
        jSONWriter18.writeDateYYYMMDD8((int) (byte) 10, (int) (short) -1, 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter48);
        boolean boolean50 = jSONWriter48.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter52.writeDouble(1.0d, decimalFormat56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean64 = jSONWriter59.writeTypeName(byteArray62, (long) 10);
        jSONWriter52.writeStringLatin1(byteArray62);
        jSONWriter48.writeStringLatin1(byteArray62);
        jSONWriter18.writeNameRaw(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(byteArray62, (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter0.writeDecimal(bigDecimal9);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        java.lang.String str10 = path9.toString();
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path9, 2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1].hi\\![35]" + "'", str10, "[1].hi\\![35]");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.startObject();
        boolean boolean6 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        java.lang.String str9 = jSONWriter1.setPath("", (java.lang.Object) feature8);
        java.util.Map map10 = null;
        jSONWriter1.write(map10);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        jSONWriter1.writeDouble((double) 1L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        jSONWriter6.writeInt32(8);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context15.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context15.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter27 = null;
        context15.setAfterFilter(afterFilter27);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter29 = context15.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(afterFilter29);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        jSONWriter20.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter23.writeDouble(1.0d, decimalFormat27);
        boolean boolean30 = jSONWriter23.removeReference((java.lang.Object) (short) -1);
        jSONWriter23.writeArrayNull();
        long long32 = jSONWriter23.getFeatures();
        java.lang.Class<?> wildcardClass33 = jSONWriter23.getClass();
        boolean boolean34 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter20, (java.lang.reflect.Type) wildcardClass33);
        jSONWriter1.writeInt8((byte) 0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter38);
        jSONWriter39.writeSymbol("");
        jSONWriter1.popPath((java.lang.Object) jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter39);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        boolean[] booleanArray23 = new boolean[] { true };
        jSONWriter18.writeBool(booleanArray23);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        boolean boolean35 = jSONWriter26.isEnabled((long) ' ');
        jSONWriter26.writeString("hi!");
        char[] charArray38 = new char[] {};
        jSONWriter26.writeString(charArray38);
        jSONWriter18.writeString(charArray38, 10, (int) (short) 0);
        jSONWriter3.writeString(charArray38, (int) (short) 100, (int) 'a');
        java.text.DecimalFormat decimalFormat47 = null;
        jSONWriter3.writeFloat((float) (byte) -1, decimalFormat47);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true]");
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        double[] doubleArray3 = null;
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeDouble(doubleArray3, decimalFormat4);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeTimeHHMMSS8((int) (short) 100, (int) 'a', 100);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        boolean boolean18 = jSONWriter3.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        jSONWriter3.config(feature19, false);
        jSONWriter3.writeFloat((java.lang.Float) 100.0f);
        boolean boolean24 = jSONWriter3.isIgnoreErrorGetter();
        jSONWriter3.writeNumberNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18, featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path9, (int) (byte) 100);
        java.lang.String str12 = path11.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1].hi\\![35][100]" + "'", str12, "[1].hi\\![35][100]");
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        char[] charArray21 = new char[] {};
        jSONWriter15.writeString(charArray21);
        jSONWriter1.writeString(charArray21, (int) (byte) -1, 0, true);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter1.getContext();
        boolean boolean28 = context27.isDateFormatMillis();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        jSONWriter3.writeInt64((long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[1].hi\\!", "[1].hi\\![35]" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        jSONWriter19.writeString((java.util.List<java.lang.String>) strList26);
        boolean boolean30 = jSONWriter3.isWriteTypeInfo((java.lang.Object) jSONWriter19, (long) 5);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter19.writeName((-1L));
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = null;
        context6.setPropertyPreFilter(propertyPreFilter7);
        boolean boolean9 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter10 = context6.getBeforeFilter();
        context6.setDateFormat(".\\[1\\]\\.hi\\\\\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(beforeFilter10);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat33 = null;
        jSONWriter29.writeDouble(1.0d, decimalFormat33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean41 = jSONWriter36.writeTypeName(byteArray39, (long) 10);
        jSONWriter29.writeStringLatin1(byteArray39);
        boolean boolean44 = jSONWriter1.writeTypeName(byteArray39, (long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw("[52]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        boolean boolean9 = jSONWriter0.isEnabled((long) '4');
        boolean boolean10 = jSONWriter0.isUTF16();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray12 = null;
        jSONWriter11.writeDouble(doubleArray12);
        boolean boolean14 = jSONWriter11.utf16;
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter11.writeDecimal(bigDecimal15, 100L);
        boolean boolean18 = jSONWriter11.utf16;
        java.lang.Object obj19 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter21.writeDouble(1.0d, decimalFormat25);
        boolean boolean28 = jSONWriter21.removeReference((java.lang.Object) (short) -1);
        jSONWriter21.writeArrayNull();
        long long30 = jSONWriter21.getFeatures();
        java.lang.Class<?> wildcardClass31 = jSONWriter21.getClass();
        boolean boolean33 = jSONWriter11.isWriteTypeInfo(obj19, (java.lang.Class) wildcardClass31, (long) (short) 0);
        jSONWriter11.writeStringNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable39 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class45 = null;
        boolean boolean47 = jSONWriter40.isWriteTypeInfo((java.lang.Object) jSONWriter42, class45, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter49.writeDouble(1.0d, decimalFormat53);
        boolean boolean56 = jSONWriter49.removeReference((java.lang.Object) (short) -1);
        jSONWriter49.writeArrayNull();
        long long58 = jSONWriter49.getFeatures();
        java.lang.Class<?> wildcardClass59 = jSONWriter49.getClass();
        boolean boolean61 = jSONWriter36.isWriteTypeInfo((java.lang.Object) boolean47, (java.lang.reflect.Type) wildcardClass59, 0L);
        jSONWriter36.writeStringNull();
        int int63 = jSONWriter36.level();
        jSONWriter36.writeStringNull();
        jSONWriter36.writeInt8((byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        java.time.LocalTime localTime69 = null;
        jSONWriter68.writeLocalTime(localTime69);
        com.alibaba.fastjson2.SymbolTable symbolTable71 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable71);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        boolean boolean76 = jSONWriter74.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class77 = null;
        boolean boolean79 = jSONWriter72.isWriteTypeInfo((java.lang.Object) jSONWriter74, class77, (long) ' ');
        byte[] byteArray81 = new byte[] { (byte) -1 };
        boolean boolean83 = jSONWriter74.writeTypeName(byteArray81, 0L);
        jSONWriter68.writeBinary(byteArray81);
        jSONWriter36.writeNameRaw(byteArray81, 0L);
        jSONWriter11.writeHex(byteArray81);
        boolean boolean88 = jSONWriter0.removeReference((java.lang.Object) byteArray81);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter20 = null;
        context19.setAfterFilter(afterFilter20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = null;
        context19.setContextValueFilter(contextValueFilter22);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter24 = null;
        context19.setBeforeFilter(beforeFilter24);
        boolean boolean26 = context19.isDateFormatMillis();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = context19.isEnabled(feature27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.util.Map map15 = null;
        jSONWriter3.write(map15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        java.time.LocalTime localTime19 = null;
        jSONWriter18.writeLocalTime(localTime19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        jSONWriter18.writeBinary(byteArray31);
        jSONWriter3.writeBinary(byteArray31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray40 = null;
        jSONWriter37.writeHex(byteArray40);
        boolean boolean42 = jSONWriter37.isRefDetect();
        jSONWriter37.writeNumberNull();
        jSONWriter37.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean47 = jSONWriter37.isEnabled(feature46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter49);
        long long51 = jSONWriter49.getFeatures();
        java.time.LocalDateTime localDateTime52 = null;
        jSONWriter49.writeLocalDateTime(localDateTime52);
        byte[] byteArray54 = jSONWriter49.getBytes();
        jSONWriter37.writeStringLatin1(byteArray54);
        jSONWriter3.writeBinary(byteArray54);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter3.writeFloat((float) (byte) 0, decimalFormat58);
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        jSONWriter3.config(feature60, false);
        java.math.BigDecimal bigDecimal63 = null;
        jSONWriter3.writeDecimal(bigDecimal63, 137439019008L);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeDateYYYMMDD10((int) (byte) 0, (int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-81]");
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        int[] intArray20 = new int[] { (short) -1 };
        jSONWriter18.writeInt32(intArray20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal26 = null;
        jSONWriter23.writeDecimal(bigDecimal26);
        boolean boolean29 = jSONWriter23.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter23.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        jSONWriter35.close();
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter35.writeFloat((float) 10, decimalFormat38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean46 = jSONWriter41.writeTypeName(byteArray44, (long) 10);
        boolean boolean48 = jSONWriter35.writeTypeName(byteArray44, (long) (byte) 100);
        jSONWriter35.writeInt16((short) (byte) 100);
        boolean boolean51 = jSONWriter35.hasFilter();
        long[] longArray55 = new long[] { 0, (byte) -1, ' ' };
        jSONWriter35.writeInt64(longArray55);
        jSONWriter23.writeInt64(longArray55);
        jSONWriter18.writeInt64(longArray55);
        jSONWriter1.writeInt64(longArray55);
        boolean boolean60 = jSONWriter1.isWriteNulls();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('a', '4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1]");
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[0, -1, 32]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        boolean boolean20 = context15.isDateFormatMillis();
        java.lang.String str21 = context15.getDateFormat();
        com.alibaba.fastjson2.filter.NameFilter nameFilter22 = context15.getNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(nameFilter22);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter25 = context15.getValueFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        context15.config(feature26, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean30 = context15.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertNull(valueFilter25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        boolean boolean23 = jSONWriter0.isRefDetect();
        jSONWriter0.popPath((java.lang.Object) "[1].hi\\![35]");
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter0.getContext();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context26.provider;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(context15);
        java.time.LocalTime localTime22 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter21.writeLocalTime(localTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(jSONWriter21);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        java.math.BigInteger bigInteger19 = null;
        jSONWriter1.writeBigInt(bigInteger19, (-1L));
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) (byte) -1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8();
        com.alibaba.fastjson2.JSONWriter.Context context10 = jSONWriter9.context;
        boolean boolean11 = jSONWriter8.removeReference((java.lang.Object) context10);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter12 = null;
        context10.setLabelFilter(labelFilter12);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) -1 };
        boolean boolean26 = jSONWriter17.writeTypeName(byteArray24, 0L);
        java.util.UUID uUID27 = null;
        jSONWriter17.writeUUID(uUID27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter17.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter30 = context29.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter31 = context29.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter32 = context29.getValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        byte[] byteArray43 = new byte[] { (byte) -1 };
        boolean boolean45 = jSONWriter36.writeTypeName(byteArray43, 0L);
        java.util.UUID uUID46 = null;
        jSONWriter36.writeUUID(uUID46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = jSONWriter36.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter49 = context48.getPropertyFilter();
        long long50 = context48.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter51 = null;
        context48.setLabelFilter(labelFilter51);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider53 = context48.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter54 = null;
        context48.setPropertyPreFilter(propertyPreFilter54);
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        byte[] byteArray66 = new byte[] { (byte) -1 };
        boolean boolean68 = jSONWriter59.writeTypeName(byteArray66, 0L);
        java.util.UUID uUID69 = null;
        jSONWriter59.writeUUID(uUID69);
        com.alibaba.fastjson2.JSONWriter.Context context71 = jSONWriter59.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter72 = context71.getPropertyFilter();
        long long73 = context71.getFeatures();
        long long74 = context71.getFeatures();
        boolean boolean75 = context71.isDateFormatHasHour();
        java.time.ZoneId zoneId76 = context71.getZoneId();
        context48.setZoneId(zoneId76);
        context29.setZoneId(zoneId76);
        context10.setZoneId(zoneId76);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(context10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNull(propertyFilter30);
        org.junit.Assert.assertNull(beforeFilter31);
        org.junit.Assert.assertNull(valueFilter32);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(context48);
        org.junit.Assert.assertNull(propertyFilter49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider53);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(context71);
        org.junit.Assert.assertNull(propertyFilter72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(zoneId76);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        boolean boolean14 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter4);
        jSONWriter4.writeChar('4');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean13 = jSONWriter8.writeTypeName(byteArray11, (long) 10);
        jSONWriter1.writeStringLatin1(byteArray11);
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter1.writeDecimal(bigDecimal15, 137438953472L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter19.writeDecimal(bigDecimal22);
        boolean boolean25 = jSONWriter19.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat31 = null;
        jSONWriter27.writeDouble(1.0d, decimalFormat31);
        boolean boolean34 = jSONWriter27.removeReference((java.lang.Object) (short) -1);
        jSONWriter27.writeArrayNull();
        boolean boolean36 = jSONWriter19.isRefDetect((java.lang.Object) jSONWriter27);
        java.util.UUID uUID37 = null;
        jSONWriter27.writeUUID(uUID37);
        jSONWriter27.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter27.getContext();
        java.math.BigDecimal bigDecimal42 = null;
        jSONWriter27.writeDecimal(bigDecimal42);
        boolean boolean44 = jSONWriter27.isWriteNulls();
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        java.util.UUID uUID58 = null;
        jSONWriter48.writeUUID(uUID58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = jSONWriter48.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter61 = context60.getPropertyFilter();
        long long62 = context60.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter63 = context60.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context60);
        boolean boolean65 = jSONWriter64.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        com.alibaba.fastjson2.JSONWriter.Context context68 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray66);
        jSONWriter64.writeAny((java.lang.Object) featureArray66);
        java.nio.charset.Charset charset70 = jSONWriter64.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        java.lang.reflect.Type type74 = null;
        boolean boolean76 = jSONWriter72.isWriteTypeInfo((java.lang.Object) (byte) 1, type74, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray77 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray77);
        boolean boolean80 = jSONWriter78.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat82 = null;
        jSONWriter78.writeDouble(1.0d, decimalFormat82);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray84 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray84);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean90 = jSONWriter85.writeTypeName(byteArray88, (long) 10);
        jSONWriter78.writeStringLatin1(byteArray88);
        jSONWriter72.writeNameRaw(byteArray88);
        jSONWriter64.writeBinary(byteArray88);
        boolean boolean95 = jSONWriter27.isWriteTypeInfo((java.lang.Object) byteArray88, (long) 0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(byteArray88, 3, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(context60);
        org.junit.Assert.assertNull(propertyFilter61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNull(nameFilter63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(featureArray77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(featureArray84);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        jSONWriter1.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = jSONWriter1.symbolTable;
        double[] doubleArray18 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter1.writeDouble(doubleArray18);
        java.nio.charset.Charset charset20 = jSONWriter1.getCharset();
        com.alibaba.fastjson2.JSONWriter.Path path21 = null;
        com.alibaba.fastjson2.JSONWriter.Path path23 = new com.alibaba.fastjson2.JSONWriter.Path(path21, "");
        com.alibaba.fastjson2.JSONWriter.Path path25 = new com.alibaba.fastjson2.JSONWriter.Path(path23, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path27 = new com.alibaba.fastjson2.JSONWriter.Path(path23, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path29 = new com.alibaba.fastjson2.JSONWriter.Path(path27, 3);
        com.alibaba.fastjson2.JSONWriter.Path path31 = new com.alibaba.fastjson2.JSONWriter.Path(path29, (int) (byte) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        boolean boolean42 = jSONWriter33.isEnabled((long) ' ');
        jSONWriter33.writeString("hi!");
        boolean boolean45 = jSONWriter33.isUTF8();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        jSONWriter33.writeString((java.util.List<java.lang.String>) strList49);
        boolean boolean52 = path29.equals((java.lang.Object) strList49);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList49);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter1.writeDouble((double) 10.0f, decimalFormat24);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter1.writeFloat((float) '#', decimalFormat27);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDoubleArray((double) (byte) 0, (double) 6);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.lang.reflect.Type type3 = null;
        boolean boolean5 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (byte) 1, type3, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        jSONWriter7.close();
        jSONWriter7.writeSymbol("");
        jSONWriter7.writeBooleanNull();
        boolean boolean12 = jSONWriter7.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter14);
        long long16 = jSONWriter14.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat23 = null;
        jSONWriter19.writeDouble(1.0d, decimalFormat23);
        boolean boolean26 = jSONWriter19.removeReference((java.lang.Object) (short) -1);
        jSONWriter19.writeArrayNull();
        long long28 = jSONWriter19.getFeatures();
        java.lang.Class<?> wildcardClass29 = jSONWriter19.getClass();
        boolean boolean31 = jSONWriter14.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass29, (long) (short) 10);
        jSONWriter1.checkAndWriteTypeName((java.lang.Object) jSONWriter7, (java.lang.Class) wildcardClass29);
        jSONWriter7.writeBool(false);
        java.time.LocalDate localDate35 = null;
        jSONWriter7.writeLocalDate(localDate35);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.writeInt8((byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = null;
        jSONWriter4.writeDouble(doubleArray5);
        boolean boolean7 = jSONWriter4.utf16;
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter4.writeDecimal(bigDecimal8, 100L);
        boolean boolean11 = jSONWriter4.utf16;
        java.lang.Object obj12 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter4.isWriteTypeInfo(obj12, (java.lang.Class) wildcardClass24, (long) (short) 0);
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter4, (long) (byte) 1);
        java.util.Map map29 = null;
        jSONWriter4.write(map29);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        boolean boolean42 = jSONWriter33.isEnabled((long) ' ');
        jSONWriter33.writeString("hi!");
        boolean boolean45 = jSONWriter33.isUTF8();
        jSONWriter33.writeMillis((long) 10);
        java.lang.String str48 = jSONWriter4.setPath("", (java.lang.Object) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.util.List list3 = null;
        jSONWriter1.write(list3);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        boolean boolean9 = jSONWriter1.containsReference((java.lang.Object) boolean8);
        jSONWriter1.writeStringNull();
        boolean boolean11 = jSONWriter1.isBeanToArray();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter17 = context16.getContextNameFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = null;
        context16.setAfterFilter(afterFilter18);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(contextNameFilter17);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.of(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter7.writeDecimal(bigDecimal10);
        boolean boolean13 = jSONWriter7.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter7.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj18 = null;
        jSONWriter7.startArray(obj18, (-1));
        jSONWriter7.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray30 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        jSONWriter7.writeString((java.util.List<java.lang.String>) strList31);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter7.context;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        jSONWriter36.close();
        jSONWriter36.writeSymbol("");
        jSONWriter36.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter36.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter42 = null;
        context41.setPropertyPreFilter(propertyPreFilter42);
        boolean boolean44 = context41.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter45 = context41.getBeforeFilter();
        java.lang.Class<?> wildcardClass46 = context41.getClass();
        boolean boolean47 = jSONWriter5.isWriteTypeInfo((java.lang.Object) context34, (java.lang.reflect.Type) wildcardClass46);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter48 = context34.getBeforeFilter();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(beforeFilter45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(beforeFilter48);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        boolean boolean19 = jSONWriter16.isBeanToArray();
        boolean boolean20 = jSONWriter16.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter.Path path21 = null;
        com.alibaba.fastjson2.JSONWriter.Path path23 = new com.alibaba.fastjson2.JSONWriter.Path(path21, "");
        com.alibaba.fastjson2.JSONWriter.Path path25 = new com.alibaba.fastjson2.JSONWriter.Path(path23, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path27 = new com.alibaba.fastjson2.JSONWriter.Path(path25, "hi!");
        java.lang.String str28 = path27.toString();
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path27, (int) '#');
        boolean boolean31 = jSONWriter16.isRefDetect((java.lang.Object) path30);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        byte[] byteArray42 = new byte[] { (byte) -1 };
        boolean boolean44 = jSONWriter35.writeTypeName(byteArray42, 0L);
        java.util.UUID uUID45 = null;
        jSONWriter35.writeUUID(uUID45);
        com.alibaba.fastjson2.JSONWriter.Context context47 = jSONWriter35.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter48 = context47.getPropertyFilter();
        long long49 = context47.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter50 = null;
        context47.setLabelFilter(labelFilter50);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider52 = context47.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter53 = null;
        context47.setPropertyPreFilter(propertyPreFilter53);
        com.alibaba.fastjson2.filter.NameFilter nameFilter55 = null;
        context47.setNameFilter(nameFilter55);
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean58 = context47.isEnabled(feature57);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter59 = null;
        context47.setAfterFilter(afterFilter59);
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.FieldBased;
        context47.config(feature61, true);
        boolean boolean64 = path30.equals((java.lang.Object) feature61);
        com.alibaba.fastjson2.JSONWriter.Path path65 = path30.parent;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1].hi\\!" + "'", str28, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(context47);
        org.junit.Assert.assertNull(propertyFilter48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider52);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.FieldBased + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.FieldBased));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(path65);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        jSONWriter1.writeInt32((int) (byte) 0);
        jSONWriter1.writeBool(false);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        byte[] byteArray42 = new byte[] { (byte) -1 };
        boolean boolean44 = jSONWriter35.writeTypeName(byteArray42, 0L);
        long long45 = jSONWriter35.getFeatures();
        jSONWriter35.writeInt8((byte) 100);
        int int48 = jSONWriter35.size();
        boolean boolean49 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter35);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter35.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        boolean boolean8 = jSONWriter7.utf8;
        jSONWriter7.writeBooleanNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.util.List list3 = null;
        jSONWriter1.write(list3);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        boolean boolean9 = jSONWriter1.containsReference((java.lang.Object) boolean8);
        com.alibaba.fastjson2.JSONWriter.Path path10 = null;
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "");
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path12, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path16 = new com.alibaba.fastjson2.JSONWriter.Path(path14, "hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        jSONWriter18.writeBooleanNull();
        jSONWriter18.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        java.util.UUID uUID37 = null;
        jSONWriter27.writeUUID(uUID37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = jSONWriter27.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray44 = null;
        jSONWriter41.writeHex(byteArray44);
        boolean boolean46 = jSONWriter41.isRefDetect();
        jSONWriter41.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class54 = null;
        boolean boolean56 = jSONWriter49.isWriteTypeInfo((java.lang.Object) jSONWriter51, class54, (long) ' ');
        byte[] byteArray58 = new byte[] { (byte) -1 };
        boolean boolean60 = jSONWriter51.writeTypeName(byteArray58, 0L);
        java.util.UUID uUID61 = null;
        jSONWriter51.writeUUID(uUID61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = jSONWriter51.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter64 = context63.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        boolean boolean67 = jSONWriter66.isRefDetect();
        java.lang.String str70 = jSONWriter66.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter72);
        long long74 = jSONWriter72.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        boolean boolean79 = jSONWriter77.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat81 = null;
        jSONWriter77.writeDouble(1.0d, decimalFormat81);
        boolean boolean84 = jSONWriter77.removeReference((java.lang.Object) (short) -1);
        jSONWriter77.writeArrayNull();
        long long86 = jSONWriter77.getFeatures();
        java.lang.Class<?> wildcardClass87 = jSONWriter77.getClass();
        boolean boolean89 = jSONWriter72.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass87, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter90 = jSONWriter66.getObjectWriter((java.lang.Class) wildcardClass87);
        boolean boolean91 = jSONWriter41.isWriteTypeInfo((java.lang.Object) context63, (java.lang.reflect.Type) wildcardClass87);
        boolean boolean92 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter27, (java.lang.reflect.Type) wildcardClass87);
        boolean boolean93 = jSONWriter1.isWriteTypeInfo((java.lang.Object) path14, (java.lang.reflect.Type) wildcardClass87);
        com.alibaba.fastjson2.JSONWriter.Path path94 = path14.parent;
        com.alibaba.fastjson2.JSONWriter.Path path96 = new com.alibaba.fastjson2.JSONWriter.Path(path14, (int) ' ');
        com.alibaba.fastjson2.JSONWriter.Path path98 = new com.alibaba.fastjson2.JSONWriter.Path(path96, (int) (byte) 10);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(context39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(context63);
        org.junit.Assert.assertNull(propertyFilter64);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objectWriter90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(path94);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray0);
        com.alibaba.fastjson2.JSONObject jSONObject4 = null;
        jSONWriter3.write(jSONObject4);
        boolean boolean7 = jSONWriter3.isEnabled((long) 5);
        java.util.UUID uUID8 = null;
        jSONWriter3.writeUUID(uUID8);
        jSONWriter3.writeInt64(0L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter1.writeDecimal(bigDecimal12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) feature16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean22 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context20, 65536L);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(context20);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter1.writeDouble((double) 10.0f, decimalFormat24);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter1.writeFloat((float) '#', decimalFormat27);
        jSONWriter1.startObject();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat9 = null;
        jSONWriter5.writeDouble(1.0d, decimalFormat9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean17 = jSONWriter12.writeTypeName(byteArray15, (long) 10);
        jSONWriter5.writeStringLatin1(byteArray15);
        jSONWriter1.writeStringLatin1(byteArray15);
        int int20 = jSONWriter1.level();
        boolean boolean21 = jSONWriter1.isBeanToArray();
        jSONWriter1.writeArrayNull();
        boolean boolean23 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter1.getContext();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('#');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context24);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean9 = jSONWriter3.isBeanToArray();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter12.writeDecimal(bigDecimal15);
        boolean boolean18 = jSONWriter12.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter12.writeArrayNull();
        jSONWriter12.writeChar('a');
        jSONWriter12.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter12.getContext();
        boolean boolean31 = context29.isEnabled((long) (short) 100);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter32 = null;
        context29.setAfterFilter(afterFilter32);
        java.lang.String str34 = jSONWriter3.setPath(fieldWriter10, (java.lang.Object) afterFilter32);
        java.math.BigInteger bigInteger35 = null;
        jSONWriter3.writeBigInt(bigInteger35, 0L);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeTimeHHMMSS8((int) '#', (int) (byte) 100, (-1));
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        jSONWriter1.writeString("");
        long[] longArray16 = new long[] { (short) -1 };
        jSONWriter1.writeInt64(longArray16);
        boolean boolean18 = jSONWriter1.utf8;
        jSONWriter1.writeNumberNull();
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.flushTo(writer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context15.setContextValueFilter(contextValueFilter17);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        boolean boolean20 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter21 = null;
        context15.setValueFilter(valueFilter21);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray20);
        context15.config(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        boolean boolean26 = context15.isEnabled(feature25);
        boolean boolean27 = context15.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context15.provider;
        java.lang.String str29 = context15.getDateFormat();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.util.List list3 = null;
        jSONWriter1.write(list3);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        boolean boolean9 = jSONWriter1.containsReference((java.lang.Object) boolean8);
        com.alibaba.fastjson2.JSONWriter.Path path10 = null;
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "");
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path12, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path16 = new com.alibaba.fastjson2.JSONWriter.Path(path14, "hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        jSONWriter18.writeBooleanNull();
        jSONWriter18.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        java.util.UUID uUID37 = null;
        jSONWriter27.writeUUID(uUID37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = jSONWriter27.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray44 = null;
        jSONWriter41.writeHex(byteArray44);
        boolean boolean46 = jSONWriter41.isRefDetect();
        jSONWriter41.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class54 = null;
        boolean boolean56 = jSONWriter49.isWriteTypeInfo((java.lang.Object) jSONWriter51, class54, (long) ' ');
        byte[] byteArray58 = new byte[] { (byte) -1 };
        boolean boolean60 = jSONWriter51.writeTypeName(byteArray58, 0L);
        java.util.UUID uUID61 = null;
        jSONWriter51.writeUUID(uUID61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = jSONWriter51.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter64 = context63.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        boolean boolean67 = jSONWriter66.isRefDetect();
        java.lang.String str70 = jSONWriter66.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter72);
        long long74 = jSONWriter72.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        boolean boolean79 = jSONWriter77.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat81 = null;
        jSONWriter77.writeDouble(1.0d, decimalFormat81);
        boolean boolean84 = jSONWriter77.removeReference((java.lang.Object) (short) -1);
        jSONWriter77.writeArrayNull();
        long long86 = jSONWriter77.getFeatures();
        java.lang.Class<?> wildcardClass87 = jSONWriter77.getClass();
        boolean boolean89 = jSONWriter72.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass87, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter90 = jSONWriter66.getObjectWriter((java.lang.Class) wildcardClass87);
        boolean boolean91 = jSONWriter41.isWriteTypeInfo((java.lang.Object) context63, (java.lang.reflect.Type) wildcardClass87);
        boolean boolean92 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter27, (java.lang.reflect.Type) wildcardClass87);
        boolean boolean93 = jSONWriter1.isWriteTypeInfo((java.lang.Object) path14, (java.lang.reflect.Type) wildcardClass87);
        com.alibaba.fastjson2.JSONWriter.Path path94 = path14.parent;
        com.alibaba.fastjson2.JSONWriter.Path path96 = new com.alibaba.fastjson2.JSONWriter.Path(path94, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path97 = path96.parent;
        com.alibaba.fastjson2.JSONWriter.Path path99 = new com.alibaba.fastjson2.JSONWriter.Path(path96, 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(context39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(context63);
        org.junit.Assert.assertNull(propertyFilter64);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objectWriter90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(path94);
        org.junit.Assert.assertNotNull(path97);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter29 = context15.getValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNull(valueFilter29);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        java.time.LocalDateTime localDateTime4 = null;
        jSONWriter1.writeLocalDateTime(localDateTime4);
        byte[] byteArray6 = jSONWriter1.getBytes();
        jSONWriter1.writeSymbol("[1].hi\\!");
        java.nio.charset.Charset charset9 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = jSONWriter1.getBytes(charset9);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: not support operator");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-81, -81]");
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter28 = null;
        context15.setContextNameFilter(contextNameFilter28);
        context15.setDateFormat("[1].hi\\![35]");
        boolean boolean32 = context15.isDateFormatHasDay();
        java.time.ZoneId zoneId33 = context15.getZoneId();
        boolean boolean34 = context15.isDateFormatHasHour();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray16 = null;
        jSONWriter13.writeHex(byteArray16);
        boolean boolean18 = jSONWriter13.isWriteNulls();
        jSONWriter13.writeInt64((long) 5);
        boolean boolean21 = jSONWriter0.removeReference((java.lang.Object) jSONWriter13);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter13.writeTimeHHMMSS8((int) (short) 10, 6, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) '#');
        jSONWriter1.startArray(0);
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        boolean boolean37 = jSONWriter28.isEnabled((long) ' ');
        boolean boolean38 = jSONWriter28.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter40.writeFloat((float) 10, decimalFormat43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean51 = jSONWriter46.writeTypeName(byteArray49, (long) 10);
        boolean boolean53 = jSONWriter40.writeTypeName(byteArray49, (long) (byte) 100);
        jSONWriter40.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        jSONWriter57.close();
        java.text.DecimalFormat decimalFormat60 = null;
        jSONWriter57.writeFloat((float) 10, decimalFormat60);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean68 = jSONWriter63.writeTypeName(byteArray66, (long) 10);
        boolean boolean70 = jSONWriter57.writeTypeName(byteArray66, (long) (byte) 100);
        jSONWriter57.writeInt16((short) (byte) 100);
        boolean boolean73 = jSONWriter57.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter75);
        long long77 = jSONWriter75.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        boolean boolean82 = jSONWriter80.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat84 = null;
        jSONWriter80.writeDouble(1.0d, decimalFormat84);
        boolean boolean87 = jSONWriter80.removeReference((java.lang.Object) (short) -1);
        jSONWriter80.writeArrayNull();
        long long89 = jSONWriter80.getFeatures();
        java.lang.Class<?> wildcardClass90 = jSONWriter80.getClass();
        boolean boolean92 = jSONWriter75.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass90, (long) (short) 10);
        boolean boolean94 = jSONWriter40.isWriteTypeInfo((java.lang.Object) boolean73, (java.lang.reflect.Type) wildcardClass90, (long) (byte) -1);
        boolean boolean96 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter28, (java.lang.reflect.Type) wildcardClass90, 10L);
        boolean boolean97 = jSONWriter28.hasFilter();
        jSONWriter28.writeRaw((byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter1.context;
        java.time.ZonedDateTime zonedDateTime10 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime10);
        boolean boolean12 = jSONWriter1.isUseSingleQuotes();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter7);
        long long9 = jSONWriter7.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter12.writeDouble(1.0d, decimalFormat16);
        boolean boolean19 = jSONWriter12.removeReference((java.lang.Object) (short) -1);
        jSONWriter12.writeArrayNull();
        long long21 = jSONWriter12.getFeatures();
        java.lang.Class<?> wildcardClass22 = jSONWriter12.getClass();
        boolean boolean24 = jSONWriter7.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass22, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter25 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        long long29 = jSONWriter27.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter32.writeDouble(1.0d, decimalFormat36);
        boolean boolean39 = jSONWriter32.removeReference((java.lang.Object) (short) -1);
        jSONWriter32.writeArrayNull();
        long long41 = jSONWriter32.getFeatures();
        java.lang.Class<?> wildcardClass42 = jSONWriter32.getClass();
        boolean boolean44 = jSONWriter27.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass42, (long) (short) 10);
        int[] intArray51 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter27.writeInt32(intArray51);
        double[] doubleArray57 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter27.writeDouble(doubleArray57);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter1.writeDouble(doubleArray57, decimalFormat59);
        jSONWriter1.writeStringNull();
        boolean boolean62 = jSONWriter1.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable63 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeInt16((short) (byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(symbolTable63);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = null;
        context6.setPropertyPreFilter(propertyPreFilter7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) feature12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray14);
        context6.config(featureArray14);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = null;
        context6.setContextValueFilter(contextValueFilter19);
        boolean boolean21 = context6.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter22 = null;
        context15.setValueFilter(valueFilter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context15);
        boolean boolean25 = jSONWriter24.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal30 = null;
        jSONWriter27.writeDecimal(bigDecimal30);
        boolean boolean33 = jSONWriter27.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter27.writeArrayNull();
        jSONWriter27.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        boolean boolean46 = jSONWriter37.isEnabled((long) ' ');
        jSONWriter37.writeString("hi!");
        boolean boolean49 = jSONWriter37.isUTF8();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        jSONWriter37.writeString((java.util.List<java.lang.String>) strList53);
        jSONWriter27.writeString((java.util.List<java.lang.String>) strList53);
        jSONWriter24.writeAny((java.lang.Object) strList53);
        com.alibaba.fastjson2.SymbolTable symbolTable58 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        boolean boolean63 = jSONWriter61.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class64 = null;
        boolean boolean66 = jSONWriter59.isWriteTypeInfo((java.lang.Object) jSONWriter61, class64, (long) ' ');
        byte[] byteArray68 = new byte[] { (byte) -1 };
        boolean boolean70 = jSONWriter61.writeTypeName(byteArray68, 0L);
        long long71 = jSONWriter61.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable72 = jSONWriter61.getSymbolTable();
        jSONWriter61.writeRaw((byte) 0);
        jSONWriter61.writeInt32((int) (byte) 10);
        boolean boolean77 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter61);
        boolean boolean78 = jSONWriter24.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNull(symbolTable72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeInt8((byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw(".\\[1\\]\\[0\\]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) feature24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24 };
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        jSONWriter21.config(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray26);
        float[] floatArray33 = new float[] { 1.0f, 10 };
        java.text.DecimalFormat decimalFormat34 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter30.writeFloat(floatArray33, decimalFormat34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[1.0, 10.0]");
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter5.writeDecimal(bigDecimal8);
        boolean boolean11 = jSONWriter5.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter5.writeArrayNull();
        jSONWriter5.writeChar('a');
        jSONWriter5.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter5.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        jSONWriter24.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat31 = null;
        jSONWriter27.writeDouble(1.0d, decimalFormat31);
        boolean boolean34 = jSONWriter27.removeReference((java.lang.Object) (short) -1);
        jSONWriter27.writeArrayNull();
        long long36 = jSONWriter27.getFeatures();
        java.lang.Class<?> wildcardClass37 = jSONWriter27.getClass();
        boolean boolean38 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter24, (java.lang.reflect.Type) wildcardClass37);
        com.alibaba.fastjson2.SymbolTable symbolTable39 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class45 = null;
        boolean boolean47 = jSONWriter40.isWriteTypeInfo((java.lang.Object) jSONWriter42, class45, (long) ' ');
        byte[] byteArray49 = new byte[] { (byte) -1 };
        boolean boolean51 = jSONWriter42.writeTypeName(byteArray49, 0L);
        java.util.UUID uUID52 = null;
        jSONWriter42.writeUUID(uUID52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = jSONWriter42.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter55 = context54.getPropertyFilter();
        long long56 = context54.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter57 = null;
        context54.setLabelFilter(labelFilter57);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider59 = context54.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter60 = null;
        context54.setPropertyPreFilter(propertyPreFilter60);
        com.alibaba.fastjson2.filter.NameFilter nameFilter62 = null;
        context54.setNameFilter(nameFilter62);
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean65 = context54.isEnabled(feature64);
        jSONWriter24.writeEnum((java.lang.Enum) feature64);
        boolean boolean67 = jSONWriter1.isEnabled(feature64);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(context54);
        org.junit.Assert.assertNull(propertyFilter55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider59);
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter1.context;
        com.alibaba.fastjson2.JSONObject jSONObject10 = null;
        jSONWriter1.write(jSONObject10);
        jSONWriter1.startArray((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('a', ' ');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(context9);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) feature20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray22);
        jSONWriter17.config(featureArray22);
        context13.config(featureArray22);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter27 = context13.getContextNameFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context13.getProvider();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(contextNameFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        boolean boolean6 = jSONWriter1.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        byte[] byteArray20 = null;
        jSONWriter10.writeBinary(byteArray20);
        jSONWriter10.endObject();
        jSONWriter10.close();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        jSONWriter27.endObject();
        java.time.ZonedDateTime zonedDateTime40 = null;
        jSONWriter27.writeZonedDateTime(zonedDateTime40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray46 = null;
        jSONWriter43.writeHex(byteArray46);
        boolean boolean48 = jSONWriter43.isRefDetect();
        jSONWriter43.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter53.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter66 = context65.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        boolean boolean69 = jSONWriter68.isRefDetect();
        java.lang.String str72 = jSONWriter68.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter74);
        long long76 = jSONWriter74.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        boolean boolean81 = jSONWriter79.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat83 = null;
        jSONWriter79.writeDouble(1.0d, decimalFormat83);
        boolean boolean86 = jSONWriter79.removeReference((java.lang.Object) (short) -1);
        jSONWriter79.writeArrayNull();
        long long88 = jSONWriter79.getFeatures();
        java.lang.Class<?> wildcardClass89 = jSONWriter79.getClass();
        boolean boolean91 = jSONWriter74.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass89, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter92 = jSONWriter68.getObjectWriter((java.lang.Class) wildcardClass89);
        boolean boolean93 = jSONWriter43.isWriteTypeInfo((java.lang.Object) context65, (java.lang.reflect.Type) wildcardClass89);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter94 = jSONWriter27.getObjectWriter((java.lang.Class) wildcardClass89);
        boolean boolean96 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter10, (java.lang.Class) wildcardClass89, (long) (short) 1);
        java.io.Reader reader97 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.writeString(reader97);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(context65);
        org.junit.Assert.assertNull(propertyFilter66);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objectWriter92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(objectWriter94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        char[] charArray13 = new char[] {};
        jSONWriter1.writeString(charArray13);
        com.alibaba.fastjson2.SymbolTable symbolTable15 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class21 = null;
        boolean boolean23 = jSONWriter16.isWriteTypeInfo((java.lang.Object) jSONWriter18, class21, (long) ' ');
        byte[] byteArray25 = new byte[] { (byte) -1 };
        boolean boolean27 = jSONWriter18.writeTypeName(byteArray25, 0L);
        jSONWriter18.writeNull();
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter18.writeFloat((float) 0, decimalFormat30);
        boolean boolean32 = jSONWriter18.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        boolean boolean36 = jSONWriter34.utf16;
        jSONWriter34.endObject();
        jSONWriter34.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = jSONWriter34.symbolTable;
        double[] doubleArray51 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter34.writeDouble(doubleArray51);
        jSONWriter18.writeDouble(doubleArray51);
        jSONWriter1.writeDouble(doubleArray51);
        java.util.Map map55 = null;
        jSONWriter1.write(map55);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(symbolTable45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0, -1.0, 1.0]");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray46 = null;
        jSONWriter45.writeDouble(doubleArray46);
        jSONWriter45.writeArrayNull();
        short[] shortArray52 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter45.writeInt16(shortArray52);
        jSONWriter3.writeInt16(shortArray52);
        java.time.Instant instant55 = null;
        jSONWriter3.writeInstant(instant55);
        int int57 = jSONWriter3.level();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter8.writeDecimal(bigDecimal11);
        boolean boolean14 = jSONWriter8.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter16.writeDouble(1.0d, decimalFormat20);
        boolean boolean23 = jSONWriter16.removeReference((java.lang.Object) (short) -1);
        jSONWriter16.writeArrayNull();
        boolean boolean25 = jSONWriter8.isRefDetect((java.lang.Object) jSONWriter16);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        jSONWriter16.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter16.getContext();
        boolean boolean31 = jSONWriter0.containsReference((java.lang.Object) context30);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter32 = context30.getPropertyPreFilter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(propertyPreFilter32);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        jSONWriter40.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = context61.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context61.getProvider();
        java.lang.String str65 = context61.getDateFormat();
        boolean boolean66 = jSONWriter40.removeReference((java.lang.Object) context61);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = context61.getLabelFilter();
        java.time.ZoneId zoneId68 = context61.getZoneId();
        context38.setZoneId(zoneId68);
        context21.setZoneId(zoneId68);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter71 = null;
        context21.setAfterFilter(afterFilter71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        com.alibaba.fastjson2.SymbolTable symbolTable75 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context21, symbolTable75);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray77 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray77);
        com.alibaba.fastjson2.JSONWriter.Feature feature79 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean80 = jSONWriter78.isRefDetect((java.lang.Object) feature79);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray81 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature79 };
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray81);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray81);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray84 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray84);
        com.alibaba.fastjson2.JSONWriter.Feature feature86 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean87 = jSONWriter85.isRefDetect((java.lang.Object) feature86);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray88 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature86 };
        com.alibaba.fastjson2.JSONWriter jSONWriter89 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray88);
        com.alibaba.fastjson2.JSONWriter.Context context90 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray88);
        java.time.ZoneId zoneId91 = null;
        context90.setZoneId(zoneId91);
        jSONWriter83.popPath((java.lang.Object) context90);
        float[] floatArray94 = new float[] {};
        jSONWriter83.writeFloat(floatArray94);
        java.text.DecimalFormat decimalFormat96 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter76.writeFloat(floatArray94, decimalFormat96);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(labelFilter67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(featureArray77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + feature79 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature79.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(featureArray81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(featureArray84);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertTrue("'" + feature86 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature86.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(featureArray88);
        org.junit.Assert.assertNotNull(jSONWriter89);
        org.junit.Assert.assertNotNull(floatArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray94), "[]");
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        jSONWriter3.writeTypeName("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) feature22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22 };
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) feature29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        java.time.ZoneId zoneId34 = null;
        context33.setZoneId(zoneId34);
        jSONWriter26.popPath((java.lang.Object) context33);
        float[] floatArray37 = new float[] {};
        jSONWriter26.writeFloat(floatArray37);
        jSONWriter3.writeFloat(floatArray37);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        jSONWriter43.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray61 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter54.writeRaw(charArray61);
        jSONWriter43.writeString(charArray61, 100, (int) (short) -1, true);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeNameRaw(charArray61, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path10 = path9.parent;
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "[52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertNotNull(path10);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        long long24 = context22.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context22.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context22.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = null;
        context22.setPropertyFilter(propertyFilter28);
        boolean boolean30 = context22.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = context22.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter32 = null;
        context22.setBeforeFilter(beforeFilter32);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter34 = context22.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider35 = context22.provider;
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider35);
        boolean boolean37 = jSONWriter1.containsReference((java.lang.Object) objectWriterProvider35);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter54 = context53.getPropertyFilter();
        long long55 = context53.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter56 = null;
        context53.setLabelFilter(labelFilter56);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter58 = context53.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter59 = null;
        context53.setContextNameFilter(contextNameFilter59);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameAny((java.lang.Object) contextNameFilter59);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(nameFilter31);
        org.junit.Assert.assertNull(propertyPreFilter34);
        org.junit.Assert.assertNotNull(objectWriterProvider35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertNull(propertyFilter54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNull(contextValueFilter58);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        java.math.BigDecimal bigDecimal28 = null;
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter14.writeDecimal(bigDecimal28, (long) '#', decimalFormat30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter14.getContext();
        boolean boolean33 = context32.isDateFormatHasHour();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        boolean boolean19 = jSONWriter16.isBeanToArray();
        boolean boolean20 = jSONWriter16.isIgnoreNoneSerializable();
        byte[] byteArray21 = jSONWriter16.getBytes();
        java.io.Writer writer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter16.flushTo(writer22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-81]");
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray2);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.of(featureArray2);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray2);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context("[1][0]", featureArray2);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context9.getPropertyFilter();
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNull(propertyFilter10);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class40 = null;
        jSONWriter27.checkAndWriteTypeName((java.lang.Object) feature39, class40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature39 };
        context15.config(featureArray42);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter44 = null;
        context15.setPropertyPreFilter(propertyPreFilter44);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter46 = null;
        context15.setPropertyFilter(propertyFilter46);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter48 = context15.getLabelFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextNameFilter22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNull(labelFilter48);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        boolean boolean6 = context5.isDateFormatHasHour();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter4.writeString(reader5);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: read string from reader error");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.NameFilter nameFilter30 = null;
        context15.setNameFilter(nameFilter30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter32);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.of(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = jSONWriter5.flushTo(outputStream6);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: out is nulll");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter5);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        jSONWriter7.writeComma();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        jSONWriter3.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray18);
        boolean boolean23 = jSONWriter3.isWriteTypeInfo((java.lang.Object) "$", (long) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        jSONWriter25.close();
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter25.writeFloat((float) 10, decimalFormat28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean36 = jSONWriter31.writeTypeName(byteArray34, (long) 10);
        boolean boolean38 = jSONWriter25.writeTypeName(byteArray34, (long) (byte) 100);
        jSONWriter25.writeInt16((short) (byte) 100);
        boolean boolean41 = jSONWriter25.hasFilter();
        java.nio.charset.Charset charset42 = jSONWriter25.getCharset();
        java.math.BigInteger bigInteger43 = null;
        jSONWriter25.writeBigInt(bigInteger43, 0L);
        jSONWriter3.startArray((java.lang.Object) 0L, 2);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charset42);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        byte[] byteArray43 = null;
        jSONWriter33.writeBinary(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter33.writeHex(byteArray51);
        jSONWriter25.writeBinary(byteArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter25.containsReference(obj54);
        jSONWriter25.writeDateYYYMMDD8((int) (short) 100, 0, (int) '4');
        jSONWriter25.writeString("[1].hi\\!");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 1, -1, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.SymbolTable symbolTable16 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class22 = null;
        boolean boolean24 = jSONWriter17.isWriteTypeInfo((java.lang.Object) jSONWriter19, class22, (long) ' ');
        byte[] byteArray26 = new byte[] { (byte) -1 };
        boolean boolean28 = jSONWriter19.writeTypeName(byteArray26, 0L);
        byte[] byteArray29 = null;
        jSONWriter19.writeBinary(byteArray29);
        jSONWriter19.endObject();
        java.time.ZonedDateTime zonedDateTime32 = null;
        jSONWriter19.writeZonedDateTime(zonedDateTime32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray38 = null;
        jSONWriter35.writeHex(byteArray38);
        boolean boolean40 = jSONWriter35.isRefDetect();
        jSONWriter35.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        byte[] byteArray52 = new byte[] { (byte) -1 };
        boolean boolean54 = jSONWriter45.writeTypeName(byteArray52, 0L);
        java.util.UUID uUID55 = null;
        jSONWriter45.writeUUID(uUID55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = jSONWriter45.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter58 = context57.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable59 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable59);
        boolean boolean61 = jSONWriter60.isRefDetect();
        java.lang.String str64 = jSONWriter60.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter66);
        long long68 = jSONWriter66.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        boolean boolean73 = jSONWriter71.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat75 = null;
        jSONWriter71.writeDouble(1.0d, decimalFormat75);
        boolean boolean78 = jSONWriter71.removeReference((java.lang.Object) (short) -1);
        jSONWriter71.writeArrayNull();
        long long80 = jSONWriter71.getFeatures();
        java.lang.Class<?> wildcardClass81 = jSONWriter71.getClass();
        boolean boolean83 = jSONWriter66.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass81, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter84 = jSONWriter60.getObjectWriter((java.lang.Class) wildcardClass81);
        boolean boolean85 = jSONWriter35.isWriteTypeInfo((java.lang.Object) context57, (java.lang.reflect.Type) wildcardClass81);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter86 = jSONWriter19.getObjectWriter((java.lang.Class) wildcardClass81);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter87 = jSONWriter6.getObjectWriter((java.lang.Class) wildcardClass81);
        jSONWriter6.writeDateYYYMMDD8(8, (int) (byte) 1, (-1));
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(context57);
        org.junit.Assert.assertNull(propertyFilter58);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objectWriter84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objectWriter86);
        org.junit.Assert.assertNotNull(objectWriter87);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        jSONWriter0.writeFloat((java.lang.Float) 1.0f);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter0.writeBigInt(bigInteger14);
        java.lang.Object obj17 = null;
        java.lang.String str18 = jSONWriter0.setPath((-1), obj17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        jSONWriter20.close();
        jSONWriter20.writeSymbol("");
        jSONWriter20.writeBooleanNull();
        jSONWriter20.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context41);
        java.time.format.DateTimeFormatter dateTimeFormatter43 = context41.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider44 = context41.getProvider();
        java.lang.String str45 = context41.getDateFormat();
        boolean boolean46 = jSONWriter20.removeReference((java.lang.Object) context41);
        short[] shortArray53 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter20.writeInt16(shortArray53);
        boolean boolean56 = jSONWriter20.isRefDetect((java.lang.Object) (-1.0f));
        jSONWriter20.writeDouble(1.0d);
        java.lang.String[] strArray62 = new java.lang.String[] { "[1][0]", "[1].hi\\![35][100]", ".\\[1\\]\\[0\\]" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        jSONWriter20.writeString((java.util.List<java.lang.String>) strList63);
        jSONWriter0.write((java.util.List) strList63);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(objectWriterProvider44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class40 = null;
        jSONWriter27.checkAndWriteTypeName((java.lang.Object) feature39, class40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature39 };
        context15.config(featureArray42);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter44 = context15.getContextValueFilter();
        boolean boolean45 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter46 = null;
        context15.setContextValueFilter(contextValueFilter46);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextNameFilter22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNull(contextValueFilter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        byte[] byteArray43 = null;
        jSONWriter33.writeBinary(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter33.writeHex(byteArray51);
        jSONWriter25.writeBinary(byteArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter25.containsReference(obj54);
        jSONWriter25.writeDateTime14((int) '#', (int) (short) 1, 1, (int) (byte) -1, (int) (short) -1, (int) ' ');
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter25.writeFloat((float) 0, decimalFormat64);
        com.alibaba.fastjson2.JSONWriter.Context context66 = jSONWriter25.context;
        com.alibaba.fastjson2.filter.AfterFilter afterFilter67 = context66.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 1, -1, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(context66);
        org.junit.Assert.assertNull(afterFilter67);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) feature28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider25, featureArray30);
        jSONWriter1.config(featureArray30);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('#');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) feature28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider25, featureArray30);
        jSONWriter1.config(featureArray30);
        java.math.BigDecimal bigDecimal34 = null;
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter1.writeDecimal(bigDecimal34, 97L, decimalFormat36);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatISO8601();
        java.lang.String str20 = context15.getDateFormat();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = null;
        context15.setPropertyPreFilter(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(jSONWriter21);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.endArray();
        boolean boolean21 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter1.getContext();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context38);
        java.time.LocalTime localTime40 = null;
        jSONWriter39.writeLocalTime(localTime40);
        jSONWriter39.writeInt8((byte) -1);
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName;
        boolean boolean45 = jSONWriter39.isEnabled(feature44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal50 = null;
        jSONWriter47.writeDecimal(bigDecimal50);
        boolean boolean53 = jSONWriter47.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter47.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj58 = null;
        jSONWriter47.startArray(obj58, (-1));
        jSONWriter47.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray70 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        jSONWriter47.writeString((java.util.List<java.lang.String>) strList71);
        jSONWriter39.write((java.util.List) strList71);
        jSONWriter1.write((java.util.List) strList71);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter8.writeDecimal(bigDecimal11);
        boolean boolean14 = jSONWriter8.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter16.writeDouble(1.0d, decimalFormat20);
        boolean boolean23 = jSONWriter16.removeReference((java.lang.Object) (short) -1);
        jSONWriter16.writeArrayNull();
        boolean boolean25 = jSONWriter8.isRefDetect((java.lang.Object) jSONWriter16);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        jSONWriter16.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter16.getContext();
        boolean boolean31 = jSONWriter0.containsReference((java.lang.Object) context30);
        java.lang.String str32 = context30.getDateFormat();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter12 = null;
        context11.setValueFilter(valueFilter12);
        boolean boolean14 = context11.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class16 = null;
        jSONWriter3.checkAndWriteTypeName((java.lang.Object) feature15, class16);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter3.writeDecimal(bigDecimal18);
        java.time.LocalTime localTime20 = null;
        jSONWriter3.writeLocalTime(localTime20);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeName((long) (-1));
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Context context18 = jSONWriter1.getContext();
        boolean boolean20 = context18.isEnabled((long) (short) 100);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter21 = null;
        context18.setLabelFilter(labelFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = context18.getNameFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter24 = context18.getContextValueFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context18.setLabelFilter(labelFilter25);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(context18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(nameFilter23);
        org.junit.Assert.assertNull(contextValueFilter24);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Context context18 = jSONWriter1.getContext();
        boolean boolean20 = context18.isEnabled((long) (short) 100);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter21 = null;
        context18.setLabelFilter(labelFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = context18.getNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.LargeObject;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        jSONWriter30.writeSymbol((-1));
        int int35 = jSONWriter30.level();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        java.time.ZonedDateTime zonedDateTime43 = null;
        jSONWriter37.writeZonedDateTime(zonedDateTime43);
        long long46 = jSONWriter37.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable47 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable47);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        boolean boolean52 = jSONWriter50.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class53 = null;
        boolean boolean55 = jSONWriter48.isWriteTypeInfo((java.lang.Object) jSONWriter50, class53, (long) ' ');
        byte[] byteArray57 = new byte[] { (byte) -1 };
        boolean boolean59 = jSONWriter50.writeTypeName(byteArray57, 0L);
        java.util.UUID uUID60 = null;
        jSONWriter50.writeUUID(uUID60);
        com.alibaba.fastjson2.JSONWriter.Context context62 = jSONWriter50.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context62);
        java.time.format.DateTimeFormatter dateTimeFormatter64 = context62.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider65 = context62.getProvider();
        boolean boolean66 = jSONWriter37.isWriteTypeInfo((java.lang.Object) context62);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        boolean boolean69 = jSONWriter68.isRefDetect();
        java.lang.String str72 = jSONWriter68.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter74);
        long long76 = jSONWriter74.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        boolean boolean81 = jSONWriter79.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat83 = null;
        jSONWriter79.writeDouble(1.0d, decimalFormat83);
        boolean boolean86 = jSONWriter79.removeReference((java.lang.Object) (short) -1);
        jSONWriter79.writeArrayNull();
        long long88 = jSONWriter79.getFeatures();
        java.lang.Class<?> wildcardClass89 = jSONWriter79.getClass();
        boolean boolean91 = jSONWriter74.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass89, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter92 = jSONWriter68.getObjectWriter((java.lang.Class) wildcardClass89);
        boolean boolean94 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter37, (java.lang.reflect.Type) wildcardClass89, (long) (short) 100);
        boolean boolean95 = jSONWriter25.isWriteTypeInfo((java.lang.Object) feature28, (java.lang.reflect.Type) wildcardClass89);
        boolean boolean96 = context18.isEnabled(feature28);
        long long97 = context18.getFeatures();
        boolean boolean98 = context18.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(context18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(nameFilter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.LargeObject + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.LargeObject));
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(context62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(objectWriterProvider65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objectWriter92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        jSONWriter3.writeDouble((double) '4');
        jSONWriter3.writeSymbol("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal25 = null;
        jSONWriter22.writeDecimal(bigDecimal25);
        boolean boolean28 = jSONWriter22.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter22.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj33 = null;
        jSONWriter22.startArray(obj33, (-1));
        jSONWriter22.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        java.util.UUID uUID53 = null;
        jSONWriter43.writeUUID(uUID53);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter43.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context55);
        java.time.format.DateTimeFormatter dateTimeFormatter57 = context55.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider58 = context55.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) feature61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature61 };
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider58, featureArray63);
        jSONWriter65.writeRaw(' ');
        jSONWriter65.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        boolean boolean75 = jSONWriter73.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class76 = null;
        boolean boolean78 = jSONWriter71.isWriteTypeInfo((java.lang.Object) jSONWriter73, class76, (long) ' ');
        byte[] byteArray80 = new byte[] { (byte) -1 };
        boolean boolean82 = jSONWriter73.writeTypeName(byteArray80, 0L);
        byte[] byteArray83 = null;
        jSONWriter73.writeBinary(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter73.writeHex(byteArray91);
        jSONWriter65.writeBinary(byteArray91);
        jSONWriter22.writeHex(byteArray91);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeBase64(byteArray91);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(objectWriterProvider58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[1, 100, 1, -1, 1, -1]");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        boolean boolean4 = jSONWriter1.isUseSingleQuotes();
        com.alibaba.fastjson2.SymbolTable symbolTable5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter6.isWriteTypeInfo((java.lang.Object) jSONWriter8, class11, (long) ' ');
        boolean boolean15 = jSONWriter6.isEnabled((long) ' ');
        boolean boolean16 = jSONWriter6.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) 100 };
        boolean boolean29 = jSONWriter18.writeTypeName(byteArray27, (long) (-1));
        jSONWriter18.writeString("");
        long[] longArray33 = new long[] { (short) -1 };
        jSONWriter18.writeInt64(longArray33);
        jSONWriter6.writeInt64(longArray33);
        jSONWriter1.writeInt64(longArray33);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1]");
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter25 = context15.getValueFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        context15.config(feature26, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        java.lang.reflect.Type type33 = null;
        boolean boolean35 = jSONWriter31.isWriteTypeInfo((java.lang.Object) (byte) 1, type33, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean49 = jSONWriter44.writeTypeName(byteArray47, (long) 10);
        jSONWriter37.writeStringLatin1(byteArray47);
        jSONWriter31.writeNameRaw(byteArray47);
        boolean boolean53 = jSONWriter31.isEnabled((long) 5);
        long long55 = jSONWriter31.getFeatures((long) ' ');
        jSONWriter29.setRootObject((java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertNull(valueFilter25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 32L + "'", long55 == 32L);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = null;
        context15.setPropertyFilter(propertyFilter24);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter26 = context15.getContextValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(contextValueFilter26);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) feature20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray22);
        jSONWriter17.config(featureArray22);
        context13.config(featureArray22);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter27 = context13.getContextNameFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter28 = context13.getContextNameFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(contextNameFilter27);
        org.junit.Assert.assertNull(contextNameFilter28);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter0.writeFloat((float) (short) 1, decimalFormat5);
        com.alibaba.fastjson2.JSONObject jSONObject7 = null;
        jSONWriter0.write(jSONObject7);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        byte[] byteArray22 = null;
        jSONWriter12.writeBinary(byteArray22);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter12.writeHex(byteArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean33 = jSONWriter32.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray41 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter34.writeRaw(charArray41);
        jSONWriter32.writeString(charArray41);
        jSONWriter12.writeString(charArray41, 5, 0, true);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeString(charArray41, (int) (byte) -1, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 100, 1, -1, 1, -1]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = context34.getPropertyFilter();
        long long36 = context34.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter37 = null;
        context34.setLabelFilter(labelFilter37);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider39 = context34.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter40 = null;
        context34.setPropertyPreFilter(propertyPreFilter40);
        com.alibaba.fastjson2.filter.NameFilter nameFilter42 = null;
        context34.setNameFilter(nameFilter42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context34);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        jSONWriter48.writeInt8((byte) 1);
        jSONWriter48.endArray();
        jSONWriter48.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable68 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable68);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        boolean boolean73 = jSONWriter71.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class74 = null;
        boolean boolean76 = jSONWriter69.isWriteTypeInfo((java.lang.Object) jSONWriter71, class74, (long) ' ');
        byte[] byteArray78 = new byte[] { (byte) -1 };
        boolean boolean80 = jSONWriter71.writeTypeName(byteArray78, 0L);
        java.util.UUID uUID81 = null;
        jSONWriter71.writeUUID(uUID81);
        com.alibaba.fastjson2.JSONWriter.Context context83 = jSONWriter71.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature84 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context83.config(feature84, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray87 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter88 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray87);
        com.alibaba.fastjson2.JSONWriter.Feature feature89 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean90 = jSONWriter88.isRefDetect((java.lang.Object) feature89);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray91 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature89 };
        com.alibaba.fastjson2.JSONWriter jSONWriter92 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray91);
        com.alibaba.fastjson2.JSONWriter jSONWriter93 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray91);
        context83.config(featureArray91);
        com.alibaba.fastjson2.JSONWriter.Context context95 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray91);
        jSONWriter48.config(featureArray91);
        boolean boolean97 = jSONWriter44.isIgnoreNoneSerializable((java.lang.Object) featureArray91);
        com.alibaba.fastjson2.JSONWriter jSONWriter98 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider17, featureArray91);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNull(propertyFilter35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider39);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(context83);
        org.junit.Assert.assertTrue("'" + feature84 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature84.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray87);
        org.junit.Assert.assertNotNull(jSONWriter88);
        org.junit.Assert.assertTrue("'" + feature89 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature89.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(featureArray91);
        org.junit.Assert.assertNotNull(jSONWriter92);
        org.junit.Assert.assertNotNull(jSONWriter93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(jSONWriter98);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = null;
        context15.setAfterFilter(afterFilter18);
        com.alibaba.fastjson2.filter.NameFilter nameFilter20 = null;
        context15.setNameFilter(nameFilter20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.isBeanToArray();
        jSONWriter0.writeName("[1]");
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        long long24 = context22.getFeatures();
        long long25 = context22.getFeatures();
        boolean boolean26 = context22.isDateFormatHasHour();
        java.time.ZoneId zoneId27 = context22.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter28 = context22.getBeforeFilter();
        boolean boolean29 = context22.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context22.getProvider();
        java.lang.String str31 = jSONWriter0.setPath("[1].hi\\![35]", (java.lang.Object) objectWriterProvider30);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        jSONWriter35.close();
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter35.writeFloat((float) 10, decimalFormat38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean46 = jSONWriter41.writeTypeName(byteArray44, (long) 10);
        boolean boolean48 = jSONWriter35.writeTypeName(byteArray44, (long) (byte) 100);
        jSONWriter33.writeNameRaw(byteArray44, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        char[] charArray55 = new char[] { '#', ' ' };
        jSONWriter52.writeString(charArray55, (int) (byte) 0, (int) (short) 1);
        jSONWriter33.writeString(charArray55);
        jSONWriter0.writeString(charArray55);
        com.alibaba.fastjson2.SymbolTable symbolTable61 = jSONWriter0.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNull(beforeFilter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[#,  ]");
        org.junit.Assert.assertNull(symbolTable61);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        jSONWriter16.endArray();
        java.time.Instant instant20 = null;
        jSONWriter16.writeInstant(instant20);
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter16.writeDecimal(bigDecimal22);
        jSONWriter16.close();
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter16.context;
        java.time.ZoneId zoneId26 = null;
        context25.setZoneId(zoneId26);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context25);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        jSONWriter3.writeInt64((long) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean20 = jSONWriter19.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean27 = jSONWriter22.writeTypeName(byteArray25, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        long long31 = jSONWriter29.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter34.writeDouble(1.0d, decimalFormat38);
        boolean boolean41 = jSONWriter34.removeReference((java.lang.Object) (short) -1);
        jSONWriter34.writeArrayNull();
        long long43 = jSONWriter34.getFeatures();
        java.lang.Class<?> wildcardClass44 = jSONWriter34.getClass();
        boolean boolean46 = jSONWriter29.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass44, (long) (short) 10);
        int[] intArray53 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter29.writeInt32(intArray53);
        jSONWriter22.writeInt32(intArray53);
        jSONWriter19.writeInt32(intArray53);
        jSONWriter19.writeInt8((byte) 10);
        java.lang.String str59 = jSONWriter3.setPath("[1][0]", (java.lang.Object) (byte) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable60 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable60);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        boolean boolean65 = jSONWriter63.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class66 = null;
        boolean boolean68 = jSONWriter61.isWriteTypeInfo((java.lang.Object) jSONWriter63, class66, (long) ' ');
        byte[] byteArray70 = new byte[] { (byte) -1 };
        boolean boolean72 = jSONWriter63.writeTypeName(byteArray70, 0L);
        java.util.UUID uUID73 = null;
        jSONWriter63.writeUUID(uUID73);
        com.alibaba.fastjson2.JSONWriter.Context context75 = jSONWriter63.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter76 = context75.getPropertyFilter();
        long long77 = context75.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter78 = null;
        context75.setLabelFilter(labelFilter78);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter80 = context75.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter81 = null;
        context75.setPropertyFilter(propertyFilter81);
        boolean boolean83 = context75.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter84 = context75.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter85 = null;
        context75.setBeforeFilter(beforeFilter85);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter87 = context75.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider88 = context75.provider;
        long long89 = context75.getFeatures();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter90 = context75.getAfterFilter();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeNameAny((java.lang.Object) afterFilter90);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(context75);
        org.junit.Assert.assertNull(propertyFilter76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNull(contextValueFilter80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(nameFilter84);
        org.junit.Assert.assertNull(propertyPreFilter87);
        org.junit.Assert.assertNotNull(objectWriterProvider88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNull(afterFilter90);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean6 = jSONWriter1.writeTypeName(byteArray4, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter8);
        long long10 = jSONWriter8.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter13.writeDouble(1.0d, decimalFormat17);
        boolean boolean20 = jSONWriter13.removeReference((java.lang.Object) (short) -1);
        jSONWriter13.writeArrayNull();
        long long22 = jSONWriter13.getFeatures();
        java.lang.Class<?> wildcardClass23 = jSONWriter13.getClass();
        boolean boolean25 = jSONWriter8.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass23, (long) (short) 10);
        int[] intArray32 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter8.writeInt32(intArray32);
        jSONWriter1.writeInt32(intArray32);
        java.math.BigDecimal bigDecimal35 = null;
        jSONWriter1.writeDecimal(bigDecimal35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter38.writeDouble(1.0d, decimalFormat42);
        boolean boolean45 = jSONWriter38.removeReference((java.lang.Object) (short) -1);
        jSONWriter38.writeArrayNull();
        jSONWriter38.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        char[] charArray58 = new char[] {};
        jSONWriter52.writeString(charArray58);
        jSONWriter38.writeString(charArray58, (int) (byte) -1, 0, true);
        jSONWriter1.writeString(charArray58);
        com.alibaba.fastjson2.SymbolTable symbolTable66 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable66);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class72 = null;
        boolean boolean74 = jSONWriter67.isWriteTypeInfo((java.lang.Object) jSONWriter69, class72, (long) ' ');
        byte[] byteArray76 = new byte[] { (byte) -1 };
        boolean boolean78 = jSONWriter69.writeTypeName(byteArray76, 0L);
        java.util.UUID uUID79 = null;
        jSONWriter69.writeUUID(uUID79);
        com.alibaba.fastjson2.JSONWriter.Context context81 = jSONWriter69.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context81);
        java.time.LocalTime localTime83 = null;
        jSONWriter82.writeLocalTime(localTime83);
        boolean boolean85 = jSONWriter82.isBeanToArray();
        boolean boolean86 = jSONWriter82.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter.Path path87 = null;
        com.alibaba.fastjson2.JSONWriter.Path path89 = new com.alibaba.fastjson2.JSONWriter.Path(path87, "");
        com.alibaba.fastjson2.JSONWriter.Path path91 = new com.alibaba.fastjson2.JSONWriter.Path(path89, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path93 = new com.alibaba.fastjson2.JSONWriter.Path(path91, "hi!");
        java.lang.String str94 = path93.toString();
        com.alibaba.fastjson2.JSONWriter.Path path96 = new com.alibaba.fastjson2.JSONWriter.Path(path93, (int) '#');
        boolean boolean97 = jSONWriter82.isRefDetect((java.lang.Object) path96);
        java.lang.String str98 = jSONWriter1.setPath("[1].hi\\![35]", (java.lang.Object) jSONWriter82);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[]");
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(context81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[1].hi\\!" + "'", str94, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray28);
        java.time.format.DateTimeFormatter dateTimeFormatter33 = context32.getDateFormatter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter34 = context32.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter35 = context32.getNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(afterFilter34);
        org.junit.Assert.assertNull(nameFilter35);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        jSONWriter40.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = context61.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context61.getProvider();
        java.lang.String str65 = context61.getDateFormat();
        boolean boolean66 = jSONWriter40.removeReference((java.lang.Object) context61);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = context61.getLabelFilter();
        java.time.ZoneId zoneId68 = context61.getZoneId();
        context38.setZoneId(zoneId68);
        context21.setZoneId(zoneId68);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter71 = null;
        context21.setAfterFilter(afterFilter71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        jSONWriter74.startArray();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter74.writeSymbol((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(labelFilter67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeChar('#');
        jSONWriter3.writeReference("[1][0]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray1);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter5 = context4.getContextValueFilter();
        boolean boolean7 = context4.isEnabled((long) ' ');
        com.alibaba.fastjson2.filter.ValueFilter valueFilter8 = context4.getValueFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter9 = context4.getLabelFilter();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNull(contextValueFilter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(valueFilter8);
        org.junit.Assert.assertNull(labelFilter9);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        boolean boolean11 = jSONWriter1.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) 100 };
        boolean boolean24 = jSONWriter13.writeTypeName(byteArray22, (long) (-1));
        jSONWriter13.writeString("");
        long[] longArray28 = new long[] { (short) -1 };
        jSONWriter13.writeInt64(longArray28);
        jSONWriter1.writeInt64(longArray28);
        java.time.Instant instant31 = null;
        jSONWriter1.writeInstant(instant31);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1]");
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context("[1].hi\\![35]", featureArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Context context18 = jSONWriter1.getContext();
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        boolean boolean21 = jSONWriter20.isRefDetect();
        java.lang.String str24 = jSONWriter20.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = jSONWriter20.getSymbolTable();
        jSONWriter20.writeDateYYYMMDD8((int) 'a', (int) '4', 0);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        java.util.UUID uUID43 = null;
        jSONWriter33.writeUUID(uUID43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter33.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter46 = context45.getPropertyFilter();
        long long47 = context45.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter48 = null;
        context45.setLabelFilter(labelFilter48);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter50 = context45.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter51 = null;
        context45.setPropertyFilter(propertyFilter51);
        context45.setDateFormat("hi!");
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context45);
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        jSONWriter59.close();
        java.text.DecimalFormat decimalFormat62 = null;
        jSONWriter59.writeFloat((float) 10, decimalFormat62);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean70 = jSONWriter65.writeTypeName(byteArray68, (long) 10);
        boolean boolean72 = jSONWriter59.writeTypeName(byteArray68, (long) (byte) 100);
        jSONWriter57.writeNameRaw(byteArray68, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        char[] charArray79 = new char[] { '#', ' ' };
        jSONWriter76.writeString(charArray79, (int) (byte) 0, (int) (short) 1);
        jSONWriter57.writeString(charArray79);
        jSONWriter55.writeString(charArray79);
        jSONWriter20.writeString(charArray79, 10, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray79);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(context18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(symbolTable25);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertNull(propertyFilter46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNull(contextValueFilter50);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[#,  ]");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        long long23 = context15.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        jSONWriter0.writeReference("$");
        jSONWriter0.writeInt8((byte) 0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean10 = jSONWriter1.isEnabled(feature9);
        java.time.LocalTime localTime11 = null;
        jSONWriter1.writeLocalTime(localTime11);
        jSONWriter1.writeDouble((double) 8);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) feature10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature10 };
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) feature17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature17 };
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        java.time.ZoneId zoneId22 = null;
        context21.setZoneId(zoneId22);
        jSONWriter14.popPath((java.lang.Object) context21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) feature28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray30);
        jSONWriter25.config(featureArray30);
        context21.config(featureArray30);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider35 = context21.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter52 = context51.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter53 = null;
        context51.setContextValueFilter(contextValueFilter53);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class61 = null;
        boolean boolean63 = jSONWriter56.isWriteTypeInfo((java.lang.Object) jSONWriter58, class61, (long) ' ');
        byte[] byteArray65 = new byte[] { (byte) -1 };
        boolean boolean67 = jSONWriter58.writeTypeName(byteArray65, 0L);
        java.util.UUID uUID68 = null;
        jSONWriter58.writeUUID(uUID68);
        com.alibaba.fastjson2.JSONWriter.Context context70 = jSONWriter58.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter71 = context70.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider72 = context70.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter73 = context70.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray75);
        context70.config(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        context51.config(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider35, featureArray75);
        boolean boolean83 = jSONWriter1.containsReference((java.lang.Object) featureArray75);
        jSONWriter1.writeSymbol("");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(objectWriterProvider35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNull(propertyFilter52);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(context70);
        org.junit.Assert.assertNull(propertyFilter71);
        org.junit.Assert.assertNotNull(objectWriterProvider72);
        org.junit.Assert.assertNull(afterFilter73);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray16 = null;
        jSONWriter13.writeHex(byteArray16);
        boolean boolean18 = jSONWriter13.isWriteNulls();
        jSONWriter13.writeInt64((long) 5);
        boolean boolean21 = jSONWriter0.removeReference((java.lang.Object) jSONWriter13);
        boolean boolean22 = jSONWriter0.isIgnoreNoneSerializable();
        jSONWriter0.writeBool(false);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeMillis((long) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        jSONWriter18.writeSymbol("$");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        jSONWriter23.writeSymbol("");
        jSONWriter23.writeBooleanNull();
        jSONWriter23.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context44);
        java.time.format.DateTimeFormatter dateTimeFormatter46 = context44.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider47 = context44.getProvider();
        java.lang.String str48 = context44.getDateFormat();
        boolean boolean49 = jSONWriter23.removeReference((java.lang.Object) context44);
        java.lang.String str50 = jSONWriter18.setPath("$", (java.lang.Object) jSONWriter23);
        int int51 = jSONWriter23.level();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(objectWriterProvider47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray38 = null;
        jSONWriter35.writeHex(byteArray38);
        boolean boolean40 = jSONWriter35.isRefDetect();
        jSONWriter35.writeNumberNull();
        boolean boolean42 = jSONWriter35.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Path path43 = null;
        com.alibaba.fastjson2.JSONWriter.Path path45 = new com.alibaba.fastjson2.JSONWriter.Path(path43, "");
        com.alibaba.fastjson2.JSONWriter.Path path47 = new com.alibaba.fastjson2.JSONWriter.Path(path45, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path49 = new com.alibaba.fastjson2.JSONWriter.Path(path47, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path51 = new com.alibaba.fastjson2.JSONWriter.Path(path47, 0);
        boolean boolean52 = jSONWriter35.isWriteTypeInfo((java.lang.Object) path47);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter54);
        boolean boolean56 = jSONWriter54.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat62 = null;
        jSONWriter58.writeDouble(1.0d, decimalFormat62);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean70 = jSONWriter65.writeTypeName(byteArray68, (long) 10);
        jSONWriter58.writeStringLatin1(byteArray68);
        jSONWriter54.writeStringLatin1(byteArray68);
        jSONWriter35.writeRaw(byteArray68);
        jSONWriter1.writeBinary(byteArray68);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        int int28 = jSONWriter1.level();
        jSONWriter1.writeStringNull();
        jSONWriter1.writeInt8((byte) 100);
        java.math.BigDecimal bigDecimal32 = null;
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter1.writeDecimal(bigDecimal32, (long) (short) 10, decimalFormat34);
        java.time.LocalDateTime localDateTime36 = null;
        jSONWriter1.writeLocalDateTime(localDateTime36);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        int[] intArray11 = new int[] { (short) 0, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt32(intArray11);
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter16.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter29 = context28.getPropertyFilter();
        long long30 = context28.getFeatures();
        long long31 = context28.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter32 = context28.getContextNameFilter();
        boolean boolean33 = context28.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter34 = null;
        context28.setValueFilter(valueFilter34);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter36 = context28.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.of(context28);
        boolean boolean38 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter37);
        boolean boolean39 = jSONWriter1.isBeanToArray();
        java.time.LocalDate localDate40 = null;
        jSONWriter1.writeLocalDate(localDate40);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNull(propertyFilter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNull(contextNameFilter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(contextNameFilter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        jSONWriter1.writeName("hi!");
        java.time.LocalTime localTime10 = null;
        jSONWriter1.writeLocalTime(localTime10);
        java.util.UUID uUID12 = null;
        jSONWriter1.writeUUID(uUID12);
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter1.writeDecimal(bigDecimal14, (long) 1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        jSONWriter1.writeArrayNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName((long) '#');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class40 = null;
        jSONWriter27.checkAndWriteTypeName((java.lang.Object) feature39, class40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature39 };
        context15.config(featureArray42);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter44 = null;
        context15.setPropertyPreFilter(propertyPreFilter44);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter46 = context15.getPropertyFilter();
        boolean boolean47 = context15.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextNameFilter22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNull(propertyFilter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        boolean boolean11 = jSONWriter1.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context27.getPropertyFilter();
        long long29 = context27.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter30 = null;
        context27.setLabelFilter(labelFilter30);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider32 = context27.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter33 = null;
        context27.setPropertyPreFilter(propertyPreFilter33);
        com.alibaba.fastjson2.filter.NameFilter nameFilter35 = null;
        context27.setNameFilter(nameFilter35);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean38 = context27.isEnabled(feature37);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider39 = context27.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        java.util.UUID uUID53 = null;
        jSONWriter43.writeUUID(uUID53);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter43.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context55);
        java.time.format.DateTimeFormatter dateTimeFormatter57 = context55.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider58 = context55.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider58, featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider39, featureArray59);
        boolean boolean65 = jSONWriter1.isRefDetect((java.lang.Object) featureArray59);
        jSONWriter1.startArray((int) 'a');
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(propertyFilter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider32);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(objectWriterProvider58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalDate localDate2 = null;
        jSONWriter1.writeLocalDate(localDate2);
        boolean boolean4 = jSONWriter1.utf8;
        java.util.UUID uUID5 = null;
        jSONWriter1.writeUUID(uUID5);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName(0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        java.math.BigInteger bigInteger19 = null;
        jSONWriter1.writeBigInt(bigInteger19, (-1L));
        boolean boolean22 = jSONWriter1.utf16;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        java.time.LocalDate localDate28 = null;
        jSONWriter1.writeLocalDate(localDate28);
        jSONWriter1.startObject();
        java.io.Writer writer31 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.flushTo(writer31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat9 = null;
        jSONWriter5.writeDouble(1.0d, decimalFormat9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean17 = jSONWriter12.writeTypeName(byteArray15, (long) 10);
        jSONWriter5.writeStringLatin1(byteArray15);
        jSONWriter1.writeStringLatin1(byteArray15);
        int int20 = jSONWriter1.level();
        boolean boolean21 = jSONWriter1.isBeanToArray();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        jSONWriter1.config(feature23, true);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw(' ', '4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter20 = null;
        context19.setAfterFilter(afterFilter20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = null;
        context19.setContextValueFilter(contextValueFilter22);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = context19.getLabelFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = context19.getLabelFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter26 = context19.getContextValueFilter();
        boolean boolean27 = context19.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(labelFilter24);
        org.junit.Assert.assertNull(labelFilter25);
        org.junit.Assert.assertNull(contextValueFilter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        jSONWriter9.writeBooleanNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        java.util.UUID uUID38 = null;
        jSONWriter28.writeUUID(uUID38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter28.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context40);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context40, symbolTable42);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context59);
        java.time.format.DateTimeFormatter dateTimeFormatter61 = context59.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider62 = context59.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean66 = jSONWriter64.isRefDetect((java.lang.Object) feature65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature65 };
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider62, featureArray67);
        context40.config(featureArray67);
        com.alibaba.fastjson2.JSONWriter.Context context71 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray67);
        boolean boolean72 = jSONWriter23.removeReference((java.lang.Object) featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.of(featureArray67);
        jSONWriter73.writeMillis((long) 4);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(objectWriterProvider62);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jSONWriter73);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        java.util.UUID uUID38 = null;
        jSONWriter28.writeUUID(uUID38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter28.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context40);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context40, symbolTable42);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context59);
        java.time.format.DateTimeFormatter dateTimeFormatter61 = context59.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider62 = context59.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean66 = jSONWriter64.isRefDetect((java.lang.Object) feature65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature65 };
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider62, featureArray67);
        context40.config(featureArray67);
        com.alibaba.fastjson2.JSONWriter.Context context71 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray67);
        boolean boolean72 = jSONWriter23.removeReference((java.lang.Object) featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.of(featureArray67);
        jSONWriter73.writeRaw('a', '#');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(objectWriterProvider62);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jSONWriter73);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        jSONWriter1.writeNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        jSONWriter1.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter11.writeDouble(1.0d, decimalFormat15);
        boolean boolean18 = jSONWriter11.removeReference((java.lang.Object) (short) -1);
        jSONWriter11.writeArrayNull();
        jSONWriter11.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = null;
        jSONWriter22.writeDouble(doubleArray23);
        jSONWriter22.writeArrayNull();
        short[] shortArray29 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter22.writeInt16(shortArray29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal35 = null;
        jSONWriter32.writeDecimal(bigDecimal35);
        boolean boolean38 = jSONWriter32.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter32.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        char[] charArray47 = new char[] { '#', ' ' };
        jSONWriter44.writeString(charArray47, (int) (byte) 0, (int) (short) 1);
        jSONWriter32.writeString(charArray47);
        jSONWriter22.writeString(charArray47);
        jSONWriter11.writeString(charArray47);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray47, (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#,  ]");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray1);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter5 = context4.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter6 = context4.getPropertyPreFilter();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNull(contextValueFilter5);
        org.junit.Assert.assertNull(propertyPreFilter6);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context15.setContextValueFilter(contextValueFilter17);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter19 = null;
        context15.setPropertyPreFilter(propertyPreFilter19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable21);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter22.writeName((int) '4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        boolean boolean11 = jSONWriter1.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context27.getPropertyFilter();
        long long29 = context27.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter30 = null;
        context27.setLabelFilter(labelFilter30);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider32 = context27.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter33 = null;
        context27.setPropertyPreFilter(propertyPreFilter33);
        com.alibaba.fastjson2.filter.NameFilter nameFilter35 = null;
        context27.setNameFilter(nameFilter35);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean38 = context27.isEnabled(feature37);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider39 = context27.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        java.util.UUID uUID53 = null;
        jSONWriter43.writeUUID(uUID53);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter43.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context55);
        java.time.format.DateTimeFormatter dateTimeFormatter57 = context55.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider58 = context55.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider58, featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider39, featureArray59);
        boolean boolean65 = jSONWriter1.isRefDetect((java.lang.Object) featureArray59);
        jSONWriter1.writeStringNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(propertyFilter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider32);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(objectWriterProvider58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        boolean boolean14 = jSONWriter3.hasFilter();
        boolean boolean15 = jSONWriter3.utf8;
        boolean boolean16 = jSONWriter3.utf16;
        jSONWriter3.writeTypeName("[1][0]");
        jSONWriter3.startArray(8);
        int int21 = jSONWriter3.level();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal26 = null;
        jSONWriter23.writeDecimal(bigDecimal26);
        boolean boolean29 = jSONWriter23.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter23.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        char[] charArray38 = new char[] { '#', ' ' };
        jSONWriter35.writeString(charArray38, (int) (byte) 0, (int) (short) 1);
        jSONWriter23.writeString(charArray38);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeRaw(charArray38);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#,  ]");
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean13 = jSONWriter8.writeTypeName(byteArray11, (long) 10);
        jSONWriter1.writeStringLatin1(byteArray11);
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        int int17 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter.Path path18 = null;
        com.alibaba.fastjson2.JSONWriter.Path path20 = new com.alibaba.fastjson2.JSONWriter.Path(path18, "");
        com.alibaba.fastjson2.JSONWriter.Path path22 = new com.alibaba.fastjson2.JSONWriter.Path(path20, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path24 = new com.alibaba.fastjson2.JSONWriter.Path(path22, "hi!");
        java.lang.String str25 = path22.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter42 = context41.getPropertyFilter();
        long long43 = context41.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter44 = null;
        context41.setLabelFilter(labelFilter44);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider46 = context41.provider;
        boolean boolean47 = path22.equals((java.lang.Object) context41);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter48 = context41.getValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter65 = context64.getPropertyFilter();
        long long66 = context64.getFeatures();
        long long67 = context64.getFeatures();
        boolean boolean68 = context64.isDateFormatHasHour();
        java.time.ZoneId zoneId69 = context64.getZoneId();
        java.time.ZoneId zoneId70 = context64.getZoneId();
        context41.setZoneId(zoneId70);
        jSONWriter1.startArray((java.lang.Object) context41, 3);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1]" + "'", str25, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNull(propertyFilter42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(valueFilter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertNull(propertyFilter65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(zoneId69);
        org.junit.Assert.assertNotNull(zoneId70);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        java.lang.String str20 = context15.getDateFormat();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter21 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context15.getPropertyPreFilter();
        boolean boolean23 = context15.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(valueFilter21);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        boolean boolean19 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter20 = null;
        context15.setPropertyPreFilter(propertyPreFilter20);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        jSONWriter16.endArray();
        jSONWriter16.writeString("");
        boolean boolean22 = jSONWriter16.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) feature25);
        jSONWriter16.writeEnum((java.lang.Enum) feature25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        long long31 = jSONWriter29.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter34.writeDouble(1.0d, decimalFormat38);
        boolean boolean41 = jSONWriter34.removeReference((java.lang.Object) (short) -1);
        jSONWriter34.writeArrayNull();
        long long43 = jSONWriter34.getFeatures();
        java.lang.Class<?> wildcardClass44 = jSONWriter34.getClass();
        boolean boolean46 = jSONWriter29.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass44, (long) (short) 10);
        int[] intArray53 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter29.writeInt32(intArray53);
        double[] doubleArray59 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter29.writeDouble(doubleArray59);
        java.text.DecimalFormat decimalFormat61 = null;
        jSONWriter16.writeDouble(doubleArray59, decimalFormat61);
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter16.writeFloat((float) 'a', decimalFormat64);
        boolean boolean66 = jSONWriter16.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        jSONWriter3.writeInt64((long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[1].hi\\!", "[1].hi\\![35]" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        jSONWriter19.writeString((java.util.List<java.lang.String>) strList26);
        boolean boolean30 = jSONWriter3.isWriteTypeInfo((java.lang.Object) jSONWriter19, (long) 5);
        jSONWriter3.writeInt32((int) (short) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter0.writeFloat((float) (short) 1, decimalFormat5);
        com.alibaba.fastjson2.JSONObject jSONObject7 = null;
        jSONWriter0.write(jSONObject7);
        java.math.BigDecimal bigDecimal9 = null;
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter0.writeDecimal(bigDecimal9, 97L, decimalFormat11);
        org.junit.Assert.assertNotNull(jSONWriter0);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        java.time.LocalDateTime localDateTime4 = null;
        jSONWriter1.writeLocalDateTime(localDateTime4);
        boolean boolean6 = jSONWriter1.isIgnoreErrorGetter();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDateYYYMMDD10(6, (int) (short) 10, 2);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        boolean boolean14 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter4);
        com.alibaba.fastjson2.SymbolTable symbolTable15 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable15);
        boolean boolean17 = jSONWriter16.isRefDetect();
        jSONWriter16.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        jSONWriter16.writeFloat((java.lang.Float) (-1.0f));
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        boolean boolean29 = jSONWriter28.isRefDetect();
        java.lang.String str32 = jSONWriter28.setPath("hi!", (java.lang.Object) 1);
        boolean boolean33 = jSONWriter28.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        boolean boolean36 = jSONWriter35.isRefDetect();
        java.lang.String str39 = jSONWriter35.setPath("hi!", (java.lang.Object) 1);
        jSONWriter35.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter43);
        long long45 = jSONWriter43.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat52 = null;
        jSONWriter48.writeDouble(1.0d, decimalFormat52);
        boolean boolean55 = jSONWriter48.removeReference((java.lang.Object) (short) -1);
        jSONWriter48.writeArrayNull();
        long long57 = jSONWriter48.getFeatures();
        java.lang.Class<?> wildcardClass58 = jSONWriter48.getClass();
        boolean boolean60 = jSONWriter43.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass58, (long) (short) 10);
        int[] intArray67 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter43.writeInt32(intArray67);
        double[] doubleArray73 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter43.writeDouble(doubleArray73);
        java.text.DecimalFormat decimalFormat75 = null;
        jSONWriter35.writeDouble(doubleArray73, decimalFormat75);
        jSONWriter28.writeDouble(doubleArray73);
        java.text.DecimalFormat decimalFormat78 = null;
        jSONWriter16.writeDouble(doubleArray73, decimalFormat78);
        java.text.DecimalFormat decimalFormat80 = null;
        jSONWriter0.writeDouble(doubleArray73, decimalFormat80);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context15.getPropertyFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(context15);
        jSONWriter25.writeMillis((long) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal32 = null;
        jSONWriter29.writeDecimal(bigDecimal32);
        boolean boolean35 = jSONWriter29.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        boolean boolean46 = jSONWriter29.isRefDetect((java.lang.Object) jSONWriter37);
        boolean boolean47 = jSONWriter37.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        jSONWriter50.writeTypeName("");
        boolean boolean53 = jSONWriter50.isUseSingleQuotes();
        jSONWriter50.startObject();
        boolean boolean55 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        java.lang.reflect.Type type59 = null;
        boolean boolean61 = jSONWriter57.isWriteTypeInfo((java.lang.Object) (byte) 1, type59, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        boolean boolean65 = jSONWriter63.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat67 = null;
        jSONWriter63.writeDouble(1.0d, decimalFormat67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean75 = jSONWriter70.writeTypeName(byteArray73, (long) 10);
        jSONWriter63.writeStringLatin1(byteArray73);
        jSONWriter57.writeNameRaw(byteArray73);
        jSONWriter37.writeNameRaw(byteArray73);
        jSONWriter25.writeBinary(byteArray73);
        jSONWriter25.endArray();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        long long6 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        jSONWriter10.close();
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter10.writeFloat((float) 10, decimalFormat13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean21 = jSONWriter16.writeTypeName(byteArray19, (long) 10);
        boolean boolean23 = jSONWriter10.writeTypeName(byteArray19, (long) (byte) 100);
        jSONWriter8.writeNameRaw(byteArray19, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        char[] charArray30 = new char[] { '#', ' ' };
        jSONWriter27.writeString(charArray30, (int) (byte) 0, (int) (short) 1);
        jSONWriter8.writeString(charArray30);
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter36.isWriteTypeInfo((java.lang.Object) jSONWriter38, class41, (long) ' ');
        byte[] byteArray45 = new byte[] { (byte) -1 };
        boolean boolean47 = jSONWriter38.writeTypeName(byteArray45, 0L);
        java.util.UUID uUID48 = null;
        jSONWriter38.writeUUID(uUID48);
        com.alibaba.fastjson2.JSONWriter.Context context50 = jSONWriter38.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context50);
        java.time.format.DateTimeFormatter dateTimeFormatter52 = context50.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider53 = context50.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context54 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider53);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter55 = null;
        context54.setAfterFilter(afterFilter55);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter57 = null;
        context54.setContextValueFilter(contextValueFilter57);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter59 = null;
        context54.setBeforeFilter(beforeFilter59);
        boolean boolean61 = context54.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter62 = null;
        context54.setPropertyPreFilter(propertyPreFilter62);
        com.alibaba.fastjson2.SymbolTable symbolTable64 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable64);
        boolean[] booleanArray70 = new boolean[] { false, true, true, true };
        jSONWriter65.writeBool(booleanArray70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter73);
        boolean boolean75 = jSONWriter73.utf16;
        long long77 = jSONWriter73.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable78 = jSONWriter73.getSymbolTable();
        boolean boolean79 = jSONWriter65.isIgnoreNoneSerializable((java.lang.Object) jSONWriter73);
        com.alibaba.fastjson2.JSONWriter.Feature feature80 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        jSONWriter73.writeEnum((java.lang.Enum) feature80);
        boolean boolean82 = context54.isEnabled(feature80);
        jSONWriter8.startArray((java.lang.Object) context54, 4);
        boolean boolean85 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#,  ]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(context50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(objectWriterProvider53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 100L + "'", long77 == 100L);
        org.junit.Assert.assertNull(symbolTable78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature80.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        jSONWriter3.writeTypeName("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) feature22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22 };
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) feature29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        java.time.ZoneId zoneId34 = null;
        context33.setZoneId(zoneId34);
        jSONWriter26.popPath((java.lang.Object) context33);
        float[] floatArray37 = new float[] {};
        jSONWriter26.writeFloat(floatArray37);
        jSONWriter3.writeFloat(floatArray37);
        boolean boolean40 = jSONWriter3.hasFilter();
        java.time.ZonedDateTime zonedDateTime41 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime41);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context15.setPropertyFilter(propertyFilter23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        jSONWriter1.writeReference("[1][0]");
        int int25 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        jSONWriter1.writeRaw((byte) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 13 + "'", int25 == 13);
        org.junit.Assert.assertNotNull(jSONWriter26);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean10 = jSONWriter1.isEnabled(feature9);
        java.time.LocalTime localTime11 = null;
        jSONWriter1.writeLocalTime(localTime11);
        java.time.LocalTime localTime13 = null;
        jSONWriter1.writeLocalTime(localTime13);
        boolean boolean15 = jSONWriter1.utf8;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        long long17 = jSONWriter3.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context16, symbolTable17);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter19 = context16.getPropertyFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNull(propertyFilter19);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter22 = null;
        context15.setValueFilter(valueFilter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context15);
        boolean boolean25 = jSONWriter24.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal30 = null;
        jSONWriter27.writeDecimal(bigDecimal30);
        boolean boolean33 = jSONWriter27.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter27.writeArrayNull();
        jSONWriter27.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        boolean boolean46 = jSONWriter37.isEnabled((long) ' ');
        jSONWriter37.writeString("hi!");
        boolean boolean49 = jSONWriter37.isUTF8();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        jSONWriter37.writeString((java.util.List<java.lang.String>) strList53);
        jSONWriter27.writeString((java.util.List<java.lang.String>) strList53);
        jSONWriter24.writeAny((java.lang.Object) strList53);
        jSONWriter24.writeChar('a');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONObject jSONObject7 = null;
        jSONWriter1.write(jSONObject7);
        java.time.LocalDate localDate9 = null;
        jSONWriter1.writeLocalDate(localDate9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        boolean boolean21 = jSONWriter12.isEnabled((long) ' ');
        jSONWriter12.writeString("hi!");
        boolean boolean24 = jSONWriter12.isUTF8();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        jSONWriter12.writeString((java.util.List<java.lang.String>) strList28);
        jSONWriter12.writeRaw((byte) -1);
        java.math.BigInteger bigInteger33 = null;
        jSONWriter12.writeBigInt(bigInteger33, (long) '#');
        jSONWriter12.startArray(0);
        jSONWriter12.writeInt32((int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter12.context;
        jSONWriter12.writeName("[1][0]");
        boolean boolean44 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter12, (long) 10);
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter12.writeFloat((float) (byte) -1, decimalFormat46);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertNotNull(jSONWriter23);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        jSONWriter1.writeInt8((byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        boolean[] booleanArray16 = new boolean[] { false, true, true, true };
        jSONWriter11.writeBool(booleanArray16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter19);
        boolean boolean21 = jSONWriter19.utf16;
        long long23 = jSONWriter19.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable24 = jSONWriter19.getSymbolTable();
        boolean boolean25 = jSONWriter11.isIgnoreNoneSerializable((java.lang.Object) jSONWriter19);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        jSONWriter19.writeEnum((java.lang.Enum) feature26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray35 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter28.writeRaw(charArray35);
        jSONWriter19.writeString(charArray35, (int) (short) 10, (int) (short) -1, true);
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        jSONWriter44.close();
        java.text.DecimalFormat decimalFormat47 = null;
        jSONWriter44.writeFloat((float) 10, decimalFormat47);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean55 = jSONWriter50.writeTypeName(byteArray53, (long) 10);
        boolean boolean57 = jSONWriter44.writeTypeName(byteArray53, (long) (byte) 100);
        jSONWriter42.writeNameRaw(byteArray53, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        char[] charArray64 = new char[] { '#', ' ' };
        jSONWriter61.writeString(charArray64, (int) (byte) 0, (int) (short) 1);
        jSONWriter42.writeString(charArray64);
        boolean boolean69 = jSONWriter19.isIgnoreNoneSerializable((java.lang.Object) jSONWriter42);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean71 = jSONWriter70.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        boolean boolean75 = jSONWriter73.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat77 = null;
        jSONWriter73.writeDouble(1.0d, decimalFormat77);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean85 = jSONWriter80.writeTypeName(byteArray83, (long) 10);
        jSONWriter73.writeStringLatin1(byteArray83);
        jSONWriter70.writeBase64(byteArray83);
        jSONWriter42.writeStringLatin1(byteArray83);
        jSONWriter1.writeHex(byteArray83);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertNull(symbolTable24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, 4, #, 4, 4, a]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[#,  ]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.writeInt8((byte) 0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) feature6);
        boolean boolean8 = jSONWriter5.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Path path9 = null;
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path9, "");
        com.alibaba.fastjson2.JSONWriter.Path path13 = new com.alibaba.fastjson2.JSONWriter.Path(path11, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path15 = new com.alibaba.fastjson2.JSONWriter.Path(path11, "[1].hi\\!");
        jSONWriter5.writeAny((java.lang.Object) "[1].hi\\!");
        java.time.LocalTime localTime17 = null;
        jSONWriter5.writeLocalTime(localTime17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean20 = jSONWriter19.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray28 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter21.writeRaw(charArray28);
        jSONWriter19.writeString(charArray28);
        jSONWriter5.writeString(charArray28);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray28);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class40 = null;
        jSONWriter27.checkAndWriteTypeName((java.lang.Object) feature39, class40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature39 };
        context15.config(featureArray42);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter44 = context15.getContextValueFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        boolean boolean46 = context15.isEnabled(feature45);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter47 = context15.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextNameFilter22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNull(contextValueFilter44);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(contextNameFilter47);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        boolean boolean16 = jSONWriter1.isUTF16();
        boolean boolean17 = jSONWriter1.isUTF8();
        jSONWriter1.writeInt8((byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter1.context;
        java.time.ZonedDateTime zonedDateTime10 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime10);
        boolean boolean12 = jSONWriter1.useSingleQuote;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        jSONWriter0.startArray(0);
        jSONWriter0.writeBool(true);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter18.writeInt16((short) (byte) 100);
        boolean boolean34 = jSONWriter18.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        boolean boolean55 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean34, (java.lang.reflect.Type) wildcardClass51, (long) (byte) -1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter56 = null;
        com.alibaba.fastjson2.JSONWriter.Path path57 = null;
        com.alibaba.fastjson2.JSONWriter.Path path59 = new com.alibaba.fastjson2.JSONWriter.Path(path57, "");
        com.alibaba.fastjson2.JSONWriter.Path path61 = new com.alibaba.fastjson2.JSONWriter.Path(path59, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path63 = new com.alibaba.fastjson2.JSONWriter.Path(path61, "hi!");
        java.lang.String str64 = path61.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class71 = null;
        boolean boolean73 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter68, class71, (long) ' ');
        byte[] byteArray75 = new byte[] { (byte) -1 };
        boolean boolean77 = jSONWriter68.writeTypeName(byteArray75, 0L);
        java.util.UUID uUID78 = null;
        jSONWriter68.writeUUID(uUID78);
        com.alibaba.fastjson2.JSONWriter.Context context80 = jSONWriter68.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter81 = context80.getPropertyFilter();
        long long82 = context80.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter83 = null;
        context80.setLabelFilter(labelFilter83);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider85 = context80.provider;
        boolean boolean86 = path61.equals((java.lang.Object) context80);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context80.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter88 = null;
        context80.setNameFilter(nameFilter88);
        java.lang.String str90 = jSONWriter1.setPath(fieldWriter56, (java.lang.Object) context80);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter91 = null;
        context80.setContextValueFilter(contextValueFilter91);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter93 = null;
        context80.setLabelFilter(labelFilter93);
        boolean boolean95 = context80.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[1]" + "'", str64, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(context80);
        org.junit.Assert.assertNull(propertyFilter81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(afterFilter87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.of(featureArray40);
        java.time.ZonedDateTime zonedDateTime46 = null;
        jSONWriter45.writeZonedDateTime(zonedDateTime46);
        java.io.OutputStream outputStream48 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter50);
        boolean boolean52 = jSONWriter50.utf16;
        java.nio.charset.Charset charset53 = jSONWriter50.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = jSONWriter45.flushTo(outputStream48, charset53);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: out is null");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charset53);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        boolean boolean6 = jSONWriter1.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter29 = null;
        context23.setPropertyPreFilter(propertyPreFilter29);
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = null;
        context23.setNameFilter(nameFilter31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean34 = context23.isEnabled(feature33);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider35 = context23.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context51);
        java.time.format.DateTimeFormatter dateTimeFormatter53 = context51.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider54 = context51.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider54, featureArray55);
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider35, featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        java.lang.String str62 = jSONWriter1.setPath((int) (byte) -1, (java.lang.Object) jSONWriter61);
        boolean boolean63 = jSONWriter1.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(objectWriterProvider54);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        boolean boolean16 = jSONWriter6.utf16;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean18 = jSONWriter17.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean25 = jSONWriter20.writeTypeName(byteArray23, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        long long29 = jSONWriter27.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter32.writeDouble(1.0d, decimalFormat36);
        boolean boolean39 = jSONWriter32.removeReference((java.lang.Object) (short) -1);
        jSONWriter32.writeArrayNull();
        long long41 = jSONWriter32.getFeatures();
        java.lang.Class<?> wildcardClass42 = jSONWriter32.getClass();
        boolean boolean44 = jSONWriter27.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass42, (long) (short) 10);
        int[] intArray51 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter27.writeInt32(intArray51);
        jSONWriter20.writeInt32(intArray51);
        jSONWriter17.writeInt32(intArray51);
        jSONWriter17.writeInt8((byte) 10);
        java.math.BigDecimal bigDecimal57 = null;
        jSONWriter17.writeDecimal(bigDecimal57, 1L);
        jSONWriter17.writeRaw("");
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter6.writeNameAny((java.lang.Object) jSONWriter17);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj12 = null;
        jSONWriter1.startArray(obj12, (-1));
        jSONWriter1.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        jSONWriter1.writeDateTime19(5, (-1), (int) (byte) -1, (int) (short) -1, (int) (short) -1, (int) (byte) 0);
        boolean boolean26 = jSONWriter1.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) -1 };
        boolean boolean39 = jSONWriter30.writeTypeName(byteArray37, 0L);
        java.util.UUID uUID40 = null;
        jSONWriter30.writeUUID(uUID40);
        com.alibaba.fastjson2.JSONWriter.Context context42 = jSONWriter30.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context42);
        java.time.format.DateTimeFormatter dateTimeFormatter44 = context42.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider45 = context42.getProvider();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter46 = context42.getContextNameFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable47 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context42, symbolTable47);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        boolean boolean51 = jSONWriter50.isRefDetect();
        java.lang.String str54 = jSONWriter50.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter56);
        long long58 = jSONWriter56.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        boolean boolean63 = jSONWriter61.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat65 = null;
        jSONWriter61.writeDouble(1.0d, decimalFormat65);
        boolean boolean68 = jSONWriter61.removeReference((java.lang.Object) (short) -1);
        jSONWriter61.writeArrayNull();
        long long70 = jSONWriter61.getFeatures();
        java.lang.Class<?> wildcardClass71 = jSONWriter61.getClass();
        boolean boolean73 = jSONWriter56.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass71, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter74 = jSONWriter50.getObjectWriter((java.lang.Class) wildcardClass71);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter75 = jSONWriter48.getObjectWriter((java.lang.Class) wildcardClass71);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter76 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass71);
        java.io.Reader reader77 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader77);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(context42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(objectWriterProvider45);
        org.junit.Assert.assertNull(contextNameFilter46);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectWriter74);
        org.junit.Assert.assertNotNull(objectWriter75);
        org.junit.Assert.assertNotNull(objectWriter76);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context15);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean26 = jSONWriter25.isUseSingleQuotes();
        boolean boolean27 = jSONWriter25.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal32 = null;
        jSONWriter29.writeDecimal(bigDecimal32);
        boolean boolean35 = jSONWriter29.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter29.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        char[] charArray44 = new char[] { '#', ' ' };
        jSONWriter41.writeString(charArray44, (int) (byte) 0, (int) (short) 1);
        jSONWriter29.writeString(charArray44);
        jSONWriter25.writeString(charArray44, 1, (int) (short) 0, true);
        jSONWriter24.writeRaw(charArray44);
        java.io.Writer writer54 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter24.flushTo(writer54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#,  ]");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        jSONWriter1.writeReference("$");
        jSONWriter1.writeTypeName("$");
        com.alibaba.fastjson2.JSONWriter.Path path10 = null;
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "");
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path12, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path16 = new com.alibaba.fastjson2.JSONWriter.Path(path14, "hi!");
        java.lang.String str17 = path16.toString();
        com.alibaba.fastjson2.JSONWriter.Path path19 = new com.alibaba.fastjson2.JSONWriter.Path(path16, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path21 = new com.alibaba.fastjson2.JSONWriter.Path(path19, (int) (byte) 100);
        jSONWriter1.startArray((java.lang.Object) path21, (int) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter1.context;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1].hi\\!" + "'", str17, "[1].hi\\!");
        org.junit.Assert.assertNotNull(context24);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        jSONWriter17.close();
        jSONWriter17.writeSymbol("");
        jSONWriter17.writeBooleanNull();
        jSONWriter17.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context38);
        java.time.format.DateTimeFormatter dateTimeFormatter40 = context38.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider41 = context38.getProvider();
        java.lang.String str42 = context38.getDateFormat();
        boolean boolean43 = jSONWriter17.removeReference((java.lang.Object) context38);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter44 = context38.getLabelFilter();
        java.time.ZoneId zoneId45 = context38.getZoneId();
        context15.setZoneId(zoneId45);
        com.alibaba.fastjson2.filter.NameFilter nameFilter47 = null;
        context15.setNameFilter(nameFilter47);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(objectWriterProvider41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(labelFilter44);
        org.junit.Assert.assertNotNull(zoneId45);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context15.getPropertyFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(context15);
        jSONWriter25.writeMillis((long) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal32 = null;
        jSONWriter29.writeDecimal(bigDecimal32);
        boolean boolean35 = jSONWriter29.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        boolean boolean46 = jSONWriter29.isRefDetect((java.lang.Object) jSONWriter37);
        boolean boolean47 = jSONWriter37.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        jSONWriter50.writeTypeName("");
        boolean boolean53 = jSONWriter50.isUseSingleQuotes();
        jSONWriter50.startObject();
        boolean boolean55 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        java.lang.reflect.Type type59 = null;
        boolean boolean61 = jSONWriter57.isWriteTypeInfo((java.lang.Object) (byte) 1, type59, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        boolean boolean65 = jSONWriter63.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat67 = null;
        jSONWriter63.writeDouble(1.0d, decimalFormat67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean75 = jSONWriter70.writeTypeName(byteArray73, (long) 10);
        jSONWriter63.writeStringLatin1(byteArray73);
        jSONWriter57.writeNameRaw(byteArray73);
        jSONWriter37.writeNameRaw(byteArray73);
        jSONWriter25.writeBinary(byteArray73);
        java.math.BigDecimal bigDecimal80 = null;
        java.text.DecimalFormat decimalFormat82 = null;
        jSONWriter25.writeDecimal(bigDecimal80, 65536L, decimalFormat82);
        jSONWriter25.writeColon();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter1.symbolTable;
        java.util.UUID uUID5 = null;
        jSONWriter1.writeUUID(uUID5);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable4);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        jSONWriter40.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = context61.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context61.getProvider();
        java.lang.String str65 = context61.getDateFormat();
        boolean boolean66 = jSONWriter40.removeReference((java.lang.Object) context61);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = context61.getLabelFilter();
        java.time.ZoneId zoneId68 = context61.getZoneId();
        context38.setZoneId(zoneId68);
        context21.setZoneId(zoneId68);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context21);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter72 = null;
        context21.setPropertyFilter(propertyFilter72);
        boolean boolean74 = context21.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(labelFilter67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter2.writeTypeName("");
        jSONWriter2.writeBool(false);
        jSONWriter2.writeInt8((byte) 10);
        jSONWriter2.endArray();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context22.setPropertyFilter(propertyFilter23);
        boolean boolean25 = context22.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context22.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.of(context22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        boolean boolean31 = jSONWriter29.utf16;
        jSONWriter29.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        long long36 = jSONWriter34.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter39.writeDouble(1.0d, decimalFormat43);
        boolean boolean46 = jSONWriter39.removeReference((java.lang.Object) (short) -1);
        jSONWriter39.writeArrayNull();
        long long48 = jSONWriter39.getFeatures();
        java.lang.Class<?> wildcardClass49 = jSONWriter39.getClass();
        boolean boolean51 = jSONWriter34.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass49, (long) (short) 10);
        int[] intArray58 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter34.writeInt32(intArray58);
        jSONWriter29.writeInt32(intArray58);
        jSONWriter27.writeInt32(intArray58);
        jSONWriter27.writeBooleanNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        java.math.BigInteger bigInteger9 = null;
        jSONWriter1.writeBigInt(bigInteger9);
        jSONWriter1.writeBooleanNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeTimeHHMMSS8((int) (short) 1, 3, 13);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONObject jSONObject7 = null;
        jSONWriter1.write(jSONObject7);
        java.time.LocalDate localDate9 = null;
        jSONWriter1.writeLocalDate(localDate9);
        java.time.ZonedDateTime zonedDateTime11 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime11);
        jSONWriter1.writeInt16((short) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter17 = context16.getContextNameFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter18 = context16.getContextValueFilter();
        boolean boolean19 = context16.isDateFormatISO8601();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = null;
        context16.setContextValueFilter(contextValueFilter20);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter22 = context16.getLabelFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(contextNameFilter17);
        org.junit.Assert.assertNull(contextValueFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(labelFilter22);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path1 = path0.parent;
        com.alibaba.fastjson2.JSONWriter.Path path3 = new com.alibaba.fastjson2.JSONWriter.Path(path0, 3);
        com.alibaba.fastjson2.JSONWriter.Path path5 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertNull(path1);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean10 = jSONWriter1.isEnabled(feature9);
        jSONWriter1.writeSymbol("[1].hi\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter45 = context44.getPropertyFilter();
        long long46 = context44.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter47 = null;
        context44.setLabelFilter(labelFilter47);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider49 = context44.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        jSONWriter53.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        boolean boolean72 = jSONWriter70.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class73 = null;
        boolean boolean75 = jSONWriter68.isWriteTypeInfo((java.lang.Object) jSONWriter70, class73, (long) ' ');
        byte[] byteArray77 = new byte[] { (byte) -1 };
        boolean boolean79 = jSONWriter70.writeTypeName(byteArray77, 0L);
        java.util.UUID uUID80 = null;
        jSONWriter70.writeUUID(uUID80);
        com.alibaba.fastjson2.JSONWriter.Context context82 = jSONWriter70.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature83 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context82.config(feature83, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray86 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter87 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray86);
        com.alibaba.fastjson2.JSONWriter.Feature feature88 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean89 = jSONWriter87.isRefDetect((java.lang.Object) feature88);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray90 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature88 };
        com.alibaba.fastjson2.JSONWriter jSONWriter91 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray90);
        com.alibaba.fastjson2.JSONWriter jSONWriter92 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray90);
        context82.config(featureArray90);
        jSONWriter53.config(featureArray90);
        com.alibaba.fastjson2.JSONWriter.Context context95 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider49, featureArray90);
        com.alibaba.fastjson2.JSONWriter.Context context96 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28, featureArray90);
        com.alibaba.fastjson2.JSONWriter jSONWriter97 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray90);
        com.alibaba.fastjson2.JSONWriter.Context context98 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray90);
        java.time.format.DateTimeFormatter dateTimeFormatter99 = context98.getDateFormatter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertNull(propertyFilter45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider49);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(context82);
        org.junit.Assert.assertTrue("'" + feature83 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature83.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray86);
        org.junit.Assert.assertNotNull(jSONWriter87);
        org.junit.Assert.assertTrue("'" + feature88 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature88.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(featureArray90);
        org.junit.Assert.assertNotNull(jSONWriter91);
        org.junit.Assert.assertNotNull(jSONWriter92);
        org.junit.Assert.assertNotNull(jSONWriter97);
        org.junit.Assert.assertNull(dateTimeFormatter99);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider23 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) feature26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider23, featureArray28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider23, featureArray37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider23, featureArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter39);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        boolean boolean16 = jSONWriter1.isUTF16();
        boolean boolean17 = jSONWriter1.isUTF8();
        jSONWriter1.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONObject jSONObject20 = null;
        jSONWriter1.write(jSONObject20);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName(0L);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.math.BigDecimal bigDecimal16 = null;
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter3.writeDecimal(bigDecimal16, (long) (byte) -1, decimalFormat18);
        java.math.BigDecimal bigDecimal20 = null;
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter3.writeDecimal(bigDecimal20, (long) (-1), decimalFormat22);
        com.alibaba.fastjson2.JSONWriter.Path path24 = null;
        com.alibaba.fastjson2.JSONWriter.Path path26 = new com.alibaba.fastjson2.JSONWriter.Path(path24, "");
        com.alibaba.fastjson2.JSONWriter.Path path28 = new com.alibaba.fastjson2.JSONWriter.Path(path26, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path28, "hi!");
        java.lang.String str31 = path30.toString();
        com.alibaba.fastjson2.JSONWriter.Path path33 = new com.alibaba.fastjson2.JSONWriter.Path(path30, (int) '#');
        java.lang.Object obj34 = null;
        boolean boolean35 = path33.equals(obj34);
        jSONWriter3.writeAny(obj34);
        boolean boolean37 = jSONWriter3.isUseSingleQuotes();
        jSONWriter3.writeFloat((float) 'a');
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        byte[] byteArray53 = null;
        jSONWriter43.writeBinary(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter43.writeHex(byteArray61);
        jSONWriter3.writeNameRaw(byteArray61);
        jSONWriter3.writeStringNull();
        java.math.BigDecimal bigDecimal65 = null;
        java.text.DecimalFormat decimalFormat67 = null;
        jSONWriter3.writeDecimal(bigDecimal65, 0L, decimalFormat67);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1].hi\\!" + "'", str31, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 100, 1, -1, 1, -1]");
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        context15.setDateFormat("hi!");
        boolean boolean19 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter24.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter37 = context36.getPropertyFilter();
        long long38 = context36.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter39 = null;
        context36.setLabelFilter(labelFilter39);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider41 = context36.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        byte[] byteArray52 = new byte[] { (byte) -1 };
        boolean boolean54 = jSONWriter45.writeTypeName(byteArray52, 0L);
        java.util.UUID uUID55 = null;
        jSONWriter45.writeUUID(uUID55);
        jSONWriter45.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable59 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class65 = null;
        boolean boolean67 = jSONWriter60.isWriteTypeInfo((java.lang.Object) jSONWriter62, class65, (long) ' ');
        byte[] byteArray69 = new byte[] { (byte) -1 };
        boolean boolean71 = jSONWriter62.writeTypeName(byteArray69, 0L);
        java.util.UUID uUID72 = null;
        jSONWriter62.writeUUID(uUID72);
        com.alibaba.fastjson2.JSONWriter.Context context74 = jSONWriter62.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature75 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context74.config(feature75, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        com.alibaba.fastjson2.JSONWriter.Feature feature80 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean81 = jSONWriter79.isRefDetect((java.lang.Object) feature80);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray82 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature80 };
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray82);
        com.alibaba.fastjson2.JSONWriter jSONWriter84 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray82);
        context74.config(featureArray82);
        jSONWriter45.config(featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context87 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider41, featureArray82);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray89 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter90 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray89);
        com.alibaba.fastjson2.JSONWriter jSONWriter91 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray89);
        com.alibaba.fastjson2.JSONWriter.Context context92 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray89);
        com.alibaba.fastjson2.JSONWriter.Context context93 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider41, featureArray89);
        com.alibaba.fastjson2.JSONWriter.Context context94 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray89);
        com.alibaba.fastjson2.JSONWriter jSONWriter95 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray89);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertNull(propertyFilter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider41);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(context74);
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature75.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature80.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(featureArray82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(jSONWriter84);
        org.junit.Assert.assertNotNull(featureArray89);
        org.junit.Assert.assertNotNull(jSONWriter90);
        org.junit.Assert.assertNotNull(jSONWriter91);
        org.junit.Assert.assertNotNull(jSONWriter95);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = context15.getNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNull(nameFilter23);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.startObject();
        jSONWriter1.writeSymbol("[1]");
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        jSONWriter11.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        jSONWriter26.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter43.writeFloat((float) 10, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean54 = jSONWriter49.writeTypeName(byteArray52, (long) 10);
        boolean boolean56 = jSONWriter43.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter43.writeInt16((short) (byte) 100);
        boolean boolean59 = jSONWriter43.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter61);
        long long63 = jSONWriter61.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter61.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass76, (long) (short) 10);
        boolean boolean80 = jSONWriter26.isWriteTypeInfo((java.lang.Object) boolean59, (java.lang.reflect.Type) wildcardClass76, (long) (byte) -1);
        boolean boolean82 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) (short) 10, (java.lang.Class) wildcardClass76, (long) 10);
        jSONWriter1.close();
        char[] charArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray84, (int) (short) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.of(featureArray0);
        boolean boolean5 = jSONWriter4.isUTF16();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter4.getContext();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(context6);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean7 = jSONWriter1.isEnabled(10L);
        jSONWriter1.writeMillis(0L);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName((int) '4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context15.setContextValueFilter(contextValueFilter17);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter19 = null;
        context15.setPropertyPreFilter(propertyPreFilter19);
        boolean boolean21 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = null;
        context15.setContextNameFilter(contextNameFilter22);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context16, symbolTable17);
        short[] shortArray19 = null;
        jSONWriter18.writeInt16(shortArray19);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNotNull(jSONWriter18);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        long long15 = jSONWriter3.getFeatures(100L);
        jSONWriter3.close();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.util.Map map15 = null;
        jSONWriter3.write(map15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        java.time.LocalTime localTime19 = null;
        jSONWriter18.writeLocalTime(localTime19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        jSONWriter18.writeBinary(byteArray31);
        jSONWriter3.writeBinary(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Path path7 = null;
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path7, "");
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path9, (int) (byte) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        jSONWriter15.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context44.config(feature45, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) feature50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature50 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        context44.config(featureArray52);
        jSONWriter15.config(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.of(featureArray52);
        byte[] byteArray58 = jSONWriter57.getBytes();
        boolean boolean59 = path11.equals((java.lang.Object) byteArray58);
        boolean boolean61 = jSONWriter1.writeTypeName(byteArray58, 97L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        jSONWriter63.close();
        java.text.DecimalFormat decimalFormat66 = null;
        jSONWriter63.writeFloat((float) 10, decimalFormat66);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean74 = jSONWriter69.writeTypeName(byteArray72, (long) 10);
        boolean boolean76 = jSONWriter63.writeTypeName(byteArray72, (long) (byte) 100);
        jSONWriter1.writeNameRaw(byteArray72, 10L);
        com.alibaba.fastjson2.JSONWriter.Context context79 = jSONWriter1.context;
        boolean boolean80 = context79.isDateFormatHasDay();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(context79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Context context18 = jSONWriter1.getContext();
        java.time.ZonedDateTime zonedDateTime19 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime19);
        jSONWriter1.writeInt32(12);
        boolean boolean23 = jSONWriter1.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(context18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter18.writeInt16((short) (byte) 100);
        boolean boolean34 = jSONWriter18.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        boolean boolean55 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean34, (java.lang.reflect.Type) wildcardClass51, (long) (byte) -1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter56 = null;
        com.alibaba.fastjson2.JSONWriter.Path path57 = null;
        com.alibaba.fastjson2.JSONWriter.Path path59 = new com.alibaba.fastjson2.JSONWriter.Path(path57, "");
        com.alibaba.fastjson2.JSONWriter.Path path61 = new com.alibaba.fastjson2.JSONWriter.Path(path59, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path63 = new com.alibaba.fastjson2.JSONWriter.Path(path61, "hi!");
        java.lang.String str64 = path61.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class71 = null;
        boolean boolean73 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter68, class71, (long) ' ');
        byte[] byteArray75 = new byte[] { (byte) -1 };
        boolean boolean77 = jSONWriter68.writeTypeName(byteArray75, 0L);
        java.util.UUID uUID78 = null;
        jSONWriter68.writeUUID(uUID78);
        com.alibaba.fastjson2.JSONWriter.Context context80 = jSONWriter68.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter81 = context80.getPropertyFilter();
        long long82 = context80.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter83 = null;
        context80.setLabelFilter(labelFilter83);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider85 = context80.provider;
        boolean boolean86 = path61.equals((java.lang.Object) context80);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context80.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter88 = null;
        context80.setNameFilter(nameFilter88);
        java.lang.String str90 = jSONWriter1.setPath(fieldWriter56, (java.lang.Object) context80);
        boolean boolean91 = jSONWriter1.isUTF8();
        jSONWriter1.writeChar('#');
        jSONWriter1.writeBooleanNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeTimeHHMMSS8(3, 8, 4);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[1]" + "'", str64, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(context80);
        org.junit.Assert.assertNull(propertyFilter81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(afterFilter87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter1.writeFloat((float) (-1), decimalFormat16);
        jSONWriter1.writeInt16((short) (byte) -1);
        java.util.List list20 = null;
        jSONWriter1.write(list20);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = context22.getNameFilter();
        boolean boolean24 = context22.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(nameFilter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context34.config(feature35, false);
        boolean boolean38 = context15.isEnabled(feature35);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter39 = context15.getLabelFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(labelFilter39);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        jSONWriter1.writeInt8((byte) 0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Context context12 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray10);
        jSONWriter15.writeDateTime19(4, (int) (short) 0, (int) (short) -1, (int) 'a', (int) '#', (int) (byte) 100);
        boolean[] booleanArray27 = new boolean[] { true, false, true, true };
        jSONWriter15.writeBool(booleanArray27);
        jSONWriter1.writeBool(booleanArray27);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, false, true, true]");
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        jSONWriter3.close();
        jSONWriter3.writeInt32(3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter20);
        long long22 = jSONWriter20.getFeatures();
        java.time.LocalDateTime localDateTime23 = null;
        jSONWriter20.writeLocalDateTime(localDateTime23);
        byte[] byteArray25 = jSONWriter20.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeNameRaw(byteArray25, (int) (byte) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-81]");
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        jSONWriter3.writeDouble((double) '4');
        boolean boolean19 = jSONWriter3.isWriteNulls();
        jSONWriter3.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        java.time.LocalDate localDate24 = null;
        jSONWriter23.writeLocalDate(localDate24);
        boolean boolean26 = jSONWriter23.utf8;
        java.util.UUID uUID27 = null;
        jSONWriter23.writeUUID(uUID27);
        java.lang.String str29 = jSONWriter3.setPath(0, (java.lang.Object) uUID27);
        jSONWriter3.writeRaw((byte) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        boolean boolean18 = jSONWriter3.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        jSONWriter3.config(feature19, false);
        jSONWriter3.writeFloat((java.lang.Float) 100.0f);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        java.util.UUID uUID38 = null;
        jSONWriter28.writeUUID(uUID38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter28.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter41 = context40.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter42 = context40.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter43 = context40.getValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter60 = context59.getPropertyFilter();
        long long61 = context59.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter62 = null;
        context59.setLabelFilter(labelFilter62);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context59.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter65 = null;
        context59.setPropertyPreFilter(propertyPreFilter65);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        boolean boolean72 = jSONWriter70.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class73 = null;
        boolean boolean75 = jSONWriter68.isWriteTypeInfo((java.lang.Object) jSONWriter70, class73, (long) ' ');
        byte[] byteArray77 = new byte[] { (byte) -1 };
        boolean boolean79 = jSONWriter70.writeTypeName(byteArray77, 0L);
        java.util.UUID uUID80 = null;
        jSONWriter70.writeUUID(uUID80);
        com.alibaba.fastjson2.JSONWriter.Context context82 = jSONWriter70.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter83 = context82.getPropertyFilter();
        long long84 = context82.getFeatures();
        long long85 = context82.getFeatures();
        boolean boolean86 = context82.isDateFormatHasHour();
        java.time.ZoneId zoneId87 = context82.getZoneId();
        context59.setZoneId(zoneId87);
        context40.setZoneId(zoneId87);
        java.lang.String str90 = jSONWriter3.setPath(5, (java.lang.Object) context40);
        int int91 = jSONWriter3.size();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertNull(propertyFilter41);
        org.junit.Assert.assertNull(beforeFilter42);
        org.junit.Assert.assertNull(valueFilter43);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNull(propertyFilter60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(context82);
        org.junit.Assert.assertNull(propertyFilter83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(zoneId87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 8 + "'", int91 == 8);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter17 = context16.getContextNameFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter18 = context16.getContextValueFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter19 = null;
        context16.setNameFilter(nameFilter19);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(contextNameFilter17);
        org.junit.Assert.assertNull(contextValueFilter18);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        boolean boolean25 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context15.provider;
        boolean boolean27 = context15.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path10 = path9.parent;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context26.setLabelFilter(labelFilter29);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter31 = context26.getContextValueFilter();
        boolean boolean32 = path9.equals((java.lang.Object) context26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter34.writeDouble(1.0d, decimalFormat38);
        boolean boolean41 = jSONWriter34.removeReference((java.lang.Object) (short) -1);
        jSONWriter34.writeArrayNull();
        jSONWriter34.startArray((int) (short) 1);
        java.time.Instant instant45 = null;
        jSONWriter34.writeInstant(instant45);
        double[] doubleArray47 = null;
        jSONWriter34.writeDouble(doubleArray47);
        boolean boolean49 = path9.equals((java.lang.Object) doubleArray47);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNull(contextValueFilter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        char[] charArray12 = null;
        jSONWriter0.writeString(charArray12, (int) (byte) -1, (int) (short) 1, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingOrdinal;
        jSONWriter17.writeAny((java.lang.Object) feature18);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingOrdinal + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingOrdinal));
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray43 = null;
        jSONWriter40.writeHex(byteArray43);
        boolean boolean45 = jSONWriter40.isRefDetect();
        jSONWriter40.writeNumberNull();
        jSONWriter40.writeFloat((java.lang.Float) 0.0f);
        java.time.LocalDateTime localDateTime49 = null;
        jSONWriter40.writeLocalDateTime(localDateTime49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class61 = null;
        boolean boolean63 = jSONWriter56.isWriteTypeInfo((java.lang.Object) jSONWriter58, class61, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        boolean boolean67 = jSONWriter65.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat69 = null;
        jSONWriter65.writeDouble(1.0d, decimalFormat69);
        boolean boolean72 = jSONWriter65.removeReference((java.lang.Object) (short) -1);
        jSONWriter65.writeArrayNull();
        long long74 = jSONWriter65.getFeatures();
        java.lang.Class<?> wildcardClass75 = jSONWriter65.getClass();
        boolean boolean77 = jSONWriter52.isWriteTypeInfo((java.lang.Object) boolean63, (java.lang.reflect.Type) wildcardClass75, 0L);
        jSONWriter36.checkAndWriteTypeName((java.lang.Object) localDateTime49, (java.lang.Class) wildcardClass75);
        java.lang.String str79 = jSONWriter1.setPath(13, (java.lang.Object) wildcardClass75);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw("");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter29 = context15.getContextNameFilter();
        java.time.format.DateTimeFormatter dateTimeFormatter30 = context15.getDateFormatter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNull(contextNameFilter29);
        org.junit.Assert.assertNull(dateTimeFormatter30);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        context15.setDateFormat("[1][0]");
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter31 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter32 = context15.getContextValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNull(afterFilter30);
        org.junit.Assert.assertNull(contextValueFilter31);
        org.junit.Assert.assertNull(contextValueFilter32);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        java.time.format.DateTimeFormatter dateTimeFormatter20 = context19.getDateFormatter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter21 = context19.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = null;
        context19.setContextNameFilter(contextNameFilter22);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(contextValueFilter21);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context34);
        java.time.format.DateTimeFormatter dateTimeFormatter36 = context34.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider37 = context34.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) feature40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature40 };
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider37, featureArray42);
        context15.config(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        java.text.DecimalFormat decimalFormat48 = null;
        jSONWriter46.writeDouble((double) 1, decimalFormat48);
        boolean boolean50 = jSONWriter46.isUTF8();
        int int51 = jSONWriter46.size();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(objectWriterProvider37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class16 = null;
        jSONWriter3.checkAndWriteTypeName((java.lang.Object) feature15, class16);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter3.writeDecimal(bigDecimal18);
        jSONWriter3.writeTypeName("hi!");
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter39 = context38.getPropertyFilter();
        long long40 = context38.getFeatures();
        long long41 = context38.getFeatures();
        boolean boolean42 = context38.isDateFormatHasHour();
        java.time.ZoneId zoneId43 = context38.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter44 = context38.getBeforeFilter();
        boolean boolean45 = context38.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider46 = context38.getProvider();
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context38);
        java.lang.String str48 = jSONWriter3.setPath(3, (java.lang.Object) context38);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter49 = null;
        context38.setLabelFilter(labelFilter49);
        com.alibaba.fastjson2.filter.NameFilter nameFilter51 = context38.getNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNull(propertyFilter39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneId43);
        org.junit.Assert.assertNull(beforeFilter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(nameFilter51);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.writeName("[1].hi\\![35]");
        jSONWriter1.endArray();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        boolean boolean12 = context11.isDateFormatMillis();
        boolean boolean14 = context11.isEnabled((long) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONObject jSONObject6 = null;
        jSONWriter1.write(jSONObject6);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean22 = jSONWriter17.writeTypeName(byteArray20, (long) 10);
        jSONWriter10.writeStringLatin1(byteArray20);
        jSONWriter10.writeFloat((java.lang.Float) 1.0f);
        int int26 = jSONWriter10.size();
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter10.context;
        boolean boolean29 = context27.isEnabled((long) (byte) -1);
        long long30 = context27.getFeatures();
        java.lang.String str31 = jSONWriter1.setPath(fieldWriter8, (java.lang.Object) context27);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        boolean boolean19 = jSONWriter16.isBeanToArray();
        boolean boolean20 = jSONWriter16.isIgnoreNoneSerializable();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter16.writeDateTimeISO8601((int) (short) 10, 1, 10, 8, (int) (short) 10, (int) '4', (int) (byte) 0, (int) (byte) 0, false);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter28 = null;
        context15.setContextNameFilter(contextNameFilter28);
        context15.setDateFormat("[1].hi\\![35]");
        boolean boolean32 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter33 = context15.getContextNameFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter35.isWriteTypeInfo((java.lang.Object) jSONWriter37, class40, (long) ' ');
        byte[] byteArray44 = new byte[] { (byte) -1 };
        boolean boolean46 = jSONWriter37.writeTypeName(byteArray44, 0L);
        java.util.UUID uUID47 = null;
        jSONWriter37.writeUUID(uUID47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = jSONWriter37.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter50 = context49.getPropertyFilter();
        long long51 = context49.getFeatures();
        long long52 = context49.getFeatures();
        boolean boolean53 = context49.isDateFormatHasHour();
        java.time.ZoneId zoneId54 = context49.getZoneId();
        java.time.ZoneId zoneId55 = context49.getZoneId();
        context15.setZoneId(zoneId55);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(contextNameFilter33);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(context49);
        org.junit.Assert.assertNull(propertyFilter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneId54);
        org.junit.Assert.assertNotNull(zoneId55);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        short[] shortArray34 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt16(shortArray34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        int int42 = jSONWriter41.size();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter44);
        long long46 = jSONWriter44.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter49.writeDouble(1.0d, decimalFormat53);
        boolean boolean56 = jSONWriter49.removeReference((java.lang.Object) (short) -1);
        jSONWriter49.writeArrayNull();
        long long58 = jSONWriter49.getFeatures();
        java.lang.Class<?> wildcardClass59 = jSONWriter49.getClass();
        boolean boolean61 = jSONWriter44.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass59, (long) (short) 10);
        jSONWriter1.checkAndWriteTypeName((java.lang.Object) jSONWriter41, (java.lang.Class) wildcardClass59);
        java.math.BigInteger bigInteger63 = null;
        jSONWriter41.writeBigInt(bigInteger63, (long) 10);
        jSONWriter41.writeMillis((long) 13);
        boolean boolean68 = jSONWriter41.isIgnoreNoneSerializable();
        java.nio.charset.Charset charset69 = jSONWriter41.getCharset();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charset69);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter2.writeTypeName("");
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter2.writeDateTimeISO8601(10, (int) (short) 10, 6, (int) '4', (int) (short) -1, (int) (short) 1, (int) (short) 100, (int) (byte) 0, true);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        java.time.ZonedDateTime zonedDateTime17 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime17);
        char[] charArray20 = new char[] { '4' };
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeRaw(charArray20);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4]");
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        boolean boolean23 = jSONWriter0.isRefDetect();
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter0.writeFloat((float) (short) 1, decimalFormat25);
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        boolean boolean37 = jSONWriter28.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        jSONWriter41.writeInt8((byte) 1);
        jSONWriter41.close();
        boolean boolean54 = jSONWriter28.removeReference((java.lang.Object) jSONWriter41);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable55);
        boolean[] booleanArray61 = new boolean[] { false, true, true, true };
        jSONWriter56.writeBool(booleanArray61);
        com.alibaba.fastjson2.SymbolTable symbolTable63 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable63);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class69 = null;
        boolean boolean71 = jSONWriter64.isWriteTypeInfo((java.lang.Object) jSONWriter66, class69, (long) ' ');
        byte[] byteArray73 = new byte[] { (byte) -1 };
        boolean boolean75 = jSONWriter66.writeTypeName(byteArray73, 0L);
        jSONWriter56.writeBinary(byteArray73);
        jSONWriter28.writeRaw(byteArray73);
        jSONWriter0.writeStringLatin1(byteArray73);
        java.time.LocalTime localTime79 = null;
        jSONWriter0.writeLocalTime(localTime79);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        java.time.format.DateTimeFormatter dateTimeFormatter25 = context15.getDateFormatter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter26 = context15.getNameFilter();
        java.time.format.DateTimeFormatter dateTimeFormatter27 = context15.getDateFormatter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = null;
        context15.setValueFilter(valueFilter28);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter30 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter31 = context15.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(nameFilter26);
        org.junit.Assert.assertNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(contextValueFilter30);
        org.junit.Assert.assertNull(contextNameFilter31);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18, featureArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter20 = null;
        context15.setContextNameFilter(contextNameFilter20);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.math.BigDecimal bigDecimal3 = null;
        jSONWriter1.writeDecimal(bigDecimal3);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.endArray();
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        jSONWriter6.config(featureArray11);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.of(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue;
        boolean boolean17 = jSONWriter15.isEnabled(feature16);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameAny((java.lang.Object) jSONWriter15);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat32 = null;
        jSONWriter28.writeDouble(1.0d, decimalFormat32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean40 = jSONWriter35.writeTypeName(byteArray38, (long) 10);
        jSONWriter28.writeStringLatin1(byteArray38);
        jSONWriter28.writeFloat((java.lang.Float) 1.0f);
        int int44 = jSONWriter28.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray46 = null;
        jSONWriter45.writeDouble(doubleArray46);
        boolean boolean48 = jSONWriter45.utf16;
        java.math.BigDecimal bigDecimal49 = null;
        jSONWriter45.writeDecimal(bigDecimal49, 100L);
        boolean boolean52 = jSONWriter45.utf16;
        boolean boolean54 = jSONWriter45.isEnabled((long) '4');
        boolean boolean55 = jSONWriter28.containsReference((java.lang.Object) jSONWriter45);
        java.time.LocalDate localDate56 = null;
        jSONWriter28.writeLocalDate(localDate56);
        jSONWriter28.writeTypeName("[1].hi\\!");
        boolean boolean60 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter28);
        java.io.Writer writer61 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.flushTo(writer61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context8.config(feature9, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context8);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter13 = null;
        context8.setLabelFilter(labelFilter13);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
        org.junit.Assert.assertNotNull(jSONWriter12);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter7);
        long long9 = jSONWriter7.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter12.writeDouble(1.0d, decimalFormat16);
        boolean boolean19 = jSONWriter12.removeReference((java.lang.Object) (short) -1);
        jSONWriter12.writeArrayNull();
        long long21 = jSONWriter12.getFeatures();
        java.lang.Class<?> wildcardClass22 = jSONWriter12.getClass();
        boolean boolean24 = jSONWriter7.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass22, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter25 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        long long29 = jSONWriter27.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter32.writeDouble(1.0d, decimalFormat36);
        boolean boolean39 = jSONWriter32.removeReference((java.lang.Object) (short) -1);
        jSONWriter32.writeArrayNull();
        long long41 = jSONWriter32.getFeatures();
        java.lang.Class<?> wildcardClass42 = jSONWriter32.getClass();
        boolean boolean44 = jSONWriter27.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass42, (long) (short) 10);
        int[] intArray51 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter27.writeInt32(intArray51);
        double[] doubleArray57 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter27.writeDouble(doubleArray57);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter1.writeDouble(doubleArray57, decimalFormat59);
        jSONWriter1.writeStringNull();
        boolean boolean62 = jSONWriter1.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable63 = jSONWriter1.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter1.context;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(symbolTable63);
        org.junit.Assert.assertNotNull(context64);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        boolean boolean12 = jSONWriter1.utf8;
        java.lang.Object obj13 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) -1 };
        boolean boolean26 = jSONWriter17.writeTypeName(byteArray24, 0L);
        byte[] byteArray27 = null;
        jSONWriter17.writeBinary(byteArray27);
        jSONWriter17.endObject();
        java.time.ZonedDateTime zonedDateTime30 = null;
        jSONWriter17.writeZonedDateTime(zonedDateTime30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray36 = null;
        jSONWriter33.writeHex(byteArray36);
        boolean boolean38 = jSONWriter33.isRefDetect();
        jSONWriter33.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        java.util.UUID uUID53 = null;
        jSONWriter43.writeUUID(uUID53);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter43.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter56 = context55.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable57 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable57);
        boolean boolean59 = jSONWriter58.isRefDetect();
        java.lang.String str62 = jSONWriter58.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter64);
        long long66 = jSONWriter64.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat73 = null;
        jSONWriter69.writeDouble(1.0d, decimalFormat73);
        boolean boolean76 = jSONWriter69.removeReference((java.lang.Object) (short) -1);
        jSONWriter69.writeArrayNull();
        long long78 = jSONWriter69.getFeatures();
        java.lang.Class<?> wildcardClass79 = jSONWriter69.getClass();
        boolean boolean81 = jSONWriter64.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass79, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter82 = jSONWriter58.getObjectWriter((java.lang.Class) wildcardClass79);
        boolean boolean83 = jSONWriter33.isWriteTypeInfo((java.lang.Object) context55, (java.lang.reflect.Type) wildcardClass79);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter84 = jSONWriter17.getObjectWriter((java.lang.Class) wildcardClass79);
        boolean boolean86 = jSONWriter1.isWriteTypeInfo(obj13, (java.lang.Class) wildcardClass79, (long) (byte) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertNull(propertyFilter56);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectWriter82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objectWriter84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((int) (byte) 1);
        jSONWriter1.writeFloat((java.lang.Float) 10.0f);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        jSONWriter7.close();
        jSONWriter7.writeSymbol("");
        jSONWriter7.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context12 = jSONWriter7.context;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        jSONWriter14.close();
        jSONWriter14.writeSymbol("");
        boolean[] booleanArray19 = new boolean[] { true };
        jSONWriter14.writeBool(booleanArray19);
        jSONWriter7.writeBool(booleanArray19);
        jSONWriter1.writeBool(booleanArray19);
        jSONWriter1.startObject();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(context12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true]");
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeDouble((double) (-1.0f));
        boolean boolean30 = jSONWriter25.isUTF16();
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray32 = null;
        jSONWriter31.writeDouble(doubleArray32);
        jSONWriter31.writeArrayNull();
        short[] shortArray38 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter31.writeInt16(shortArray38);
        boolean boolean40 = jSONWriter31.isWriteNulls();
        boolean boolean42 = jSONWriter31.isEnabled((long) (byte) -1);
        jSONWriter31.writeFloat((java.lang.Float) 1.0f);
        java.math.BigInteger bigInteger45 = null;
        jSONWriter31.writeBigInt(bigInteger45);
        jSONWriter25.popPath((java.lang.Object) jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        int int6 = jSONWriter1.level();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter8.writeDouble(1.0d, decimalFormat12);
        java.time.ZonedDateTime zonedDateTime14 = null;
        jSONWriter8.writeZonedDateTime(zonedDateTime14);
        long long17 = jSONWriter8.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context33);
        java.time.format.DateTimeFormatter dateTimeFormatter35 = context33.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider36 = context33.getProvider();
        boolean boolean37 = jSONWriter8.isWriteTypeInfo((java.lang.Object) context33);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        boolean boolean40 = jSONWriter39.isRefDetect();
        java.lang.String str43 = jSONWriter39.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter45);
        long long47 = jSONWriter45.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        boolean boolean52 = jSONWriter50.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat54 = null;
        jSONWriter50.writeDouble(1.0d, decimalFormat54);
        boolean boolean57 = jSONWriter50.removeReference((java.lang.Object) (short) -1);
        jSONWriter50.writeArrayNull();
        long long59 = jSONWriter50.getFeatures();
        java.lang.Class<?> wildcardClass60 = jSONWriter50.getClass();
        boolean boolean62 = jSONWriter45.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass60, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter63 = jSONWriter39.getObjectWriter((java.lang.Class) wildcardClass60);
        boolean boolean65 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter8, (java.lang.reflect.Type) wildcardClass60, (long) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName(0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(objectWriterProvider36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objectWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        java.util.Map map23 = null;
        jSONWriter0.write(map23);
        jSONWriter0.startArray(10);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        boolean boolean8 = jSONWriter1.utf16;
        jSONWriter1.writeDateYYYMMDD8((int) (byte) -1, 5, (int) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter16.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter29 = context28.getPropertyFilter();
        long long30 = context28.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter31 = null;
        context28.setLabelFilter(labelFilter31);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter33 = context28.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter34 = null;
        context28.setPropertyFilter(propertyFilter34);
        boolean boolean36 = context28.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter37 = context28.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter38 = null;
        context28.setBeforeFilter(beforeFilter38);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter40 = context28.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter41 = context28.getPropertyFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context28);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameAny((java.lang.Object) context28);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNull(propertyFilter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(contextValueFilter33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(nameFilter37);
        org.junit.Assert.assertNull(propertyPreFilter40);
        org.junit.Assert.assertNull(propertyFilter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable5 = jSONWriter1.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray11);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray11);
        jSONWriter14.writeBool(false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        jSONWriter18.writeBooleanNull();
        jSONWriter18.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        java.util.UUID uUID37 = null;
        jSONWriter27.writeUUID(uUID37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = jSONWriter27.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context39);
        java.time.format.DateTimeFormatter dateTimeFormatter41 = context39.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider42 = context39.getProvider();
        java.lang.String str43 = context39.getDateFormat();
        boolean boolean44 = jSONWriter18.removeReference((java.lang.Object) context39);
        short[] shortArray51 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter18.writeInt16(shortArray51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) feature55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature55 };
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray57);
        int int59 = jSONWriter58.size();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter61);
        long long63 = jSONWriter61.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter61.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass76, (long) (short) 10);
        jSONWriter18.checkAndWriteTypeName((java.lang.Object) jSONWriter58, (java.lang.Class) wildcardClass76);
        java.math.BigInteger bigInteger80 = null;
        jSONWriter58.writeBigInt(bigInteger80, (long) 10);
        jSONWriter58.writeMillis((long) 13);
        boolean boolean85 = jSONWriter58.isIgnoreNoneSerializable();
        boolean boolean86 = jSONWriter58.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray87 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter88 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray87);
        boolean boolean90 = jSONWriter88.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat92 = null;
        jSONWriter88.writeDouble(1.0d, decimalFormat92);
        boolean boolean95 = jSONWriter88.removeReference((java.lang.Object) (short) -1);
        java.nio.charset.Charset charset96 = jSONWriter88.getCharset();
        byte[] byteArray97 = jSONWriter58.getBytes(charset96);
        jSONWriter14.writeStringLatin1(byteArray97);
        jSONWriter1.writeRaw(byteArray97);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNull(symbolTable5);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(context39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(objectWriterProvider42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(featureArray87);
        org.junit.Assert.assertNotNull(jSONWriter88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(charset96);
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[110, 117, 108, 108, 49, 51]");
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        jSONWriter3.endArray();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        jSONWriter3.config(featureArray17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) feature24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24 };
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) feature31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature31 };
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray33);
        java.time.ZoneId zoneId36 = null;
        context35.setZoneId(zoneId36);
        jSONWriter28.popPath((java.lang.Object) context35);
        java.nio.charset.Charset charset39 = jSONWriter28.getCharset();
        jSONWriter28.writeRaw("hi!");
        java.math.BigDecimal bigDecimal42 = null;
        jSONWriter28.writeDecimal(bigDecimal42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter45);
        boolean boolean47 = jSONWriter45.utf16;
        long long49 = jSONWriter45.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = jSONWriter45.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable51 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class57 = null;
        boolean boolean59 = jSONWriter52.isWriteTypeInfo((java.lang.Object) jSONWriter54, class57, (long) ' ');
        boolean boolean61 = jSONWriter52.isEnabled((long) ' ');
        jSONWriter52.writeString("hi!");
        char[] charArray64 = new char[] {};
        jSONWriter52.writeString(charArray64);
        jSONWriter45.writeString(charArray64);
        jSONWriter28.writeNameRaw(charArray64);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeNameRaw(charArray64);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L + "'", long49 == 100L);
        org.junit.Assert.assertNull(symbolTable50);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[]");
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter23 = null;
        context15.setValueFilter(valueFilter23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(propertyPreFilter22);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context34);
        java.time.LocalTime localTime36 = null;
        jSONWriter35.writeLocalTime(localTime36);
        boolean boolean38 = jSONWriter35.isBeanToArray();
        boolean boolean39 = jSONWriter35.isIgnoreNoneSerializable();
        byte[] byteArray40 = jSONWriter35.getBytes();
        boolean boolean42 = jSONWriter18.writeTypeName(byteArray40, (long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString;
        boolean boolean44 = jSONWriter18.isWriteTypeInfo((java.lang.Object) feature43);
        boolean boolean45 = jSONWriter18.utf8;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        java.time.Instant instant9 = null;
        jSONWriter1.writeInstant(instant9);
        jSONWriter1.writeMillis((long) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable13 = jSONWriter1.symbolTable;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(symbolTable13);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        java.lang.String str23 = context21.getDateFormat();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        jSONWriter25.close();
        jSONWriter25.writeSymbol("");
        jSONWriter25.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter25.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter31 = null;
        context30.setPropertyPreFilter(propertyPreFilter31);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context30, symbolTable33);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter35 = null;
        context30.setLabelFilter(labelFilter35);
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) -1 };
        boolean boolean49 = jSONWriter40.writeTypeName(byteArray47, 0L);
        java.util.UUID uUID50 = null;
        jSONWriter40.writeUUID(uUID50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter40.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter53 = context52.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider54 = context52.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter55 = context52.getAfterFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        char[] charArray65 = new char[] {};
        jSONWriter59.writeString(charArray65);
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue;
        boolean boolean68 = jSONWriter59.isEnabled(feature67);
        context52.config(feature67, false);
        boolean boolean71 = context30.isEnabled(feature67);
        context21.config(feature67, true);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter74 = context21.getPropertyPreFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertNull(propertyFilter53);
        org.junit.Assert.assertNotNull(objectWriterProvider54);
        org.junit.Assert.assertNull(afterFilter55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[]");
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(propertyPreFilter74);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        byte[] byteArray35 = null;
        jSONWriter25.writeBinary(byteArray35);
        jSONWriter25.endObject();
        java.math.BigDecimal bigDecimal38 = null;
        java.text.DecimalFormat decimalFormat40 = null;
        jSONWriter25.writeDecimal(bigDecimal38, (long) (byte) -1, decimalFormat40);
        java.math.BigDecimal bigDecimal42 = null;
        java.text.DecimalFormat decimalFormat44 = null;
        jSONWriter25.writeDecimal(bigDecimal42, (long) (-1), decimalFormat44);
        com.alibaba.fastjson2.JSONWriter.Path path46 = null;
        com.alibaba.fastjson2.JSONWriter.Path path48 = new com.alibaba.fastjson2.JSONWriter.Path(path46, "");
        com.alibaba.fastjson2.JSONWriter.Path path50 = new com.alibaba.fastjson2.JSONWriter.Path(path48, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path52 = new com.alibaba.fastjson2.JSONWriter.Path(path50, "hi!");
        java.lang.String str53 = path52.toString();
        com.alibaba.fastjson2.JSONWriter.Path path55 = new com.alibaba.fastjson2.JSONWriter.Path(path52, (int) '#');
        java.lang.Object obj56 = null;
        boolean boolean57 = path55.equals(obj56);
        jSONWriter25.writeAny(obj56);
        boolean boolean59 = jSONWriter25.isUseSingleQuotes();
        jSONWriter25.writeFloat((float) 'a');
        com.alibaba.fastjson2.SymbolTable symbolTable62 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable62);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        boolean boolean67 = jSONWriter65.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class68 = null;
        boolean boolean70 = jSONWriter63.isWriteTypeInfo((java.lang.Object) jSONWriter65, class68, (long) ' ');
        byte[] byteArray72 = new byte[] { (byte) -1 };
        boolean boolean74 = jSONWriter65.writeTypeName(byteArray72, 0L);
        byte[] byteArray75 = null;
        jSONWriter65.writeBinary(byteArray75);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter65.writeHex(byteArray83);
        jSONWriter25.writeNameRaw(byteArray83);
        jSONWriter1.writeStringLatin1(byteArray83);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[1].hi\\!" + "'", str53, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 100, 1, -1, 1, -1]");
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        long long6 = jSONWriter1.getFeatures();
        jSONWriter1.writeDateTime19((-1), (int) (byte) 1, (int) (short) 1, 8, 5, (int) (byte) 10);
        jSONWriter1.writeBool(true);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter19 = null;
        context15.setValueFilter(valueFilter19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context15.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(afterFilter22);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter22 = null;
        context15.setValueFilter(valueFilter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context15);
        boolean boolean25 = jSONWriter24.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal30 = null;
        jSONWriter27.writeDecimal(bigDecimal30);
        boolean boolean33 = jSONWriter27.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter27.writeArrayNull();
        jSONWriter27.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        boolean boolean46 = jSONWriter37.isEnabled((long) ' ');
        jSONWriter37.writeString("hi!");
        boolean boolean49 = jSONWriter37.isUTF8();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        jSONWriter37.writeString((java.util.List<java.lang.String>) strList53);
        jSONWriter27.writeString((java.util.List<java.lang.String>) strList53);
        jSONWriter24.writeAny((java.lang.Object) strList53);
        java.util.Map map58 = null;
        jSONWriter24.write(map58);
        java.io.OutputStream outputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int61 = jSONWriter24.flushTo(outputStream60);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: out is nulll");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        jSONWriter3.close();
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter3.writeFloat((float) 10, decimalFormat6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean14 = jSONWriter9.writeTypeName(byteArray12, (long) 10);
        boolean boolean16 = jSONWriter3.writeTypeName(byteArray12, (long) (byte) 100);
        jSONWriter1.writeNameRaw(byteArray12, 0L);
        java.time.ZonedDateTime zonedDateTime19 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime19);
        int int21 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter1.context;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(context22);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context26.setLabelFilter(labelFilter29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context26.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        jSONWriter32.config(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray37);
        boolean boolean42 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter41);
        jSONWriter41.writeRaw('#');
        jSONWriter41.close();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = context26.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context26.getProvider();
        boolean boolean30 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context26);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26, symbolTable31);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context26.provider;
        boolean boolean35 = context26.isEnabled(65536L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        jSONWriter1.writeString("");
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName((long) 2);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        long long11 = jSONWriter9.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter9.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass24, (long) (short) 10);
        int[] intArray33 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter9.writeInt32(intArray33);
        double[] doubleArray39 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter9.writeDouble(doubleArray39);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter1.writeDouble(doubleArray39, decimalFormat41);
        boolean boolean43 = jSONWriter1.isWriteNulls();
        boolean boolean44 = jSONWriter1.hasFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        java.util.UUID uUID58 = null;
        jSONWriter48.writeUUID(uUID58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = jSONWriter48.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter61 = context60.getPropertyFilter();
        long long62 = context60.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter63 = null;
        context60.setLabelFilter(labelFilter63);
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context60, symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Context context67 = jSONWriter66.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter68 = null;
        context67.setPropertyFilter(propertyFilter68);
        boolean boolean70 = context67.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean72 = jSONWriter71.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean74 = jSONWriter71.isEnabled(feature73);
        boolean boolean75 = context67.isEnabled(feature73);
        boolean boolean76 = jSONWriter1.containsReference((java.lang.Object) context67);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(context60);
        org.junit.Assert.assertNull(propertyFilter61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(context67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = null;
        context6.setPropertyPreFilter(propertyPreFilter7);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6, symbolTable9);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter11 = context6.getAfterFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNull(afterFilter11);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter2.writeDouble((double) 137438953472L, decimalFormat4);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean1 = jSONWriter0.useSingleQuote;
        jSONWriter0.writeBool(false);
        jSONWriter0.writeFloat((float) 4L);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable6);
        boolean boolean8 = jSONWriter7.isRefDetect();
        jSONWriter7.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter16 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        boolean[] booleanArray23 = new boolean[] { false, true, true, true };
        jSONWriter18.writeBool(booleanArray23);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        jSONWriter18.writeBinary(byteArray35);
        java.lang.String str39 = jSONWriter7.setPath(fieldWriter16, (java.lang.Object) jSONWriter18);
        byte[] byteArray40 = jSONWriter7.getBytes();
        jSONWriter0.writeBinary(byteArray40);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        byte[] byteArray52 = new byte[] { (byte) -1 };
        boolean boolean54 = jSONWriter45.writeTypeName(byteArray52, 0L);
        java.util.UUID uUID55 = null;
        jSONWriter45.writeUUID(uUID55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = jSONWriter45.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context57);
        java.time.LocalTime localTime59 = null;
        jSONWriter58.writeLocalTime(localTime59);
        boolean boolean61 = jSONWriter58.isBeanToArray();
        boolean boolean62 = jSONWriter58.isIgnoreNoneSerializable();
        byte[] byteArray63 = jSONWriter58.getBytes();
        jSONWriter58.writeDouble((double) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        jSONWriter67.close();
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter67.writeFloat((float) 10, decimalFormat70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean78 = jSONWriter73.writeTypeName(byteArray76, (long) 10);
        boolean boolean80 = jSONWriter67.writeTypeName(byteArray76, (long) (byte) 100);
        jSONWriter67.writeInt16((short) (byte) 100);
        boolean boolean83 = jSONWriter67.hasFilter();
        long[] longArray87 = new long[] { 0, (byte) -1, ' ' };
        jSONWriter67.writeInt64(longArray87);
        jSONWriter58.writeInt64(longArray87);
        jSONWriter0.writeInt64(longArray87);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-88, -1, -1, 100, 100, -1, 10, 32, 0]");
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(context57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-81]");
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(longArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray87), "[0, -1, 32]");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        long long23 = context22.getFeatures();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter24 = null;
        context22.setPropertyPreFilter(propertyPreFilter24);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter29 = context15.getContextNameFilter();
        boolean boolean30 = context15.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNull(contextNameFilter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        jSONWriter3.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        int[] intArray4 = new int[] { (short) -1 };
        jSONWriter2.writeInt32(intArray4);
        jSONWriter2.writeDateYYYMMDD8((int) (short) -1, (int) (byte) -1, (int) '4');
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        java.util.UUID uUID23 = null;
        jSONWriter13.writeUUID(uUID23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter13.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter26 = context25.getPropertyFilter();
        long long27 = context25.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter28 = null;
        context25.setLabelFilter(labelFilter28);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context25.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter31 = null;
        context25.setPropertyPreFilter(propertyPreFilter31);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter33 = null;
        context25.setPropertyPreFilter(propertyPreFilter33);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter35 = null;
        context25.setLabelFilter(labelFilter35);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider37 = context25.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter39);
        long long41 = jSONWriter39.getFeatures();
        java.time.LocalDateTime localDateTime42 = null;
        jSONWriter39.writeLocalDateTime(localDateTime42);
        byte[] byteArray44 = jSONWriter39.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Context context47 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray45);
        jSONWriter39.config(featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.of(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider37, featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.of(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter54);
        boolean boolean56 = jSONWriter54.utf16;
        jSONWriter54.endObject();
        jSONWriter54.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable65 = jSONWriter54.symbolTable;
        double[] doubleArray71 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter54.writeDouble(doubleArray71);
        java.text.DecimalFormat decimalFormat73 = null;
        jSONWriter52.writeDouble(doubleArray71, decimalFormat73);
        java.text.DecimalFormat decimalFormat75 = null;
        jSONWriter2.writeDouble(doubleArray71, decimalFormat75);
        jSONWriter2.writeReference("[1]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1]");
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertNull(propertyFilter26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNotNull(objectWriterProvider37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-81]");
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(symbolTable65);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0, -1.0, 1.0]");
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        jSONWriter19.close();
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter19.writeFloat((float) 10, decimalFormat22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean30 = jSONWriter25.writeTypeName(byteArray28, (long) 10);
        boolean boolean32 = jSONWriter19.writeTypeName(byteArray28, (long) (byte) 100);
        jSONWriter19.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        jSONWriter36.close();
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter36.writeFloat((float) 10, decimalFormat39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean47 = jSONWriter42.writeTypeName(byteArray45, (long) 10);
        boolean boolean49 = jSONWriter36.writeTypeName(byteArray45, (long) (byte) 100);
        jSONWriter19.writeBinary(byteArray45);
        jSONWriter1.writeHex(byteArray45);
        java.util.Map map52 = null;
        jSONWriter1.write(map52);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        jSONWriter0.startArray(0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw('a', '#');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        boolean boolean12 = jSONWriter10.utf16;
        long long14 = jSONWriter10.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable15 = jSONWriter10.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable16 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class22 = null;
        boolean boolean24 = jSONWriter17.isWriteTypeInfo((java.lang.Object) jSONWriter19, class22, (long) ' ');
        boolean boolean26 = jSONWriter17.isEnabled((long) ' ');
        jSONWriter17.writeString("hi!");
        char[] charArray29 = new char[] {};
        jSONWriter17.writeString(charArray29);
        jSONWriter10.writeString(charArray29);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray29);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertNull(symbolTable15);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[]");
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw(".\\[1\\]\\[0\\]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        java.nio.charset.Charset charset17 = jSONWriter6.getCharset();
        jSONWriter6.writeRaw("hi!");
        java.math.BigDecimal bigDecimal20 = null;
        jSONWriter6.writeDecimal(bigDecimal20);
        jSONWriter6.writeChar('#');
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(charset17);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter28);
        long long30 = jSONWriter28.getFeatures();
        java.time.LocalDateTime localDateTime31 = null;
        jSONWriter28.writeLocalDateTime(localDateTime31);
        byte[] byteArray33 = jSONWriter28.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray34);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray34);
        jSONWriter28.config(featureArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.of(featureArray34);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray34);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter41 = null;
        context40.setPropertyPreFilter(propertyPreFilter41);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-81]");
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter39);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        boolean boolean18 = jSONWriter3.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        jSONWriter3.config(feature19, false);
        jSONWriter3.writeFloat((java.lang.Float) 100.0f);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        java.util.UUID uUID38 = null;
        jSONWriter28.writeUUID(uUID38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter28.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter41 = context40.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter42 = context40.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter43 = context40.getValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter60 = context59.getPropertyFilter();
        long long61 = context59.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter62 = null;
        context59.setLabelFilter(labelFilter62);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context59.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter65 = null;
        context59.setPropertyPreFilter(propertyPreFilter65);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        boolean boolean72 = jSONWriter70.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class73 = null;
        boolean boolean75 = jSONWriter68.isWriteTypeInfo((java.lang.Object) jSONWriter70, class73, (long) ' ');
        byte[] byteArray77 = new byte[] { (byte) -1 };
        boolean boolean79 = jSONWriter70.writeTypeName(byteArray77, 0L);
        java.util.UUID uUID80 = null;
        jSONWriter70.writeUUID(uUID80);
        com.alibaba.fastjson2.JSONWriter.Context context82 = jSONWriter70.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter83 = context82.getPropertyFilter();
        long long84 = context82.getFeatures();
        long long85 = context82.getFeatures();
        boolean boolean86 = context82.isDateFormatHasHour();
        java.time.ZoneId zoneId87 = context82.getZoneId();
        context59.setZoneId(zoneId87);
        context40.setZoneId(zoneId87);
        java.lang.String str90 = jSONWriter3.setPath(5, (java.lang.Object) context40);
        java.text.DecimalFormat decimalFormat92 = null;
        jSONWriter3.writeDouble((double) 0, decimalFormat92);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertNull(propertyFilter41);
        org.junit.Assert.assertNull(beforeFilter42);
        org.junit.Assert.assertNull(valueFilter43);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNull(propertyFilter60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(context82);
        org.junit.Assert.assertNull(propertyFilter83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(zoneId87);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        java.time.LocalDate localDate28 = null;
        jSONWriter1.writeLocalDate(localDate28);
        java.util.Map map30 = null;
        jSONWriter1.write(map30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal37 = null;
        jSONWriter34.writeDecimal(bigDecimal37);
        java.time.LocalDate localDate39 = null;
        jSONWriter34.writeLocalDate(localDate39);
        jSONWriter34.writeName("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter44);
        boolean boolean46 = jSONWriter44.utf16;
        jSONWriter44.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter49);
        long long51 = jSONWriter49.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter54.writeDouble(1.0d, decimalFormat58);
        boolean boolean61 = jSONWriter54.removeReference((java.lang.Object) (short) -1);
        jSONWriter54.writeArrayNull();
        long long63 = jSONWriter54.getFeatures();
        java.lang.Class<?> wildcardClass64 = jSONWriter54.getClass();
        boolean boolean66 = jSONWriter49.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass64, (long) (short) 10);
        int[] intArray73 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter49.writeInt32(intArray73);
        jSONWriter44.writeInt32(intArray73);
        jSONWriter34.writeInt32(intArray73);
        jSONWriter34.startObject();
        java.nio.charset.Charset charset78 = jSONWriter34.getCharset();
        java.lang.String str79 = jSONWriter1.setPath(".\\[1\\]\\[0\\]", (java.lang.Object) jSONWriter34);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('#', 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) '#');
        jSONWriter1.startArray(0);
        jSONWriter1.writeInt32((int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter31);
        boolean boolean34 = jSONWriter32.hasFilter(0L);
        java.lang.String str35 = jSONWriter1.setPath((int) (byte) 1, (java.lang.Object) jSONWriter32);
        jSONWriter1.writeArrayNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        boolean boolean4 = jSONWriter1.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter1.writeFloat((float) ' ', decimalFormat21);
        jSONWriter1.writeInt64((long) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Path path6 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path7 = path6.parent;
        java.lang.String str8 = jSONWriter4.setPath((int) (short) 10, (java.lang.Object) path6);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalDate localDate2 = null;
        jSONWriter1.writeLocalDate(localDate2);
        boolean boolean4 = jSONWriter1.utf8;
        byte[] byteArray5 = jSONWriter1.getBytes();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-81]");
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable23);
        java.math.BigDecimal bigDecimal25 = null;
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter24.writeDecimal(bigDecimal25, (long) '#', decimalFormat27);
        jSONWriter24.writeSymbol("");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context15.getContextNameFilter();
        boolean boolean23 = context15.isDateFormatHasDay();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextNameFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context22.setPropertyFilter(propertyFilter23);
        boolean boolean25 = context22.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context22.provider;
        boolean boolean27 = context22.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter28 = context22.getBeforeFilter();
        java.time.ZoneId zoneId29 = context22.getZoneId();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(beforeFilter28);
        org.junit.Assert.assertNotNull(zoneId29);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray20);
        context15.config(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean1 = jSONWriter0.useSingleQuote;
        jSONWriter0.writeRaw(' ');
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        boolean boolean6 = jSONWriter5.isRefDetect();
        java.lang.String str9 = jSONWriter5.setPath("hi!", (java.lang.Object) 1);
        jSONWriter5.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        long long15 = jSONWriter13.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter18.writeDouble(1.0d, decimalFormat22);
        boolean boolean25 = jSONWriter18.removeReference((java.lang.Object) (short) -1);
        jSONWriter18.writeArrayNull();
        long long27 = jSONWriter18.getFeatures();
        java.lang.Class<?> wildcardClass28 = jSONWriter18.getClass();
        boolean boolean30 = jSONWriter13.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass28, (long) (short) 10);
        int[] intArray37 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter13.writeInt32(intArray37);
        double[] doubleArray43 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter13.writeDouble(doubleArray43);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter5.writeDouble(doubleArray43, decimalFormat45);
        jSONWriter0.writeDouble(doubleArray43);
        boolean boolean48 = jSONWriter0.isUTF16();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw((byte) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context15.provider;
        long long29 = context15.getFeatures();
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter30);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.endArray();
        boolean boolean21 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter1.getContext();
        jSONWriter1.writeTypeName(".\\[1\\]\\.hi\\\\\\!");
        java.io.Writer writer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.flushTo(writer25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(context22);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        boolean boolean28 = context26.isEnabled(feature27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        jSONWriter29.writeDateTime19((int) (byte) 1, (int) ' ', 10, (int) (short) 10, (-1), (int) (byte) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.startObject();
        boolean boolean6 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        boolean boolean21 = jSONWriter7.isIgnoreNoneSerializable((java.lang.Object) jSONWriter11);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter11.writeBigInt(bigInteger22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        jSONWriter25.close();
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter25.writeFloat((float) 10, decimalFormat28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean36 = jSONWriter31.writeTypeName(byteArray34, (long) 10);
        boolean boolean38 = jSONWriter25.writeTypeName(byteArray34, (long) (byte) 100);
        jSONWriter11.writeRaw(byteArray34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        jSONWriter43.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        boolean boolean52 = jSONWriter50.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray53 = null;
        jSONWriter50.writeHex(byteArray53);
        boolean boolean55 = jSONWriter50.isRefDetect();
        jSONWriter50.writeNumberNull();
        jSONWriter50.writeFloat((java.lang.Float) 0.0f);
        java.time.LocalDateTime localDateTime59 = null;
        jSONWriter50.writeLocalDateTime(localDateTime59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class71 = null;
        boolean boolean73 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter68, class71, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        boolean boolean77 = jSONWriter75.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat79 = null;
        jSONWriter75.writeDouble(1.0d, decimalFormat79);
        boolean boolean82 = jSONWriter75.removeReference((java.lang.Object) (short) -1);
        jSONWriter75.writeArrayNull();
        long long84 = jSONWriter75.getFeatures();
        java.lang.Class<?> wildcardClass85 = jSONWriter75.getClass();
        boolean boolean87 = jSONWriter62.isWriteTypeInfo((java.lang.Object) boolean73, (java.lang.reflect.Type) wildcardClass85, 0L);
        jSONWriter46.checkAndWriteTypeName((java.lang.Object) localDateTime59, (java.lang.Class) wildcardClass85);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter89 = jSONWriter43.getObjectWriter((java.lang.Class) wildcardClass85);
        boolean boolean91 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter11, (java.lang.Class) wildcardClass85, 137438953472L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objectWriter89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) '#');
        jSONWriter1.startArray(0);
        jSONWriter1.writeInt32((int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter1.context;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context29.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider30, featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider30);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isWriteNulls();
        jSONWriter1.writeInt64((long) 5);
        java.io.Reader reader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader9);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        int[] intArray4 = new int[] { (short) -1 };
        jSONWriter2.writeInt32(intArray4);
        boolean boolean6 = jSONWriter2.jsonb;
        boolean boolean7 = jSONWriter2.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        java.math.BigDecimal bigDecimal1 = null;
        java.text.DecimalFormat decimalFormat3 = null;
        jSONWriter0.writeDecimal(bigDecimal1, (-1L), decimalFormat3);
        com.alibaba.fastjson2.SymbolTable symbolTable5 = jSONWriter0.symbolTable;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNull(symbolTable5);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter39.writeDouble(1.0d, decimalFormat43);
        boolean boolean46 = jSONWriter39.removeReference((java.lang.Object) (short) -1);
        jSONWriter39.writeArrayNull();
        long long48 = jSONWriter39.getFeatures();
        java.lang.Class<?> wildcardClass49 = jSONWriter39.getClass();
        boolean boolean51 = jSONWriter26.isWriteTypeInfo((java.lang.Object) boolean37, (java.lang.reflect.Type) wildcardClass49, 0L);
        jSONWriter26.writeStringNull();
        int int53 = jSONWriter26.level();
        jSONWriter26.writeStringNull();
        jSONWriter26.writeInt8((byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        java.time.LocalTime localTime59 = null;
        jSONWriter58.writeLocalTime(localTime59);
        com.alibaba.fastjson2.SymbolTable symbolTable61 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        boolean boolean66 = jSONWriter64.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class67 = null;
        boolean boolean69 = jSONWriter62.isWriteTypeInfo((java.lang.Object) jSONWriter64, class67, (long) ' ');
        byte[] byteArray71 = new byte[] { (byte) -1 };
        boolean boolean73 = jSONWriter64.writeTypeName(byteArray71, 0L);
        jSONWriter58.writeBinary(byteArray71);
        jSONWriter26.writeRaw(byteArray71);
        jSONWriter24.writeNameRaw(byteArray71, 137438953472L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        jSONWriter1.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeChar('#');
        short[] shortArray29 = new short[] { (byte) 1, (short) 10, (short) 1 };
        jSONWriter14.writeInt16(shortArray29);
        java.lang.String str31 = jSONWriter1.setPath("[1]", (java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        jSONWriter33.close();
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter33.writeFloat((float) 10, decimalFormat36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean44 = jSONWriter39.writeTypeName(byteArray42, (long) 10);
        boolean boolean46 = jSONWriter33.writeTypeName(byteArray42, (long) (byte) 100);
        jSONWriter14.writeNameRaw(byteArray42, (long) (byte) 100);
        boolean boolean50 = jSONWriter14.isEnabled((long) 13);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 10, 1]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        char[] charArray9 = new char[] {};
        jSONWriter3.writeString(charArray9);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue;
        boolean boolean12 = jSONWriter3.isEnabled(feature11);
        jSONWriter3.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter3.symbolTable;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(symbolTable14);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        char[] charArray13 = new char[] {};
        jSONWriter1.writeString(charArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray16 = null;
        jSONWriter15.writeDouble(doubleArray16);
        boolean boolean18 = jSONWriter15.utf16;
        java.math.BigDecimal bigDecimal19 = null;
        jSONWriter15.writeDecimal(bigDecimal19, 100L);
        jSONWriter15.writeReference("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        jSONWriter26.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter43.writeFloat((float) 10, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean54 = jSONWriter49.writeTypeName(byteArray52, (long) 10);
        boolean boolean56 = jSONWriter43.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter43.writeInt16((short) (byte) 100);
        boolean boolean59 = jSONWriter43.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter61);
        long long63 = jSONWriter61.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter61.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass76, (long) (short) 10);
        boolean boolean80 = jSONWriter26.isWriteTypeInfo((java.lang.Object) boolean59, (java.lang.reflect.Type) wildcardClass76, (long) (byte) -1);
        boolean boolean82 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter15, (java.lang.reflect.Type) wildcardClass76, (long) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        java.time.LocalDate localDate84 = null;
        jSONWriter1.writeLocalDate(localDate84);
        jSONWriter1.writeName("$");
        jSONWriter1.writeChar('a');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSONWriter83);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        jSONWriter9.writeEnum((java.lang.Enum) feature16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray25 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter18.writeRaw(charArray25);
        jSONWriter9.writeString(charArray25, (int) (short) 10, (int) (short) -1, true);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        jSONWriter34.close();
        java.text.DecimalFormat decimalFormat37 = null;
        jSONWriter34.writeFloat((float) 10, decimalFormat37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean45 = jSONWriter40.writeTypeName(byteArray43, (long) 10);
        boolean boolean47 = jSONWriter34.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter32.writeNameRaw(byteArray43, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        char[] charArray54 = new char[] { '#', ' ' };
        jSONWriter51.writeString(charArray54, (int) (byte) 0, (int) (short) 1);
        jSONWriter32.writeString(charArray54);
        boolean boolean59 = jSONWriter9.isIgnoreNoneSerializable((java.lang.Object) jSONWriter32);
        jSONWriter32.close();
        jSONWriter32.close();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, 4, #, 4, 4, a]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#,  ]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.of(context4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        boolean boolean14 = jSONWriter7.removeReference((java.lang.Object) (short) -1);
        jSONWriter7.writeArrayNull();
        jSONWriter7.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = null;
        jSONWriter18.writeDouble(doubleArray19);
        jSONWriter18.writeArrayNull();
        short[] shortArray25 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter18.writeInt16(shortArray25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal31 = null;
        jSONWriter28.writeDecimal(bigDecimal31);
        boolean boolean34 = jSONWriter28.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter28.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        char[] charArray43 = new char[] { '#', ' ' };
        jSONWriter40.writeString(charArray43, (int) (byte) 0, (int) (short) 1);
        jSONWriter28.writeString(charArray43);
        jSONWriter18.writeString(charArray43);
        jSONWriter7.writeString(charArray43);
        jSONWriter5.writeString(charArray43);
        jSONWriter5.writeRaw('#');
        jSONWriter5.writeName((long) 8);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#,  ]");
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        jSONWriter1.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeChar('#');
        short[] shortArray29 = new short[] { (byte) 1, (short) 10, (short) 1 };
        jSONWriter14.writeInt16(shortArray29);
        java.lang.String str31 = jSONWriter1.setPath("[1]", (java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        jSONWriter33.close();
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter33.writeFloat((float) 10, decimalFormat36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean44 = jSONWriter39.writeTypeName(byteArray42, (long) 10);
        boolean boolean46 = jSONWriter33.writeTypeName(byteArray42, (long) (byte) 100);
        jSONWriter14.writeNameRaw(byteArray42, (long) (byte) 100);
        long long49 = jSONWriter14.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter51.writeDouble(1.0d, decimalFormat55);
        boolean boolean58 = jSONWriter51.removeReference((java.lang.Object) (short) -1);
        jSONWriter51.writeArrayNull();
        jSONWriter51.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable62 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable62);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        boolean boolean67 = jSONWriter65.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class68 = null;
        boolean boolean70 = jSONWriter63.isWriteTypeInfo((java.lang.Object) jSONWriter65, class68, (long) ' ');
        char[] charArray71 = new char[] {};
        jSONWriter65.writeString(charArray71);
        jSONWriter51.writeString(charArray71, (int) (byte) -1, 0, true);
        jSONWriter14.writeString(charArray71);
        boolean boolean78 = jSONWriter14.jsonb;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 10, 1]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean1 = jSONWriter0.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean8 = jSONWriter3.writeTypeName(byteArray6, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        long long12 = jSONWriter10.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter15.writeDouble(1.0d, decimalFormat19);
        boolean boolean22 = jSONWriter15.removeReference((java.lang.Object) (short) -1);
        jSONWriter15.writeArrayNull();
        long long24 = jSONWriter15.getFeatures();
        java.lang.Class<?> wildcardClass25 = jSONWriter15.getClass();
        boolean boolean27 = jSONWriter10.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass25, (long) (short) 10);
        int[] intArray34 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter10.writeInt32(intArray34);
        jSONWriter3.writeInt32(intArray34);
        jSONWriter0.writeInt32(intArray34);
        jSONWriter0.writeInt8((byte) 10);
        java.math.BigDecimal bigDecimal40 = null;
        jSONWriter0.writeDecimal(bigDecimal40, (long) '#');
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class49 = null;
        boolean boolean51 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter46, class49, (long) ' ');
        byte[] byteArray53 = new byte[] { (byte) -1 };
        boolean boolean55 = jSONWriter46.writeTypeName(byteArray53, 0L);
        java.util.UUID uUID56 = null;
        jSONWriter46.writeUUID(uUID56);
        com.alibaba.fastjson2.JSONWriter.Context context58 = jSONWriter46.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter59 = context58.getPropertyFilter();
        long long60 = context58.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter61 = null;
        context58.setLabelFilter(labelFilter61);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter63 = null;
        context58.setValueFilter(valueFilter63);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter65 = context58.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        boolean boolean72 = jSONWriter70.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class73 = null;
        boolean boolean75 = jSONWriter68.isWriteTypeInfo((java.lang.Object) jSONWriter70, class73, (long) ' ');
        byte[] byteArray77 = new byte[] { (byte) -1 };
        boolean boolean79 = jSONWriter70.writeTypeName(byteArray77, 0L);
        byte[] byteArray80 = null;
        jSONWriter70.writeBinary(byteArray80);
        com.alibaba.fastjson2.JSONWriter.Feature feature82 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class83 = null;
        jSONWriter70.checkAndWriteTypeName((java.lang.Object) feature82, class83);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray85 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature66, feature82 };
        context58.config(featureArray85);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context58.getAfterFilter();
        boolean boolean88 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) afterFilter87);
        jSONWriter0.close();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(context58);
        org.junit.Assert.assertNull(propertyFilter59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNull(contextNameFilter65);
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + feature82 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature82.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray85);
        org.junit.Assert.assertNull(afterFilter87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.SymbolTable symbolTable2 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable2);
        boolean boolean4 = jSONWriter3.isRefDetect();
        java.lang.String str7 = jSONWriter3.setPath("hi!", (java.lang.Object) 1);
        jSONWriter3.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        long long13 = jSONWriter11.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter16.writeDouble(1.0d, decimalFormat20);
        boolean boolean23 = jSONWriter16.removeReference((java.lang.Object) (short) -1);
        jSONWriter16.writeArrayNull();
        long long25 = jSONWriter16.getFeatures();
        java.lang.Class<?> wildcardClass26 = jSONWriter16.getClass();
        boolean boolean28 = jSONWriter11.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass26, (long) (short) 10);
        int[] intArray35 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter11.writeInt32(intArray35);
        double[] doubleArray41 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter11.writeDouble(doubleArray41);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter3.writeDouble(doubleArray41, decimalFormat43);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        jSONWriter48.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean66 = jSONWriter61.writeTypeName(byteArray64, (long) 10);
        jSONWriter48.writeNameRaw(byteArray64);
        jSONWriter3.writeNameRaw(byteArray64, (long) (short) -1);
        jSONWriter1.writeHex(byteArray64);
        boolean boolean71 = jSONWriter1.utf8;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        char[] charArray12 = null;
        jSONWriter0.writeString(charArray12, (int) (byte) -1, (int) (short) 1, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        java.math.BigInteger bigInteger18 = null;
        jSONWriter17.writeBigInt(bigInteger18, (long) 6);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter17.writeRaw((byte) 100);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (short) 100);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean13 = jSONWriter8.writeTypeName(byteArray11, (long) 10);
        jSONWriter1.writeStringLatin1(byteArray11);
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter1.writeDecimal(bigDecimal15, 137438953472L);
        jSONWriter1.endArray();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        java.time.Instant instant32 = null;
        jSONWriter20.writeInstant(instant32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean40 = jSONWriter35.writeTypeName(byteArray38, (long) 10);
        jSONWriter20.writeRaw(byteArray38);
        jSONWriter3.writeStringLatin1(byteArray38);
        jSONWriter3.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        jSONWriter45.close();
        jSONWriter45.writeSymbol("");
        jSONWriter45.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable51 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class57 = null;
        boolean boolean59 = jSONWriter52.isWriteTypeInfo((java.lang.Object) jSONWriter54, class57, (long) ' ');
        byte[] byteArray61 = new byte[] { (byte) -1 };
        boolean boolean63 = jSONWriter54.writeTypeName(byteArray61, 0L);
        java.util.UUID uUID64 = null;
        jSONWriter54.writeUUID(uUID64);
        com.alibaba.fastjson2.JSONWriter.Context context66 = jSONWriter54.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter67 = context66.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider68 = context66.getProvider();
        java.lang.String str69 = jSONWriter45.setPath("$", (java.lang.Object) context66);
        java.nio.charset.Charset charset70 = jSONWriter45.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray71 = jSONWriter3.getBytes(charset70);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: not support operator");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(context66);
        org.junit.Assert.assertNull(propertyFilter67);
        org.junit.Assert.assertNotNull(objectWriterProvider68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(charset70);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter1.writeDecimal(bigDecimal12);
        byte[] byteArray14 = jSONWriter1.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw(".\\[1\\]\\.hi\\\\\\!");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-77, -81, -81]");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        long long10 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter11 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray12);
        jSONWriter15.writeArrayNull();
        java.lang.String str17 = jSONWriter1.setPath(fieldWriter11, (java.lang.Object) jSONWriter15);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter15.writeDecimal(bigDecimal18);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.time.ZonedDateTime zonedDateTime16 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray22 = null;
        jSONWriter19.writeHex(byteArray22);
        boolean boolean24 = jSONWriter19.isRefDetect();
        jSONWriter19.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter42 = context41.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        boolean boolean45 = jSONWriter44.isRefDetect();
        java.lang.String str48 = jSONWriter44.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter50);
        long long52 = jSONWriter50.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter55.writeDouble(1.0d, decimalFormat59);
        boolean boolean62 = jSONWriter55.removeReference((java.lang.Object) (short) -1);
        jSONWriter55.writeArrayNull();
        long long64 = jSONWriter55.getFeatures();
        java.lang.Class<?> wildcardClass65 = jSONWriter55.getClass();
        boolean boolean67 = jSONWriter50.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass65, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter68 = jSONWriter44.getObjectWriter((java.lang.Class) wildcardClass65);
        boolean boolean69 = jSONWriter19.isWriteTypeInfo((java.lang.Object) context41, (java.lang.reflect.Type) wildcardClass65);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter70 = jSONWriter3.getObjectWriter((java.lang.Class) wildcardClass65);
        com.alibaba.fastjson2.SymbolTable symbolTable71 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable71);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        boolean boolean76 = jSONWriter74.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class77 = null;
        boolean boolean79 = jSONWriter72.isWriteTypeInfo((java.lang.Object) jSONWriter74, class77, (long) ' ');
        byte[] byteArray81 = new byte[] { (byte) 100 };
        boolean boolean83 = jSONWriter72.writeTypeName(byteArray81, (long) (-1));
        jSONWriter3.writeStringLatin1(byteArray81);
        boolean boolean85 = jSONWriter3.jsonb;
        java.time.Instant instant86 = null;
        jSONWriter3.writeInstant(instant86);
        jSONWriter3.writeMillis(0L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNull(propertyFilter42);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objectWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectWriter70);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        jSONWriter7.close();
        jSONWriter7.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        boolean boolean21 = jSONWriter12.isEnabled((long) ' ');
        jSONWriter12.writeString("hi!");
        boolean boolean24 = jSONWriter12.isUTF8();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        jSONWriter12.writeString((java.util.List<java.lang.String>) strList28);
        jSONWriter7.writeString((java.util.List<java.lang.String>) strList28);
        jSONWriter1.write((java.util.List) strList28);
        boolean boolean33 = jSONWriter1.isUseSingleQuotes();
        boolean boolean34 = jSONWriter1.jsonb;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        boolean boolean9 = jSONWriter0.isEnabled((long) '4');
        boolean boolean10 = jSONWriter0.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        boolean boolean9 = jSONWriter0.isEnabled((long) '4');
        boolean boolean10 = jSONWriter0.isUTF16();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter12.writeDouble(1.0d, decimalFormat16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean24 = jSONWriter19.writeTypeName(byteArray22, (long) 10);
        jSONWriter12.writeStringLatin1(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeBase64(byteArray22);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context15.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertNull(contextNameFilter22);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        jSONWriter1.writeChar('#');
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        jSONWriter26.writeDateTimeISO8601((int) (byte) 0, (int) (short) 0, (int) (byte) 10, 10, (int) (byte) 10, (int) (byte) 1, (int) 'a', 4, true);
        java.nio.charset.Charset charset37 = jSONWriter26.getCharset();
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter26.writeDouble((double) 137438953472L, decimalFormat39);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(charset37);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        short[] shortArray34 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt16(shortArray34);
        boolean boolean37 = jSONWriter1.isRefDetect((java.lang.Object) (-1.0f));
        jSONWriter1.writeDouble((double) (short) 0);
        java.math.BigDecimal bigDecimal40 = null;
        jSONWriter1.writeDecimal(bigDecimal40, (long) (short) 100);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        jSONWriter1.writeReference("[1][0]");
        int int25 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter26.writeRaw((byte) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 13 + "'", int25 == 13);
        org.junit.Assert.assertNotNull(jSONWriter26);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter25 = null;
        context15.setPropertyPreFilter(propertyPreFilter25);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter27 = null;
        context15.setBeforeFilter(beforeFilter27);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        boolean boolean17 = jSONWriter1.jsonb;
        java.io.Reader reader18 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader18);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = jSONWriter3.getSymbolTable();
        jSONWriter3.writeDouble((double) ' ');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(symbolTable17);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        boolean boolean14 = jSONWriter3.hasFilter();
        boolean boolean15 = jSONWriter3.utf8;
        boolean boolean16 = jSONWriter3.utf16;
        jSONWriter3.writeTypeName("[1][0]");
        jSONWriter3.startArray(8);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        boolean boolean22 = jSONWriter3.isWriteNulls();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter2.writeTypeName("");
        boolean boolean5 = jSONWriter2.isUseSingleQuotes();
        boolean boolean6 = jSONWriter2.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        jSONWriter8.close();
        jSONWriter8.writeSymbol("");
        jSONWriter8.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context13 = jSONWriter8.context;
        jSONWriter8.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable18 = jSONWriter8.symbolTable;
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) 100 };
        boolean boolean31 = jSONWriter20.writeTypeName(byteArray29, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        int[] intArray37 = new int[] { (short) -1 };
        jSONWriter35.writeInt32(intArray37);
        java.lang.String str39 = jSONWriter20.setPath("hi!", (java.lang.Object) intArray37);
        jSONWriter8.writeInt32(intArray37);
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        java.util.UUID uUID54 = null;
        jSONWriter44.writeUUID(uUID54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = jSONWriter44.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context56);
        java.time.LocalTime localTime58 = null;
        jSONWriter57.writeLocalTime(localTime58);
        boolean boolean60 = jSONWriter57.isBeanToArray();
        boolean boolean61 = jSONWriter57.isIgnoreNoneSerializable();
        byte[] byteArray62 = jSONWriter57.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty;
        jSONWriter57.config(feature63, false);
        jSONWriter8.writeEnum((java.lang.Enum) feature63);
        jSONWriter2.writeEnum((java.lang.Enum) feature63);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(context13);
        org.junit.Assert.assertNull(symbolTable18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(context56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-81]");
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty));
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        java.math.BigDecimal bigDecimal1 = null;
        java.text.DecimalFormat decimalFormat3 = null;
        jSONWriter0.writeDecimal(bigDecimal1, 1L, decimalFormat3);
        com.alibaba.fastjson2.SymbolTable symbolTable5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter6.isWriteTypeInfo((java.lang.Object) jSONWriter8, class11, (long) ' ');
        byte[] byteArray15 = new byte[] { (byte) -1 };
        boolean boolean17 = jSONWriter8.writeTypeName(byteArray15, 0L);
        jSONWriter8.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean26 = jSONWriter21.writeTypeName(byteArray24, (long) 10);
        jSONWriter8.writeNameRaw(byteArray24);
        java.math.BigDecimal bigDecimal28 = null;
        jSONWriter8.writeDecimal(bigDecimal28);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.startArray((java.lang.Object) bigDecimal28, 2);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        byte[] byteArray23 = null;
        jSONWriter13.writeBinary(byteArray23);
        jSONWriter13.endObject();
        java.time.ZonedDateTime zonedDateTime26 = null;
        jSONWriter13.writeZonedDateTime(zonedDateTime26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray32 = null;
        jSONWriter29.writeHex(byteArray32);
        boolean boolean34 = jSONWriter29.isRefDetect();
        jSONWriter29.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter52 = context51.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable53 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable53);
        boolean boolean55 = jSONWriter54.isRefDetect();
        java.lang.String str58 = jSONWriter54.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter60);
        long long62 = jSONWriter60.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        boolean boolean67 = jSONWriter65.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat69 = null;
        jSONWriter65.writeDouble(1.0d, decimalFormat69);
        boolean boolean72 = jSONWriter65.removeReference((java.lang.Object) (short) -1);
        jSONWriter65.writeArrayNull();
        long long74 = jSONWriter65.getFeatures();
        java.lang.Class<?> wildcardClass75 = jSONWriter65.getClass();
        boolean boolean77 = jSONWriter60.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass75, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter78 = jSONWriter54.getObjectWriter((java.lang.Class) wildcardClass75);
        boolean boolean79 = jSONWriter29.isWriteTypeInfo((java.lang.Object) context51, (java.lang.reflect.Type) wildcardClass75);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter80 = jSONWriter13.getObjectWriter((java.lang.Class) wildcardClass75);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter81 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass75);
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        jSONWriter1.writeReference("[1].hi\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNull(propertyFilter52);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objectWriter78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objectWriter80);
        org.junit.Assert.assertNotNull(objectWriter81);
        org.junit.Assert.assertNotNull(jSONWriter82);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.time.Instant instant15 = null;
        jSONWriter3.writeInstant(instant15);
        boolean boolean17 = jSONWriter3.isRefDetect();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter19 = null;
        context15.setNameFilter(nameFilter19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean22 = context15.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider23 = context15.getProvider();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider23);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class40 = null;
        jSONWriter27.checkAndWriteTypeName((java.lang.Object) feature39, class40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature39 };
        context15.config(featureArray42);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter44 = context15.getContextValueFilter();
        boolean boolean45 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider46 = context15.provider;
        com.alibaba.fastjson2.filter.ValueFilter valueFilter47 = null;
        context15.setValueFilter(valueFilter47);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextNameFilter22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNull(contextValueFilter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider46);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter19 = null;
        context15.setValueFilter(valueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        java.lang.String str10 = path9.toString();
        com.alibaba.fastjson2.JSONWriter.Path path11 = path9.parent;
        com.alibaba.fastjson2.JSONWriter.Path path13 = new com.alibaba.fastjson2.JSONWriter.Path(path9, "[1].hi\\![35][100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1].hi\\![35]" + "'", str10, "[1].hi\\![35]");
        org.junit.Assert.assertNotNull(path11);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        boolean boolean14 = jSONWriter3.hasFilter();
        boolean boolean15 = jSONWriter3.utf8;
        boolean boolean16 = jSONWriter3.utf16;
        jSONWriter3.writeTypeName("[1][0]");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal23 = null;
        jSONWriter20.writeDecimal(bigDecimal23);
        java.lang.Object obj25 = null;
        java.lang.Class class26 = null;
        jSONWriter20.checkAndWriteTypeName(obj25, class26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean29 = jSONWriter20.isEnabled(feature28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat35 = null;
        jSONWriter31.writeDouble(1.0d, decimalFormat35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean43 = jSONWriter38.writeTypeName(byteArray41, (long) 10);
        jSONWriter31.writeStringLatin1(byteArray41);
        jSONWriter31.writeFloat((java.lang.Float) 1.0f);
        int int47 = jSONWriter31.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray49 = null;
        jSONWriter48.writeDouble(doubleArray49);
        boolean boolean51 = jSONWriter48.utf16;
        java.math.BigDecimal bigDecimal52 = null;
        jSONWriter48.writeDecimal(bigDecimal52, 100L);
        boolean boolean55 = jSONWriter48.utf16;
        boolean boolean57 = jSONWriter48.isEnabled((long) '4');
        boolean boolean58 = jSONWriter31.containsReference((java.lang.Object) jSONWriter48);
        java.time.LocalDate localDate59 = null;
        jSONWriter31.writeLocalDate(localDate59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat66 = null;
        jSONWriter62.writeDouble(1.0d, decimalFormat66);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean74 = jSONWriter69.writeTypeName(byteArray72, (long) 10);
        jSONWriter62.writeStringLatin1(byteArray72);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        java.time.LocalTime localTime78 = null;
        jSONWriter77.writeLocalTime(localTime78);
        java.time.LocalDateTime localDateTime80 = null;
        jSONWriter77.writeLocalDateTime(localDateTime80);
        byte[] byteArray82 = jSONWriter77.getBytes();
        jSONWriter62.writeNameRaw(byteArray82);
        jSONWriter31.writeHex(byteArray82);
        boolean boolean86 = jSONWriter20.isWriteTypeInfo((java.lang.Object) byteArray82, 4L);
        jSONWriter3.writeRaw(byteArray82);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-81, -81]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat9 = null;
        jSONWriter5.writeDouble(1.0d, decimalFormat9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean17 = jSONWriter12.writeTypeName(byteArray15, (long) 10);
        jSONWriter5.writeStringLatin1(byteArray15);
        jSONWriter1.writeStringLatin1(byteArray15);
        int int20 = jSONWriter1.level();
        jSONWriter1.writeFloat((java.lang.Float) 10.0f);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) feature30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30 };
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) feature37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature37 };
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        java.time.ZoneId zoneId42 = null;
        context41.setZoneId(zoneId42);
        jSONWriter34.popPath((java.lang.Object) context41);
        java.nio.charset.Charset charset45 = jSONWriter34.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray46 = jSONWriter1.getBytes(charset45);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: not support operator");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(charset45);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.time.Instant instant4 = null;
        jSONWriter0.writeInstant(instant4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        jSONWriter7.close();
        jSONWriter7.writeSymbol("");
        jSONWriter7.writeBooleanNull();
        jSONWriter7.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter16.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context28);
        java.time.format.DateTimeFormatter dateTimeFormatter30 = context28.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context28.getProvider();
        java.lang.String str32 = context28.getDateFormat();
        boolean boolean33 = jSONWriter7.removeReference((java.lang.Object) context28);
        short[] shortArray40 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter7.writeInt16(shortArray40);
        boolean boolean42 = jSONWriter0.containsReference((java.lang.Object) shortArray40);
        com.alibaba.fastjson2.SymbolTable symbolTable43 = jSONWriter0.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(symbolTable43);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray0);
        jSONWriter3.writeArrayNull();
        jSONWriter3.writeName("");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter25 = null;
        context15.setPropertyPreFilter(propertyPreFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter29 = null;
        context15.setValueFilter(valueFilter29);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(propertyFilter28);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = null;
        context21.setAfterFilter(afterFilter22);
        java.time.ZoneId zoneId24 = context21.getZoneId();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = context21.getLabelFilter();
        long long26 = context21.getFeatures();
        boolean boolean27 = context21.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(zoneId24);
        org.junit.Assert.assertNull(labelFilter25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        boolean boolean28 = context26.isEnabled(feature27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter30 = context26.getContextValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNull(contextValueFilter30);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        jSONWriter20.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter23.writeDouble(1.0d, decimalFormat27);
        boolean boolean30 = jSONWriter23.removeReference((java.lang.Object) (short) -1);
        jSONWriter23.writeArrayNull();
        long long32 = jSONWriter23.getFeatures();
        java.lang.Class<?> wildcardClass33 = jSONWriter23.getClass();
        boolean boolean34 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter20, (java.lang.reflect.Type) wildcardClass33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        boolean boolean38 = jSONWriter36.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat44 = null;
        jSONWriter40.writeDouble(1.0d, decimalFormat44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean52 = jSONWriter47.writeTypeName(byteArray50, (long) 10);
        jSONWriter40.writeStringLatin1(byteArray50);
        jSONWriter36.writeStringLatin1(byteArray50);
        int int55 = jSONWriter36.level();
        boolean boolean56 = jSONWriter36.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable57 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class63 = null;
        boolean boolean65 = jSONWriter58.isWriteTypeInfo((java.lang.Object) jSONWriter60, class63, (long) ' ');
        boolean boolean67 = jSONWriter58.isEnabled((long) ' ');
        boolean boolean68 = jSONWriter58.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable69 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable69);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        boolean boolean74 = jSONWriter72.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class75 = null;
        boolean boolean77 = jSONWriter70.isWriteTypeInfo((java.lang.Object) jSONWriter72, class75, (long) ' ');
        byte[] byteArray79 = new byte[] { (byte) 100 };
        boolean boolean81 = jSONWriter70.writeTypeName(byteArray79, (long) (-1));
        jSONWriter70.writeString("");
        long[] longArray85 = new long[] { (short) -1 };
        jSONWriter70.writeInt64(longArray85);
        jSONWriter58.writeInt64(longArray85);
        jSONWriter36.writeInt64(longArray85);
        jSONWriter1.writeInt64(longArray85);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray90 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter91 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray90);
        jSONWriter91.close();
        jSONWriter91.writeSymbol("");
        boolean[] booleanArray96 = new boolean[] { true };
        jSONWriter91.writeBool(booleanArray96);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameAny((java.lang.Object) booleanArray96);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(longArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray85), "[-1]");
        org.junit.Assert.assertNotNull(featureArray90);
        org.junit.Assert.assertNotNull(jSONWriter91);
        org.junit.Assert.assertNotNull(booleanArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray96), "[true]");
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        jSONWriter6.writeMillis((long) (short) 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        java.util.Map map26 = null;
        jSONWriter14.write(map26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        java.time.LocalTime localTime30 = null;
        jSONWriter29.writeLocalTime(localTime30);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        byte[] byteArray42 = new byte[] { (byte) -1 };
        boolean boolean44 = jSONWriter35.writeTypeName(byteArray42, 0L);
        jSONWriter29.writeBinary(byteArray42);
        jSONWriter14.writeBinary(byteArray42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray51 = null;
        jSONWriter48.writeHex(byteArray51);
        boolean boolean53 = jSONWriter48.isRefDetect();
        jSONWriter48.writeNumberNull();
        jSONWriter48.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean58 = jSONWriter48.isEnabled(feature57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter60);
        long long62 = jSONWriter60.getFeatures();
        java.time.LocalDateTime localDateTime63 = null;
        jSONWriter60.writeLocalDateTime(localDateTime63);
        byte[] byteArray65 = jSONWriter60.getBytes();
        jSONWriter48.writeStringLatin1(byteArray65);
        jSONWriter14.writeBinary(byteArray65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter69);
        boolean boolean71 = jSONWriter69.utf16;
        long long73 = jSONWriter69.getFeatures((long) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        java.time.LocalTime localTime76 = null;
        jSONWriter75.writeLocalTime(localTime76);
        com.alibaba.fastjson2.SymbolTable symbolTable78 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable78);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray80 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray80);
        boolean boolean83 = jSONWriter81.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class84 = null;
        boolean boolean86 = jSONWriter79.isWriteTypeInfo((java.lang.Object) jSONWriter81, class84, (long) ' ');
        byte[] byteArray88 = new byte[] { (byte) -1 };
        boolean boolean90 = jSONWriter81.writeTypeName(byteArray88, 0L);
        jSONWriter75.writeBinary(byteArray88);
        jSONWriter69.writeStringLatin1(byteArray88);
        jSONWriter14.writeNameRaw(byteArray88, (-1L));
        jSONWriter1.writeRaw(byteArray88);
        jSONWriter1.writeSymbol(0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-81]");
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L + "'", long73 == 100L);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(featureArray80);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path4.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        boolean boolean29 = path4.equals((java.lang.Object) context23);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter30 = context23.getValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter31 = context23.getPropertyFilter();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1]" + "'", str7, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(valueFilter30);
        org.junit.Assert.assertNull(propertyFilter31);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        jSONWriter14.writeSymbol(".\\[1\\]\\.hi\\\\\\!");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter1.writeBinary(byteArray27);
        boolean boolean34 = jSONWriter1.hasFilter((long) 100);
        jSONWriter1.writeFloat((float) 100L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        jSONWriter16.startObject();
        java.io.Writer writer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter16.flushTo(writer18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter19);
        boolean boolean21 = jSONWriter19.utf16;
        jSONWriter19.endObject();
        jSONWriter19.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = jSONWriter19.symbolTable;
        double[] doubleArray36 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter19.writeDouble(doubleArray36);
        jSONWriter3.writeDouble(doubleArray36);
        java.time.LocalTime localTime39 = null;
        jSONWriter3.writeLocalTime(localTime39);
        boolean boolean41 = jSONWriter3.isRefDetect();
        com.alibaba.fastjson2.SymbolTable symbolTable42 = jSONWriter3.symbolTable;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(symbolTable30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(symbolTable42);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        jSONWriter0.writeInt16((short) 0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        long long19 = jSONWriter16.getFeatures();
        jSONWriter16.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8();
        com.alibaba.fastjson2.JSONWriter.Context context10 = jSONWriter9.context;
        boolean boolean11 = jSONWriter8.removeReference((java.lang.Object) context10);
        boolean boolean12 = jSONWriter8.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(context10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        char[] charArray21 = new char[] {};
        jSONWriter15.writeString(charArray21);
        jSONWriter1.writeString(charArray21, (int) (byte) -1, 0, true);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw("[1]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        jSONWriter1.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeChar('#');
        short[] shortArray29 = new short[] { (byte) 1, (short) 10, (short) 1 };
        jSONWriter14.writeInt16(shortArray29);
        java.lang.String str31 = jSONWriter1.setPath("[1]", (java.lang.Object) jSONWriter14);
        java.math.BigInteger bigInteger32 = null;
        jSONWriter14.writeBigInt(bigInteger32);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 10, 1]");
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.util.Map map15 = null;
        jSONWriter3.write(map15);
        jSONWriter3.writeDateTime19((-1), 1, (int) ' ', (-1), (int) '#', (int) 'a');
        boolean boolean24 = jSONWriter3.isUseSingleQuotes();
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        java.util.UUID uUID38 = null;
        jSONWriter28.writeUUID(uUID38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter28.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter41 = context40.getPropertyFilter();
        long long42 = context40.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = null;
        context40.setLabelFilter(labelFilter43);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider45 = context40.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter46 = null;
        context40.setPropertyPreFilter(propertyPreFilter46);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter48 = null;
        context40.setPropertyPreFilter(propertyPreFilter48);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter50 = null;
        context40.setLabelFilter(labelFilter50);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider52 = context40.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable53 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable53);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        boolean boolean58 = jSONWriter56.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class59 = null;
        boolean boolean61 = jSONWriter54.isWriteTypeInfo((java.lang.Object) jSONWriter56, class59, (long) ' ');
        byte[] byteArray63 = new byte[] { (byte) -1 };
        boolean boolean65 = jSONWriter56.writeTypeName(byteArray63, 0L);
        java.util.UUID uUID66 = null;
        jSONWriter56.writeUUID(uUID66);
        com.alibaba.fastjson2.JSONWriter.Context context68 = jSONWriter56.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter69 = context68.getPropertyFilter();
        long long70 = context68.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter71 = null;
        context68.setLabelFilter(labelFilter71);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider73 = context68.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter74 = null;
        context68.setPropertyPreFilter(propertyPreFilter74);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter76 = null;
        context68.setPropertyPreFilter(propertyPreFilter76);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter78 = null;
        context68.setLabelFilter(labelFilter78);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider80 = context68.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray81 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray81);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter82);
        long long84 = jSONWriter82.getFeatures();
        java.time.LocalDateTime localDateTime85 = null;
        jSONWriter82.writeLocalDateTime(localDateTime85);
        byte[] byteArray87 = jSONWriter82.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray88 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter89 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray88);
        com.alibaba.fastjson2.JSONWriter.Context context90 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray88);
        com.alibaba.fastjson2.JSONWriter.Context context91 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray88);
        jSONWriter82.config(featureArray88);
        com.alibaba.fastjson2.JSONWriter jSONWriter93 = com.alibaba.fastjson2.JSONWriter.of(featureArray88);
        com.alibaba.fastjson2.JSONWriter.Context context94 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider80, featureArray88);
        com.alibaba.fastjson2.JSONWriter jSONWriter95 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider52, featureArray88);
        jSONWriter3.config(featureArray88);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertNull(propertyFilter41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider45);
        org.junit.Assert.assertNotNull(objectWriterProvider52);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(context68);
        org.junit.Assert.assertNull(propertyFilter69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider73);
        org.junit.Assert.assertNotNull(objectWriterProvider80);
        org.junit.Assert.assertNotNull(featureArray81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-81]");
        org.junit.Assert.assertNotNull(featureArray88);
        org.junit.Assert.assertNotNull(jSONWriter89);
        org.junit.Assert.assertNotNull(jSONWriter93);
        org.junit.Assert.assertNotNull(jSONWriter95);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        int int28 = jSONWriter1.level();
        jSONWriter1.writeDateTime19((int) '4', (int) (byte) 1, 13, (-1), 0, (-1));
        jSONWriter1.writeInt8((byte) 1);
        java.nio.charset.Charset charset38 = jSONWriter1.getCharset();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(charset38);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context26.setLabelFilter(labelFilter29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context26.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        jSONWriter32.config(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray37);
        boolean boolean42 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter41);
        boolean boolean43 = jSONWriter41.isIgnoreErrorGetter();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter41.writeTypeName("[1]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        boolean boolean16 = jSONWriter1.isUTF16();
        boolean boolean17 = jSONWriter1.isUTF8();
        jSONWriter1.writeFloat((float) 'a');
        boolean boolean20 = jSONWriter1.utf8;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.startArray((int) (short) -1);
        boolean boolean10 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        java.time.LocalTime localTime28 = null;
        jSONWriter27.writeLocalTime(localTime28);
        boolean boolean30 = jSONWriter27.isBeanToArray();
        boolean boolean31 = jSONWriter27.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter.Path path32 = null;
        com.alibaba.fastjson2.JSONWriter.Path path34 = new com.alibaba.fastjson2.JSONWriter.Path(path32, "");
        com.alibaba.fastjson2.JSONWriter.Path path36 = new com.alibaba.fastjson2.JSONWriter.Path(path34, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path38 = new com.alibaba.fastjson2.JSONWriter.Path(path36, "hi!");
        java.lang.String str39 = path38.toString();
        com.alibaba.fastjson2.JSONWriter.Path path41 = new com.alibaba.fastjson2.JSONWriter.Path(path38, (int) '#');
        boolean boolean42 = jSONWriter27.isRefDetect((java.lang.Object) path41);
        jSONWriter1.setRootObject((java.lang.Object) path41);
        jSONWriter1.startArray((int) (byte) 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1].hi\\!" + "'", str39, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.writeInt8((byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = null;
        jSONWriter4.writeDouble(doubleArray5);
        boolean boolean7 = jSONWriter4.utf16;
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter4.writeDecimal(bigDecimal8, 100L);
        boolean boolean11 = jSONWriter4.utf16;
        java.lang.Object obj12 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter4.isWriteTypeInfo(obj12, (java.lang.Class) wildcardClass24, (long) (short) 0);
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter4, (long) (byte) 1);
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter4.writeFloat((float) 4L, decimalFormat30);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        jSONWriter0.writeStringNull();
        boolean boolean24 = jSONWriter0.jsonb;
        java.math.BigInteger bigInteger25 = null;
        jSONWriter0.writeBigInt(bigInteger25, 97L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        java.time.LocalDate localDate30 = null;
        jSONWriter29.writeLocalDate(localDate30);
        boolean boolean32 = jSONWriter29.utf8;
        java.util.UUID uUID33 = null;
        jSONWriter29.writeUUID(uUID33);
        jSONWriter29.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter37);
        long long39 = jSONWriter37.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter42.writeDouble(1.0d, decimalFormat46);
        boolean boolean49 = jSONWriter42.removeReference((java.lang.Object) (short) -1);
        jSONWriter42.writeArrayNull();
        long long51 = jSONWriter42.getFeatures();
        java.lang.Class<?> wildcardClass52 = jSONWriter42.getClass();
        boolean boolean54 = jSONWriter37.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass52, (long) (short) 10);
        int[] intArray61 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter37.writeInt32(intArray61);
        double[] doubleArray67 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter37.writeDouble(doubleArray67);
        jSONWriter29.writeDouble(doubleArray67);
        jSONWriter0.writeDouble(doubleArray67);
        java.text.DecimalFormat decimalFormat72 = null;
        jSONWriter0.writeFloat((float) ' ', decimalFormat72);
        jSONWriter0.endObject();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter23 = null;
        context22.setContextValueFilter(contextValueFilter23);
        context22.setDateFormat("[1][0]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        jSONWriter3.writeNumberNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path1 = path0.parent;
        com.alibaba.fastjson2.JSONWriter.Path path3 = new com.alibaba.fastjson2.JSONWriter.Path(path1, "");
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        byte[] byteArray14 = new byte[] { (byte) -1 };
        boolean boolean16 = jSONWriter7.writeTypeName(byteArray14, 0L);
        java.util.UUID uUID17 = null;
        jSONWriter7.writeUUID(uUID17);
        com.alibaba.fastjson2.JSONWriter.Context context19 = jSONWriter7.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter20 = context19.getPropertyFilter();
        long long21 = context19.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter22 = null;
        context19.setLabelFilter(labelFilter22);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context19.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.of(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider24, featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.of(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        boolean boolean33 = path3.equals((java.lang.Object) featureArray25);
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertNull(path1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(context19);
        org.junit.Assert.assertNull(propertyFilter20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        jSONWriter25.writeSymbol(".\\[1\\]\\[0\\]");
        boolean boolean28 = jSONWriter25.utf8;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        long long6 = jSONWriter1.getFeatures();
        java.text.DecimalFormat decimalFormat8 = null;
        jSONWriter1.writeDouble((double) '#', decimalFormat8);
        jSONWriter1.writeFloat((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = null;
        context15.setLabelFilter(labelFilter24);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter26 = context15.getPropertyPreFilter();
        boolean boolean27 = context15.isDateFormatHasDay();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(propertyPreFilter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj12 = null;
        jSONWriter1.startArray(obj12, (-1));
        jSONWriter1.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        jSONWriter1.writeTypeName("hi!");
        jSONWriter1.writeSymbol("[52]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        java.time.LocalDate localDate14 = null;
        jSONWriter3.writeLocalDate(localDate14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        boolean boolean17 = jSONWriter3.isUTF8();
        jSONWriter3.close();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        long long24 = context22.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context22.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context22.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter28 = null;
        context22.setPropertyPreFilter(propertyPreFilter28);
        com.alibaba.fastjson2.filter.NameFilter nameFilter30 = null;
        context22.setNameFilter(nameFilter30);
        java.time.format.DateTimeFormatter dateTimeFormatter32 = context22.getDateFormatter();
        jSONWriter6.setRootObject((java.lang.Object) context22);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter34 = context22.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        com.alibaba.fastjson2.JSONWriter.Context context43 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray40);
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context43.config(feature44, true);
        boolean boolean47 = context22.isEnabled(feature44);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(afterFilter34);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = null;
        context6.setPropertyPreFilter(propertyPreFilter7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) feature12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray14);
        context6.config(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray14);
        java.math.BigInteger bigInteger20 = null;
        jSONWriter19.writeBigInt(bigInteger20, (long) (byte) 100);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter19);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter.Context context8 = jSONWriter1.getContext();
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter1.getContext();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter10 = context9.getValueFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(context8);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertNull(valueFilter10);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        jSONWriter1.writeFloat(1.0f);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = jSONWriter1.flushTo(outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        context15.setDateFormat("hi!");
        java.time.ZoneId zoneId19 = null;
        context15.setZoneId(zoneId19);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        boolean boolean23 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable24);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str1 = path0.toString();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        jSONWriter3.writeSymbol((-1));
        jSONWriter3.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        com.alibaba.fastjson2.JSONObject jSONObject15 = null;
        jSONWriter3.write(jSONObject15);
        boolean boolean17 = path0.equals((java.lang.Object) jSONWriter3);
        boolean boolean18 = jSONWriter3.isUTF8();
        jSONWriter3.writeDateYYYMMDD8(100, (int) (byte) -1, (int) (short) -1);
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$" + "'", str1, "$");
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter1.writeDecimal(bigDecimal12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) feature16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean22 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context20, 65536L);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context20);
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        jSONWriter27.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean45 = jSONWriter40.writeTypeName(byteArray43, (long) 10);
        jSONWriter27.writeNameRaw(byteArray43);
        jSONWriter23.writeBinary(byteArray43);
        boolean boolean48 = jSONWriter23.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        jSONWriter1.writeString("");
        long[] longArray16 = new long[] { (short) -1 };
        jSONWriter1.writeInt64(longArray16);
        boolean boolean18 = jSONWriter1.utf8;
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        boolean boolean30 = jSONWriter21.isEnabled((long) ' ');
        boolean boolean31 = jSONWriter21.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray33 = null;
        jSONWriter32.writeDouble(doubleArray33);
        jSONWriter32.writeArrayNull();
        short[] shortArray39 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter32.writeInt16(shortArray39);
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter32.writeFloat((float) (short) 0, decimalFormat42);
        java.lang.Class<?> wildcardClass44 = jSONWriter32.getClass();
        boolean boolean46 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter21, (java.lang.reflect.Type) wildcardClass44, (long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context47 = jSONWriter1.context;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(context47);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context15.setContextValueFilter(contextValueFilter17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = context34.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider36 = context34.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter37 = context34.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray39);
        context34.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        context15.config(featureArray39);
        boolean boolean46 = context15.isDateFormatHasHour();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNull(propertyFilter35);
        org.junit.Assert.assertNotNull(objectWriterProvider36);
        org.junit.Assert.assertNull(afterFilter37);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context22.setPropertyFilter(propertyFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context22.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context22.getProvider();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter28 = context22.getPropertyPreFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNull(propertyPreFilter28);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        jSONWriter1.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        com.alibaba.fastjson2.JSONObject jSONObject13 = null;
        jSONWriter1.write(jSONObject13);
        boolean boolean16 = jSONWriter1.isEnabled((long) 5);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDateTimeISO8601(10, 3, 3, (int) '#', 8, (int) (short) 0, 10, (int) (byte) 100, false);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context("[1][0]", featureArray2);
        com.alibaba.fastjson2.filter.NameFilter nameFilter7 = null;
        context6.setNameFilter(nameFilter7);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path6, 3);
        java.lang.Object obj9 = null;
        boolean boolean10 = path8.equals(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        java.io.Reader reader10 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = jSONWriter12.getSymbolTable();
        boolean boolean35 = jSONWriter12.utf16;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(symbolTable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        byte[] byteArray43 = null;
        jSONWriter33.writeBinary(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter33.writeHex(byteArray51);
        jSONWriter25.writeBinary(byteArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter25.containsReference(obj54);
        jSONWriter25.writeDateTime14((int) '#', (int) (short) 1, 1, (int) (byte) -1, (int) (short) -1, (int) ' ');
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter25.writeFloat((float) 0, decimalFormat64);
        com.alibaba.fastjson2.JSONWriter.Context context66 = jSONWriter25.context;
        java.math.BigDecimal bigDecimal67 = null;
        jSONWriter25.writeDecimal(bigDecimal67);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 1, -1, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(context66);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context27);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = context27.getBeforeFilter();
        java.lang.String str30 = jSONWriter10.setPath(".\\[1\\]\\[0\\]", (java.lang.Object) beforeFilter29);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNull(beforeFilter29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context15.setContextValueFilter(contextValueFilter17);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = contextValueFilter19.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNull(contextValueFilter19);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter21.writeDecimal(bigDecimal24);
        boolean boolean27 = jSONWriter21.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter21.writeArrayNull();
        jSONWriter21.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        boolean boolean40 = jSONWriter31.isEnabled((long) ' ');
        jSONWriter31.writeString("hi!");
        boolean boolean43 = jSONWriter31.isUTF8();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        jSONWriter31.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter21.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList47);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        char[] charArray53 = null;
        jSONWriter52.writeString(charArray53, (int) (byte) 0, 100, true);
        byte[] byteArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter52.writeNameRaw(byteArray58, (int) 'a', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSONWriter52);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.of(context2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        boolean boolean6 = jSONWriter5.isRefDetect();
        java.lang.String str9 = jSONWriter5.setPath("hi!", (java.lang.Object) 1);
        jSONWriter5.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        long long15 = jSONWriter13.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter18.writeDouble(1.0d, decimalFormat22);
        boolean boolean25 = jSONWriter18.removeReference((java.lang.Object) (short) -1);
        jSONWriter18.writeArrayNull();
        long long27 = jSONWriter18.getFeatures();
        java.lang.Class<?> wildcardClass28 = jSONWriter18.getClass();
        boolean boolean30 = jSONWriter13.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass28, (long) (short) 10);
        int[] intArray37 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter13.writeInt32(intArray37);
        double[] doubleArray43 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter13.writeDouble(doubleArray43);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter5.writeDouble(doubleArray43, decimalFormat45);
        jSONWriter3.writeDouble(doubleArray43);
        boolean boolean48 = jSONWriter3.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        int int6 = jSONWriter1.level();
        jSONWriter1.writeDateTime19(100, 0, (int) (short) 1, (int) (byte) 0, 100, (-1));
        boolean boolean14 = jSONWriter1.utf16;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw(' ');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter39 = context38.getPropertyFilter();
        long long40 = context38.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter41 = null;
        context38.setLabelFilter(labelFilter41);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider43 = context38.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter44 = null;
        context38.setPropertyPreFilter(propertyPreFilter44);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        boolean boolean47 = context38.isEnabled(feature46);
        jSONWriter3.writeEnum((java.lang.Enum) feature46);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter65 = context64.getPropertyFilter();
        long long66 = context64.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = null;
        context64.setLabelFilter(labelFilter67);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter69 = context64.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter70 = null;
        context64.setPropertyFilter(propertyFilter70);
        boolean boolean72 = context64.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter73 = context64.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter74 = null;
        context64.setBeforeFilter(beforeFilter74);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter76 = context64.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter77 = context64.getPropertyFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context64);
        boolean boolean79 = jSONWriter3.removeReference((java.lang.Object) jSONWriter78);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNull(propertyFilter39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider43);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertNull(propertyFilter65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNull(contextValueFilter69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(nameFilter73);
        org.junit.Assert.assertNull(propertyPreFilter76);
        org.junit.Assert.assertNull(propertyFilter77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter1.writeDouble((double) 10.0f, decimalFormat24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter1.context;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) feature29);
        jSONWriter28.writeInt16((short) 0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal37 = null;
        jSONWriter34.writeDecimal(bigDecimal37);
        java.lang.Object obj39 = null;
        java.lang.Class class40 = null;
        jSONWriter34.checkAndWriteTypeName(obj39, class40);
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean43 = jSONWriter34.isEnabled(feature42);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = jSONWriter34.symbolTable;
        jSONWriter34.writeInt16((short) (byte) 1);
        jSONWriter34.writeMillis((long) 5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        jSONWriter50.close();
        jSONWriter50.writeSymbol("");
        jSONWriter50.writeBooleanNull();
        jSONWriter50.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        byte[] byteArray66 = new byte[] { (byte) -1 };
        boolean boolean68 = jSONWriter59.writeTypeName(byteArray66, 0L);
        java.util.UUID uUID69 = null;
        jSONWriter59.writeUUID(uUID69);
        com.alibaba.fastjson2.JSONWriter.Context context71 = jSONWriter59.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context71);
        java.time.format.DateTimeFormatter dateTimeFormatter73 = context71.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider74 = context71.getProvider();
        java.lang.String str75 = context71.getDateFormat();
        boolean boolean76 = jSONWriter50.removeReference((java.lang.Object) context71);
        short[] shortArray83 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter50.writeInt16(shortArray83);
        jSONWriter34.writeInt16(shortArray83);
        jSONWriter28.writeInt16(shortArray83);
        jSONWriter1.writeInt16(shortArray83);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(symbolTable44);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(context71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(objectWriterProvider74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray83), "[1, 100, 10, 10, 0, 1]");
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        jSONWriter9.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter9.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal28 = null;
        jSONWriter25.writeDecimal(bigDecimal28);
        boolean boolean31 = jSONWriter25.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter25.writeArrayNull();
        jSONWriter25.writeChar('a');
        jSONWriter25.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter25.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        jSONWriter44.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat51 = null;
        jSONWriter47.writeDouble(1.0d, decimalFormat51);
        boolean boolean54 = jSONWriter47.removeReference((java.lang.Object) (short) -1);
        jSONWriter47.writeArrayNull();
        long long56 = jSONWriter47.getFeatures();
        java.lang.Class<?> wildcardClass57 = jSONWriter47.getClass();
        boolean boolean58 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter44, (java.lang.reflect.Type) wildcardClass57);
        boolean boolean60 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter25, 10L);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter25.writeDateYYYMMDD10(10, 12, 13);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        boolean[] booleanArray6 = new boolean[] { true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        jSONWriter11.close();
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter11.writeFloat((float) 10, decimalFormat14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean22 = jSONWriter17.writeTypeName(byteArray20, (long) 10);
        boolean boolean24 = jSONWriter11.writeTypeName(byteArray20, (long) (byte) 100);
        jSONWriter9.writeNameRaw(byteArray20, 0L);
        jSONWriter1.writeHex(byteArray20);
        jSONWriter1.writeChar(' ');
        jSONWriter1.writeInt32((int) 'a');
        boolean boolean33 = jSONWriter1.hasFilter((long) 4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter35);
        long long37 = jSONWriter35.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat44 = null;
        jSONWriter40.writeDouble(1.0d, decimalFormat44);
        boolean boolean47 = jSONWriter40.removeReference((java.lang.Object) (short) -1);
        jSONWriter40.writeArrayNull();
        long long49 = jSONWriter40.getFeatures();
        java.lang.Class<?> wildcardClass50 = jSONWriter40.getClass();
        boolean boolean52 = jSONWriter35.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass50, (long) (short) 10);
        int[] intArray59 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter35.writeInt32(intArray59);
        jSONWriter35.writeRaw((byte) 0);
        jSONWriter35.endArray();
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray65 = null;
        jSONWriter64.writeDouble(doubleArray65);
        boolean boolean67 = jSONWriter64.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable68 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable68);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        boolean boolean73 = jSONWriter71.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class74 = null;
        boolean boolean76 = jSONWriter69.isWriteTypeInfo((java.lang.Object) jSONWriter71, class74, (long) ' ');
        byte[] byteArray78 = new byte[] { (byte) -1 };
        boolean boolean80 = jSONWriter71.writeTypeName(byteArray78, 0L);
        byte[] byteArray81 = null;
        jSONWriter71.writeBinary(byteArray81);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter71.writeHex(byteArray89);
        jSONWriter64.writeNameRaw(byteArray89);
        jSONWriter35.writeNameRaw(byteArray89, (long) (-1));
        jSONWriter1.writeStringLatin1(byteArray89);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 100, 1, -1, 1, -1]");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        jSONWriter1.writeStringNull();
        java.io.Reader reader10 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        java.util.Map map23 = null;
        jSONWriter0.write(map23);
        jSONWriter0.writeRaw((byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) 100 };
        boolean boolean39 = jSONWriter28.writeTypeName(byteArray37, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        int[] intArray45 = new int[] { (short) -1 };
        jSONWriter43.writeInt32(intArray45);
        java.lang.String str47 = jSONWriter28.setPath("hi!", (java.lang.Object) intArray45);
        jSONWriter0.writeInt32(intArray45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        boolean boolean52 = jSONWriter50.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal53 = null;
        jSONWriter50.writeDecimal(bigDecimal53);
        boolean boolean56 = jSONWriter50.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter50.writeArrayNull();
        jSONWriter50.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable59 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class65 = null;
        boolean boolean67 = jSONWriter60.isWriteTypeInfo((java.lang.Object) jSONWriter62, class65, (long) ' ');
        boolean boolean69 = jSONWriter60.isEnabled((long) ' ');
        jSONWriter60.writeString("hi!");
        boolean boolean72 = jSONWriter60.isUTF8();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        jSONWriter60.writeString((java.util.List<java.lang.String>) strList76);
        jSONWriter50.writeString((java.util.List<java.lang.String>) strList76);
        jSONWriter0.write((java.util.List) strList76);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1]");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        jSONWriter1.writeInt16((short) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.symbolTable;
        jSONWriter1.writeName("$");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable6);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        jSONWriter24.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context53.config(feature54, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) feature59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature59 };
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray61);
        context53.config(featureArray61);
        jSONWriter24.config(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context66 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context71 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context72 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.of(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.of(featureArray68);
        com.alibaba.fastjson2.SymbolTable symbolTable75 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable75);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray77 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray77);
        boolean boolean80 = jSONWriter78.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class81 = null;
        boolean boolean83 = jSONWriter76.isWriteTypeInfo((java.lang.Object) jSONWriter78, class81, (long) ' ');
        byte[] byteArray85 = new byte[] { (byte) -1 };
        boolean boolean87 = jSONWriter78.writeTypeName(byteArray85, 0L);
        byte[] byteArray88 = null;
        jSONWriter78.writeBinary(byteArray88);
        byte[] byteArray96 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter78.writeHex(byteArray96);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter74.writeNameRaw(byteArray96);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(featureArray77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[1, 100, 1, -1, 1, -1]");
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.of(context4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        boolean boolean14 = jSONWriter7.removeReference((java.lang.Object) (short) -1);
        jSONWriter7.writeArrayNull();
        jSONWriter7.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = null;
        jSONWriter18.writeDouble(doubleArray19);
        jSONWriter18.writeArrayNull();
        short[] shortArray25 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter18.writeInt16(shortArray25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal31 = null;
        jSONWriter28.writeDecimal(bigDecimal31);
        boolean boolean34 = jSONWriter28.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter28.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        char[] charArray43 = new char[] { '#', ' ' };
        jSONWriter40.writeString(charArray43, (int) (byte) 0, (int) (short) 1);
        jSONWriter28.writeString(charArray43);
        jSONWriter18.writeString(charArray43);
        jSONWriter7.writeString(charArray43);
        jSONWriter5.writeString(charArray43);
        jSONWriter5.writeInt32(12);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#,  ]");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        char[] charArray21 = new char[] {};
        jSONWriter15.writeString(charArray21);
        jSONWriter1.writeString(charArray21, (int) (byte) -1, 0, true);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter1.getContext();
        boolean boolean28 = context27.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter3.writeHex(byteArray21);
        jSONWriter3.writeInt16((short) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 1, -1, 1, -1]");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        java.io.Reader reader22 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter21.writeString(reader22);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter21);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.of(featureArray40);
        java.time.ZonedDateTime zonedDateTime46 = null;
        jSONWriter45.writeZonedDateTime(zonedDateTime46);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter45.writeRaw((byte) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter45);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeMillis((long) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        boolean boolean19 = jSONWriter18.jsonb;
        boolean boolean20 = jSONWriter18.hasFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray22 = null;
        jSONWriter21.writeDouble(doubleArray22);
        boolean boolean24 = jSONWriter21.utf16;
        java.math.BigDecimal bigDecimal25 = null;
        jSONWriter21.writeDecimal(bigDecimal25, 100L);
        boolean boolean28 = jSONWriter21.utf16;
        boolean boolean30 = jSONWriter21.isEnabled((long) '4');
        boolean boolean31 = jSONWriter21.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) feature34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34 };
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray36);
        com.alibaba.fastjson2.SymbolTable symbolTable39 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class45 = null;
        boolean boolean47 = jSONWriter40.isWriteTypeInfo((java.lang.Object) jSONWriter42, class45, (long) ' ');
        byte[] byteArray49 = new byte[] { (byte) -1 };
        boolean boolean51 = jSONWriter42.writeTypeName(byteArray49, 0L);
        java.util.UUID uUID52 = null;
        jSONWriter42.writeUUID(uUID52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = jSONWriter42.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter55 = context54.getPropertyFilter();
        long long56 = context54.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter57 = null;
        context54.setLabelFilter(labelFilter57);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider59 = context54.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter60 = null;
        context54.setPropertyPreFilter(propertyPreFilter60);
        com.alibaba.fastjson2.filter.NameFilter nameFilter62 = null;
        context54.setNameFilter(nameFilter62);
        java.time.format.DateTimeFormatter dateTimeFormatter64 = context54.getDateFormatter();
        jSONWriter38.setRootObject((java.lang.Object) context54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        boolean boolean69 = jSONWriter67.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat71 = null;
        jSONWriter67.writeDouble(1.0d, decimalFormat71);
        boolean boolean74 = jSONWriter67.removeReference((java.lang.Object) (short) -1);
        jSONWriter67.writeArrayNull();
        long long76 = jSONWriter67.getFeatures();
        java.lang.Class<?> wildcardClass77 = jSONWriter67.getClass();
        boolean boolean79 = jSONWriter21.isWriteTypeInfo((java.lang.Object) context54, (java.lang.Class) wildcardClass77, 65536L);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter80 = jSONWriter18.getObjectWriter((java.lang.Class) wildcardClass77);
        java.text.DecimalFormat decimalFormat82 = null;
        jSONWriter18.writeDouble(1.0d, decimalFormat82);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(context54);
        org.junit.Assert.assertNull(propertyFilter55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider59);
        org.junit.Assert.assertNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objectWriter80);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider23 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) feature26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider23, featureArray28);
        jSONWriter31.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter5.writeDecimal(bigDecimal8);
        long long11 = jSONWriter5.getFeatures((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = null;
        jSONWriter5.writeZonedDateTime(zonedDateTime12);
        jSONWriter5.writeInt32((int) (byte) -1);
        jSONWriter1.writeAny((java.lang.Object) (byte) -1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.ZonedDateTime zonedDateTime4 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime4);
        java.time.LocalDateTime localDateTime6 = null;
        jSONWriter3.writeLocalDateTime(localDateTime6);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.of(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider28, featureArray29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray36);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28, featureArray36);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider41 = context40.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider41);
        boolean boolean43 = jSONWriter3.removeReference((java.lang.Object) objectWriterProvider41);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(objectWriterProvider41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Context context18 = jSONWriter1.getContext();
        boolean boolean20 = context18.isEnabled((long) (short) 100);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter21 = null;
        context18.setLabelFilter(labelFilter21);
        java.time.ZoneId zoneId23 = context18.getZoneId();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context18);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(context18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(jSONWriter24);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean34 = jSONWriter29.writeTypeName(byteArray32, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        int[] intArray60 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter36.writeInt32(intArray60);
        jSONWriter29.writeInt32(intArray60);
        java.lang.Class class63 = null;
        jSONWriter14.checkAndWriteTypeName((java.lang.Object) jSONWriter29, class63);
        java.io.Reader reader65 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter14.writeString(reader65);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        jSONWriter1.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal16 = null;
        jSONWriter13.writeDecimal(bigDecimal16);
        boolean boolean19 = jSONWriter13.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter13.writeArrayNull();
        jSONWriter13.writeChar('a');
        jSONWriter13.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter13.getContext();
        boolean boolean32 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context30, 4L);
        boolean boolean33 = jSONWriter1.utf16;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        jSONWriter5.writeDateTime19(4, (int) (short) 0, (int) (short) -1, (int) 'a', (int) '#', (int) (byte) 100);
        boolean[] booleanArray17 = new boolean[] { true, false, true, true };
        jSONWriter5.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = jSONWriter5.getSymbolTable();
        jSONWriter5.writeArrayNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, false, true, true]");
        org.junit.Assert.assertNull(symbolTable19);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray1);
        boolean boolean5 = context4.isDateFormatISO8601();
        boolean boolean6 = context4.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter7 = null;
        context4.setNameFilter(nameFilter7);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        jSONWriter9.writeEnum((java.lang.Enum) feature16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray25 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter18.writeRaw(charArray25);
        jSONWriter9.writeString(charArray25, (int) (short) 10, (int) (short) -1, true);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        jSONWriter34.close();
        java.text.DecimalFormat decimalFormat37 = null;
        jSONWriter34.writeFloat((float) 10, decimalFormat37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean45 = jSONWriter40.writeTypeName(byteArray43, (long) 10);
        boolean boolean47 = jSONWriter34.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter32.writeNameRaw(byteArray43, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        char[] charArray54 = new char[] { '#', ' ' };
        jSONWriter51.writeString(charArray54, (int) (byte) 0, (int) (short) 1);
        jSONWriter32.writeString(charArray54);
        boolean boolean59 = jSONWriter9.isIgnoreNoneSerializable((java.lang.Object) jSONWriter32);
        long long61 = jSONWriter32.getFeatures((long) (short) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, 4, #, 4, 4, a]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#,  ]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        jSONWriter1.writeName("hi!");
        java.time.LocalTime localTime10 = null;
        jSONWriter1.writeLocalTime(localTime10);
        java.util.UUID uUID12 = null;
        jSONWriter1.writeUUID(uUID12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray15 = null;
        jSONWriter14.writeDouble(doubleArray15);
        boolean boolean17 = jSONWriter14.utf16;
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter14.writeDecimal(bigDecimal18, 100L);
        boolean boolean21 = jSONWriter14.utf16;
        java.lang.Object obj22 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter24.writeDouble(1.0d, decimalFormat28);
        boolean boolean31 = jSONWriter24.removeReference((java.lang.Object) (short) -1);
        jSONWriter24.writeArrayNull();
        long long33 = jSONWriter24.getFeatures();
        java.lang.Class<?> wildcardClass34 = jSONWriter24.getClass();
        boolean boolean36 = jSONWriter14.isWriteTypeInfo(obj22, (java.lang.Class) wildcardClass34, (long) (short) 0);
        jSONWriter14.writeStringNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter52.writeDouble(1.0d, decimalFormat56);
        boolean boolean59 = jSONWriter52.removeReference((java.lang.Object) (short) -1);
        jSONWriter52.writeArrayNull();
        long long61 = jSONWriter52.getFeatures();
        java.lang.Class<?> wildcardClass62 = jSONWriter52.getClass();
        boolean boolean64 = jSONWriter39.isWriteTypeInfo((java.lang.Object) boolean50, (java.lang.reflect.Type) wildcardClass62, 0L);
        jSONWriter39.writeStringNull();
        int int66 = jSONWriter39.level();
        jSONWriter39.writeStringNull();
        jSONWriter39.writeInt8((byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        java.time.LocalTime localTime72 = null;
        jSONWriter71.writeLocalTime(localTime72);
        com.alibaba.fastjson2.SymbolTable symbolTable74 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable74);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        boolean boolean79 = jSONWriter77.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class80 = null;
        boolean boolean82 = jSONWriter75.isWriteTypeInfo((java.lang.Object) jSONWriter77, class80, (long) ' ');
        byte[] byteArray84 = new byte[] { (byte) -1 };
        boolean boolean86 = jSONWriter77.writeTypeName(byteArray84, 0L);
        jSONWriter71.writeBinary(byteArray84);
        jSONWriter39.writeNameRaw(byteArray84, 0L);
        jSONWriter14.writeHex(byteArray84);
        jSONWriter1.writeNameRaw(byteArray84, (long) (short) 10);
        int int93 = jSONWriter1.level();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        java.lang.String str23 = context21.getDateFormat();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        jSONWriter25.close();
        jSONWriter25.writeSymbol("");
        jSONWriter25.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter25.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter31 = null;
        context30.setPropertyPreFilter(propertyPreFilter31);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context30, symbolTable33);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter35 = null;
        context30.setLabelFilter(labelFilter35);
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) -1 };
        boolean boolean49 = jSONWriter40.writeTypeName(byteArray47, 0L);
        java.util.UUID uUID50 = null;
        jSONWriter40.writeUUID(uUID50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter40.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter53 = context52.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider54 = context52.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter55 = context52.getAfterFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        char[] charArray65 = new char[] {};
        jSONWriter59.writeString(charArray65);
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue;
        boolean boolean68 = jSONWriter59.isEnabled(feature67);
        context52.config(feature67, false);
        boolean boolean71 = context30.isEnabled(feature67);
        context21.config(feature67, true);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter74 = context21.getContextValueFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter75 = context21.getNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertNull(propertyFilter53);
        org.junit.Assert.assertNotNull(objectWriterProvider54);
        org.junit.Assert.assertNull(afterFilter55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[]");
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(contextValueFilter74);
        org.junit.Assert.assertNull(nameFilter75);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        boolean[] booleanArray15 = new boolean[] { false, true, true, true };
        jSONWriter10.writeBool(booleanArray15);
        jSONWriter10.writeMillis((long) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter36 = context35.getPropertyFilter();
        long long37 = context35.getFeatures();
        long long38 = context35.getFeatures();
        boolean boolean39 = context35.isDateFormatHasHour();
        java.time.ZoneId zoneId40 = context35.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter41 = context35.getBeforeFilter();
        boolean boolean42 = context35.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context35);
        java.lang.String str44 = jSONWriter10.setPath("[1][0]", (java.lang.Object) context35);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        java.util.UUID uUID58 = null;
        jSONWriter48.writeUUID(uUID58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = jSONWriter48.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter61 = context60.getPropertyFilter();
        long long62 = context60.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter63 = null;
        context60.setLabelFilter(labelFilter63);
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context60, symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Context context67 = jSONWriter66.context;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context67);
        boolean boolean69 = jSONWriter68.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        boolean boolean75 = jSONWriter73.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class76 = null;
        boolean boolean78 = jSONWriter71.isWriteTypeInfo((java.lang.Object) jSONWriter73, class76, (long) ' ');
        char[] charArray79 = new char[] {};
        jSONWriter73.writeString(charArray79);
        jSONWriter68.writeString(charArray79, (int) (short) 0, 0);
        jSONWriter10.writeString(charArray79);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(charArray79, 1, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNull(propertyFilter36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneId40);
        org.junit.Assert.assertNull(beforeFilter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(context60);
        org.junit.Assert.assertNull(propertyFilter61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(context67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[]");
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.NameFilter nameFilter17 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(nameFilter17);
        org.junit.Assert.assertNull(afterFilter18);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.LargeObject;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5 };
        jSONWriter1.config(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.LargeObject + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.LargeObject));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean1 = jSONWriter0.useSingleQuote;
        jSONWriter0.writeRaw(' ');
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        boolean boolean6 = jSONWriter5.isRefDetect();
        java.lang.String str9 = jSONWriter5.setPath("hi!", (java.lang.Object) 1);
        jSONWriter5.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        long long15 = jSONWriter13.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter18.writeDouble(1.0d, decimalFormat22);
        boolean boolean25 = jSONWriter18.removeReference((java.lang.Object) (short) -1);
        jSONWriter18.writeArrayNull();
        long long27 = jSONWriter18.getFeatures();
        java.lang.Class<?> wildcardClass28 = jSONWriter18.getClass();
        boolean boolean30 = jSONWriter13.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass28, (long) (short) 10);
        int[] intArray37 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter13.writeInt32(intArray37);
        double[] doubleArray43 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter13.writeDouble(doubleArray43);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter5.writeDouble(doubleArray43, decimalFormat45);
        jSONWriter0.writeDouble(doubleArray43);
        boolean boolean48 = jSONWriter0.isUTF16();
        jSONWriter0.writeComma();
        jSONWriter0.writeDoubleArray((double) 5L, (double) (byte) 100);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter8.context;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        boolean boolean13 = jSONWriter11.utf16;
        long long15 = jSONWriter11.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable16 = jSONWriter11.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        boolean boolean27 = jSONWriter18.isEnabled((long) ' ');
        jSONWriter18.writeString("hi!");
        char[] charArray30 = new char[] {};
        jSONWriter18.writeString(charArray30);
        jSONWriter11.writeString(charArray30);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter8.writeRaw(charArray30, 2, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNull(symbolTable16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[]");
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean34 = jSONWriter29.writeTypeName(byteArray32, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        int[] intArray60 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter36.writeInt32(intArray60);
        jSONWriter29.writeInt32(intArray60);
        java.lang.Class class63 = null;
        jSONWriter14.checkAndWriteTypeName((java.lang.Object) jSONWriter29, class63);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter29.writeName((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean24 = context15.isEnabled((long) 'a');
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = context15.getLabelFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(context15);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter27 = null;
        context15.setLabelFilter(labelFilter27);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(labelFilter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        jSONWriter1.writeStringNull();
        boolean boolean29 = jSONWriter1.isUTF8();
        boolean boolean30 = jSONWriter1.isUTF8();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        java.time.Instant instant9 = null;
        jSONWriter1.writeInstant(instant9);
        java.time.LocalTime localTime11 = null;
        jSONWriter1.writeLocalTime(localTime11);
        jSONWriter1.writeFloat((java.lang.Float) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('#', 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path10 = path9.parent;
        com.alibaba.fastjson2.JSONWriter.Path path11 = path10.parent;
        com.alibaba.fastjson2.JSONWriter.Path path12 = path11.parent;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter6.writeDouble(1.0d, decimalFormat10);
        boolean boolean13 = jSONWriter6.removeReference((java.lang.Object) (short) -1);
        jSONWriter6.writeArrayNull();
        long long15 = jSONWriter6.getFeatures();
        java.lang.Class<?> wildcardClass16 = jSONWriter6.getClass();
        boolean boolean18 = jSONWriter1.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass16, (long) (short) 10);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter1.writeDouble((double) 0.0f, decimalFormat20);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray40);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter46 = null;
        context45.setContextValueFilter(contextValueFilter46);
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero;
        context45.config(feature48, false);
        java.lang.String str51 = context45.getDateFormat();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero));
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter1.writeFloat((float) (-1), decimalFormat16);
        jSONWriter1.writeInt16((short) (byte) -1);
        boolean boolean20 = jSONWriter1.isRefDetect();
        com.alibaba.fastjson2.SymbolTable symbolTable21 = jSONWriter1.symbolTable;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(symbolTable21);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        boolean boolean4 = jSONWriter1.isUseSingleQuotes();
        long long5 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.symbolTable;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(symbolTable6);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter1.writeDouble((double) 10.0f, decimalFormat24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter27 = context26.getBeforeFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        boolean boolean30 = jSONWriter29.isRefDetect();
        java.lang.String str33 = jSONWriter29.setPath("hi!", (java.lang.Object) 1);
        boolean boolean34 = jSONWriter29.isUTF8();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat40 = null;
        jSONWriter36.writeDouble(1.0d, decimalFormat40);
        boolean boolean43 = jSONWriter36.removeReference((java.lang.Object) (short) -1);
        jSONWriter36.writeArrayNull();
        jSONWriter36.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        java.lang.String str49 = jSONWriter36.setPath("hi!", (java.lang.Object) feature48);
        jSONWriter29.writeEnum((java.lang.Enum) feature48);
        context26.config(feature48, true);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(beforeFilter27);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path9, (int) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        jSONWriter16.writeSymbol((-1));
        java.lang.String str21 = jSONWriter13.setPath("", (java.lang.Object) jSONWriter16);
        jSONWriter16.close();
        boolean boolean23 = path11.equals((java.lang.Object) jSONWriter16);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        boolean boolean4 = jSONWriter0.jsonb;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = context26.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context26.getProvider();
        boolean boolean30 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context26);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26, symbolTable31);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context26.provider;
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider33);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter35 = null;
        context34.setContextValueFilter(contextValueFilter35);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        com.alibaba.fastjson2.SymbolTable symbolTable16 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class22 = null;
        boolean boolean24 = jSONWriter17.isWriteTypeInfo((java.lang.Object) jSONWriter19, class22, (long) ' ');
        byte[] byteArray26 = new byte[] { (byte) 100 };
        boolean boolean28 = jSONWriter17.writeTypeName(byteArray26, (long) (-1));
        jSONWriter9.writeNameRaw(byteArray26, (long) (short) 100);
        com.alibaba.fastjson2.JSONObject jSONObject31 = null;
        jSONWriter9.write(jSONObject31);
        int int33 = jSONWriter9.level();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        short[] shortArray34 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt16(shortArray34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        int int42 = jSONWriter41.size();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter44);
        long long46 = jSONWriter44.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter49.writeDouble(1.0d, decimalFormat53);
        boolean boolean56 = jSONWriter49.removeReference((java.lang.Object) (short) -1);
        jSONWriter49.writeArrayNull();
        long long58 = jSONWriter49.getFeatures();
        java.lang.Class<?> wildcardClass59 = jSONWriter49.getClass();
        boolean boolean61 = jSONWriter44.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass59, (long) (short) 10);
        jSONWriter1.checkAndWriteTypeName((java.lang.Object) jSONWriter41, (java.lang.Class) wildcardClass59);
        java.math.BigInteger bigInteger63 = null;
        jSONWriter41.writeBigInt(bigInteger63, (long) 10);
        jSONWriter41.writeMillis((long) 13);
        java.math.BigDecimal bigDecimal68 = null;
        jSONWriter41.writeDecimal(bigDecimal68);
        long long70 = jSONWriter41.getFeatures();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 137438953472L + "'", long70 == 137438953472L);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = null;
        context15.setContextValueFilter(contextValueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        jSONWriter8.close();
        jSONWriter8.writeSymbol("");
        jSONWriter8.writeBooleanNull();
        jSONWriter8.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) -1 };
        boolean boolean26 = jSONWriter17.writeTypeName(byteArray24, 0L);
        java.util.UUID uUID27 = null;
        jSONWriter17.writeUUID(uUID27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter17.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context29);
        java.time.format.DateTimeFormatter dateTimeFormatter31 = context29.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider32 = context29.getProvider();
        java.lang.String str33 = context29.getDateFormat();
        boolean boolean34 = jSONWriter8.removeReference((java.lang.Object) context29);
        jSONWriter8.writeStringNull();
        int int36 = jSONWriter8.level();
        java.lang.Class class37 = null;
        boolean boolean38 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter8, class37);
        jSONWriter1.writeReference(".\\[1\\]\\.hi\\\\\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(objectWriterProvider32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        java.nio.charset.Charset charset4 = jSONWriter1.getCharset();
        boolean boolean5 = jSONWriter1.isWriteNulls();
        jSONWriter1.writeBooleanNull();
        jSONWriter1.writeDouble((double) '#');
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        jSONWriter23.writeSymbol("");
        jSONWriter23.writeBooleanNull();
        jSONWriter23.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context44);
        java.time.format.DateTimeFormatter dateTimeFormatter46 = context44.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider47 = context44.getProvider();
        java.lang.String str48 = context44.getDateFormat();
        boolean boolean49 = jSONWriter23.removeReference((java.lang.Object) context44);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter50 = context44.getLabelFilter();
        java.time.ZoneId zoneId51 = context44.getZoneId();
        context15.setZoneId(zoneId51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter54 = null;
        context15.setAfterFilter(afterFilter54);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(objectWriterProvider47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(labelFilter50);
        org.junit.Assert.assertNotNull(zoneId51);
        org.junit.Assert.assertNotNull(jSONWriter53);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter18 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter19 = context15.getLabelFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context35.config(feature36, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) feature41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41 };
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray43);
        context35.config(featureArray43);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter47 = context35.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter48 = null;
        context35.setContextNameFilter(contextNameFilter48);
        context35.setDateFormat("[1].hi\\![35]");
        boolean boolean52 = context35.isDateFormatHasDay();
        java.time.ZoneId zoneId53 = context35.getZoneId();
        context15.setZoneId(zoneId53);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNull(valueFilter18);
        org.junit.Assert.assertNull(labelFilter19);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNull(contextValueFilter47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneId53);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context15.setBeforeFilter(beforeFilter29);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter31 = null;
        context15.setContextValueFilter(contextValueFilter31);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeName("[1].hi\\!");
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        byte[] byteArray18 = jSONWriter3.getBytes();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-110, 0, 81, 91, 49, 93, 46, 104, 105, 92, 33, -67, 1]");
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        jSONWriter1.writeFloat((java.lang.Float) (-1.0f));
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        boolean boolean14 = jSONWriter13.isRefDetect();
        java.lang.String str17 = jSONWriter13.setPath("hi!", (java.lang.Object) 1);
        boolean boolean18 = jSONWriter13.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        boolean boolean21 = jSONWriter20.isRefDetect();
        java.lang.String str24 = jSONWriter20.setPath("hi!", (java.lang.Object) 1);
        jSONWriter20.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter28);
        long long30 = jSONWriter28.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat37 = null;
        jSONWriter33.writeDouble(1.0d, decimalFormat37);
        boolean boolean40 = jSONWriter33.removeReference((java.lang.Object) (short) -1);
        jSONWriter33.writeArrayNull();
        long long42 = jSONWriter33.getFeatures();
        java.lang.Class<?> wildcardClass43 = jSONWriter33.getClass();
        boolean boolean45 = jSONWriter28.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass43, (long) (short) 10);
        int[] intArray52 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter28.writeInt32(intArray52);
        double[] doubleArray58 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter28.writeDouble(doubleArray58);
        java.text.DecimalFormat decimalFormat60 = null;
        jSONWriter20.writeDouble(doubleArray58, decimalFormat60);
        jSONWriter13.writeDouble(doubleArray58);
        java.text.DecimalFormat decimalFormat63 = null;
        jSONWriter1.writeDouble(doubleArray58, decimalFormat63);
        jSONWriter1.writeBool(false);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        long long13 = jSONWriter1.getFeatures((long) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) -1 };
        boolean boolean26 = jSONWriter17.writeTypeName(byteArray24, 0L);
        java.util.UUID uUID27 = null;
        jSONWriter17.writeUUID(uUID27);
        jSONWriter17.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        java.util.UUID uUID44 = null;
        jSONWriter34.writeUUID(uUID44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = jSONWriter34.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context46.config(feature47, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) feature52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature52 };
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray54);
        context46.config(featureArray54);
        jSONWriter17.config(featureArray54);
        boolean boolean59 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        int[] intArray64 = new int[] { (short) -1 };
        jSONWriter62.writeInt32(intArray64);
        boolean boolean66 = jSONWriter62.jsonb;
        jSONWriter62.writeStringNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameAny((java.lang.Object) jSONWriter62);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(context46);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path7 = path2.parent;
        java.lang.Object obj8 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = path7.equals(obj8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path7);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.math.BigDecimal bigDecimal16 = null;
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter3.writeDecimal(bigDecimal16, (long) (byte) -1, decimalFormat18);
        java.math.BigDecimal bigDecimal20 = null;
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter3.writeDecimal(bigDecimal20, (long) (-1), decimalFormat22);
        com.alibaba.fastjson2.JSONWriter.Path path24 = null;
        com.alibaba.fastjson2.JSONWriter.Path path26 = new com.alibaba.fastjson2.JSONWriter.Path(path24, "");
        com.alibaba.fastjson2.JSONWriter.Path path28 = new com.alibaba.fastjson2.JSONWriter.Path(path26, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path28, "hi!");
        java.lang.String str31 = path30.toString();
        com.alibaba.fastjson2.JSONWriter.Path path33 = new com.alibaba.fastjson2.JSONWriter.Path(path30, (int) '#');
        java.lang.Object obj34 = null;
        boolean boolean35 = path33.equals(obj34);
        jSONWriter3.writeAny(obj34);
        jSONWriter3.writeDouble((double) '4');
        com.alibaba.fastjson2.SymbolTable symbolTable39 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class45 = null;
        boolean boolean47 = jSONWriter40.isWriteTypeInfo((java.lang.Object) jSONWriter42, class45, (long) ' ');
        byte[] byteArray49 = new byte[] { (byte) -1 };
        boolean boolean51 = jSONWriter42.writeTypeName(byteArray49, 0L);
        java.util.UUID uUID52 = null;
        jSONWriter42.writeUUID(uUID52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = jSONWriter42.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context54);
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context54, symbolTable56);
        com.alibaba.fastjson2.SymbolTable symbolTable58 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        boolean boolean63 = jSONWriter61.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class64 = null;
        boolean boolean66 = jSONWriter59.isWriteTypeInfo((java.lang.Object) jSONWriter61, class64, (long) ' ');
        byte[] byteArray68 = new byte[] { (byte) -1 };
        boolean boolean70 = jSONWriter61.writeTypeName(byteArray68, 0L);
        java.util.UUID uUID71 = null;
        jSONWriter61.writeUUID(uUID71);
        com.alibaba.fastjson2.JSONWriter.Context context73 = jSONWriter61.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context73);
        java.time.format.DateTimeFormatter dateTimeFormatter75 = context73.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider76 = context73.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray77 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray77);
        com.alibaba.fastjson2.JSONWriter.Feature feature79 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean80 = jSONWriter78.isRefDetect((java.lang.Object) feature79);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray81 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature79 };
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray81);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider76, featureArray81);
        context54.config(featureArray81);
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray81);
        com.alibaba.fastjson2.JSONWriter jSONWriter86 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray81);
        boolean boolean87 = jSONWriter3.isWriteTypeInfo((java.lang.Object) featureArray81);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1].hi\\!" + "'", str31, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(context54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(context73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(objectWriterProvider76);
        org.junit.Assert.assertNotNull(featureArray77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + feature79 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature79.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(featureArray81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNotNull(jSONWriter86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context26.setLabelFilter(labelFilter29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context26.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        jSONWriter32.config(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray37);
        boolean boolean42 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter41);
        jSONWriter41.writeTimeHHMMSS8((int) (byte) -1, (-1), (int) (short) 10);
        jSONWriter41.writeDateTime14((int) (byte) 1, (int) (byte) 0, (int) (byte) -1, (int) (short) -1, 100, 4);
        boolean boolean54 = jSONWriter41.utf8;
        jSONWriter41.startObject();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        boolean boolean4 = jSONWriter1.hasFilter();
        int int5 = jSONWriter1.level();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray0);
        jSONWriter3.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray13 = null;
        jSONWriter10.writeHex(byteArray13);
        boolean boolean15 = jSONWriter10.isRefDetect();
        jSONWriter10.writeNumberNull();
        jSONWriter10.writeFloat((java.lang.Float) 0.0f);
        java.time.LocalDateTime localDateTime19 = null;
        jSONWriter10.writeLocalDateTime(localDateTime19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        boolean boolean42 = jSONWriter35.removeReference((java.lang.Object) (short) -1);
        jSONWriter35.writeArrayNull();
        long long44 = jSONWriter35.getFeatures();
        java.lang.Class<?> wildcardClass45 = jSONWriter35.getClass();
        boolean boolean47 = jSONWriter22.isWriteTypeInfo((java.lang.Object) boolean33, (java.lang.reflect.Type) wildcardClass45, 0L);
        jSONWriter6.checkAndWriteTypeName((java.lang.Object) localDateTime19, (java.lang.Class) wildcardClass45);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter49 = jSONWriter3.getObjectWriter((java.lang.Class) wildcardClass45);
        jSONWriter3.writeDouble((double) 5);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objectWriter49);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.close();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean18 = jSONWriter17.isUseSingleQuotes();
        java.lang.String str19 = jSONWriter3.setPath("[1][0]", (java.lang.Object) jSONWriter17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter34.writeDouble(1.0d, decimalFormat38);
        boolean boolean41 = jSONWriter34.removeReference((java.lang.Object) (short) -1);
        jSONWriter34.writeArrayNull();
        long long43 = jSONWriter34.getFeatures();
        java.lang.Class<?> wildcardClass44 = jSONWriter34.getClass();
        boolean boolean46 = jSONWriter21.isWriteTypeInfo((java.lang.Object) boolean32, (java.lang.reflect.Type) wildcardClass44, 0L);
        jSONWriter21.writeStringNull();
        int int48 = jSONWriter21.level();
        jSONWriter21.writeStringNull();
        jSONWriter21.writeInt8((byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        java.time.LocalTime localTime54 = null;
        jSONWriter53.writeLocalTime(localTime54);
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        byte[] byteArray66 = new byte[] { (byte) -1 };
        boolean boolean68 = jSONWriter59.writeTypeName(byteArray66, 0L);
        jSONWriter53.writeBinary(byteArray66);
        jSONWriter21.writeRaw(byteArray66);
        jSONWriter3.writeBinary(byteArray66);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        short[] shortArray34 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt16(shortArray34);
        boolean boolean37 = jSONWriter1.isRefDetect((java.lang.Object) (-1.0f));
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray39 = null;
        jSONWriter38.writeDouble(doubleArray39);
        jSONWriter38.writeArrayNull();
        short[] shortArray45 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter38.writeInt16(shortArray45);
        jSONWriter1.writeInt16(shortArray45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter49.writeDouble(1.0d, decimalFormat53);
        java.time.ZonedDateTime zonedDateTime55 = null;
        jSONWriter49.writeZonedDateTime(zonedDateTime55);
        long long58 = jSONWriter49.getFeatures((long) (-1));
        java.lang.reflect.Type type59 = null;
        boolean boolean61 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (-1), type59, (long) (short) 1);
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        jSONWriter65.writeTypeName("");
        boolean boolean68 = jSONWriter65.isUseSingleQuotes();
        jSONWriter65.startObject();
        boolean[] booleanArray76 = new boolean[] { false, true, true, true, true, false };
        jSONWriter65.writeBool(booleanArray76);
        jSONWriter1.writeBool(booleanArray76);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray76), "[false, true, true, true, true, false]");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) feature24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24 };
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        jSONWriter21.config(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean33 = jSONWriter32.isUseSingleQuotes();
        boolean boolean34 = jSONWriter32.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal39 = null;
        jSONWriter36.writeDecimal(bigDecimal39);
        boolean boolean42 = jSONWriter36.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter36.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        char[] charArray51 = new char[] { '#', ' ' };
        jSONWriter48.writeString(charArray51, (int) (byte) 0, (int) (short) 1);
        jSONWriter36.writeString(charArray51);
        jSONWriter32.writeString(charArray51, 1, (int) (short) 0, true);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter31.writeRaw(charArray51, 100, 4);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#,  ]");
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        jSONWriter22.writeBool(false);
        com.alibaba.fastjson2.JSONObject jSONObject25 = null;
        jSONWriter22.write(jSONObject25);
        boolean boolean27 = jSONWriter22.utf16;
        jSONWriter22.writeName((int) (byte) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        java.time.LocalDateTime localDateTime12 = null;
        jSONWriter1.writeLocalDateTime(localDateTime12);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) -1 };
        boolean boolean26 = jSONWriter17.writeTypeName(byteArray24, 0L);
        java.util.UUID uUID27 = null;
        jSONWriter17.writeUUID(uUID27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter17.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter30 = context29.getPropertyFilter();
        long long31 = context29.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter32 = null;
        context29.setLabelFilter(labelFilter32);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context29, symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter35.context;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context36);
        long long39 = jSONWriter37.getFeatures((long) 4);
        boolean boolean40 = jSONWriter1.containsReference((java.lang.Object) 4);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNull(propertyFilter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4L + "'", long39 == 4L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = jSONWriter14.symbolTable;
        jSONWriter14.writeSymbol(13);
        boolean boolean31 = jSONWriter14.hasFilter();
        jSONWriter14.writeSymbol("");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(symbolTable28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context26.setLabelFilter(labelFilter29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context26.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        jSONWriter32.config(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray37);
        boolean boolean42 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter41);
        jSONWriter41.writeTimeHHMMSS8((int) (byte) -1, (-1), (int) (short) 10);
        jSONWriter41.writeDateTime14((int) (byte) 1, (int) (byte) 0, (int) (byte) -1, (int) (short) -1, 100, 4);
        boolean boolean54 = jSONWriter41.utf8;
        java.time.ZonedDateTime zonedDateTime55 = null;
        jSONWriter41.writeZonedDateTime(zonedDateTime55);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        jSONWriter0.writeFloat((java.lang.Float) 1.0f);
        jSONWriter0.writeBool(false);
        jSONWriter0.close();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        int int6 = jSONWriter1.level();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        byte[] byteArray20 = null;
        jSONWriter10.writeBinary(byteArray20);
        jSONWriter10.endObject();
        boolean boolean24 = jSONWriter10.isEnabled((long) (short) 0);
        boolean boolean25 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (short) 0);
        jSONWriter1.writeReference(".\\[1\\]\\.hi\\\\\\!");
        boolean boolean29 = jSONWriter1.hasFilter((long) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) 100 };
        boolean boolean24 = jSONWriter13.writeTypeName(byteArray22, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        int[] intArray30 = new int[] { (short) -1 };
        jSONWriter28.writeInt32(intArray30);
        java.lang.String str32 = jSONWriter13.setPath("hi!", (java.lang.Object) intArray30);
        jSONWriter1.writeInt32(intArray30);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter35.isWriteTypeInfo((java.lang.Object) jSONWriter37, class40, (long) ' ');
        byte[] byteArray44 = new byte[] { (byte) -1 };
        boolean boolean46 = jSONWriter37.writeTypeName(byteArray44, 0L);
        java.util.UUID uUID47 = null;
        jSONWriter37.writeUUID(uUID47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = jSONWriter37.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context49);
        java.time.LocalTime localTime51 = null;
        jSONWriter50.writeLocalTime(localTime51);
        boolean boolean53 = jSONWriter50.isBeanToArray();
        boolean boolean54 = jSONWriter50.isIgnoreNoneSerializable();
        byte[] byteArray55 = jSONWriter50.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty;
        jSONWriter50.config(feature56, false);
        jSONWriter1.writeEnum((java.lang.Enum) feature56);
        jSONWriter1.writeDateTime19((int) '#', 12, 8, 100, (int) (short) 0, 4);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(context49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-81]");
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty));
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        jSONWriter24.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context53.config(feature54, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) feature59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature59 };
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray61);
        context53.config(featureArray61);
        jSONWriter24.config(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context66 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context71 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context72 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context73 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray68);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter74 = context73.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter75 = context73.getBeforeFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNull(propertyPreFilter74);
        org.junit.Assert.assertNull(beforeFilter75);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        java.time.Instant instant18 = null;
        jSONWriter3.writeInstant(instant18);
        boolean boolean20 = jSONWriter3.isIgnoreErrorGetter();
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter24.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter37 = context36.getPropertyFilter();
        long long38 = context36.getFeatures();
        long long39 = context36.getFeatures();
        boolean boolean40 = context36.isDateFormatISO8601();
        boolean boolean41 = context36.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        java.time.LocalTime localTime44 = null;
        jSONWriter43.writeLocalTime(localTime44);
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        jSONWriter43.writeBinary(byteArray56);
        jSONWriter43.writeArrayNull();
        jSONWriter43.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        boolean boolean65 = jSONWriter63.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray66 = null;
        jSONWriter63.writeHex(byteArray66);
        boolean boolean68 = jSONWriter63.isRefDetect();
        jSONWriter63.writeNumberNull();
        jSONWriter63.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean73 = jSONWriter63.isEnabled(feature72);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter75);
        long long77 = jSONWriter75.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        boolean boolean82 = jSONWriter80.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat84 = null;
        jSONWriter80.writeDouble(1.0d, decimalFormat84);
        boolean boolean87 = jSONWriter80.removeReference((java.lang.Object) (short) -1);
        jSONWriter80.writeArrayNull();
        long long89 = jSONWriter80.getFeatures();
        java.lang.Class<?> wildcardClass90 = jSONWriter80.getClass();
        boolean boolean92 = jSONWriter75.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass90, (long) (short) 10);
        boolean boolean94 = jSONWriter43.isWriteMapTypeInfo((java.lang.Object) boolean73, (java.lang.Class) wildcardClass90, (long) '4');
        boolean boolean96 = jSONWriter3.isWriteTypeInfo((java.lang.Object) context36, (java.lang.reflect.Type) wildcardClass90, (long) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertNull(propertyFilter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat9 = null;
        jSONWriter5.writeDouble(1.0d, decimalFormat9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean17 = jSONWriter12.writeTypeName(byteArray15, (long) 10);
        jSONWriter5.writeStringLatin1(byteArray15);
        jSONWriter1.writeStringLatin1(byteArray15);
        int int20 = jSONWriter1.level();
        boolean boolean21 = jSONWriter1.isBeanToArray();
        jSONWriter1.writeArrayNull();
        java.math.BigInteger bigInteger23 = null;
        jSONWriter1.writeBigInt(bigInteger23);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.startArray((int) (short) 1);
        jSONWriter1.endArray();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDateTimeISO8601((int) (short) 0, (int) (short) 10, (int) 'a', (-1), (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 0, false);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        short[] shortArray34 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt16(shortArray34);
        boolean boolean37 = jSONWriter1.isRefDetect((java.lang.Object) (-1.0f));
        jSONWriter1.writeDouble(1.0d);
        java.io.OutputStream outputStream40 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter42.writeDouble(1.0d, decimalFormat46);
        boolean boolean49 = jSONWriter42.removeReference((java.lang.Object) (short) -1);
        jSONWriter42.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable51 = jSONWriter42.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter42.getContext();
        java.nio.charset.Charset charset53 = jSONWriter42.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = jSONWriter1.flushTo(outputStream40, charset53);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(symbolTable51);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertNotNull(charset53);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.util.List list3 = null;
        jSONWriter1.write(list3);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        boolean boolean9 = jSONWriter1.containsReference((java.lang.Object) boolean8);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        java.util.UUID uUID23 = null;
        jSONWriter13.writeUUID(uUID23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter13.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context25);
        java.time.LocalTime localTime27 = null;
        jSONWriter26.writeLocalTime(localTime27);
        boolean boolean29 = jSONWriter26.isBeanToArray();
        boolean boolean30 = jSONWriter26.isIgnoreNoneSerializable();
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) boolean30, class31, 4L);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter35.isWriteTypeInfo((java.lang.Object) jSONWriter37, class40, (long) ' ');
        char[] charArray43 = new char[] {};
        jSONWriter37.writeString(charArray43);
        jSONWriter1.writeString(charArray43, (int) (short) 10, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        jSONWriter49.close();
        jSONWriter49.writeSymbol("");
        jSONWriter49.writeBooleanNull();
        jSONWriter49.endArray();
        boolean boolean55 = jSONWriter49.isRefDetect();
        boolean boolean56 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter49);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter49.writeName((long) 6);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[]");
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }
}

