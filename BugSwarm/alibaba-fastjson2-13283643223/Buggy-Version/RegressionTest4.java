import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        jSONWriter23.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context15.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter30.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider29, featureArray35);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        byte[] byteArray52 = new byte[] { (byte) -1 };
        boolean boolean54 = jSONWriter45.writeTypeName(byteArray52, 0L);
        java.util.UUID uUID55 = null;
        jSONWriter45.writeUUID(uUID55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = jSONWriter45.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter58 = context57.getPropertyFilter();
        long long59 = context57.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter60 = null;
        context57.setLabelFilter(labelFilter60);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider62 = context57.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter63 = null;
        context57.setPropertyPreFilter(propertyPreFilter63);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter65 = null;
        context57.setPropertyPreFilter(propertyPreFilter65);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = null;
        context57.setLabelFilter(labelFilter67);
        jSONWriter41.popPath((java.lang.Object) context57);
        context57.setDateFormat("[1]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(context57);
        org.junit.Assert.assertNull(propertyFilter58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider62);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28);
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        java.util.UUID uUID44 = null;
        jSONWriter34.writeUUID(uUID44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = jSONWriter34.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter47 = context46.getPropertyFilter();
        long long48 = context46.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter49 = null;
        context46.setLabelFilter(labelFilter49);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider51 = context46.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.of(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider51, featureArray52);
        com.alibaba.fastjson2.JSONWriter.Context context58 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28, featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(context46);
        org.junit.Assert.assertNull(propertyFilter47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(jSONWriter57);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        jSONWriter9.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter9.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = null;
        context23.setPropertyFilter(propertyFilter24);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context23);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateTime14((int) (short) 10, (int) (byte) -1, 0, (int) (byte) 100, (int) (short) -1, 5);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter1.writeBigInt(bigInteger14);
        boolean boolean16 = jSONWriter1.utf16;
        java.math.BigInteger bigInteger17 = null;
        jSONWriter1.writeBigInt(bigInteger17, (long) (byte) 100);
        java.util.UUID uUID20 = null;
        jSONWriter1.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray29 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter22.writeRaw(charArray29);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(charArray29, 10, 3, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (short) 1);
        java.lang.String str9 = path2.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        java.util.UUID uUID23 = null;
        jSONWriter13.writeUUID(uUID23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter13.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter26 = context25.getPropertyFilter();
        long long27 = context25.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter28 = null;
        context25.setLabelFilter(labelFilter28);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context25, symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context25.config(feature32, true);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter35 = context25.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.of(context25);
        java.lang.String str37 = context25.getDateFormat();
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter54 = context53.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider55 = context53.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter56 = context53.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray58);
        context53.config(featureArray58);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        context25.config(featureArray58);
        boolean boolean65 = path2.equals((java.lang.Object) context25);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertNull(propertyFilter26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertNull(valueFilter35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertNull(propertyFilter54);
        org.junit.Assert.assertNotNull(objectWriterProvider55);
        org.junit.Assert.assertNull(afterFilter56);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean13 = jSONWriter8.writeTypeName(byteArray11, (long) 10);
        jSONWriter1.writeStringLatin1(byteArray11);
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        com.alibaba.fastjson2.JSONWriter.Context context17 = jSONWriter1.context;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        jSONWriter26.writeBool(false);
        jSONWriter26.writeDateTime14(4, (int) (short) 10, (int) (short) 100, (int) (byte) 10, (int) (short) 10, (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context51);
        jSONWriter52.startObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        jSONWriter55.close();
        jSONWriter55.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable59 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class65 = null;
        boolean boolean67 = jSONWriter60.isWriteTypeInfo((java.lang.Object) jSONWriter62, class65, (long) ' ');
        boolean boolean69 = jSONWriter60.isEnabled((long) ' ');
        jSONWriter60.writeString("hi!");
        boolean boolean72 = jSONWriter60.isUTF8();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        jSONWriter60.writeString((java.util.List<java.lang.String>) strList76);
        jSONWriter55.writeString((java.util.List<java.lang.String>) strList76);
        jSONWriter52.writeString((java.util.List<java.lang.String>) strList76);
        jSONWriter26.write((java.util.List) strList76);
        jSONWriter1.write((java.util.List) strList76);
        java.lang.Class<?> wildcardClass83 = jSONWriter1.getClass();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(context17);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class16 = null;
        jSONWriter3.checkAndWriteTypeName((java.lang.Object) feature15, class16);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter3.writeDecimal(bigDecimal18);
        java.time.LocalTime localTime20 = null;
        jSONWriter3.writeLocalTime(localTime20);
        boolean boolean22 = jSONWriter3.isIgnoreNoneSerializable();
        jSONWriter3.writeFloat((java.lang.Float) (-1.0f));
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        boolean boolean4 = jSONWriter1.hasFilter();
        boolean boolean6 = jSONWriter1.hasFilter((-1L));
        boolean boolean7 = jSONWriter1.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) feature28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider25, featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        jSONWriter1.setRootObject((java.lang.Object) jSONWriter33);
        boolean boolean36 = jSONWriter1.isEnabled((-1L));
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter37 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter39.writeDouble(1.0d, decimalFormat43);
        boolean boolean46 = jSONWriter39.removeReference((java.lang.Object) (short) -1);
        jSONWriter39.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable48 = jSONWriter39.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context49 = jSONWriter39.getContext();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter50 = null;
        context49.setValueFilter(valueFilter50);
        java.lang.String str52 = jSONWriter1.setPath(fieldWriter37, (java.lang.Object) context49);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.of(context49);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(symbolTable48);
        org.junit.Assert.assertNotNull(context49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(jSONWriter53);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter8.writeDecimal(bigDecimal11);
        boolean boolean14 = jSONWriter8.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter16.writeDouble(1.0d, decimalFormat20);
        boolean boolean23 = jSONWriter16.removeReference((java.lang.Object) (short) -1);
        jSONWriter16.writeArrayNull();
        boolean boolean25 = jSONWriter8.isRefDetect((java.lang.Object) jSONWriter16);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        jSONWriter16.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter16.getContext();
        boolean boolean31 = jSONWriter0.containsReference((java.lang.Object) context30);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter32 = context30.getBeforeFilter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(beforeFilter32);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        jSONWriter1.writeName("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        boolean boolean13 = jSONWriter11.utf16;
        jSONWriter11.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter16);
        long long18 = jSONWriter16.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter21.writeDouble(1.0d, decimalFormat25);
        boolean boolean28 = jSONWriter21.removeReference((java.lang.Object) (short) -1);
        jSONWriter21.writeArrayNull();
        long long30 = jSONWriter21.getFeatures();
        java.lang.Class<?> wildcardClass31 = jSONWriter21.getClass();
        boolean boolean33 = jSONWriter16.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass31, (long) (short) 10);
        int[] intArray40 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter16.writeInt32(intArray40);
        jSONWriter11.writeInt32(intArray40);
        jSONWriter1.writeInt32(intArray40);
        jSONWriter1.startObject();
        java.nio.charset.Charset charset45 = jSONWriter1.getCharset();
        jSONWriter1.writeString("[1][10]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(charset45);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        jSONWriter9.writeNumberNull();
        java.time.LocalDate localDate17 = null;
        jSONWriter9.writeLocalDate(localDate17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        java.time.LocalTime localTime21 = null;
        jSONWriter20.writeLocalTime(localTime21);
        java.time.LocalDateTime localDateTime23 = null;
        jSONWriter20.writeLocalDateTime(localDateTime23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter26);
        boolean boolean28 = jSONWriter26.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter30.writeDouble(1.0d, decimalFormat34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean42 = jSONWriter37.writeTypeName(byteArray40, (long) 10);
        jSONWriter30.writeStringLatin1(byteArray40);
        jSONWriter26.writeStringLatin1(byteArray40);
        jSONWriter20.writeBinary(byteArray40);
        jSONWriter9.writeNameRaw(byteArray40);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        int[] intArray4 = new int[] { (short) -1 };
        jSONWriter2.writeInt32(intArray4);
        jSONWriter2.writeDateYYYMMDD8((int) (short) -1, (int) (byte) -1, (int) '4');
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter2.symbolTable;
        boolean boolean11 = jSONWriter2.isBeanToArray();
        com.alibaba.fastjson2.JSONObject jSONObject12 = null;
        jSONWriter2.write(jSONObject12);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1]");
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter17);
        boolean boolean19 = jSONWriter17.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter21.writeDouble(1.0d, decimalFormat25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean33 = jSONWriter28.writeTypeName(byteArray31, (long) 10);
        jSONWriter21.writeStringLatin1(byteArray31);
        jSONWriter17.writeStringLatin1(byteArray31);
        jSONWriter3.writeBinary(byteArray31);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter29 = context15.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(propertyFilter28);
        org.junit.Assert.assertNull(contextNameFilter29);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        int int6 = jSONWriter1.level();
        jSONWriter1.writeString("hi!");
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter1.writeDecimal(bigDecimal9, (long) (byte) 0);
        com.alibaba.fastjson2.JSONWriter.Context context12 = jSONWriter1.getContext();
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter16.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context28);
        java.time.format.DateTimeFormatter dateTimeFormatter30 = context28.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context28.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) feature34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34 };
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray36);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider31);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        boolean boolean41 = context39.isEnabled(feature40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context39);
        boolean boolean44 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter42, (long) (byte) 1);
        jSONWriter1.writeFloat((float) (byte) 10);
        jSONWriter1.writeInt64((long) '#');
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(context12);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.math.BigDecimal bigDecimal16 = null;
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter3.writeDecimal(bigDecimal16, (long) (byte) -1, decimalFormat18);
        java.math.BigDecimal bigDecimal20 = null;
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter3.writeDecimal(bigDecimal20, (long) (-1), decimalFormat22);
        com.alibaba.fastjson2.JSONWriter.Path path24 = null;
        com.alibaba.fastjson2.JSONWriter.Path path26 = new com.alibaba.fastjson2.JSONWriter.Path(path24, "");
        com.alibaba.fastjson2.JSONWriter.Path path28 = new com.alibaba.fastjson2.JSONWriter.Path(path26, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path28, "hi!");
        java.lang.String str31 = path30.toString();
        com.alibaba.fastjson2.JSONWriter.Path path33 = new com.alibaba.fastjson2.JSONWriter.Path(path30, (int) '#');
        java.lang.Object obj34 = null;
        boolean boolean35 = path33.equals(obj34);
        jSONWriter3.writeAny(obj34);
        jSONWriter3.writeChar('#');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeRaw(".\\[52\\]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1].hi\\!" + "'", str31, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        double[] doubleArray3 = null;
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeDouble(doubleArray3, decimalFormat4);
        jSONWriter1.writeReference("$");
        jSONWriter1.writeArrayNull();
        jSONWriter1.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        jSONWriter12.writeTypeName("");
        jSONWriter12.writeBool(false);
        jSONWriter1.popPath((java.lang.Object) false);
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context33);
        boolean boolean36 = jSONWriter34.hasFilter((long) 0);
        jSONWriter34.endArray();
        java.time.Instant instant38 = null;
        jSONWriter34.writeInstant(instant38);
        java.math.BigDecimal bigDecimal40 = null;
        jSONWriter34.writeDecimal(bigDecimal40);
        jSONWriter34.close();
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter34.context;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        context43.config(feature44, true);
        jSONWriter1.config(feature44, false);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        java.util.Map map23 = null;
        jSONWriter0.write(map23);
        jSONWriter0.writeRaw((byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) 100 };
        boolean boolean39 = jSONWriter28.writeTypeName(byteArray37, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        int[] intArray45 = new int[] { (short) -1 };
        jSONWriter43.writeInt32(intArray45);
        java.lang.String str47 = jSONWriter28.setPath("hi!", (java.lang.Object) intArray45);
        jSONWriter0.writeInt32(intArray45);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        boolean boolean59 = jSONWriter50.isEnabled((long) ' ');
        boolean boolean60 = jSONWriter50.isBeanToArray();
        jSONWriter50.writeTypeName("[1]");
        boolean boolean63 = jSONWriter0.containsReference((java.lang.Object) jSONWriter50);
        com.alibaba.fastjson2.SymbolTable symbolTable64 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        jSONWriter68.writeSymbol((-1));
        java.lang.String str73 = jSONWriter65.setPath("", (java.lang.Object) jSONWriter68);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        boolean boolean77 = jSONWriter75.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat79 = null;
        jSONWriter75.writeDouble(1.0d, decimalFormat79);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray81 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray81);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean87 = jSONWriter82.writeTypeName(byteArray85, (long) 10);
        jSONWriter75.writeStringLatin1(byteArray85);
        boolean boolean90 = jSONWriter68.writeTypeName(byteArray85, (long) '4');
        jSONWriter50.writeNameRaw(byteArray85);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1]");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(featureArray81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        jSONWriter19.close();
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter19.writeFloat((float) 10, decimalFormat22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean30 = jSONWriter25.writeTypeName(byteArray28, (long) 10);
        boolean boolean32 = jSONWriter19.writeTypeName(byteArray28, (long) (byte) 100);
        jSONWriter19.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        jSONWriter36.close();
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter36.writeFloat((float) 10, decimalFormat39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean47 = jSONWriter42.writeTypeName(byteArray45, (long) 10);
        boolean boolean49 = jSONWriter36.writeTypeName(byteArray45, (long) (byte) 100);
        jSONWriter19.writeBinary(byteArray45);
        jSONWriter1.writeHex(byteArray45);
        com.alibaba.fastjson2.JSONObject jSONObject52 = null;
        jSONWriter1.write(jSONObject52);
        java.lang.Object obj54 = null;
        jSONWriter1.startArray(obj54, (int) (short) -1);
        java.lang.Object obj57 = null;
        boolean boolean58 = jSONWriter1.isWriteTypeInfo(obj57);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray1);
        boolean boolean9 = jSONWriter8.isUTF16();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        jSONWriter5.writeDateTime19(4, (int) (short) 0, (int) (short) -1, (int) 'a', (int) '#', (int) (byte) 100);
        boolean boolean13 = jSONWriter5.utf8;
        java.time.ZonedDateTime zonedDateTime14 = null;
        jSONWriter5.writeZonedDateTime(zonedDateTime14);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter39 = context38.getPropertyFilter();
        long long40 = context38.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter41 = null;
        context38.setLabelFilter(labelFilter41);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider43 = context38.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter44 = null;
        context38.setPropertyPreFilter(propertyPreFilter44);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        boolean boolean47 = context38.isEnabled(feature46);
        jSONWriter3.writeEnum((java.lang.Enum) feature46);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter49 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        jSONWriter51.close();
        jSONWriter51.writeSymbol("");
        jSONWriter51.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context56 = jSONWriter51.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter57 = null;
        context56.setPropertyPreFilter(propertyPreFilter57);
        boolean boolean59 = context56.isDateFormatHasDay();
        java.lang.String str60 = jSONWriter3.setPath(fieldWriter49, (java.lang.Object) context56);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNull(propertyFilter39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider43);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(context56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter1.writeDouble((double) 10.0f, decimalFormat24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter1.context;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray28);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        byte[] byteArray43 = new byte[] { (byte) -1 };
        boolean boolean45 = jSONWriter36.writeTypeName(byteArray43, 0L);
        java.util.UUID uUID46 = null;
        jSONWriter36.writeUUID(uUID46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = jSONWriter36.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context48);
        java.time.format.DateTimeFormatter dateTimeFormatter50 = context48.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider51 = context48.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider51, featureArray52);
        java.math.BigInteger bigInteger57 = null;
        jSONWriter56.writeBigInt(bigInteger57, (long) 1);
        java.nio.charset.Charset charset60 = jSONWriter56.getCharset();
        byte[] byteArray61 = jSONWriter32.getBytes(charset60);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray62 = jSONWriter1.getBytes(charset60);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: not support operator");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(context48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(objectWriterProvider51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        java.util.UUID uUID14 = null;
        jSONWriter3.writeUUID(uUID14);
        com.alibaba.fastjson2.SymbolTable symbolTable16 = jSONWriter3.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        boolean[] booleanArray23 = new boolean[] { false, true, true, true };
        jSONWriter18.writeBool(booleanArray23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter26);
        boolean boolean28 = jSONWriter26.utf16;
        long long30 = jSONWriter26.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = jSONWriter26.getSymbolTable();
        boolean boolean32 = jSONWriter18.isIgnoreNoneSerializable((java.lang.Object) jSONWriter26);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        jSONWriter26.writeEnum((java.lang.Enum) feature33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray42 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter35.writeRaw(charArray42);
        jSONWriter26.writeString(charArray42, (int) (short) 10, (int) (short) -1, true);
        jSONWriter3.writeString(charArray42, 7, 6);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(symbolTable16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNull(symbolTable31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        byte[] byteArray38 = new byte[] { (byte) -1 };
        boolean boolean40 = jSONWriter31.writeTypeName(byteArray38, 0L);
        java.util.UUID uUID41 = null;
        jSONWriter31.writeUUID(uUID41);
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter31.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context43);
        java.time.format.DateTimeFormatter dateTimeFormatter45 = context43.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider46 = context43.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider46, featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27, featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter54 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean58 = jSONWriter56.isRefDetect((java.lang.Object) feature57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature57 };
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        java.time.ZoneId zoneId62 = null;
        context61.setZoneId(zoneId62);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        jSONWriter64.writeTypeName("[1].hi\\!");
        java.lang.String str67 = jSONWriter53.setPath(fieldWriter54, (java.lang.Object) jSONWriter64);
        byte[] byteArray68 = null;
        jSONWriter53.writeBinary(byteArray68);
        jSONWriter53.endObject();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(objectWriterProvider46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter1.writeBinary(byteArray27);
        boolean boolean34 = jSONWriter1.hasFilter((long) 100);
        com.alibaba.fastjson2.JSONObject jSONObject35 = null;
        jSONWriter1.write(jSONObject35);
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        boolean[] booleanArray43 = new boolean[] { false, true, true, true };
        jSONWriter38.writeBool(booleanArray43);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        jSONWriter38.writeBinary(byteArray55);
        jSONWriter1.writeStringLatin1(byteArray55);
        jSONWriter1.writeString("[1].hi\\![35]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter25 = context15.getValueFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        context15.config(feature26, false);
        boolean boolean29 = context15.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertNull(valueFilter25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        jSONWriter29.writeInt8((byte) 1);
        jSONWriter29.endArray();
        jSONWriter29.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context64.config(feature65, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) feature70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70 };
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        context64.config(featureArray72);
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray72);
        jSONWriter29.config(featureArray72);
        boolean boolean78 = jSONWriter25.isIgnoreNoneSerializable((java.lang.Object) featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        java.math.BigDecimal bigDecimal80 = null;
        java.text.DecimalFormat decimalFormat82 = null;
        jSONWriter79.writeDecimal(bigDecimal80, 1L, decimalFormat82);
        jSONWriter79.writeSymbol("[1]");
        java.util.UUID uUID86 = null;
        jSONWriter79.writeUUID(uUID86);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSONWriter79);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path4.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        boolean boolean29 = path4.equals((java.lang.Object) context23);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = context23.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = null;
        context23.setNameFilter(nameFilter31);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter33 = null;
        context23.setAfterFilter(afterFilter33);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1]" + "'", str7, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(afterFilter30);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateYYYMMDD8((int) 'a', (int) '4', 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray12 = null;
        jSONWriter11.writeDouble(doubleArray12);
        jSONWriter11.writeArrayNull();
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter11.writeFloat((float) (short) 1, decimalFormat16);
        boolean boolean18 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter36 = context35.getPropertyFilter();
        long long37 = context35.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context35.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context35, symbolTable40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter41);
        java.lang.String str43 = jSONWriter1.setPath((int) (byte) 1, (java.lang.Object) jSONWriter41);
        jSONWriter41.writeMillis((long) (short) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter62 = context61.getPropertyFilter();
        long long63 = context61.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter64 = null;
        context61.setLabelFilter(labelFilter64);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider66 = context61.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        com.alibaba.fastjson2.JSONWriter.Context context69 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.of(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider66, featureArray67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        com.alibaba.fastjson2.JSONWriter.Context context77 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray74);
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider66, featureArray74);
        jSONWriter41.config(featureArray74);
        java.util.Map map80 = null;
        jSONWriter41.write(map80);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNull(propertyFilter36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNull(propertyFilter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter76);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider17);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter19 = context18.getBeforeFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(beforeFilter19);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        java.time.LocalDateTime localDateTime4 = null;
        jSONWriter1.writeLocalDateTime(localDateTime4);
        byte[] byteArray6 = jSONWriter1.getBytes();
        boolean boolean7 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-81, -81]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray46 = null;
        jSONWriter45.writeDouble(doubleArray46);
        jSONWriter45.writeArrayNull();
        short[] shortArray52 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter45.writeInt16(shortArray52);
        jSONWriter3.writeInt16(shortArray52);
        java.time.Instant instant55 = null;
        jSONWriter3.writeInstant(instant55);
        jSONWriter3.writeDateTime19(1, (int) (short) 10, 100, (int) (short) -1, (int) (byte) 0, 4);
        com.alibaba.fastjson2.SymbolTable symbolTable64 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        boolean boolean69 = jSONWriter67.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class70 = null;
        boolean boolean72 = jSONWriter65.isWriteTypeInfo((java.lang.Object) jSONWriter67, class70, (long) ' ');
        byte[] byteArray74 = new byte[] { (byte) 100 };
        boolean boolean76 = jSONWriter65.writeTypeName(byteArray74, (long) (-1));
        jSONWriter3.writeNameRaw(byteArray74, 5L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[100]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        jSONWriter16.writeDateTime14((int) (short) 100, (int) ' ', 5, (int) (byte) 100, (-1), 10);
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter27.writeHex(byteArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean48 = jSONWriter47.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray56 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter49.writeRaw(charArray56);
        jSONWriter47.writeString(charArray56);
        jSONWriter27.writeString(charArray56, 5, 0, true);
        byte[] byteArray63 = jSONWriter27.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter16.writeNameRaw(byteArray63, 12, (int) 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 100, 1, -1, 1, -1]");
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[a, 4, #, 4, 4, a]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-110, 0, -81, -111, 6, 1, 100, 1, -1, 1, -1, 73]");
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        jSONWriter1.writeBooleanNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        boolean boolean19 = jSONWriter16.isBeanToArray();
        boolean boolean20 = jSONWriter16.isIgnoreNoneSerializable();
        jSONWriter16.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray22);
        com.alibaba.fastjson2.JSONObject jSONObject26 = null;
        jSONWriter25.write(jSONObject26);
        java.lang.Class<?> wildcardClass28 = jSONWriter25.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter29 = jSONWriter16.getObjectWriter((java.lang.Class) wildcardClass28);
        com.alibaba.fastjson2.JSONObject jSONObject30 = null;
        jSONWriter16.write(jSONObject30);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(objectWriter29);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean21 = jSONWriter16.writeTypeName(byteArray19, (long) 10);
        jSONWriter3.writeNameRaw(byteArray19);
        jSONWriter3.writeInt64((long) (short) 0);
        jSONWriter3.writeInt32((int) (short) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        java.time.LocalDate localDate12 = null;
        jSONWriter1.writeLocalDate(localDate12);
        jSONWriter1.writeArrayNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        long long20 = context15.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString;
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        java.util.UUID uUID35 = null;
        jSONWriter25.writeUUID(uUID35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter25.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context37);
        boolean boolean40 = jSONWriter38.hasFilter((long) 0);
        jSONWriter38.endArray();
        jSONWriter38.writeString("");
        boolean boolean44 = jSONWriter38.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) feature47);
        jSONWriter38.writeEnum((java.lang.Enum) feature47);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter53.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter66 = context65.getPropertyFilter();
        long long67 = context65.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter68 = null;
        context65.setLabelFilter(labelFilter68);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context65, symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Context context72 = jSONWriter71.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter73 = null;
        context72.setPropertyFilter(propertyFilter73);
        boolean boolean75 = context72.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean77 = jSONWriter76.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean79 = jSONWriter76.isEnabled(feature78);
        boolean boolean80 = context72.isEnabled(feature78);
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature82 = com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray83 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature47, feature78, feature81, feature82 };
        context15.config(featureArray83);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter85 = context15.getContextNameFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter86 = null;
        context15.setLabelFilter(labelFilter86);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString));
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(context65);
        org.junit.Assert.assertNull(propertyFilter66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(context72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature82 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii + "'", feature82.equals(com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii));
        org.junit.Assert.assertNotNull(featureArray83);
        org.junit.Assert.assertNull(contextNameFilter85);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        short[] shortArray34 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt16(shortArray34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        int int42 = jSONWriter41.size();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter44);
        long long46 = jSONWriter44.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter49.writeDouble(1.0d, decimalFormat53);
        boolean boolean56 = jSONWriter49.removeReference((java.lang.Object) (short) -1);
        jSONWriter49.writeArrayNull();
        long long58 = jSONWriter49.getFeatures();
        java.lang.Class<?> wildcardClass59 = jSONWriter49.getClass();
        boolean boolean61 = jSONWriter44.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass59, (long) (short) 10);
        jSONWriter1.checkAndWriteTypeName((java.lang.Object) jSONWriter41, (java.lang.Class) wildcardClass59);
        java.math.BigInteger bigInteger63 = null;
        jSONWriter41.writeBigInt(bigInteger63, (long) 10);
        jSONWriter41.writeMillis((long) 13);
        jSONWriter41.writeInt64((long) ' ');
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = context26.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context26.getProvider();
        boolean boolean30 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context26);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class40 = null;
        jSONWriter27.checkAndWriteTypeName((java.lang.Object) feature39, class40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature39 };
        context15.config(featureArray42);
        java.lang.String str44 = context15.getDateFormat();
        java.lang.String str45 = context15.getDateFormat();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextNameFilter22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context15.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context15.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        long long31 = jSONWriter29.getFeatures();
        java.time.LocalDateTime localDateTime32 = null;
        jSONWriter29.writeLocalDateTime(localDateTime32);
        byte[] byteArray34 = jSONWriter29.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter29.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27, featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter44.getContext();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-81]");
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(context45);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.util.Map map15 = null;
        jSONWriter3.write(map15);
        jSONWriter3.writeDateTime19((-1), 1, (int) ' ', (-1), (int) '#', (int) 'a');
        boolean boolean24 = jSONWriter3.isBeanToArray();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeTimeHHMMSS8(100, 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray19);
        java.math.BigInteger bigInteger24 = null;
        jSONWriter23.writeBigInt(bigInteger24, (long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        java.time.LocalTime localTime29 = null;
        jSONWriter28.writeLocalTime(localTime29);
        java.time.LocalDateTime localDateTime31 = null;
        jSONWriter28.writeLocalDateTime(localDateTime31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        boolean boolean36 = jSONWriter34.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter38.writeDouble(1.0d, decimalFormat42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean50 = jSONWriter45.writeTypeName(byteArray48, (long) 10);
        jSONWriter38.writeStringLatin1(byteArray48);
        jSONWriter34.writeStringLatin1(byteArray48);
        jSONWriter28.writeBinary(byteArray48);
        jSONWriter23.writeBinary(byteArray48);
        long long56 = jSONWriter23.getFeatures((long) (short) 0);
        jSONWriter23.startObject();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeChar('#');
        short[] shortArray18 = new short[] { (byte) 1, (short) 10, (short) 1 };
        jSONWriter3.writeInt16(shortArray18);
        jSONWriter3.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        java.util.UUID uUID35 = null;
        jSONWriter25.writeUUID(uUID35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter25.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context37);
        java.time.format.DateTimeFormatter dateTimeFormatter39 = context37.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider40 = context37.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        com.alibaba.fastjson2.JSONWriter.Context context43 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider40, featureArray41);
        java.math.BigInteger bigInteger46 = null;
        jSONWriter45.writeBigInt(bigInteger46, (long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        java.time.LocalTime localTime51 = null;
        jSONWriter50.writeLocalTime(localTime51);
        java.time.LocalDateTime localDateTime53 = null;
        jSONWriter50.writeLocalDateTime(localDateTime53);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter56);
        boolean boolean58 = jSONWriter56.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter60.writeDouble(1.0d, decimalFormat64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean72 = jSONWriter67.writeTypeName(byteArray70, (long) 10);
        jSONWriter60.writeStringLatin1(byteArray70);
        jSONWriter56.writeStringLatin1(byteArray70);
        jSONWriter50.writeBinary(byteArray70);
        jSONWriter45.writeBinary(byteArray70);
        jSONWriter3.writeNameRaw(byteArray70);
        jSONWriter3.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1, 10, 1]");
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(objectWriterProvider40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        java.time.LocalDateTime localDateTime4 = null;
        jSONWriter1.writeLocalDateTime(localDateTime4);
        byte[] byteArray6 = jSONWriter1.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        jSONWriter1.config(featureArray7);
        jSONWriter1.close();
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter16.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter29 = context28.getPropertyFilter();
        long long30 = context28.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter31 = null;
        context28.setLabelFilter(labelFilter31);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context28.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter34 = null;
        context28.setPropertyPreFilter(propertyPreFilter34);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter36 = null;
        context28.setPropertyPreFilter(propertyPreFilter36);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context28.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider40 = context28.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter42);
        long long44 = jSONWriter42.getFeatures();
        java.time.LocalDateTime localDateTime45 = null;
        jSONWriter42.writeLocalDateTime(localDateTime45);
        byte[] byteArray47 = jSONWriter42.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray48);
        jSONWriter42.config(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.of(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Context context54 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider40, featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.of(featureArray48);
        jSONWriter1.config(featureArray48);
        int int57 = jSONWriter1.size();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-81]");
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNull(propertyFilter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertNotNull(objectWriterProvider40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-81]");
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.of(context22);
        jSONWriter28.writeName(97L);
        jSONWriter28.writeReference("[1].hi\\![35]");
        com.alibaba.fastjson2.JSONObject jSONObject33 = null;
        jSONWriter28.write(jSONObject33);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj12 = null;
        jSONWriter1.startArray(obj12, (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable15 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class21 = null;
        boolean boolean23 = jSONWriter16.isWriteTypeInfo((java.lang.Object) jSONWriter18, class21, (long) ' ');
        byte[] byteArray25 = new byte[] { (byte) -1 };
        boolean boolean27 = jSONWriter18.writeTypeName(byteArray25, 0L);
        java.util.UUID uUID28 = null;
        jSONWriter18.writeUUID(uUID28);
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter18.getContext();
        jSONWriter18.writeInt64((long) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        jSONWriter36.close();
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter36.writeFloat((float) 10, decimalFormat39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean47 = jSONWriter42.writeTypeName(byteArray45, (long) 10);
        boolean boolean49 = jSONWriter36.writeTypeName(byteArray45, (long) (byte) 100);
        jSONWriter34.writeNameRaw(byteArray45, 0L);
        jSONWriter18.writeBinary(byteArray45);
        jSONWriter1.writeStringLatin1(byteArray45);
        jSONWriter1.writeSymbol(".hi\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        jSONWriter17.close();
        jSONWriter17.writeSymbol("");
        jSONWriter17.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter17.context;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        jSONWriter24.close();
        jSONWriter24.writeSymbol("");
        boolean[] booleanArray29 = new boolean[] { true };
        jSONWriter24.writeBool(booleanArray29);
        jSONWriter17.writeBool(booleanArray29);
        jSONWriter1.writeBool(booleanArray29);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[true]");
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context15.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter30.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider29, featureArray35);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        byte[] byteArray52 = new byte[] { (byte) -1 };
        boolean boolean54 = jSONWriter45.writeTypeName(byteArray52, 0L);
        java.util.UUID uUID55 = null;
        jSONWriter45.writeUUID(uUID55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = jSONWriter45.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter58 = context57.getPropertyFilter();
        long long59 = context57.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter60 = null;
        context57.setLabelFilter(labelFilter60);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider62 = context57.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter63 = null;
        context57.setPropertyPreFilter(propertyPreFilter63);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter65 = null;
        context57.setPropertyPreFilter(propertyPreFilter65);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = null;
        context57.setLabelFilter(labelFilter67);
        jSONWriter41.popPath((java.lang.Object) context57);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter70 = null;
        context57.setAfterFilter(afterFilter70);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(context57);
        org.junit.Assert.assertNull(propertyFilter58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider62);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        char[] charArray12 = null;
        jSONWriter0.writeString(charArray12, (int) (byte) -1, (int) (short) 1, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        java.math.BigInteger bigInteger18 = null;
        jSONWriter17.writeBigInt(bigInteger18, (long) 6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        java.time.LocalDate localDate23 = null;
        jSONWriter22.writeLocalDate(localDate23);
        boolean boolean25 = jSONWriter22.utf8;
        java.util.UUID uUID26 = null;
        jSONWriter22.writeUUID(uUID26);
        jSONWriter22.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter30);
        long long32 = jSONWriter30.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        boolean boolean42 = jSONWriter35.removeReference((java.lang.Object) (short) -1);
        jSONWriter35.writeArrayNull();
        long long44 = jSONWriter35.getFeatures();
        java.lang.Class<?> wildcardClass45 = jSONWriter35.getClass();
        boolean boolean47 = jSONWriter30.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass45, (long) (short) 10);
        int[] intArray54 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter30.writeInt32(intArray54);
        double[] doubleArray60 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter30.writeDouble(doubleArray60);
        jSONWriter22.writeDouble(doubleArray60);
        java.text.DecimalFormat decimalFormat63 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter17.writeDouble(doubleArray60, decimalFormat63);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        context15.setDateFormat("[1][0]");
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter30 = null;
        context15.setPropertyPreFilter(propertyPreFilter30);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter32 = context15.getAfterFilter();
        boolean boolean33 = context15.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNull(afterFilter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        int int6 = jSONWriter1.level();
        jSONWriter1.writeString("hi!");
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter1.writeDecimal(bigDecimal9, (long) (byte) 0);
        com.alibaba.fastjson2.JSONWriter.Context context12 = jSONWriter1.getContext();
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter16.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context28);
        java.time.format.DateTimeFormatter dateTimeFormatter30 = context28.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context28.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) feature34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34 };
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray36);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider31);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        boolean boolean41 = context39.isEnabled(feature40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context39);
        boolean boolean44 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter42, (long) (byte) 1);
        jSONWriter1.writeFloat((float) (byte) 10);
        jSONWriter1.writeDouble((double) '#');
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(context12);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.util.Map map15 = null;
        jSONWriter3.write(map15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        java.time.LocalTime localTime19 = null;
        jSONWriter18.writeLocalTime(localTime19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        jSONWriter18.writeBinary(byteArray31);
        jSONWriter3.writeBinary(byteArray31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray40 = null;
        jSONWriter37.writeHex(byteArray40);
        boolean boolean42 = jSONWriter37.isRefDetect();
        jSONWriter37.writeNumberNull();
        jSONWriter37.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean47 = jSONWriter37.isEnabled(feature46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter49);
        long long51 = jSONWriter49.getFeatures();
        java.time.LocalDateTime localDateTime52 = null;
        jSONWriter49.writeLocalDateTime(localDateTime52);
        byte[] byteArray54 = jSONWriter49.getBytes();
        jSONWriter37.writeStringLatin1(byteArray54);
        jSONWriter3.writeBinary(byteArray54);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter3.writeFloat((float) (byte) 0, decimalFormat58);
        boolean boolean61 = jSONWriter3.isEnabled((long) 'a');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        boolean boolean27 = jSONWriter26.isRefDetect();
        java.lang.String str30 = jSONWriter26.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        long long34 = jSONWriter32.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        long long46 = jSONWriter37.getFeatures();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean49 = jSONWriter32.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass47, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter50 = jSONWriter26.getObjectWriter((java.lang.Class) wildcardClass47);
        boolean boolean51 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context23, (java.lang.reflect.Type) wildcardClass47);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter52 = context23.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context23);
        java.time.ZoneId zoneId54 = context23.getZoneId();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objectWriter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(valueFilter52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(zoneId54);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        boolean boolean22 = jSONWriter21.jsonb;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeDateTimeISO8601((int) (short) 0, (int) (short) 1, (int) (short) 10, (int) (byte) 100, 5, (int) '#', 4, (int) '4', false);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeMillis((long) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        jSONWriter18.writeSymbol("$");
        jSONWriter18.writeDouble((-1.0d));
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateTime14((int) (short) 10, (int) (byte) -1, 0, (int) (byte) 100, (int) (short) -1, 5);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter1.writeBigInt(bigInteger14);
        boolean boolean16 = jSONWriter1.utf16;
        java.time.LocalDate localDate17 = null;
        jSONWriter1.writeLocalDate(localDate17);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = null;
        context6.setPropertyPreFilter(propertyPreFilter7);
        boolean boolean9 = context6.isDateFormatHasDay();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        java.util.UUID uUID23 = null;
        jSONWriter13.writeUUID(uUID23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter13.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        jSONWriter27.close();
        jSONWriter27.writeSymbol("");
        jSONWriter27.writeBooleanNull();
        jSONWriter27.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        byte[] byteArray43 = new byte[] { (byte) -1 };
        boolean boolean45 = jSONWriter36.writeTypeName(byteArray43, 0L);
        java.util.UUID uUID46 = null;
        jSONWriter36.writeUUID(uUID46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = jSONWriter36.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context48);
        java.time.format.DateTimeFormatter dateTimeFormatter50 = context48.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider51 = context48.getProvider();
        java.lang.String str52 = context48.getDateFormat();
        boolean boolean53 = jSONWriter27.removeReference((java.lang.Object) context48);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter54 = context48.getLabelFilter();
        java.time.ZoneId zoneId55 = context48.getZoneId();
        context25.setZoneId(zoneId55);
        context6.setZoneId(zoneId55);
        boolean boolean58 = context6.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter59 = context6.getBeforeFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(context48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(objectWriterProvider51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(labelFilter54);
        org.junit.Assert.assertNotNull(zoneId55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(beforeFilter59);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter18.writeInt16((short) (byte) 100);
        boolean boolean34 = jSONWriter18.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        boolean boolean55 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean34, (java.lang.reflect.Type) wildcardClass51, (long) (byte) -1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter56 = null;
        com.alibaba.fastjson2.JSONWriter.Path path57 = null;
        com.alibaba.fastjson2.JSONWriter.Path path59 = new com.alibaba.fastjson2.JSONWriter.Path(path57, "");
        com.alibaba.fastjson2.JSONWriter.Path path61 = new com.alibaba.fastjson2.JSONWriter.Path(path59, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path63 = new com.alibaba.fastjson2.JSONWriter.Path(path61, "hi!");
        java.lang.String str64 = path61.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class71 = null;
        boolean boolean73 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter68, class71, (long) ' ');
        byte[] byteArray75 = new byte[] { (byte) -1 };
        boolean boolean77 = jSONWriter68.writeTypeName(byteArray75, 0L);
        java.util.UUID uUID78 = null;
        jSONWriter68.writeUUID(uUID78);
        com.alibaba.fastjson2.JSONWriter.Context context80 = jSONWriter68.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter81 = context80.getPropertyFilter();
        long long82 = context80.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter83 = null;
        context80.setLabelFilter(labelFilter83);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider85 = context80.provider;
        boolean boolean86 = path61.equals((java.lang.Object) context80);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context80.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter88 = null;
        context80.setNameFilter(nameFilter88);
        java.lang.String str90 = jSONWriter1.setPath(fieldWriter56, (java.lang.Object) context80);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter91 = null;
        context80.setContextValueFilter(contextValueFilter91);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter93 = null;
        context80.setPropertyFilter(propertyFilter93);
        boolean boolean95 = context80.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[1]" + "'", str64, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(context80);
        org.junit.Assert.assertNull(propertyFilter81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(afterFilter87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        jSONWriter3.writeDouble((double) '4');
        jSONWriter3.writeSymbol("hi!");
        boolean boolean21 = jSONWriter3.hasFilter();
        boolean boolean23 = jSONWriter3.hasFilter((long) (short) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter7);
        long long9 = jSONWriter7.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter12.writeDouble(1.0d, decimalFormat16);
        boolean boolean19 = jSONWriter12.removeReference((java.lang.Object) (short) -1);
        jSONWriter12.writeArrayNull();
        long long21 = jSONWriter12.getFeatures();
        java.lang.Class<?> wildcardClass22 = jSONWriter12.getClass();
        boolean boolean24 = jSONWriter7.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass22, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter25 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        long long29 = jSONWriter27.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter32.writeDouble(1.0d, decimalFormat36);
        boolean boolean39 = jSONWriter32.removeReference((java.lang.Object) (short) -1);
        jSONWriter32.writeArrayNull();
        long long41 = jSONWriter32.getFeatures();
        java.lang.Class<?> wildcardClass42 = jSONWriter32.getClass();
        boolean boolean44 = jSONWriter27.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass42, (long) (short) 10);
        int[] intArray51 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter27.writeInt32(intArray51);
        double[] doubleArray57 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter27.writeDouble(doubleArray57);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter1.writeDouble(doubleArray57, decimalFormat59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter62);
        long long64 = jSONWriter62.getFeatures();
        java.time.LocalDateTime localDateTime65 = null;
        jSONWriter62.writeLocalDateTime(localDateTime65);
        byte[] byteArray67 = jSONWriter62.getBytes();
        boolean boolean68 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter62);
        java.math.BigInteger bigInteger69 = null;
        jSONWriter62.writeBigInt(bigInteger69, (-1L));
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter62.writeDoubleArray((double) 4L, (double) 4);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        boolean boolean14 = jSONWriter7.removeReference((java.lang.Object) (short) -1);
        jSONWriter7.writeArrayNull();
        jSONWriter7.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        java.lang.String str20 = jSONWriter7.setPath("hi!", (java.lang.Object) feature19);
        boolean boolean21 = jSONWriter1.isEnabled(feature19);
        int int22 = jSONWriter1.level();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) feature26);
        jSONWriter25.writeInt16((short) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = jSONWriter25.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter39);
        long long41 = jSONWriter39.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat48 = null;
        jSONWriter44.writeDouble(1.0d, decimalFormat48);
        boolean boolean51 = jSONWriter44.removeReference((java.lang.Object) (short) -1);
        jSONWriter44.writeArrayNull();
        long long53 = jSONWriter44.getFeatures();
        java.lang.Class<?> wildcardClass54 = jSONWriter44.getClass();
        boolean boolean56 = jSONWriter39.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass54, (long) (short) 10);
        int[] intArray63 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter39.writeInt32(intArray63);
        jSONWriter32.writeInt32(intArray63);
        jSONWriter25.writeInt32(intArray63);
        jSONWriter1.writeInt32(intArray63);
        boolean boolean68 = jSONWriter1.isUTF16();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(symbolTable30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        java.math.BigDecimal bigDecimal1 = null;
        java.text.DecimalFormat decimalFormat3 = null;
        jSONWriter0.writeDecimal(bigDecimal1, (-1L), decimalFormat3);
        jSONWriter0.writeRaw(' ');
        boolean boolean7 = jSONWriter0.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter9.writeDecimal(bigDecimal12);
        java.lang.Object obj14 = null;
        java.lang.Class class15 = null;
        jSONWriter9.checkAndWriteTypeName(obj14, class15);
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean18 = jSONWriter9.isEnabled(feature17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = jSONWriter9.symbolTable;
        jSONWriter9.writeInt16((short) (byte) 1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter22 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter39 = context38.getPropertyFilter();
        long long40 = context38.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter41 = null;
        context38.setLabelFilter(labelFilter41);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter43 = context38.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter44 = null;
        context38.setPropertyFilter(propertyFilter44);
        boolean boolean46 = context38.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter47 = context38.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter48 = null;
        context38.setBeforeFilter(beforeFilter48);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter50 = context38.getPropertyPreFilter();
        java.lang.String str51 = jSONWriter9.setPath(fieldWriter22, (java.lang.Object) propertyPreFilter50);
        java.time.ZonedDateTime zonedDateTime52 = null;
        jSONWriter9.writeZonedDateTime(zonedDateTime52);
        boolean boolean54 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        jSONWriter9.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(symbolTable19);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNull(propertyFilter39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNull(contextValueFilter43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(nameFilter47);
        org.junit.Assert.assertNull(propertyPreFilter50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, (int) (short) 1);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofUTF8();
        com.alibaba.fastjson2.JSONWriter.Context context1 = jSONWriter0.context;
        int int2 = jSONWriter0.level();
        boolean boolean3 = jSONWriter0.isUseSingleQuotes();
        java.math.BigInteger bigInteger4 = null;
        jSONWriter0.writeBigInt(bigInteger4);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(context1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter1.writeDecimal(bigDecimal12);
        jSONWriter1.writeInt16((short) (byte) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        jSONWriter2.close();
        jSONWriter2.writeSymbol("");
        jSONWriter2.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context7 = jSONWriter2.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter8 = null;
        context7.setPropertyPreFilter(propertyPreFilter8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) feature13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray15);
        context7.config(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray15);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = null;
        context21.setAfterFilter(afterFilter22);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(context7);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter20);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter18 = context15.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean20 = jSONWriter19.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        jSONWriter19.writeAny((java.lang.Object) featureArray21);
        jSONWriter19.writeInt8((byte) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(nameFilter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context22.setPropertyFilter(propertyFilter23);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22, symbolTable25);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context22.getContextValueFilter();
        boolean boolean28 = context22.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        boolean boolean18 = jSONWriter3.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        jSONWriter3.config(feature19, false);
        jSONWriter3.writeFloat((java.lang.Float) 100.0f);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        java.util.UUID uUID38 = null;
        jSONWriter28.writeUUID(uUID38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter28.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter41 = context40.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter42 = context40.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter43 = context40.getValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter60 = context59.getPropertyFilter();
        long long61 = context59.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter62 = null;
        context59.setLabelFilter(labelFilter62);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context59.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter65 = null;
        context59.setPropertyPreFilter(propertyPreFilter65);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        boolean boolean72 = jSONWriter70.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class73 = null;
        boolean boolean75 = jSONWriter68.isWriteTypeInfo((java.lang.Object) jSONWriter70, class73, (long) ' ');
        byte[] byteArray77 = new byte[] { (byte) -1 };
        boolean boolean79 = jSONWriter70.writeTypeName(byteArray77, 0L);
        java.util.UUID uUID80 = null;
        jSONWriter70.writeUUID(uUID80);
        com.alibaba.fastjson2.JSONWriter.Context context82 = jSONWriter70.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter83 = context82.getPropertyFilter();
        long long84 = context82.getFeatures();
        long long85 = context82.getFeatures();
        boolean boolean86 = context82.isDateFormatHasHour();
        java.time.ZoneId zoneId87 = context82.getZoneId();
        context59.setZoneId(zoneId87);
        context40.setZoneId(zoneId87);
        java.lang.String str90 = jSONWriter3.setPath(5, (java.lang.Object) context40);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter91 = context40.getBeforeFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter92 = context40.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertNull(propertyFilter41);
        org.junit.Assert.assertNull(beforeFilter42);
        org.junit.Assert.assertNull(valueFilter43);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNull(propertyFilter60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(context82);
        org.junit.Assert.assertNull(propertyFilter83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(zoneId87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(beforeFilter91);
        org.junit.Assert.assertNull(afterFilter92);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        jSONWriter3.writeInt16((short) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        int int28 = jSONWriter1.level();
        jSONWriter1.writeStringNull();
        jSONWriter1.writeStringNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        long long34 = jSONWriter32.getFeatures();
        java.time.LocalDateTime localDateTime35 = null;
        jSONWriter32.writeLocalDateTime(localDateTime35);
        jSONWriter32.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        jSONWriter41.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray59 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter52.writeRaw(charArray59);
        jSONWriter41.writeString(charArray59, 100, (int) (short) -1, true);
        jSONWriter32.writeString(charArray59, 3, 0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray59);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter1.writeDecimal(bigDecimal8, (long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        boolean boolean18 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter19 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter20 = context15.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter23.writeFloat((float) 10, decimalFormat26);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        boolean boolean38 = jSONWriter29.isEnabled((long) ' ');
        jSONWriter29.writeString("hi!");
        boolean boolean41 = jSONWriter29.isUTF8();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        jSONWriter29.writeString((java.util.List<java.lang.String>) strList45);
        jSONWriter29.writeRaw((byte) -1);
        java.math.BigInteger bigInteger50 = null;
        jSONWriter29.writeBigInt(bigInteger50, (long) '#');
        byte[] byteArray53 = jSONWriter29.getBytes();
        jSONWriter23.writeHex(byteArray53);
        jSONWriter21.writeHex(byteArray53);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(afterFilter19);
        org.junit.Assert.assertNull(afterFilter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[76, 104, 105, 33, -106, 76, 104, 105, 33, 73, -1, -81]");
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter25 = context15.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(context15);
        java.lang.String str27 = context15.getDateFormat();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        boolean boolean29 = context15.isDateFormatHasHour();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertNull(valueFilter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        java.time.ZoneId zoneId21 = context15.getZoneId();
        com.alibaba.fastjson2.filter.NameFilter nameFilter22 = null;
        context15.setNameFilter(nameFilter22);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(zoneId21);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        jSONWriter3.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray18);
        boolean boolean23 = jSONWriter3.isWriteTypeInfo((java.lang.Object) "$", (long) '4');
        long long24 = jSONWriter3.getFeatures();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeName(2L);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter18.writeInt16((short) (byte) 100);
        boolean boolean34 = jSONWriter18.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        boolean boolean55 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean34, (java.lang.reflect.Type) wildcardClass51, (long) (byte) -1);
        boolean[] booleanArray62 = new boolean[] { false, false, false, true, true, true };
        jSONWriter1.writeBool(booleanArray62);
        jSONWriter1.endObject();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[false, false, false, true, true, true]");
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        int int6 = jSONWriter1.level();
        jSONWriter1.writeString("hi!");
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter1.writeDecimal(bigDecimal9, (long) (byte) 0);
        com.alibaba.fastjson2.JSONWriter.Context context12 = jSONWriter1.getContext();
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter16.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context28);
        java.time.format.DateTimeFormatter dateTimeFormatter30 = context28.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context28.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) feature34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34 };
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray36);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider31);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        boolean boolean41 = context39.isEnabled(feature40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context39);
        boolean boolean44 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter42, (long) (byte) 1);
        jSONWriter1.writeFloat((float) (byte) 10);
        int int47 = jSONWriter1.level();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(context12);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.time.Instant instant4 = null;
        jSONWriter0.writeInstant(instant4);
        jSONWriter0.writeSymbol((-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) feature11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11 };
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray13);
        com.alibaba.fastjson2.JSONWriter.Context context16 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray13);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = null;
        context16.setAfterFilter(afterFilter17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context34.config(feature35, false);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter54 = context53.getPropertyFilter();
        long long55 = context53.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter56 = null;
        context53.setLabelFilter(labelFilter56);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter58 = null;
        context53.setValueFilter(valueFilter58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        jSONWriter61.close();
        jSONWriter61.writeSymbol("");
        jSONWriter61.writeBooleanNull();
        jSONWriter61.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        boolean boolean72 = jSONWriter70.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class73 = null;
        boolean boolean75 = jSONWriter68.isWriteTypeInfo((java.lang.Object) jSONWriter70, class73, (long) ' ');
        byte[] byteArray77 = new byte[] { (byte) -1 };
        boolean boolean79 = jSONWriter70.writeTypeName(byteArray77, 0L);
        java.util.UUID uUID80 = null;
        jSONWriter70.writeUUID(uUID80);
        com.alibaba.fastjson2.JSONWriter.Context context82 = jSONWriter70.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context82);
        java.time.format.DateTimeFormatter dateTimeFormatter84 = context82.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider85 = context82.getProvider();
        java.lang.String str86 = context82.getDateFormat();
        boolean boolean87 = jSONWriter61.removeReference((java.lang.Object) context82);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter88 = context82.getLabelFilter();
        java.time.ZoneId zoneId89 = context82.getZoneId();
        context53.setZoneId(zoneId89);
        context34.setZoneId(zoneId89);
        context16.setZoneId(zoneId89);
        java.time.ZoneId zoneId93 = context16.getZoneId();
        jSONWriter0.startArray((java.lang.Object) zoneId93, 2);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertNull(propertyFilter54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(context82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNull(dateTimeFormatter84);
        org.junit.Assert.assertNotNull(objectWriterProvider85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(labelFilter88);
        org.junit.Assert.assertNotNull(zoneId89);
        org.junit.Assert.assertNotNull(zoneId93);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        jSONWriter3.writeDouble((double) '4');
        boolean boolean19 = jSONWriter3.isWriteNulls();
        jSONWriter3.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        java.time.LocalDate localDate24 = null;
        jSONWriter23.writeLocalDate(localDate24);
        boolean boolean26 = jSONWriter23.utf8;
        java.util.UUID uUID27 = null;
        jSONWriter23.writeUUID(uUID27);
        java.lang.String str29 = jSONWriter3.setPath(0, (java.lang.Object) uUID27);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        jSONWriter33.writeNull();
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter33.writeFloat((float) 0, decimalFormat45);
        boolean boolean47 = jSONWriter33.utf16;
        jSONWriter33.writeTypeName("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) feature52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature52 };
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) feature59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature59 };
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray61);
        java.time.ZoneId zoneId64 = null;
        context63.setZoneId(zoneId64);
        jSONWriter56.popPath((java.lang.Object) context63);
        float[] floatArray67 = new float[] {};
        jSONWriter56.writeFloat(floatArray67);
        jSONWriter33.writeFloat(floatArray67);
        jSONWriter3.writeFloat(floatArray67);
        jSONWriter3.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[]");
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter18.writeInt16((short) (byte) 100);
        boolean boolean34 = jSONWriter18.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        boolean boolean55 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean34, (java.lang.reflect.Type) wildcardClass51, (long) (byte) -1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter56 = null;
        com.alibaba.fastjson2.JSONWriter.Path path57 = null;
        com.alibaba.fastjson2.JSONWriter.Path path59 = new com.alibaba.fastjson2.JSONWriter.Path(path57, "");
        com.alibaba.fastjson2.JSONWriter.Path path61 = new com.alibaba.fastjson2.JSONWriter.Path(path59, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path63 = new com.alibaba.fastjson2.JSONWriter.Path(path61, "hi!");
        java.lang.String str64 = path61.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class71 = null;
        boolean boolean73 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter68, class71, (long) ' ');
        byte[] byteArray75 = new byte[] { (byte) -1 };
        boolean boolean77 = jSONWriter68.writeTypeName(byteArray75, 0L);
        java.util.UUID uUID78 = null;
        jSONWriter68.writeUUID(uUID78);
        com.alibaba.fastjson2.JSONWriter.Context context80 = jSONWriter68.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter81 = context80.getPropertyFilter();
        long long82 = context80.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter83 = null;
        context80.setLabelFilter(labelFilter83);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider85 = context80.provider;
        boolean boolean86 = path61.equals((java.lang.Object) context80);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context80.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter88 = null;
        context80.setNameFilter(nameFilter88);
        java.lang.String str90 = jSONWriter1.setPath(fieldWriter56, (java.lang.Object) context80);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter91 = context80.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter92 = null;
        context80.setContextValueFilter(contextValueFilter92);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter94 = context80.getLabelFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[1]" + "'", str64, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(context80);
        org.junit.Assert.assertNull(propertyFilter81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(afterFilter87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(contextValueFilter91);
        org.junit.Assert.assertNull(labelFilter94);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        boolean boolean27 = jSONWriter26.isRefDetect();
        java.lang.String str30 = jSONWriter26.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        long long34 = jSONWriter32.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        long long46 = jSONWriter37.getFeatures();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean49 = jSONWriter32.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass47, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter50 = jSONWriter26.getObjectWriter((java.lang.Class) wildcardClass47);
        boolean boolean51 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context23, (java.lang.reflect.Type) wildcardClass47);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter52 = context23.getValueFilter();
        boolean boolean54 = context23.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.NameFilter nameFilter55 = context23.getNameFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objectWriter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(valueFilter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(nameFilter55);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) 100 };
        boolean boolean24 = jSONWriter13.writeTypeName(byteArray22, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        int[] intArray30 = new int[] { (short) -1 };
        jSONWriter28.writeInt32(intArray30);
        java.lang.String str32 = jSONWriter13.setPath("hi!", (java.lang.Object) intArray30);
        jSONWriter1.writeInt32(intArray30);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter35.isWriteTypeInfo((java.lang.Object) jSONWriter37, class40, (long) ' ');
        byte[] byteArray44 = new byte[] { (byte) -1 };
        boolean boolean46 = jSONWriter37.writeTypeName(byteArray44, 0L);
        java.util.UUID uUID47 = null;
        jSONWriter37.writeUUID(uUID47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = jSONWriter37.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context49);
        java.time.LocalTime localTime51 = null;
        jSONWriter50.writeLocalTime(localTime51);
        boolean boolean53 = jSONWriter50.isBeanToArray();
        boolean boolean54 = jSONWriter50.isIgnoreNoneSerializable();
        byte[] byteArray55 = jSONWriter50.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty;
        jSONWriter50.config(feature56, false);
        jSONWriter1.writeEnum((java.lang.Enum) feature56);
        java.math.BigInteger bigInteger60 = null;
        jSONWriter1.writeBigInt(bigInteger60, (long) (short) 1);
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter1.writeFloat((float) (short) 1, decimalFormat64);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(context49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-81]");
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty));
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        jSONWriter1.writeTypeName("");
        jSONWriter1.writeStringNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        jSONWriter1.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        jSONWriter1.writeRaw((byte) 1);
        java.math.BigInteger bigInteger15 = null;
        jSONWriter1.writeBigInt(bigInteger15, 65536L);
        jSONWriter1.writeTypeName("[1][0].\\[1\\]\\.hi\\\\\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        jSONWriter5.writeDateTime19(4, (int) (short) 0, (int) (short) -1, (int) 'a', (int) '#', (int) (byte) 100);
        boolean[] booleanArray17 = new boolean[] { true, false, true, true };
        jSONWriter5.writeBool(booleanArray17);
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean20 = jSONWriter5.isEnabled(feature19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        jSONWriter22.close();
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter22.writeFloat((float) 10, decimalFormat25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean33 = jSONWriter28.writeTypeName(byteArray31, (long) 10);
        boolean boolean35 = jSONWriter22.writeTypeName(byteArray31, (long) (byte) 100);
        jSONWriter22.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        jSONWriter39.close();
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter39.writeFloat((float) 10, decimalFormat42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean50 = jSONWriter45.writeTypeName(byteArray48, (long) 10);
        boolean boolean52 = jSONWriter39.writeTypeName(byteArray48, (long) (byte) 100);
        jSONWriter39.writeInt16((short) (byte) 100);
        boolean boolean55 = jSONWriter39.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter57);
        long long59 = jSONWriter57.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat66 = null;
        jSONWriter62.writeDouble(1.0d, decimalFormat66);
        boolean boolean69 = jSONWriter62.removeReference((java.lang.Object) (short) -1);
        jSONWriter62.writeArrayNull();
        long long71 = jSONWriter62.getFeatures();
        java.lang.Class<?> wildcardClass72 = jSONWriter62.getClass();
        boolean boolean74 = jSONWriter57.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass72, (long) (short) 10);
        boolean boolean76 = jSONWriter22.isWriteTypeInfo((java.lang.Object) boolean55, (java.lang.reflect.Type) wildcardClass72, (long) (byte) -1);
        boolean[] booleanArray83 = new boolean[] { false, false, false, true, true, true };
        jSONWriter22.writeBool(booleanArray83);
        boolean boolean85 = jSONWriter5.isRefDetect((java.lang.Object) jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, false, true, true]");
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(booleanArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray83), "[false, false, false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        boolean boolean19 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        java.math.BigInteger bigInteger21 = null;
        jSONWriter20.writeBigInt(bigInteger21, 5L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter20);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        long long13 = jSONWriter1.getFeatures((long) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) -1 };
        boolean boolean26 = jSONWriter17.writeTypeName(byteArray24, 0L);
        java.util.UUID uUID27 = null;
        jSONWriter17.writeUUID(uUID27);
        jSONWriter17.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        java.util.UUID uUID44 = null;
        jSONWriter34.writeUUID(uUID44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = jSONWriter34.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context46.config(feature47, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) feature52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature52 };
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray54);
        context46.config(featureArray54);
        jSONWriter17.config(featureArray54);
        boolean boolean59 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter17);
        jSONWriter17.writeName("");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(context46);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        long long6 = jSONWriter1.getFeatures();
        jSONWriter1.writeRaw((byte) -1);
        jSONWriter1.writeString("");
        jSONWriter1.endArray();
        boolean boolean12 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        jSONWriter1.config(feature13, true);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class40 = null;
        jSONWriter27.checkAndWriteTypeName((java.lang.Object) feature39, class40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature39 };
        context15.config(featureArray42);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter44 = null;
        context15.setPropertyPreFilter(propertyPreFilter44);
        boolean boolean46 = context15.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextNameFilter22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter18 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter19 = null;
        context15.setLabelFilter(labelFilter19);
        boolean boolean21 = context15.isDateFormatHasHour();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNull(valueFilter18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context15.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter30.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider29, featureArray35);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        byte[] byteArray52 = new byte[] { (byte) -1 };
        boolean boolean54 = jSONWriter45.writeTypeName(byteArray52, 0L);
        java.util.UUID uUID55 = null;
        jSONWriter45.writeUUID(uUID55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = jSONWriter45.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter58 = context57.getPropertyFilter();
        long long59 = context57.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter60 = null;
        context57.setLabelFilter(labelFilter60);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider62 = context57.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter63 = null;
        context57.setPropertyPreFilter(propertyPreFilter63);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter65 = null;
        context57.setPropertyPreFilter(propertyPreFilter65);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = null;
        context57.setLabelFilter(labelFilter67);
        jSONWriter41.popPath((java.lang.Object) context57);
        jSONWriter41.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(context57);
        org.junit.Assert.assertNull(propertyFilter58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider62);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        java.time.Instant instant18 = null;
        jSONWriter3.writeInstant(instant18);
        jSONWriter3.writeTypeName("$");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        jSONWriter40.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = context61.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context61.getProvider();
        java.lang.String str65 = context61.getDateFormat();
        boolean boolean66 = jSONWriter40.removeReference((java.lang.Object) context61);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = context61.getLabelFilter();
        java.time.ZoneId zoneId68 = context61.getZoneId();
        context38.setZoneId(zoneId68);
        context21.setZoneId(zoneId68);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context21);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter72 = null;
        context21.setPropertyFilter(propertyFilter72);
        java.lang.String str74 = context21.getDateFormat();
        boolean boolean75 = context21.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(labelFilter67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        jSONWriter16.endArray();
        java.time.Instant instant20 = null;
        jSONWriter16.writeInstant(instant20);
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter16.writeDecimal(bigDecimal22);
        jSONWriter16.close();
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter16.context;
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter16.writeDouble((double) 100, decimalFormat27);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context25);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        boolean boolean14 = jSONWriter13.isRefDetect();
        java.lang.String str17 = jSONWriter13.setPath("hi!", (java.lang.Object) 1);
        jSONWriter13.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter21);
        long long23 = jSONWriter21.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter26.writeDouble(1.0d, decimalFormat30);
        boolean boolean33 = jSONWriter26.removeReference((java.lang.Object) (short) -1);
        jSONWriter26.writeArrayNull();
        long long35 = jSONWriter26.getFeatures();
        java.lang.Class<?> wildcardClass36 = jSONWriter26.getClass();
        boolean boolean38 = jSONWriter21.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass36, (long) (short) 10);
        int[] intArray45 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter21.writeInt32(intArray45);
        double[] doubleArray51 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter21.writeDouble(doubleArray51);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter13.writeDouble(doubleArray51, decimalFormat53);
        jSONWriter1.writeDouble(doubleArray51);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        jSONWriter4.writeSymbol((-1));
        java.lang.String str9 = jSONWriter1.setPath("", (java.lang.Object) jSONWriter4);
        jSONWriter4.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray15 = null;
        jSONWriter12.writeHex(byteArray15);
        boolean boolean17 = jSONWriter12.isRefDetect();
        jSONWriter12.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = context34.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        boolean boolean38 = jSONWriter37.isRefDetect();
        java.lang.String str41 = jSONWriter37.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter43);
        long long45 = jSONWriter43.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat52 = null;
        jSONWriter48.writeDouble(1.0d, decimalFormat52);
        boolean boolean55 = jSONWriter48.removeReference((java.lang.Object) (short) -1);
        jSONWriter48.writeArrayNull();
        long long57 = jSONWriter48.getFeatures();
        java.lang.Class<?> wildcardClass58 = jSONWriter48.getClass();
        boolean boolean60 = jSONWriter43.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass58, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter61 = jSONWriter37.getObjectWriter((java.lang.Class) wildcardClass58);
        boolean boolean62 = jSONWriter12.isWriteTypeInfo((java.lang.Object) context34, (java.lang.reflect.Type) wildcardClass58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        java.lang.reflect.Type type66 = null;
        boolean boolean68 = jSONWriter64.isWriteTypeInfo((java.lang.Object) (byte) 1, type66, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        jSONWriter70.close();
        jSONWriter70.writeSymbol("");
        jSONWriter70.writeBooleanNull();
        boolean boolean75 = jSONWriter70.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter77);
        long long79 = jSONWriter77.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray81 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray81);
        boolean boolean84 = jSONWriter82.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat86 = null;
        jSONWriter82.writeDouble(1.0d, decimalFormat86);
        boolean boolean89 = jSONWriter82.removeReference((java.lang.Object) (short) -1);
        jSONWriter82.writeArrayNull();
        long long91 = jSONWriter82.getFeatures();
        java.lang.Class<?> wildcardClass92 = jSONWriter82.getClass();
        boolean boolean94 = jSONWriter77.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass92, (long) (short) 10);
        jSONWriter64.checkAndWriteTypeName((java.lang.Object) jSONWriter70, (java.lang.Class) wildcardClass92);
        boolean boolean97 = jSONWriter4.isWriteMapTypeInfo((java.lang.Object) jSONWriter12, (java.lang.Class) wildcardClass92, (long) '4');
        long long99 = jSONWriter4.getFeatures((long) (short) -1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNull(propertyFilter35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectWriter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(featureArray81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + (-1L) + "'", long99 == (-1L));
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter1.writeFloat((float) (-1), decimalFormat16);
        jSONWriter1.writeInt16((short) (byte) -1);
        boolean boolean21 = jSONWriter1.hasFilter(4L);
        byte[] byteArray22 = jSONWriter1.getBytes();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-110, 10, -110, 10, 100, 0, -74, -1, -68, -1, -1]");
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        java.time.LocalDateTime localDateTime4 = null;
        jSONWriter1.writeLocalDateTime(localDateTime4);
        byte[] byteArray6 = jSONWriter1.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        jSONWriter1.config(featureArray7);
        jSONWriter1.close();
        boolean boolean13 = jSONWriter1.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-81]");
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        boolean boolean11 = jSONWriter1.utf16;
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context27);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context27, symbolTable29);
        java.lang.reflect.Type type31 = null;
        boolean boolean32 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter30, type31);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter2.writeTypeName("");
        jSONWriter2.writeBool(false);
        jSONWriter2.writeInt8((byte) 10);
        jSONWriter2.writeArrayNull();
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter2.writeDecimal(bigDecimal10, (long) 3);
        jSONWriter2.startArray((int) '4');
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        boolean boolean7 = jSONWriter1.isEnabled((long) (short) 1);
        jSONWriter1.endArray();
        jSONWriter1.writeDateYYYMMDD8((int) (byte) -1, (int) 'a', (int) (byte) 0);
        jSONWriter1.writeReference("[1]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = context15.getLabelFilter();
        boolean boolean25 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context15.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter28 = null;
        context15.setPropertyPreFilter(propertyPreFilter28);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(labelFilter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        java.math.BigInteger bigInteger19 = null;
        jSONWriter1.writeBigInt(bigInteger19, (-1L));
        java.lang.Enum enum22 = null;
        jSONWriter1.writeEnum(enum22);
        boolean boolean24 = jSONWriter1.utf8;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean32 = jSONWriter27.writeTypeName(byteArray30, (long) 10);
        jSONWriter14.writeNameRaw(byteArray30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.of(context38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal44 = null;
        jSONWriter41.writeDecimal(bigDecimal44);
        boolean boolean47 = jSONWriter41.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter41.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj52 = null;
        jSONWriter41.startArray(obj52, (-1));
        jSONWriter41.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray64 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        jSONWriter41.writeString((java.util.List<java.lang.String>) strList65);
        jSONWriter39.writeString((java.util.List<java.lang.String>) strList65);
        jSONWriter14.write((java.util.List) strList65);
        jSONWriter1.write((java.util.List) strList65);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray72 = null;
        jSONWriter71.writeDouble(doubleArray72);
        jSONWriter71.writeArrayNull();
        short[] shortArray78 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter71.writeInt16(shortArray78);
        jSONWriter1.writeInt16(shortArray78);
        boolean boolean81 = jSONWriter1.isBeanToArray();
        boolean boolean82 = jSONWriter1.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(shortArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray78), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue;
        boolean boolean11 = jSONWriter9.isEnabled(feature10);
        java.time.ZonedDateTime zonedDateTime12 = null;
        jSONWriter9.writeZonedDateTime(zonedDateTime12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) feature16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) feature23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23 };
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        java.time.ZoneId zoneId28 = null;
        context27.setZoneId(zoneId28);
        jSONWriter20.popPath((java.lang.Object) context27);
        java.nio.charset.Charset charset31 = jSONWriter20.getCharset();
        jSONWriter20.writeRaw("hi!");
        java.math.BigDecimal bigDecimal34 = null;
        jSONWriter20.writeDecimal(bigDecimal34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter37);
        boolean boolean39 = jSONWriter37.utf16;
        long long41 = jSONWriter37.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = jSONWriter37.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class49 = null;
        boolean boolean51 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter46, class49, (long) ' ');
        boolean boolean53 = jSONWriter44.isEnabled((long) ' ');
        jSONWriter44.writeString("hi!");
        char[] charArray56 = new char[] {};
        jSONWriter44.writeString(charArray56);
        jSONWriter37.writeString(charArray56);
        jSONWriter20.writeNameRaw(charArray56);
        jSONWriter9.writeString(charArray56);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertNull(symbolTable42);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[]");
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        byte[] byteArray43 = null;
        jSONWriter33.writeBinary(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter33.writeHex(byteArray51);
        jSONWriter25.writeBinary(byteArray51);
        jSONWriter25.writeChar(' ');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 1, -1, 1, -1]");
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        jSONWriter24.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context53.config(feature54, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) feature59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature59 };
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray61);
        context53.config(featureArray61);
        jSONWriter24.config(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context66 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context71 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context72 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.of(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.of(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context75 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean10 = jSONWriter1.isEnabled(feature9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        jSONWriter1.writeInt16((short) (byte) 1);
        jSONWriter1.writeMillis((long) 5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.util.List list20 = null;
        jSONWriter18.write(list20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = null;
        jSONWriter22.writeDouble(doubleArray23);
        boolean boolean25 = jSONWriter22.utf16;
        boolean boolean26 = jSONWriter18.containsReference((java.lang.Object) boolean25);
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) -1 };
        boolean boolean39 = jSONWriter30.writeTypeName(byteArray37, 0L);
        java.util.UUID uUID40 = null;
        jSONWriter30.writeUUID(uUID40);
        com.alibaba.fastjson2.JSONWriter.Context context42 = jSONWriter30.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context42);
        java.time.LocalTime localTime44 = null;
        jSONWriter43.writeLocalTime(localTime44);
        boolean boolean46 = jSONWriter43.isBeanToArray();
        boolean boolean47 = jSONWriter43.isIgnoreNoneSerializable();
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter18.isWriteMapTypeInfo((java.lang.Object) boolean47, class48, 4L);
        com.alibaba.fastjson2.SymbolTable symbolTable51 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class57 = null;
        boolean boolean59 = jSONWriter52.isWriteTypeInfo((java.lang.Object) jSONWriter54, class57, (long) ' ');
        char[] charArray60 = new char[] {};
        jSONWriter54.writeString(charArray60);
        jSONWriter18.writeString(charArray60, (int) (short) 10, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        jSONWriter66.close();
        jSONWriter66.writeSymbol("");
        jSONWriter66.writeBooleanNull();
        jSONWriter66.endArray();
        boolean boolean72 = jSONWriter66.isRefDetect();
        boolean boolean73 = jSONWriter18.isIgnoreNoneSerializable((java.lang.Object) jSONWriter66);
        java.util.UUID uUID74 = null;
        jSONWriter66.writeUUID(uUID74);
        java.lang.String str76 = jSONWriter1.setPath((int) 'a', (java.lang.Object) jSONWriter66);
        int int77 = jSONWriter66.level();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(context42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[]");
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context26.setLabelFilter(labelFilter29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context26.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        jSONWriter32.config(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray37);
        boolean boolean42 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter41);
        jSONWriter41.writeRaw('#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        jSONWriter46.close();
        jSONWriter46.writeSymbol("");
        jSONWriter46.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter46.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter52 = null;
        context51.setPropertyPreFilter(propertyPreFilter52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean58 = jSONWriter56.isRefDetect((java.lang.Object) feature57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature57 };
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray59);
        context51.config(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray59);
        boolean boolean65 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter64);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path6, "[1]");
        com.alibaba.fastjson2.JSONWriter.Path path13 = new com.alibaba.fastjson2.JSONWriter.Path(path11, "[1].hi\\!");
        java.lang.String str14 = path13.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1].hi\\!.\\[1\\].\\[1\\]\\.hi\\\\\\!" + "'", str14, "[1].hi\\!.\\[1\\].\\[1\\]\\.hi\\\\\\!");
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context15.getPropertyFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(context15);
        jSONWriter25.writeMillis((long) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal32 = null;
        jSONWriter29.writeDecimal(bigDecimal32);
        boolean boolean35 = jSONWriter29.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        boolean boolean46 = jSONWriter29.isRefDetect((java.lang.Object) jSONWriter37);
        boolean boolean47 = jSONWriter37.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        jSONWriter50.writeTypeName("");
        boolean boolean53 = jSONWriter50.isUseSingleQuotes();
        jSONWriter50.startObject();
        boolean boolean55 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        java.lang.reflect.Type type59 = null;
        boolean boolean61 = jSONWriter57.isWriteTypeInfo((java.lang.Object) (byte) 1, type59, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        boolean boolean65 = jSONWriter63.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat67 = null;
        jSONWriter63.writeDouble(1.0d, decimalFormat67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean75 = jSONWriter70.writeTypeName(byteArray73, (long) 10);
        jSONWriter63.writeStringLatin1(byteArray73);
        jSONWriter57.writeNameRaw(byteArray73);
        jSONWriter37.writeNameRaw(byteArray73);
        jSONWriter25.writeBinary(byteArray73);
        java.math.BigDecimal bigDecimal80 = null;
        java.text.DecimalFormat decimalFormat82 = null;
        jSONWriter25.writeDecimal(bigDecimal80, 65536L, decimalFormat82);
        jSONWriter25.writeRaw(' ');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean13 = jSONWriter8.writeTypeName(byteArray11, (long) 10);
        jSONWriter1.writeStringLatin1(byteArray11);
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        int int17 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = null;
        jSONWriter18.writeDouble(doubleArray19);
        boolean boolean21 = jSONWriter18.utf16;
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter18.writeDecimal(bigDecimal22, 100L);
        boolean boolean25 = jSONWriter18.utf16;
        boolean boolean27 = jSONWriter18.isEnabled((long) '4');
        boolean boolean28 = jSONWriter1.containsReference((java.lang.Object) jSONWriter18);
        java.time.LocalDate localDate29 = null;
        jSONWriter1.writeLocalDate(localDate29);
        jSONWriter1.writeTypeName("[1].hi\\!");
        long long34 = jSONWriter1.getFeatures((-1L));
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path4.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        boolean boolean29 = path4.equals((java.lang.Object) context23);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = context23.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = null;
        context23.setNameFilter(nameFilter31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context23);
        java.lang.String str34 = context23.getDateFormat();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter35 = null;
        context23.setContextValueFilter(contextValueFilter35);
        boolean boolean38 = context23.isEnabled((long) (byte) 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1]" + "'", str7, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(afterFilter30);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter16 = null;
        context15.setPropertyPreFilter(propertyPreFilter16);
        context15.setDateFormat("[1][0]");
        boolean boolean20 = context15.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        jSONWriter1.writeFloat((java.lang.Float) 0.0f);
        jSONWriter1.writeBooleanNull();
        jSONWriter1.writeFloat((java.lang.Float) 10.0f);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        char[] charArray17 = new char[] { '#', ' ' };
        jSONWriter14.writeString(charArray17, (int) (byte) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray17, 8, 8);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#,  ]");
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray26 = null;
        jSONWriter23.writeHex(byteArray26);
        boolean boolean28 = jSONWriter23.isRefDetect();
        jSONWriter23.writeNumberNull();
        jSONWriter23.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean33 = jSONWriter23.isEnabled(feature32);
        boolean boolean34 = context15.isEnabled(feature32);
        long long35 = context15.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean21 = jSONWriter16.writeTypeName(byteArray19, (long) 10);
        jSONWriter3.writeNameRaw(byteArray19);
        boolean boolean23 = jSONWriter3.isWriteNulls();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter3.isIgnoreNoneSerializable(obj24);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        jSONWriter3.close();
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter3.writeFloat((float) 10, decimalFormat6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean14 = jSONWriter9.writeTypeName(byteArray12, (long) 10);
        boolean boolean16 = jSONWriter3.writeTypeName(byteArray12, (long) (byte) 100);
        jSONWriter1.writeNameRaw(byteArray12, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter20);
        boolean boolean22 = jSONWriter20.utf16;
        jSONWriter20.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray26 = null;
        jSONWriter25.writeDouble(doubleArray26);
        jSONWriter25.writeArrayNull();
        short[] shortArray32 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter25.writeInt16(shortArray32);
        java.lang.String str34 = jSONWriter20.setPath(fieldWriter24, (java.lang.Object) jSONWriter25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        java.lang.reflect.Type type38 = null;
        boolean boolean40 = jSONWriter36.isWriteTypeInfo((java.lang.Object) (byte) 1, type38, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        jSONWriter42.close();
        jSONWriter42.writeSymbol("");
        jSONWriter42.writeBooleanNull();
        boolean boolean47 = jSONWriter42.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter49);
        long long51 = jSONWriter49.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter54.writeDouble(1.0d, decimalFormat58);
        boolean boolean61 = jSONWriter54.removeReference((java.lang.Object) (short) -1);
        jSONWriter54.writeArrayNull();
        long long63 = jSONWriter54.getFeatures();
        java.lang.Class<?> wildcardClass64 = jSONWriter54.getClass();
        boolean boolean66 = jSONWriter49.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass64, (long) (short) 10);
        jSONWriter36.checkAndWriteTypeName((java.lang.Object) jSONWriter42, (java.lang.Class) wildcardClass64);
        jSONWriter42.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        jSONWriter71.close();
        jSONWriter71.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray76 = null;
        jSONWriter75.writeDouble(doubleArray76);
        jSONWriter75.writeArrayNull();
        short[] shortArray82 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter75.writeInt16(shortArray82);
        jSONWriter71.writeInt16(shortArray82);
        jSONWriter42.writeInt16(shortArray82);
        jSONWriter25.writeInt16(shortArray82);
        jSONWriter1.writeInt16(shortArray82);
        jSONWriter1.writeInt16((short) (byte) 0);
        int int90 = jSONWriter1.level();
        boolean boolean91 = jSONWriter1.isIgnoreErrorGetter();
        jSONWriter1.endArray();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[0, 0, 100]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        boolean boolean28 = context26.isEnabled(feature27);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context26.provider;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        jSONWriter26.writeDateTimeISO8601((int) (byte) 0, (int) (short) 0, (int) (byte) 10, 10, (int) (byte) 10, (int) (byte) 1, (int) 'a', 4, true);
        java.nio.charset.Charset charset37 = jSONWriter26.getCharset();
        java.nio.charset.Charset charset38 = jSONWriter26.getCharset();
        jSONWriter26.startArray();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charset38);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter25 = context15.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(context15);
        boolean boolean27 = jSONWriter26.isUTF16();
        java.time.Instant instant28 = null;
        jSONWriter26.writeInstant(instant28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter26);
        jSONWriter26.writeDouble((double) 4L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertNull(valueFilter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(jSONWriter30);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        boolean boolean25 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter26 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter27 = context15.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(propertyPreFilter26);
        org.junit.Assert.assertNull(afterFilter27);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        jSONWriter16.endArray();
        jSONWriter16.writeString("");
        boolean boolean22 = jSONWriter16.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) feature25);
        jSONWriter16.writeEnum((java.lang.Enum) feature25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        long long31 = jSONWriter29.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter34.writeDouble(1.0d, decimalFormat38);
        boolean boolean41 = jSONWriter34.removeReference((java.lang.Object) (short) -1);
        jSONWriter34.writeArrayNull();
        long long43 = jSONWriter34.getFeatures();
        java.lang.Class<?> wildcardClass44 = jSONWriter34.getClass();
        boolean boolean46 = jSONWriter29.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass44, (long) (short) 10);
        int[] intArray53 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter29.writeInt32(intArray53);
        double[] doubleArray59 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter29.writeDouble(doubleArray59);
        java.text.DecimalFormat decimalFormat61 = null;
        jSONWriter16.writeDouble(doubleArray59, decimalFormat61);
        java.util.UUID uUID63 = null;
        jSONWriter16.writeUUID(uUID63);
        long long66 = jSONWriter16.getFeatures(0L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        java.lang.String str21 = context15.getDateFormat();
        java.time.ZoneId zoneId22 = context15.getZoneId();
        java.lang.String str23 = context15.getDateFormat();
        boolean boolean24 = context15.isDateFormatHasHour();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str1 = path0.toString();
        com.alibaba.fastjson2.JSONWriter.Path path3 = new com.alibaba.fastjson2.JSONWriter.Path(path0, (int) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Path path5 = new com.alibaba.fastjson2.JSONWriter.Path(path3, (int) (short) 10);
        java.lang.String str6 = path3.toString();
        com.alibaba.fastjson2.JSONWriter.Path path7 = path3.parent;
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$" + "'", str1, "$");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "$[10]" + "'", str6, "$[10]");
        org.junit.Assert.assertNotNull(path7);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        boolean boolean18 = jSONWriter3.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteLongAsString;
        boolean boolean20 = jSONWriter3.isEnabled(feature19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) 100 };
        boolean boolean33 = jSONWriter22.writeTypeName(byteArray31, (long) (-1));
        jSONWriter3.writeNameRaw(byteArray31);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteLongAsString + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteLongAsString));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter7);
        long long9 = jSONWriter7.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter12.writeDouble(1.0d, decimalFormat16);
        boolean boolean19 = jSONWriter12.removeReference((java.lang.Object) (short) -1);
        jSONWriter12.writeArrayNull();
        long long21 = jSONWriter12.getFeatures();
        java.lang.Class<?> wildcardClass22 = jSONWriter12.getClass();
        boolean boolean24 = jSONWriter7.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass22, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter25 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        long long29 = jSONWriter27.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter32.writeDouble(1.0d, decimalFormat36);
        boolean boolean39 = jSONWriter32.removeReference((java.lang.Object) (short) -1);
        jSONWriter32.writeArrayNull();
        long long41 = jSONWriter32.getFeatures();
        java.lang.Class<?> wildcardClass42 = jSONWriter32.getClass();
        boolean boolean44 = jSONWriter27.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass42, (long) (short) 10);
        int[] intArray51 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter27.writeInt32(intArray51);
        double[] doubleArray57 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter27.writeDouble(doubleArray57);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter1.writeDouble(doubleArray57, decimalFormat59);
        jSONWriter1.writeStringNull();
        boolean boolean62 = jSONWriter1.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable63 = jSONWriter1.getSymbolTable();
        boolean boolean64 = jSONWriter1.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(symbolTable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.writeInt8((byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = null;
        jSONWriter4.writeDouble(doubleArray5);
        boolean boolean7 = jSONWriter4.utf16;
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter4.writeDecimal(bigDecimal8, 100L);
        boolean boolean11 = jSONWriter4.utf16;
        java.lang.Object obj12 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter4.isWriteTypeInfo(obj12, (java.lang.Class) wildcardClass24, (long) (short) 0);
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter4, (long) (byte) 1);
        jSONWriter4.writeChar('#');
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        java.math.BigInteger bigInteger11 = null;
        jSONWriter1.writeBigInt(bigInteger11, (-1L));
        java.util.Map map14 = null;
        jSONWriter1.write(map14);
        jSONWriter1.writeSymbol("[1]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        jSONWriter0.writeReference("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        jSONWriter0.startArray((int) (short) 10);
        boolean boolean13 = jSONWriter0.isEnabled(1L);
        java.time.Instant instant14 = null;
        jSONWriter0.writeInstant(instant14);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean4 = jSONWriter0.containsReference((java.lang.Object) 5);
        float[] floatArray8 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter0.writeFloat(floatArray8);
        java.time.ZonedDateTime zonedDateTime10 = null;
        jSONWriter0.writeZonedDateTime(zonedDateTime10);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        jSONWriter15.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context44.config(feature45, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) feature50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature50 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        context44.config(featureArray52);
        jSONWriter15.config(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        jSONWriter59.close();
        jSONWriter59.writeSymbol("");
        jSONWriter59.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable64 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        boolean boolean69 = jSONWriter67.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class70 = null;
        boolean boolean72 = jSONWriter65.isWriteTypeInfo((java.lang.Object) jSONWriter67, class70, (long) ' ');
        boolean boolean74 = jSONWriter65.isEnabled((long) ' ');
        jSONWriter65.writeString("hi!");
        char[] charArray77 = new char[] {};
        jSONWriter65.writeString(charArray77);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter80);
        long long82 = jSONWriter80.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray84 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray84);
        boolean boolean87 = jSONWriter85.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat89 = null;
        jSONWriter85.writeDouble(1.0d, decimalFormat89);
        boolean boolean92 = jSONWriter85.removeReference((java.lang.Object) (short) -1);
        jSONWriter85.writeArrayNull();
        long long94 = jSONWriter85.getFeatures();
        java.lang.Class<?> wildcardClass95 = jSONWriter85.getClass();
        boolean boolean97 = jSONWriter80.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass95, (long) (short) 10);
        boolean boolean98 = jSONWriter59.isWriteTypeInfo((java.lang.Object) jSONWriter65, (java.lang.reflect.Type) wildcardClass95);
        boolean boolean99 = jSONWriter0.isWriteTypeInfo((java.lang.Object) context57, (java.lang.Class) wildcardClass95);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(featureArray84);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean9 = jSONWriter3.isBeanToArray();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter12.writeDecimal(bigDecimal15);
        boolean boolean18 = jSONWriter12.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter12.writeArrayNull();
        jSONWriter12.writeChar('a');
        jSONWriter12.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter12.getContext();
        boolean boolean31 = context29.isEnabled((long) (short) 100);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter32 = null;
        context29.setAfterFilter(afterFilter32);
        java.lang.String str34 = jSONWriter3.setPath(fieldWriter10, (java.lang.Object) afterFilter32);
        java.math.BigInteger bigInteger35 = null;
        jSONWriter3.writeBigInt(bigInteger35, 0L);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        jSONWriter3.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable50 = jSONWriter41.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter41.getContext();
        java.math.BigDecimal bigDecimal52 = null;
        jSONWriter41.writeDecimal(bigDecimal52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) feature56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature56 };
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray58);
        boolean boolean62 = jSONWriter41.isWriteTypeInfo((java.lang.Object) context60, 65536L);
        int[] intArray65 = new int[] { 6, 4 };
        jSONWriter41.writeInt32(intArray65);
        jSONWriter3.writeInt32(intArray65);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(symbolTable50);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[6, 4]");
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter1.symbolTable;
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean8 = jSONWriter1.utf8;
        long long9 = jSONWriter1.getFeatures();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDateYYYMMDD10((int) '#', 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable4);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.startArray((int) (short) 1);
        boolean boolean12 = jSONWriter1.isWriteNulls();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        jSONWriter16.endArray();
        jSONWriter16.writeString("");
        boolean boolean22 = jSONWriter16.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) feature25);
        jSONWriter16.writeEnum((java.lang.Enum) feature25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        long long31 = jSONWriter29.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter34.writeDouble(1.0d, decimalFormat38);
        boolean boolean41 = jSONWriter34.removeReference((java.lang.Object) (short) -1);
        jSONWriter34.writeArrayNull();
        long long43 = jSONWriter34.getFeatures();
        java.lang.Class<?> wildcardClass44 = jSONWriter34.getClass();
        boolean boolean46 = jSONWriter29.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass44, (long) (short) 10);
        int[] intArray53 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter29.writeInt32(intArray53);
        double[] doubleArray59 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter29.writeDouble(doubleArray59);
        java.text.DecimalFormat decimalFormat61 = null;
        jSONWriter16.writeDouble(doubleArray59, decimalFormat61);
        java.time.LocalTime localTime63 = null;
        jSONWriter16.writeLocalTime(localTime63);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter1.symbolTable;
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter8 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        jSONWriter12.writeInt8((byte) 1);
        jSONWriter12.endArray();
        jSONWriter12.writeMillis((long) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter12);
        jSONWriter27.writeString("hi!");
        java.lang.String str30 = jSONWriter7.setPath(fieldWriter8, (java.lang.Object) jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable4);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.close();
        jSONWriter3.writeSymbol("[1].hi\\!");
        boolean boolean18 = jSONWriter3.isIgnoreNoneSerializable();
        jSONWriter3.writeNull();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        jSONWriter23.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) -1 };
        boolean boolean49 = jSONWriter40.writeTypeName(byteArray47, 0L);
        java.util.UUID uUID50 = null;
        jSONWriter40.writeUUID(uUID50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter40.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context52.config(feature53, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean59 = jSONWriter57.isRefDetect((java.lang.Object) feature58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature58 };
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray60);
        context52.config(featureArray60);
        jSONWriter23.config(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.of(featureArray60);
        jSONWriter3.popPath((java.lang.Object) jSONWriter65);
        java.math.BigDecimal bigDecimal67 = null;
        jSONWriter65.writeDecimal(bigDecimal67, 0L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter65);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        boolean boolean19 = jSONWriter16.isBeanToArray();
        jSONWriter16.startArray(0);
        jSONWriter16.writeBooleanNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.close();
        jSONWriter3.writeSymbol("[1].hi\\!");
        com.alibaba.fastjson2.SymbolTable symbolTable18 = jSONWriter3.symbolTable;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context35);
        java.time.format.DateTimeFormatter dateTimeFormatter37 = context35.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider38 = context35.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider38, featureArray39);
        java.math.BigInteger bigInteger44 = null;
        jSONWriter43.writeBigInt(bigInteger44, (long) 1);
        java.nio.charset.Charset charset47 = jSONWriter43.getCharset();
        byte[] byteArray48 = jSONWriter19.getBytes(charset47);
        jSONWriter3.writeHex(byteArray48);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(symbolTable18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(objectWriterProvider38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter18.writeDouble(1.0d, decimalFormat22);
        boolean boolean25 = jSONWriter18.removeReference((java.lang.Object) (short) -1);
        jSONWriter18.writeArrayNull();
        jSONWriter18.startArray((int) (short) 1);
        java.time.Instant instant29 = null;
        jSONWriter18.writeInstant(instant29);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        java.util.UUID uUID44 = null;
        jSONWriter34.writeUUID(uUID44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = jSONWriter34.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter47 = context46.getPropertyFilter();
        long long48 = context46.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter49 = null;
        context46.setLabelFilter(labelFilter49);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider51 = context46.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter52 = null;
        context46.setPropertyPreFilter(propertyPreFilter52);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        boolean boolean55 = context46.isEnabled(feature54);
        boolean boolean56 = jSONWriter18.isEnabled(feature54);
        context13.config(feature54, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.of(context13);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter60 = context13.getContextValueFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(context46);
        org.junit.Assert.assertNull(propertyFilter47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider51);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNull(contextValueFilter60);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context26.setLabelFilter(labelFilter29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context26.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        jSONWriter32.config(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray37);
        boolean boolean42 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter41);
        boolean boolean43 = jSONWriter41.isIgnoreErrorGetter();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter41.writeRaw((byte) 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        jSONWriter9.close();
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter9.writeFloat((float) 10, decimalFormat12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean20 = jSONWriter15.writeTypeName(byteArray18, (long) 10);
        boolean boolean22 = jSONWriter9.writeTypeName(byteArray18, (long) (byte) 100);
        jSONWriter9.writeInt16((short) (byte) 100);
        boolean boolean25 = jSONWriter9.hasFilter();
        java.nio.charset.Charset charset26 = jSONWriter9.getCharset();
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter9, (long) 10);
        jSONWriter9.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        java.util.UUID uUID44 = null;
        jSONWriter34.writeUUID(uUID44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = jSONWriter34.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context46);
        java.time.format.DateTimeFormatter dateTimeFormatter48 = context46.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider49 = context46.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) feature52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature52 };
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider49, featureArray54);
        byte[] byteArray57 = null;
        jSONWriter56.writeBinary(byteArray57);
        java.lang.String str59 = jSONWriter9.setPath("[1][0].\\[1\\]\\.hi\\\\\\!", (java.lang.Object) byteArray57);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(context46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(objectWriterProvider49);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter18 = context15.getContextValueFilter();
        boolean boolean19 = context15.isDateFormatMillis();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter20 = context15.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable21);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context15.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNull(contextValueFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(propertyFilter20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNull(afterFilter23);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        java.lang.String str23 = jSONWriter1.setPath(10, (java.lang.Object) jSONWriter14);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter14.writeName(0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        jSONWriter40.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = context61.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context61.getProvider();
        java.lang.String str65 = context61.getDateFormat();
        boolean boolean66 = jSONWriter40.removeReference((java.lang.Object) context61);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = context61.getLabelFilter();
        java.time.ZoneId zoneId68 = context61.getZoneId();
        context38.setZoneId(zoneId68);
        context21.setZoneId(zoneId68);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter71 = null;
        context21.setAfterFilter(afterFilter71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter74 = null;
        context21.setContextNameFilter(contextNameFilter74);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter76 = null;
        context21.setPropertyFilter(propertyFilter76);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(labelFilter67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(jSONWriter73);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        boolean boolean4 = jSONWriter3.isIgnoreErrorGetter();
        long long6 = jSONWriter3.getFeatures(32L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONObject jSONObject7 = null;
        jSONWriter1.write(jSONObject7);
        jSONWriter1.startObject();
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter1.writeDouble((double) 2, decimalFormat11);
        boolean boolean13 = jSONWriter1.utf16;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean7 = jSONWriter1.isEnabled(10L);
        jSONWriter1.writeNull();
        jSONWriter1.writeBooleanNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context15.getProvider();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context15.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertNull(propertyPreFilter27);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter16 = null;
        context15.setPropertyPreFilter(propertyPreFilter16);
        boolean boolean18 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter19 = context15.getLabelFilter();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(labelFilter19);
        org.junit.Assert.assertNotNull(zoneId20);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        long long9 = jSONWriter1.getFeatures();
        boolean boolean10 = jSONWriter1.utf16;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context21.getPropertyFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = null;
        context21.setLabelFilter(labelFilter24);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNull(propertyFilter23);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        jSONWriter40.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = context61.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context61.getProvider();
        java.lang.String str65 = context61.getDateFormat();
        boolean boolean66 = jSONWriter40.removeReference((java.lang.Object) context61);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = context61.getLabelFilter();
        java.time.ZoneId zoneId68 = context61.getZoneId();
        context38.setZoneId(zoneId68);
        context21.setZoneId(zoneId68);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter71 = null;
        context21.setAfterFilter(afterFilter71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        jSONWriter74.writeFloat((java.lang.Float) 10.0f);
        com.alibaba.fastjson2.SymbolTable symbolTable77 = jSONWriter74.symbolTable;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(labelFilter67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNull(symbolTable77);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        java.time.LocalDateTime localDateTime12 = null;
        jSONWriter1.writeLocalDateTime(localDateTime12);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) 100 };
        boolean boolean26 = jSONWriter15.writeTypeName(byteArray24, (long) (-1));
        jSONWriter15.writeString("");
        long[] longArray30 = new long[] { (short) -1 };
        jSONWriter15.writeInt64(longArray30);
        boolean boolean32 = jSONWriter15.utf8;
        jSONWriter15.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter35.isWriteTypeInfo((java.lang.Object) jSONWriter37, class40, (long) ' ');
        boolean boolean44 = jSONWriter35.isEnabled((long) ' ');
        boolean boolean45 = jSONWriter35.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray47 = null;
        jSONWriter46.writeDouble(doubleArray47);
        jSONWriter46.writeArrayNull();
        short[] shortArray53 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter46.writeInt16(shortArray53);
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter46.writeFloat((float) (short) 0, decimalFormat56);
        java.lang.Class<?> wildcardClass58 = jSONWriter46.getClass();
        boolean boolean60 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter35, (java.lang.reflect.Type) wildcardClass58, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter61 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass58);
        jSONWriter1.writeBooleanNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectWriter61);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.LargeObject;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5 };
        jSONWriter1.config(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        java.time.ZonedDateTime zonedDateTime9 = null;
        jSONWriter8.writeZonedDateTime(zonedDateTime9);
        jSONWriter8.writeDouble((-1.0d));
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.LargeObject + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.LargeObject));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter8);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = null;
        context8.setAfterFilter(afterFilter9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context26.config(feature27, false);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        java.util.UUID uUID43 = null;
        jSONWriter33.writeUUID(uUID43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter33.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter46 = context45.getPropertyFilter();
        long long47 = context45.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter48 = null;
        context45.setLabelFilter(labelFilter48);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter50 = null;
        context45.setValueFilter(valueFilter50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        jSONWriter53.close();
        jSONWriter53.writeSymbol("");
        jSONWriter53.writeBooleanNull();
        jSONWriter53.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable59 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class65 = null;
        boolean boolean67 = jSONWriter60.isWriteTypeInfo((java.lang.Object) jSONWriter62, class65, (long) ' ');
        byte[] byteArray69 = new byte[] { (byte) -1 };
        boolean boolean71 = jSONWriter62.writeTypeName(byteArray69, 0L);
        java.util.UUID uUID72 = null;
        jSONWriter62.writeUUID(uUID72);
        com.alibaba.fastjson2.JSONWriter.Context context74 = jSONWriter62.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context74);
        java.time.format.DateTimeFormatter dateTimeFormatter76 = context74.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider77 = context74.getProvider();
        java.lang.String str78 = context74.getDateFormat();
        boolean boolean79 = jSONWriter53.removeReference((java.lang.Object) context74);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter80 = context74.getLabelFilter();
        java.time.ZoneId zoneId81 = context74.getZoneId();
        context45.setZoneId(zoneId81);
        context26.setZoneId(zoneId81);
        context8.setZoneId(zoneId81);
        com.alibaba.fastjson2.JSONWriter.Feature feature85 = null;
        // The following exception was thrown during execution in test generation
        try {
            context8.config(feature85, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertNull(propertyFilter46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(context74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(objectWriterProvider77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(labelFilter80);
        org.junit.Assert.assertNotNull(zoneId81);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        java.util.UUID uUID14 = null;
        jSONWriter4.writeUUID(uUID14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter4.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter17 = context16.getPropertyFilter();
        long long18 = context16.getFeatures();
        long long19 = context16.getFeatures();
        boolean boolean20 = context16.isDateFormatHasHour();
        java.time.ZoneId zoneId21 = context16.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter22 = context16.getBeforeFilter();
        boolean boolean23 = context16.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context16);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context16.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context16.getPropertyPreFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal32 = null;
        jSONWriter29.writeDecimal(bigDecimal32);
        boolean boolean35 = jSONWriter29.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        boolean boolean46 = jSONWriter29.isRefDetect((java.lang.Object) jSONWriter37);
        java.util.UUID uUID47 = null;
        jSONWriter37.writeUUID(uUID47);
        jSONWriter37.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter37.getContext();
        long long52 = context51.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        context51.config(featureArray53);
        context16.config(featureArray53);
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray53);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(propertyFilter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNull(beforeFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter58);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        jSONWriter1.writeFloat((java.lang.Float) 0.0f);
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        jSONWriter1.writeInt16((short) 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(symbolTable11);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter22 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter23 = context15.getLabelFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(valueFilter22);
        org.junit.Assert.assertNull(labelFilter23);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        boolean boolean4 = jSONWriter3.isIgnoreErrorGetter();
        long long6 = jSONWriter3.getFeatures((long) (-1));
        java.time.LocalDate localDate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeLocalDate(localDate7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONObject jSONObject7 = null;
        jSONWriter1.write(jSONObject7);
        java.time.LocalDate localDate9 = null;
        jSONWriter1.writeLocalDate(localDate9);
        java.time.ZonedDateTime zonedDateTime11 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime11);
        boolean boolean13 = jSONWriter1.isUTF16();
        jSONWriter1.writeTypeName("[1].hi\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter1.writeDecimal(bigDecimal12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) feature16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean22 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context20, 65536L);
        int[] intArray25 = new int[] { 6, 4 };
        jSONWriter1.writeInt32(intArray25);
        jSONWriter1.writeMillis(137438953472L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[6, 4]");
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        boolean boolean9 = jSONWriter0.isEnabled((long) '4');
        jSONWriter0.writeDateTime19(7, (int) (short) 1, (int) '4', (int) (byte) 1, 7, 7);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path6, 3);
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path8, (int) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, 10);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        boolean boolean14 = jSONWriter3.hasFilter((long) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        jSONWriter16.close();
        java.util.List list18 = null;
        jSONWriter16.write(list18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray21 = null;
        jSONWriter20.writeDouble(doubleArray21);
        boolean boolean23 = jSONWriter20.utf16;
        boolean boolean24 = jSONWriter16.containsReference((java.lang.Object) boolean23);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        java.util.UUID uUID38 = null;
        jSONWriter28.writeUUID(uUID38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter28.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context40);
        java.time.LocalTime localTime42 = null;
        jSONWriter41.writeLocalTime(localTime42);
        boolean boolean44 = jSONWriter41.isBeanToArray();
        boolean boolean45 = jSONWriter41.isIgnoreNoneSerializable();
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter16.isWriteMapTypeInfo((java.lang.Object) boolean45, class46, 4L);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        char[] charArray58 = new char[] {};
        jSONWriter52.writeString(charArray58);
        jSONWriter16.writeString(charArray58, (int) (short) 10, (int) (short) 100);
        jSONWriter3.writeString(charArray58, 13, (-1), false);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[]");
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        long long6 = jSONWriter1.getFeatures();
        jSONWriter1.writeRaw((byte) -1);
        jSONWriter1.writeString("");
        jSONWriter1.endArray();
        boolean boolean12 = jSONWriter1.isRefDetect();
        java.math.BigInteger bigInteger13 = null;
        jSONWriter1.writeBigInt(bigInteger13);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalDate localDate2 = null;
        jSONWriter1.writeLocalDate(localDate2);
        boolean boolean4 = jSONWriter1.utf8;
        java.util.UUID uUID5 = null;
        jSONWriter1.writeUUID(uUID5);
        jSONWriter1.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        long long11 = jSONWriter9.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter9.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass24, (long) (short) 10);
        int[] intArray33 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter9.writeInt32(intArray33);
        double[] doubleArray39 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter9.writeDouble(doubleArray39);
        jSONWriter1.writeDouble(doubleArray39);
        java.time.LocalDate localDate42 = null;
        jSONWriter1.writeLocalDate(localDate42);
        java.io.OutputStream outputStream44 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        java.util.UUID uUID58 = null;
        jSONWriter48.writeUUID(uUID58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = jSONWriter48.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context60);
        java.time.format.DateTimeFormatter dateTimeFormatter62 = context60.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider63 = context60.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        com.alibaba.fastjson2.JSONWriter.Context context66 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray64);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider63, featureArray64);
        java.math.BigInteger bigInteger69 = null;
        jSONWriter68.writeBigInt(bigInteger69, (long) 1);
        java.nio.charset.Charset charset72 = jSONWriter68.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            int int73 = jSONWriter1.flushTo(outputStream44, charset72);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(context60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(objectWriterProvider63);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(charset72);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        java.util.UUID uUID14 = null;
        jSONWriter4.writeUUID(uUID14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter4.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter17 = context16.getPropertyFilter();
        long long18 = context16.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter19 = null;
        context16.setLabelFilter(labelFilter19);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider21 = context16.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = null;
        context16.setPropertyPreFilter(propertyPreFilter22);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter24 = null;
        context16.setPropertyPreFilter(propertyPreFilter24);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context16.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context16.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter30);
        long long32 = jSONWriter30.getFeatures();
        java.time.LocalDateTime localDateTime33 = null;
        jSONWriter30.writeLocalDateTime(localDateTime33);
        byte[] byteArray35 = jSONWriter30.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray36);
        jSONWriter30.config(featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28, featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.of(featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context(".\\[1\\]\\[0\\]", featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(propertyFilter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider21);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-81]");
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        long long19 = jSONWriter16.getFeatures();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter16.writeDateTimeISO8601((int) (byte) 10, 5, 8, 13, 12, (-1), (int) (byte) -1, (int) '4', true);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        byte[] byteArray14 = new byte[] { (byte) -1 };
        boolean boolean16 = jSONWriter7.writeTypeName(byteArray14, 0L);
        jSONWriter1.writeBinary(byteArray14);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        boolean boolean30 = jSONWriter21.isEnabled((long) ' ');
        jSONWriter21.writeString("hi!");
        char[] charArray33 = new char[] {};
        jSONWriter21.writeString(charArray33);
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter36.isWriteTypeInfo((java.lang.Object) jSONWriter38, class41, (long) ' ');
        byte[] byteArray45 = new byte[] { (byte) -1 };
        boolean boolean47 = jSONWriter38.writeTypeName(byteArray45, 0L);
        jSONWriter38.writeNull();
        java.text.DecimalFormat decimalFormat50 = null;
        jSONWriter38.writeFloat((float) 0, decimalFormat50);
        boolean boolean52 = jSONWriter38.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter54);
        boolean boolean56 = jSONWriter54.utf16;
        jSONWriter54.endObject();
        jSONWriter54.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable65 = jSONWriter54.symbolTable;
        double[] doubleArray71 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter54.writeDouble(doubleArray71);
        jSONWriter38.writeDouble(doubleArray71);
        jSONWriter21.writeDouble(doubleArray71);
        java.text.DecimalFormat decimalFormat75 = null;
        jSONWriter1.writeDouble(doubleArray71, decimalFormat75);
        jSONWriter1.writeTypeName("");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(symbolTable65);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0, -1.0, 1.0]");
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        boolean boolean18 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter19 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter20 = context15.getAfterFilter();
        boolean boolean21 = context15.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(afterFilter19);
        org.junit.Assert.assertNull(afterFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        jSONWriter1.writeReference("[1][0]");
        java.lang.Class<?> wildcardClass25 = jSONWriter1.getClass();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.isBeanToArray();
        jSONWriter0.writeName("[1]");
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        long long24 = context22.getFeatures();
        long long25 = context22.getFeatures();
        boolean boolean26 = context22.isDateFormatHasHour();
        java.time.ZoneId zoneId27 = context22.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter28 = context22.getBeforeFilter();
        boolean boolean29 = context22.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context22.getProvider();
        java.lang.String str31 = jSONWriter0.setPath("[1].hi\\![35]", (java.lang.Object) objectWriterProvider30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider30, featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context36);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter37.writeDouble((double) (byte) 0, decimalFormat39);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNull(beforeFilter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter37);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) feature10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature10 };
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray12);
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray12);
        java.time.ZoneId zoneId15 = null;
        context14.setZoneId(zoneId15);
        jSONWriter7.popPath((java.lang.Object) context14);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        jSONWriter18.config(featureArray23);
        context14.config(featureArray23);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context14.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter45 = context44.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter46 = null;
        context44.setContextValueFilter(contextValueFilter46);
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class54 = null;
        boolean boolean56 = jSONWriter49.isWriteTypeInfo((java.lang.Object) jSONWriter51, class54, (long) ' ');
        byte[] byteArray58 = new byte[] { (byte) -1 };
        boolean boolean60 = jSONWriter51.writeTypeName(byteArray58, 0L);
        java.util.UUID uUID61 = null;
        jSONWriter51.writeUUID(uUID61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = jSONWriter51.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter64 = context63.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider65 = context63.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter66 = context63.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context71 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray68);
        context63.config(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        context44.config(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider28, featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context("[1].hi\\![35]", featureArray68);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertNull(propertyFilter45);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(context63);
        org.junit.Assert.assertNull(propertyFilter64);
        org.junit.Assert.assertNotNull(objectWriterProvider65);
        org.junit.Assert.assertNull(afterFilter66);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter75);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        long long11 = jSONWriter9.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter9.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass24, (long) (short) 10);
        int[] intArray33 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter9.writeInt32(intArray33);
        double[] doubleArray39 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter9.writeDouble(doubleArray39);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter1.writeDouble(doubleArray39, decimalFormat41);
        jSONWriter1.writeName("[1].hi\\![35]");
        boolean boolean45 = jSONWriter1.hasFilter();
        java.util.UUID uUID46 = null;
        jSONWriter1.writeUUID(uUID46);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter18 = context15.getContextValueFilter();
        boolean boolean19 = context15.isDateFormatMillis();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter20 = context15.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable21);
        boolean boolean23 = context15.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNull(contextValueFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(propertyFilter20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        char[] charArray12 = null;
        jSONWriter0.writeString(charArray12, (int) (byte) -1, (int) (short) 1, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        java.math.BigInteger bigInteger18 = null;
        jSONWriter17.writeBigInt(bigInteger18, (long) 6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray21);
        jSONWriter26.writeDateTime19(4, (int) (short) 0, (int) (short) -1, (int) 'a', (int) '#', (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter35);
        boolean boolean37 = jSONWriter35.utf16;
        java.nio.charset.Charset charset38 = jSONWriter35.getCharset();
        byte[] byteArray39 = jSONWriter26.getBytes(charset38);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = jSONWriter17.writeTypeName(byteArray39, 65536L);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[34, 48, 48, 48, 52, 45, 48, 48, 45, 48, 47, 32, 57, 55, 58, 51, 53, 58, 58, 48, 34]");
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.math.BigDecimal bigDecimal16 = null;
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter3.writeDecimal(bigDecimal16, (long) (byte) -1, decimalFormat18);
        java.math.BigDecimal bigDecimal20 = null;
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter3.writeDecimal(bigDecimal20, (long) (-1), decimalFormat22);
        com.alibaba.fastjson2.JSONWriter.Path path24 = null;
        com.alibaba.fastjson2.JSONWriter.Path path26 = new com.alibaba.fastjson2.JSONWriter.Path(path24, "");
        com.alibaba.fastjson2.JSONWriter.Path path28 = new com.alibaba.fastjson2.JSONWriter.Path(path26, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path28, "hi!");
        java.lang.String str31 = path30.toString();
        com.alibaba.fastjson2.JSONWriter.Path path33 = new com.alibaba.fastjson2.JSONWriter.Path(path30, (int) '#');
        java.lang.Object obj34 = null;
        boolean boolean35 = path33.equals(obj34);
        jSONWriter3.writeAny(obj34);
        jSONWriter3.writeChar('#');
        jSONWriter3.startArray((java.lang.Object) 65536L, 4);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1].hi\\!" + "'", str31, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter22 = null;
        context15.setValueFilter(valueFilter22);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        boolean boolean9 = jSONWriter0.isEnabled((long) '4');
        boolean boolean10 = jSONWriter0.isUTF16();
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter0.context;
        jSONWriter0.writeInt32(1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(context11);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean21 = jSONWriter16.writeTypeName(byteArray19, (long) 10);
        jSONWriter3.writeNameRaw(byteArray19);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter3.writeFloat((-1.0f), decimalFormat24);
        java.math.BigDecimal bigDecimal26 = null;
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter3.writeDecimal(bigDecimal26, (long) '#', decimalFormat28);
        boolean boolean30 = jSONWriter3.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        jSONWriter1.writeStringNull();
        java.time.LocalDate localDate29 = null;
        jSONWriter1.writeLocalDate(localDate29);
        boolean boolean31 = jSONWriter1.isWriteNulls();
        java.io.OutputStream outputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int33 = jSONWriter1.flushTo(outputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        boolean boolean7 = jSONWriter1.isUTF16();
        java.text.DecimalFormat decimalFormat9 = null;
        jSONWriter1.writeFloat((float) 32L, decimalFormat9);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        float[] floatArray5 = new float[] { 0 };
        jSONWriter3.writeFloat(floatArray5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        java.time.LocalDate localDate9 = null;
        jSONWriter8.writeLocalDate(localDate9);
        boolean boolean11 = jSONWriter8.utf8;
        java.util.UUID uUID12 = null;
        jSONWriter8.writeUUID(uUID12);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        jSONWriter17.close();
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter17.writeFloat((float) 10, decimalFormat20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean28 = jSONWriter23.writeTypeName(byteArray26, (long) 10);
        boolean boolean30 = jSONWriter17.writeTypeName(byteArray26, (long) (byte) 100);
        jSONWriter15.writeNameRaw(byteArray26, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        char[] charArray37 = new char[] { '#', ' ' };
        jSONWriter34.writeString(charArray37, (int) (byte) 0, (int) (short) 1);
        jSONWriter15.writeString(charArray37);
        jSONWriter8.writeString(charArray37, 12, 100);
        jSONWriter3.writeNameRaw(charArray37);
        jSONWriter3.writeName((int) (byte) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[0.0]");
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#,  ]");
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) 100 };
        boolean boolean24 = jSONWriter13.writeTypeName(byteArray22, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        int[] intArray30 = new int[] { (short) -1 };
        jSONWriter28.writeInt32(intArray30);
        java.lang.String str32 = jSONWriter13.setPath("hi!", (java.lang.Object) intArray30);
        jSONWriter1.writeInt32(intArray30);
        jSONWriter1.writeNumberNull();
        boolean boolean35 = jSONWriter1.useSingleQuote;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter1.writeFloat((float) (-1), decimalFormat16);
        jSONWriter1.writeInt16((short) (byte) -1);
        boolean boolean20 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateYYYMMDD8((int) (short) -1, 1, 5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        jSONWriter26.writeSymbol("");
        jSONWriter26.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter26.context;
        jSONWriter26.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        jSONWriter39.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean57 = jSONWriter52.writeTypeName(byteArray55, (long) 10);
        jSONWriter39.writeNameRaw(byteArray55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.of(context63);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal69 = null;
        jSONWriter66.writeDecimal(bigDecimal69);
        boolean boolean72 = jSONWriter66.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter66.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj77 = null;
        jSONWriter66.startArray(obj77, (-1));
        jSONWriter66.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray89 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        jSONWriter66.writeString((java.util.List<java.lang.String>) strList90);
        jSONWriter64.writeString((java.util.List<java.lang.String>) strList90);
        jSONWriter39.write((java.util.List) strList90);
        jSONWriter26.write((java.util.List) strList90);
        jSONWriter1.write((java.util.List) strList90);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Path path7 = null;
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path7, "");
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path9, (int) (byte) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        jSONWriter15.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context44.config(feature45, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) feature50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature50 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        context44.config(featureArray52);
        jSONWriter15.config(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.of(featureArray52);
        byte[] byteArray58 = jSONWriter57.getBytes();
        boolean boolean59 = path11.equals((java.lang.Object) byteArray58);
        boolean boolean61 = jSONWriter1.writeTypeName(byteArray58, 97L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        jSONWriter63.close();
        java.text.DecimalFormat decimalFormat66 = null;
        jSONWriter63.writeFloat((float) 10, decimalFormat66);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean74 = jSONWriter69.writeTypeName(byteArray72, (long) 10);
        boolean boolean76 = jSONWriter63.writeTypeName(byteArray72, (long) (byte) 100);
        jSONWriter1.writeNameRaw(byteArray72, 10L);
        jSONWriter1.writeInt64((long) (short) 100);
        boolean boolean81 = jSONWriter1.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path4.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        boolean boolean29 = path4.equals((java.lang.Object) context23);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter30 = context23.getValueFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter31 = context23.getBeforeFilter();
        context23.setDateFormat("[1][0]");
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter34 = context23.getContextNameFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter35 = context23.getContextNameFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter36 = context23.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter37 = null;
        context23.setPropertyFilter(propertyFilter37);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1]" + "'", str7, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(valueFilter30);
        org.junit.Assert.assertNull(beforeFilter31);
        org.junit.Assert.assertNull(contextNameFilter34);
        org.junit.Assert.assertNull(contextNameFilter35);
        org.junit.Assert.assertNull(contextValueFilter36);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class40 = null;
        jSONWriter27.checkAndWriteTypeName((java.lang.Object) feature39, class40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature39 };
        context15.config(featureArray42);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter44 = null;
        context15.setPropertyPreFilter(propertyPreFilter44);
        com.alibaba.fastjson2.filter.NameFilter nameFilter46 = null;
        context15.setNameFilter(nameFilter46);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextNameFilter22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray42);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context15.setContextValueFilter(contextValueFilter17);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter19 = null;
        context15.setPropertyPreFilter(propertyPreFilter19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable21);
        long long23 = jSONWriter22.getFeatures();
        jSONWriter22.writeMillis((long) 7);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        char[] charArray28 = new char[] {};
        jSONWriter1.writeString(charArray28);
        com.alibaba.fastjson2.JSONObject jSONObject30 = null;
        jSONWriter1.write(jSONObject30);
        jSONWriter1.writeInt64((long) 5);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter27 = null;
        context15.setAfterFilter(afterFilter27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        context15.config(featureArray29);
        boolean boolean32 = context15.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        boolean boolean9 = jSONWriter0.isEnabled((long) '4');
        boolean boolean10 = jSONWriter0.isUTF16();
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter0.context;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        java.time.LocalTime localTime14 = null;
        jSONWriter13.writeLocalTime(localTime14);
        java.time.LocalDateTime localDateTime16 = null;
        jSONWriter13.writeLocalDateTime(localDateTime16);
        byte[] byteArray18 = jSONWriter13.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteLongAsString;
        jSONWriter13.writeEnum((java.lang.Enum) feature19);
        context11.config(feature19, true);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-81, -81]");
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteLongAsString + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteLongAsString));
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        java.lang.String str14 = jSONWriter1.setPath("hi!", (java.lang.Object) feature13);
        jSONWriter1.writeFloat((float) '4');
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        jSONWriter10.writeNull();
        java.io.OutputStream outputStream12 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal17 = null;
        jSONWriter14.writeDecimal(bigDecimal17);
        boolean boolean20 = jSONWriter14.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        int[] intArray24 = new int[] { (short) 0, (byte) 0, (byte) 1 };
        jSONWriter14.writeInt32(intArray24);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter42 = context41.getPropertyFilter();
        long long43 = context41.getFeatures();
        long long44 = context41.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter45 = context41.getContextNameFilter();
        boolean boolean46 = context41.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter47 = null;
        context41.setValueFilter(valueFilter47);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter49 = context41.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.of(context41);
        boolean boolean51 = jSONWriter14.isRefDetect((java.lang.Object) jSONWriter50);
        java.nio.charset.Charset charset52 = jSONWriter50.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            int int53 = jSONWriter10.flushTo(outputStream12, charset52);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: out is null");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNull(propertyFilter42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNull(contextNameFilter45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(contextNameFilter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charset52);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Path path7 = null;
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path7, "");
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path9, (int) (byte) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        jSONWriter15.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context44.config(feature45, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) feature50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature50 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        context44.config(featureArray52);
        jSONWriter15.config(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.of(featureArray52);
        byte[] byteArray58 = jSONWriter57.getBytes();
        boolean boolean59 = path11.equals((java.lang.Object) byteArray58);
        boolean boolean61 = jSONWriter1.writeTypeName(byteArray58, 97L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        jSONWriter63.close();
        java.text.DecimalFormat decimalFormat66 = null;
        jSONWriter63.writeFloat((float) 10, decimalFormat66);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean74 = jSONWriter69.writeTypeName(byteArray72, (long) 10);
        boolean boolean76 = jSONWriter63.writeTypeName(byteArray72, (long) (byte) 100);
        jSONWriter1.writeNameRaw(byteArray72, 10L);
        com.alibaba.fastjson2.JSONWriter.Context context79 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter80 = context79.getPropertyFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(context79);
        org.junit.Assert.assertNull(propertyFilter80);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray0);
        com.alibaba.fastjson2.JSONObject jSONObject4 = null;
        jSONWriter3.write(jSONObject4);
        boolean boolean7 = jSONWriter3.isEnabled((long) 5);
        java.util.UUID uUID8 = null;
        jSONWriter3.writeUUID(uUID8);
        java.util.Map map10 = null;
        jSONWriter3.write(map10);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeMillis((long) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        java.util.UUID uUID19 = null;
        jSONWriter3.writeUUID(uUID19);
        java.time.ZonedDateTime zonedDateTime21 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime21);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        jSONWriter1.writeInt32((int) (short) 1);
        jSONWriter1.writeChar(' ');
        java.math.BigDecimal bigDecimal23 = null;
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter1.writeDecimal(bigDecimal23, 0L, decimalFormat25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) feature30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30 };
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray32);
        jSONWriter27.config(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.of(featureArray32);
        jSONWriter1.config(featureArray32);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter37);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        jSONWriter16.endArray();
        java.time.Instant instant20 = null;
        jSONWriter16.writeInstant(instant20);
        jSONWriter16.writeBool(false);
        boolean boolean24 = jSONWriter16.isUTF8();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        boolean[] booleanArray34 = new boolean[] { false, true, true, true };
        jSONWriter29.writeBool(booleanArray34);
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        jSONWriter29.writeBinary(byteArray46);
        jSONWriter1.writeRaw(byteArray46);
        boolean boolean51 = jSONWriter1.isWriteNulls();
        boolean boolean52 = jSONWriter1.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        boolean boolean27 = jSONWriter26.isRefDetect();
        java.lang.String str30 = jSONWriter26.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        long long34 = jSONWriter32.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        long long46 = jSONWriter37.getFeatures();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean49 = jSONWriter32.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass47, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter50 = jSONWriter26.getObjectWriter((java.lang.Class) wildcardClass47);
        boolean boolean51 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context23, (java.lang.reflect.Type) wildcardClass47);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter52 = context23.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context23);
        jSONWriter53.writeFloat((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objectWriter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(valueFilter52);
        org.junit.Assert.assertNotNull(jSONWriter53);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        context15.setDateFormat("hi!");
        java.time.ZoneId zoneId19 = null;
        context15.setZoneId(zoneId19);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider21 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        jSONWriter23.writeSymbol("");
        jSONWriter23.writeBooleanNull();
        jSONWriter23.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context44);
        java.time.format.DateTimeFormatter dateTimeFormatter46 = context44.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider47 = context44.getProvider();
        java.lang.String str48 = context44.getDateFormat();
        boolean boolean49 = jSONWriter23.removeReference((java.lang.Object) context44);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter53.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter66 = context65.getPropertyFilter();
        long long67 = context65.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter68 = null;
        context65.setLabelFilter(labelFilter68);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context65, symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context65.config(feature72, true);
        boolean boolean75 = jSONWriter23.isEnabled(feature72);
        boolean boolean76 = context15.isEnabled(feature72);
        boolean boolean77 = context15.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(objectWriterProvider21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(objectWriterProvider47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(context65);
        org.junit.Assert.assertNull(propertyFilter66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean9 = jSONWriter3.isBeanToArray();
        jSONWriter3.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        jSONWriter12.close();
        jSONWriter12.writeSymbol("");
        jSONWriter12.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context17 = jSONWriter12.context;
        jSONWriter12.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        jSONWriter25.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean43 = jSONWriter38.writeTypeName(byteArray41, (long) 10);
        jSONWriter25.writeNameRaw(byteArray41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.of(context49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal55 = null;
        jSONWriter52.writeDecimal(bigDecimal55);
        boolean boolean58 = jSONWriter52.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter52.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj63 = null;
        jSONWriter52.startArray(obj63, (-1));
        jSONWriter52.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray75 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        jSONWriter52.writeString((java.util.List<java.lang.String>) strList76);
        jSONWriter50.writeString((java.util.List<java.lang.String>) strList76);
        jSONWriter25.write((java.util.List) strList76);
        jSONWriter12.write((java.util.List) strList76);
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray83 = null;
        jSONWriter82.writeDouble(doubleArray83);
        jSONWriter82.writeArrayNull();
        short[] shortArray89 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter82.writeInt16(shortArray89);
        jSONWriter12.writeInt16(shortArray89);
        jSONWriter3.writeInt16(shortArray89);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(context17);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertNotNull(shortArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray89), "[0, 0, 100]");
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        jSONWriter1.writeStringNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.isBeanToArray();
        jSONWriter5.writeName("[1]");
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context27.getPropertyFilter();
        long long29 = context27.getFeatures();
        long long30 = context27.getFeatures();
        boolean boolean31 = context27.isDateFormatHasHour();
        java.time.ZoneId zoneId32 = context27.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter33 = context27.getBeforeFilter();
        boolean boolean34 = context27.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider35 = context27.getProvider();
        java.lang.String str36 = jSONWriter5.setPath("[1].hi\\![35]", (java.lang.Object) objectWriterProvider35);
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter40.writeFloat((float) 10, decimalFormat43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean51 = jSONWriter46.writeTypeName(byteArray49, (long) 10);
        boolean boolean53 = jSONWriter40.writeTypeName(byteArray49, (long) (byte) 100);
        jSONWriter38.writeNameRaw(byteArray49, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        char[] charArray60 = new char[] { '#', ' ' };
        jSONWriter57.writeString(charArray60, (int) (byte) 0, (int) (short) 1);
        jSONWriter38.writeString(charArray60);
        jSONWriter5.writeString(charArray60);
        jSONWriter1.writeString(charArray60, (int) (byte) 100, 3);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(propertyFilter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertNull(beforeFilter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#,  ]");
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        boolean boolean18 = jSONWriter3.isRefDetect();
        jSONWriter3.writeDateYYYMMDD8(13, 0, (int) ' ');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        int int12 = jSONWriter1.size();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDateTimeISO8601((int) (byte) 10, (int) ' ', (int) (byte) 0, (int) (short) 10, 100, (int) (byte) 100, 0, 8, true);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        java.util.Map map9 = null;
        jSONWriter8.write(map9);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        boolean boolean19 = context15.isEnabled((long) 1);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        java.lang.Object obj10 = null;
        boolean boolean11 = path9.equals(obj10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter13.writeDouble(1.0d, decimalFormat17);
        boolean boolean20 = jSONWriter13.removeReference((java.lang.Object) (short) -1);
        jSONWriter13.writeArrayNull();
        jSONWriter13.startArray((int) (short) 1);
        java.time.Instant instant24 = null;
        jSONWriter13.writeInstant(instant24);
        java.math.BigDecimal bigDecimal26 = null;
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter13.writeDecimal(bigDecimal26, (-1L), decimalFormat28);
        java.time.LocalTime localTime30 = null;
        jSONWriter13.writeLocalTime(localTime30);
        boolean boolean32 = path9.equals((java.lang.Object) localTime30);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        boolean boolean9 = jSONWriter1.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter11.writeDecimal(bigDecimal14);
        boolean boolean17 = jSONWriter11.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter11.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter23.writeFloat((float) 10, decimalFormat26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean34 = jSONWriter29.writeTypeName(byteArray32, (long) 10);
        boolean boolean36 = jSONWriter23.writeTypeName(byteArray32, (long) (byte) 100);
        jSONWriter23.writeInt16((short) (byte) 100);
        boolean boolean39 = jSONWriter23.hasFilter();
        long[] longArray43 = new long[] { 0, (byte) -1, ' ' };
        jSONWriter23.writeInt64(longArray43);
        jSONWriter11.writeInt64(longArray43);
        jSONWriter1.writeInt64(longArray43);
        jSONWriter1.writeReference("");
        boolean boolean49 = jSONWriter1.utf16;
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter50 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter52);
        long long54 = jSONWriter52.getFeatures();
        java.time.LocalDateTime localDateTime55 = null;
        jSONWriter52.writeLocalDateTime(localDateTime55);
        byte[] byteArray57 = jSONWriter52.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray58);
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray58);
        jSONWriter52.config(featureArray58);
        jSONWriter52.close();
        java.lang.String str64 = jSONWriter1.setPath(fieldWriter50, (java.lang.Object) jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[0, -1, 32]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-81]");
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        jSONWriter3.writeInt64((long) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = null;
        jSONWriter18.writeDouble(doubleArray19);
        boolean boolean21 = jSONWriter18.utf16;
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter18.writeDecimal(bigDecimal22, 100L);
        jSONWriter18.writeReference("$");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal31 = null;
        jSONWriter28.writeDecimal(bigDecimal31);
        boolean boolean34 = jSONWriter28.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter28.writeArrayNull();
        jSONWriter28.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        boolean boolean47 = jSONWriter38.isEnabled((long) ' ');
        jSONWriter38.writeString("hi!");
        boolean boolean50 = jSONWriter38.isUTF8();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        jSONWriter38.writeString((java.util.List<java.lang.String>) strList54);
        jSONWriter28.writeString((java.util.List<java.lang.String>) strList54);
        jSONWriter18.writeString((java.util.List<java.lang.String>) strList54);
        java.lang.Object obj59 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        boolean boolean63 = jSONWriter61.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat65 = null;
        jSONWriter61.writeDouble(1.0d, decimalFormat65);
        boolean boolean68 = jSONWriter61.removeReference((java.lang.Object) (short) -1);
        jSONWriter61.writeArrayNull();
        long long70 = jSONWriter61.getFeatures();
        java.lang.Class<?> wildcardClass71 = jSONWriter61.getClass();
        boolean boolean72 = jSONWriter18.isWriteTypeInfo(obj59, (java.lang.reflect.Type) wildcardClass71);
        boolean boolean73 = jSONWriter3.isIgnoreNoneSerializable((java.lang.Object) jSONWriter18);
        java.io.OutputStream outputStream74 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        com.alibaba.fastjson2.JSONWriter.Context context77 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray75);
        jSONWriter80.writeDateTime19(4, (int) (short) 0, (int) (short) -1, (int) 'a', (int) '#', (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray88 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter89 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray88);
        com.alibaba.fastjson2.JSONWriter jSONWriter90 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter89);
        boolean boolean91 = jSONWriter89.utf16;
        java.nio.charset.Charset charset92 = jSONWriter89.getCharset();
        byte[] byteArray93 = jSONWriter80.getBytes(charset92);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = jSONWriter3.flushTo(outputStream74, charset92);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(featureArray88);
        org.junit.Assert.assertNotNull(jSONWriter89);
        org.junit.Assert.assertNotNull(jSONWriter90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(charset92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[34, 48, 48, 48, 52, 45, 48, 48, 45, 48, 47, 32, 57, 55, 58, 51, 53, 58, 58, 48, 34]");
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateTime14((int) (short) 10, (int) (byte) -1, 0, (int) (byte) 100, (int) (short) -1, 5);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter1.writeBigInt(bigInteger14);
        boolean boolean16 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        jSONWriter18.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        java.util.Map map38 = null;
        jSONWriter26.write(map38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        java.time.LocalTime localTime42 = null;
        jSONWriter41.writeLocalTime(localTime42);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        jSONWriter41.writeBinary(byteArray54);
        jSONWriter26.writeBinary(byteArray54);
        jSONWriter18.writeStringLatin1(byteArray54);
        jSONWriter1.writeHex(byteArray54);
        java.util.Map map61 = null;
        jSONWriter1.write(map61);
        jSONWriter1.writeInt8((byte) -1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter.Context context8 = jSONWriter1.getContext();
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter1.getContext();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context9, symbolTable10);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context27);
        java.time.format.DateTimeFormatter dateTimeFormatter29 = context27.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context27.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider30, featureArray35);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context53);
        java.time.format.DateTimeFormatter dateTimeFormatter55 = context53.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider56 = context53.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider56, featureArray57);
        java.math.BigInteger bigInteger62 = null;
        jSONWriter61.writeBigInt(bigInteger62, (long) 1);
        java.nio.charset.Charset charset65 = jSONWriter61.getCharset();
        byte[] byteArray66 = jSONWriter37.getBytes(charset65);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray67 = jSONWriter11.getBytes(charset65);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: not support operator");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(context8);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(objectWriterProvider56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        int int6 = jSONWriter1.level();
        jSONWriter1.writeDateTime19(100, 0, (int) (short) 1, (int) (byte) 0, 100, (-1));
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class16 = null;
        jSONWriter3.checkAndWriteTypeName((java.lang.Object) feature15, class16);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter3.writeDecimal(bigDecimal18);
        jSONWriter3.writeTypeName("hi!");
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter39 = context38.getPropertyFilter();
        long long40 = context38.getFeatures();
        long long41 = context38.getFeatures();
        boolean boolean42 = context38.isDateFormatHasHour();
        java.time.ZoneId zoneId43 = context38.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter44 = context38.getBeforeFilter();
        boolean boolean45 = context38.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider46 = context38.getProvider();
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context38);
        java.lang.String str48 = jSONWriter3.setPath(3, (java.lang.Object) context38);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context38, symbolTable49);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNull(propertyFilter39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneId43);
        org.junit.Assert.assertNull(beforeFilter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(jSONWriter50);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        long long10 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter1.writeNameRaw(byteArray21);
        java.time.ZonedDateTime zonedDateTime25 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        java.io.Writer writer28 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter27.flushTo(writer28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.writeName("[1].hi\\![35]");
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        jSONWriter1.config(feature4, true);
        com.alibaba.fastjson2.JSONWriter.Context context7 = jSONWriter1.getContext();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        long long26 = context23.getFeatures();
        boolean boolean27 = context23.isDateFormatHasHour();
        java.time.ZoneId zoneId28 = context23.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = context23.getBeforeFilter();
        boolean boolean30 = context23.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context23.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        byte[] byteArray42 = new byte[] { (byte) -1 };
        boolean boolean44 = jSONWriter35.writeTypeName(byteArray42, 0L);
        java.util.UUID uUID45 = null;
        jSONWriter35.writeUUID(uUID45);
        com.alibaba.fastjson2.JSONWriter.Context context47 = jSONWriter35.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context47);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context47, symbolTable49);
        com.alibaba.fastjson2.SymbolTable symbolTable51 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class57 = null;
        boolean boolean59 = jSONWriter52.isWriteTypeInfo((java.lang.Object) jSONWriter54, class57, (long) ' ');
        byte[] byteArray61 = new byte[] { (byte) -1 };
        boolean boolean63 = jSONWriter54.writeTypeName(byteArray61, 0L);
        java.util.UUID uUID64 = null;
        jSONWriter54.writeUUID(uUID64);
        com.alibaba.fastjson2.JSONWriter.Context context66 = jSONWriter54.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context66);
        java.time.format.DateTimeFormatter dateTimeFormatter68 = context66.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider69 = context66.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean73 = jSONWriter71.isRefDetect((java.lang.Object) feature72);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature72 };
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray74);
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider69, featureArray74);
        context47.config(featureArray74);
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray74);
        com.alibaba.fastjson2.JSONWriter.Context context80 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider31, featureArray74);
        context7.config(featureArray74);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertNotNull(context7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneId28);
        org.junit.Assert.assertNull(beforeFilter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(context47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(context66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(objectWriterProvider69);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertNotNull(jSONWriter79);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        jSONWriter1.writeReference("[1][0]");
        int int25 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long28 = jSONWriter26.getFeatures((long) 6);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 13 + "'", int25 == 13);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        boolean boolean13 = jSONWriter1.isEnabled((long) 4);
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter1.writeDecimal(bigDecimal14);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        jSONWriter1.writeString("[1].hi\\!");
        java.time.ZonedDateTime zonedDateTime24 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime24);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        jSONWriter1.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        com.alibaba.fastjson2.JSONObject jSONObject13 = null;
        jSONWriter1.write(jSONObject13);
        boolean boolean16 = jSONWriter1.isEnabled((long) 5);
        boolean boolean17 = jSONWriter1.isWriteNulls();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Context context18 = jSONWriter1.getContext();
        boolean boolean20 = context18.isEnabled((long) (short) 100);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter21 = null;
        context18.setLabelFilter(labelFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = context18.getNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) feature27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        context18.config(featureArray29);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter35 = context18.getLabelFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter36 = null;
        context18.setPropertyPreFilter(propertyPreFilter36);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(context18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(nameFilter23);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNull(labelFilter35);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.lang.reflect.Type type3 = null;
        boolean boolean5 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (byte) 1, type3, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        jSONWriter7.close();
        jSONWriter7.writeSymbol("");
        jSONWriter7.writeBooleanNull();
        boolean boolean12 = jSONWriter7.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter14);
        long long16 = jSONWriter14.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat23 = null;
        jSONWriter19.writeDouble(1.0d, decimalFormat23);
        boolean boolean26 = jSONWriter19.removeReference((java.lang.Object) (short) -1);
        jSONWriter19.writeArrayNull();
        long long28 = jSONWriter19.getFeatures();
        java.lang.Class<?> wildcardClass29 = jSONWriter19.getClass();
        boolean boolean31 = jSONWriter14.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass29, (long) (short) 10);
        jSONWriter1.checkAndWriteTypeName((java.lang.Object) jSONWriter7, (java.lang.Class) wildcardClass29);
        jSONWriter7.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        jSONWriter36.close();
        jSONWriter36.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray41 = null;
        jSONWriter40.writeDouble(doubleArray41);
        jSONWriter40.writeArrayNull();
        short[] shortArray47 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter40.writeInt16(shortArray47);
        jSONWriter36.writeInt16(shortArray47);
        jSONWriter7.writeInt16(shortArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean52 = jSONWriter51.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean59 = jSONWriter54.writeTypeName(byteArray57, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter61);
        long long63 = jSONWriter61.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter61.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass76, (long) (short) 10);
        int[] intArray85 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter61.writeInt32(intArray85);
        jSONWriter54.writeInt32(intArray85);
        jSONWriter51.writeInt32(intArray85);
        jSONWriter7.writeInt32(intArray85);
        jSONWriter7.writeInt8((byte) 1);
        jSONWriter7.writeBooleanNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path3 = path2.parent;
        com.alibaba.fastjson2.JSONWriter.Path path4 = path2.parent;
        com.alibaba.fastjson2.SymbolTable symbolTable5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter6.isWriteTypeInfo((java.lang.Object) jSONWriter8, class11, (long) ' ');
        byte[] byteArray15 = new byte[] { (byte) -1 };
        boolean boolean17 = jSONWriter8.writeTypeName(byteArray15, 0L);
        java.util.UUID uUID18 = null;
        jSONWriter8.writeUUID(uUID18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = jSONWriter8.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = context20.getPropertyFilter();
        long long22 = context20.getFeatures();
        long long23 = context20.getFeatures();
        boolean boolean24 = context20.isDateFormatHasHour();
        java.time.ZoneId zoneId25 = context20.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter26 = context20.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context20.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context20, symbolTable28);
        java.math.BigDecimal bigDecimal30 = null;
        java.text.DecimalFormat decimalFormat32 = null;
        jSONWriter29.writeDecimal(bigDecimal30, (long) '#', decimalFormat32);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = path4.equals((java.lang.Object) decimalFormat32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertNull(path4);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(context20);
        org.junit.Assert.assertNull(propertyFilter21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneId25);
        org.junit.Assert.assertNull(beforeFilter26);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertNotNull(jSONWriter29);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeChar('#');
        java.time.ZonedDateTime zonedDateTime15 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime15);
        java.time.LocalTime localTime17 = null;
        jSONWriter3.writeLocalTime(localTime17);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isWriteNulls();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        jSONWriter10.writeChar('#');
        short[] shortArray25 = new short[] { (byte) 1, (short) 10, (short) 1 };
        jSONWriter10.writeInt16(shortArray25);
        jSONWriter1.writeInt16(shortArray25);
        java.math.BigInteger bigInteger28 = null;
        jSONWriter1.writeBigInt(bigInteger28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter30.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean42 = jSONWriter1.removeReference((java.lang.Object) jSONWriter41);
        int int43 = jSONWriter41.size();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1, 10, 1]");
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray4);
        java.time.ZoneId zoneId7 = null;
        context6.setZoneId(zoneId7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter20);
        boolean boolean22 = jSONWriter20.utf16;
        long long24 = jSONWriter20.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = jSONWriter20.getSymbolTable();
        boolean boolean26 = jSONWriter12.isIgnoreNoneSerializable((java.lang.Object) jSONWriter20);
        boolean boolean27 = jSONWriter12.isUTF16();
        jSONWriter12.writeArrayNull();
        java.lang.String str29 = jSONWriter9.setPath("", (java.lang.Object) jSONWriter12);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter12.writeRaw("[1].hi\\!.\\[1\\].\\[1\\]\\.hi\\\\\\!");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNull(symbolTable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        byte[] byteArray23 = null;
        jSONWriter13.writeBinary(byteArray23);
        jSONWriter13.endObject();
        java.time.ZonedDateTime zonedDateTime26 = null;
        jSONWriter13.writeZonedDateTime(zonedDateTime26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray32 = null;
        jSONWriter29.writeHex(byteArray32);
        boolean boolean34 = jSONWriter29.isRefDetect();
        jSONWriter29.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter52 = context51.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable53 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable53);
        boolean boolean55 = jSONWriter54.isRefDetect();
        java.lang.String str58 = jSONWriter54.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter60);
        long long62 = jSONWriter60.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        boolean boolean67 = jSONWriter65.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat69 = null;
        jSONWriter65.writeDouble(1.0d, decimalFormat69);
        boolean boolean72 = jSONWriter65.removeReference((java.lang.Object) (short) -1);
        jSONWriter65.writeArrayNull();
        long long74 = jSONWriter65.getFeatures();
        java.lang.Class<?> wildcardClass75 = jSONWriter65.getClass();
        boolean boolean77 = jSONWriter60.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass75, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter78 = jSONWriter54.getObjectWriter((java.lang.Class) wildcardClass75);
        boolean boolean79 = jSONWriter29.isWriteTypeInfo((java.lang.Object) context51, (java.lang.reflect.Type) wildcardClass75);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter80 = jSONWriter13.getObjectWriter((java.lang.Class) wildcardClass75);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter81 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass75);
        com.alibaba.fastjson2.SymbolTable symbolTable82 = jSONWriter1.symbolTable;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNull(propertyFilter52);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objectWriter78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objectWriter80);
        org.junit.Assert.assertNotNull(objectWriter81);
        org.junit.Assert.assertNull(symbolTable82);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        context27.config(feature28, false);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter31 = null;
        context27.setContextValueFilter(contextValueFilter31);
        boolean boolean33 = context27.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal7 = null;
        jSONWriter4.writeDecimal(bigDecimal7);
        boolean boolean10 = jSONWriter4.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter4.writeArrayNull();
        jSONWriter4.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        byte[] byteArray26 = null;
        jSONWriter16.writeBinary(byteArray26);
        jSONWriter16.endObject();
        java.time.ZonedDateTime zonedDateTime29 = null;
        jSONWriter16.writeZonedDateTime(zonedDateTime29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray35 = null;
        jSONWriter32.writeHex(byteArray35);
        boolean boolean37 = jSONWriter32.isRefDetect();
        jSONWriter32.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable39 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class45 = null;
        boolean boolean47 = jSONWriter40.isWriteTypeInfo((java.lang.Object) jSONWriter42, class45, (long) ' ');
        byte[] byteArray49 = new byte[] { (byte) -1 };
        boolean boolean51 = jSONWriter42.writeTypeName(byteArray49, 0L);
        java.util.UUID uUID52 = null;
        jSONWriter42.writeUUID(uUID52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = jSONWriter42.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter55 = context54.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        boolean boolean58 = jSONWriter57.isRefDetect();
        java.lang.String str61 = jSONWriter57.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter63);
        long long65 = jSONWriter63.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat72 = null;
        jSONWriter68.writeDouble(1.0d, decimalFormat72);
        boolean boolean75 = jSONWriter68.removeReference((java.lang.Object) (short) -1);
        jSONWriter68.writeArrayNull();
        long long77 = jSONWriter68.getFeatures();
        java.lang.Class<?> wildcardClass78 = jSONWriter68.getClass();
        boolean boolean80 = jSONWriter63.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass78, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter81 = jSONWriter57.getObjectWriter((java.lang.Class) wildcardClass78);
        boolean boolean82 = jSONWriter32.isWriteTypeInfo((java.lang.Object) context54, (java.lang.reflect.Type) wildcardClass78);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter83 = jSONWriter16.getObjectWriter((java.lang.Class) wildcardClass78);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter84 = jSONWriter4.getObjectWriter((java.lang.Class) wildcardClass78);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter85 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass78);
        java.math.BigDecimal bigDecimal86 = null;
        jSONWriter1.writeDecimal(bigDecimal86);
        jSONWriter1.writeFloat((float) 97L);
        java.math.BigInteger bigInteger90 = null;
        jSONWriter1.writeBigInt(bigInteger90, (long) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(context54);
        org.junit.Assert.assertNull(propertyFilter55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objectWriter81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objectWriter83);
        org.junit.Assert.assertNotNull(objectWriter84);
        org.junit.Assert.assertNotNull(objectWriter85);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter1.writeFloat((float) (-1), decimalFormat16);
        jSONWriter1.writeInt16((short) (byte) -1);
        boolean boolean21 = jSONWriter1.hasFilter(4L);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName(0L);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        boolean boolean28 = context26.isEnabled(feature27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        jSONWriter31.close();
        jSONWriter31.writeSymbol("");
        jSONWriter31.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter31.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter37 = null;
        context36.setPropertyPreFilter(propertyPreFilter37);
        boolean boolean39 = context36.isDateFormatHasDay();
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        java.util.UUID uUID53 = null;
        jSONWriter43.writeUUID(uUID53);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter43.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        jSONWriter57.close();
        jSONWriter57.writeSymbol("");
        jSONWriter57.writeBooleanNull();
        jSONWriter57.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable63 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable63);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class69 = null;
        boolean boolean71 = jSONWriter64.isWriteTypeInfo((java.lang.Object) jSONWriter66, class69, (long) ' ');
        byte[] byteArray73 = new byte[] { (byte) -1 };
        boolean boolean75 = jSONWriter66.writeTypeName(byteArray73, 0L);
        java.util.UUID uUID76 = null;
        jSONWriter66.writeUUID(uUID76);
        com.alibaba.fastjson2.JSONWriter.Context context78 = jSONWriter66.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context78);
        java.time.format.DateTimeFormatter dateTimeFormatter80 = context78.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider81 = context78.getProvider();
        java.lang.String str82 = context78.getDateFormat();
        boolean boolean83 = jSONWriter57.removeReference((java.lang.Object) context78);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter84 = context78.getLabelFilter();
        java.time.ZoneId zoneId85 = context78.getZoneId();
        context55.setZoneId(zoneId85);
        context36.setZoneId(zoneId85);
        context26.setZoneId(zoneId85);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(context78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(objectWriterProvider81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(labelFilter84);
        org.junit.Assert.assertNotNull(zoneId85);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        boolean boolean7 = jSONWriter1.isEnabled((long) (short) 1);
        jSONWriter1.endArray();
        jSONWriter1.writeDateYYYMMDD8((int) (byte) -1, (int) 'a', (int) (byte) 0);
        java.util.Map map13 = null;
        jSONWriter1.write(map13);
        jSONWriter1.writeBool(false);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        jSONWriter1.writeName("hi!");
        java.time.LocalTime localTime10 = null;
        jSONWriter1.writeLocalTime(localTime10);
        java.util.UUID uUID12 = null;
        jSONWriter1.writeUUID(uUID12);
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.SymbolTable symbolTable15 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class21 = null;
        boolean boolean23 = jSONWriter16.isWriteTypeInfo((java.lang.Object) jSONWriter18, class21, (long) ' ');
        byte[] byteArray25 = new byte[] { (byte) -1 };
        boolean boolean27 = jSONWriter18.writeTypeName(byteArray25, 0L);
        jSONWriter18.writeNull();
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter18.writeFloat((float) 0, decimalFormat30);
        boolean boolean32 = jSONWriter18.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        boolean boolean36 = jSONWriter34.utf16;
        jSONWriter34.endObject();
        jSONWriter34.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = jSONWriter34.symbolTable;
        double[] doubleArray51 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter34.writeDouble(doubleArray51);
        jSONWriter18.writeDouble(doubleArray51);
        boolean boolean54 = jSONWriter1.containsReference((java.lang.Object) jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(symbolTable45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        boolean[] booleanArray6 = new boolean[] { true };
        jSONWriter1.writeBool(booleanArray6);
        int int8 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal13 = null;
        jSONWriter10.writeDecimal(bigDecimal13);
        java.lang.Object obj15 = null;
        java.lang.Class class16 = null;
        jSONWriter10.checkAndWriteTypeName(obj15, class16);
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean19 = jSONWriter10.isEnabled(feature18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        boolean boolean30 = jSONWriter21.isEnabled((long) ' ');
        jSONWriter21.writeString("hi!");
        char[] charArray33 = new char[] {};
        jSONWriter21.writeString(charArray33);
        jSONWriter10.writeString(charArray33);
        jSONWriter1.writeString(charArray33, 3, 0);
        boolean boolean39 = jSONWriter1.isBeanToArray();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter27 = context15.getValueFilter();
        boolean boolean28 = context15.isDateFormatHasDay();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(valueFilter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal16 = null;
        jSONWriter13.writeDecimal(bigDecimal16);
        boolean boolean19 = jSONWriter13.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter13.writeArrayNull();
        java.time.Instant instant21 = null;
        jSONWriter13.writeInstant(instant21);
        jSONWriter13.writeMillis((long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.of(context27);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        boolean boolean31 = jSONWriter30.isRefDetect();
        java.lang.String str34 = jSONWriter30.setPath("hi!", (java.lang.Object) 1);
        jSONWriter30.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter38);
        long long40 = jSONWriter38.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat47 = null;
        jSONWriter43.writeDouble(1.0d, decimalFormat47);
        boolean boolean50 = jSONWriter43.removeReference((java.lang.Object) (short) -1);
        jSONWriter43.writeArrayNull();
        long long52 = jSONWriter43.getFeatures();
        java.lang.Class<?> wildcardClass53 = jSONWriter43.getClass();
        boolean boolean55 = jSONWriter38.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass53, (long) (short) 10);
        int[] intArray62 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter38.writeInt32(intArray62);
        double[] doubleArray68 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter38.writeDouble(doubleArray68);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter30.writeDouble(doubleArray68, decimalFormat70);
        jSONWriter28.writeDouble(doubleArray68);
        jSONWriter13.writeDouble(doubleArray68);
        jSONWriter1.writeDouble(doubleArray68);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        byte[] byteArray23 = null;
        jSONWriter13.writeBinary(byteArray23);
        jSONWriter13.endObject();
        java.time.ZonedDateTime zonedDateTime26 = null;
        jSONWriter13.writeZonedDateTime(zonedDateTime26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray32 = null;
        jSONWriter29.writeHex(byteArray32);
        boolean boolean34 = jSONWriter29.isRefDetect();
        jSONWriter29.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter52 = context51.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable53 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable53);
        boolean boolean55 = jSONWriter54.isRefDetect();
        java.lang.String str58 = jSONWriter54.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter60);
        long long62 = jSONWriter60.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        boolean boolean67 = jSONWriter65.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat69 = null;
        jSONWriter65.writeDouble(1.0d, decimalFormat69);
        boolean boolean72 = jSONWriter65.removeReference((java.lang.Object) (short) -1);
        jSONWriter65.writeArrayNull();
        long long74 = jSONWriter65.getFeatures();
        java.lang.Class<?> wildcardClass75 = jSONWriter65.getClass();
        boolean boolean77 = jSONWriter60.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass75, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter78 = jSONWriter54.getObjectWriter((java.lang.Class) wildcardClass75);
        boolean boolean79 = jSONWriter29.isWriteTypeInfo((java.lang.Object) context51, (java.lang.reflect.Type) wildcardClass75);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter80 = jSONWriter13.getObjectWriter((java.lang.Class) wildcardClass75);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter81 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass75);
        boolean boolean83 = jSONWriter1.isEnabled(5L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNull(propertyFilter52);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objectWriter78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objectWriter80);
        org.junit.Assert.assertNotNull(objectWriter81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter28 = context23.getContextValueFilter();
        boolean boolean29 = context23.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter30 = null;
        context23.setValueFilter(valueFilter30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(context23);
        java.lang.String str33 = jSONWriter1.setPath((int) (short) 10, (java.lang.Object) jSONWriter32);
        long long34 = jSONWriter1.getFeatures();
        boolean boolean36 = jSONWriter1.isEnabled((long) (-1));
        long long37 = jSONWriter1.getFeatures();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(contextValueFilter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        jSONWriter3.writeRaw(' ');
        com.alibaba.fastjson2.SymbolTable symbolTable6 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class12 = null;
        boolean boolean14 = jSONWriter7.isWriteTypeInfo((java.lang.Object) jSONWriter9, class12, (long) ' ');
        byte[] byteArray16 = new byte[] { (byte) -1 };
        boolean boolean18 = jSONWriter9.writeTypeName(byteArray16, 0L);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = jSONWriter9.getContext();
        jSONWriter9.writeInt64((long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "[1].hi\\!", "[1].hi\\![35]" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        jSONWriter25.writeString((java.util.List<java.lang.String>) strList32);
        boolean boolean36 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter25, (long) 5);
        boolean boolean37 = jSONWriter3.isIgnoreNoneSerializable((java.lang.Object) boolean36);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context21);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter1.writeBinary(byteArray27);
        int int33 = jSONWriter1.level();
        java.math.BigInteger bigInteger34 = null;
        jSONWriter1.writeBigInt(bigInteger34, (long) 5);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        long long10 = jSONWriter1.getFeatures();
        jSONWriter1.writeDouble((double) 7);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter5.writeDecimal(bigDecimal9, 100L);
        boolean boolean12 = jSONWriter5.utf16;
        java.lang.Object obj13 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter15.writeDouble(1.0d, decimalFormat19);
        boolean boolean22 = jSONWriter15.removeReference((java.lang.Object) (short) -1);
        jSONWriter15.writeArrayNull();
        long long24 = jSONWriter15.getFeatures();
        java.lang.Class<?> wildcardClass25 = jSONWriter15.getClass();
        boolean boolean27 = jSONWriter5.isWriteTypeInfo(obj13, (java.lang.Class) wildcardClass25, (long) (short) 0);
        jSONWriter5.writeStringNull();
        java.lang.String str29 = jSONWriter0.setPath(fieldWriter4, (java.lang.Object) jSONWriter5);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw('a', '4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.util.Map map4 = null;
        jSONWriter0.write(map4);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter0.writeDouble((double) 0, decimalFormat7);
        boolean boolean9 = jSONWriter0.isBeanToArray();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDoubleArray((double) 12, (double) 6);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        java.time.ZonedDateTime zonedDateTime8 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime8);
        int int10 = jSONWriter1.size();
        java.time.LocalDateTime localDateTime11 = null;
        jSONWriter1.writeLocalDateTime(localDateTime11);
        java.math.BigInteger bigInteger13 = null;
        jSONWriter1.writeBigInt(bigInteger13, (long) 3);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        long long30 = context15.getFeatures();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context40.config(feature41, true);
        boolean boolean44 = context15.isEnabled(feature41);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter45 = null;
        context15.setLabelFilter(labelFilter45);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        boolean[] booleanArray34 = new boolean[] { false, true, true, true };
        jSONWriter29.writeBool(booleanArray34);
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        jSONWriter29.writeBinary(byteArray46);
        jSONWriter1.writeRaw(byteArray46);
        boolean boolean51 = jSONWriter1.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter1.getContext();
        java.time.ZoneId zoneId53 = context52.getZoneId();
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context52);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertNotNull(zoneId53);
        org.junit.Assert.assertNotNull(jSONWriter54);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        java.time.LocalDate localDate14 = null;
        jSONWriter3.writeLocalDate(localDate14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeDateTimeISO8601(0, 12, 4, (int) (byte) 0, 10, (int) (short) 100, 0, 2, true);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter16);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue;
        boolean boolean11 = jSONWriter9.isEnabled(feature10);
        java.time.ZonedDateTime zonedDateTime12 = null;
        jSONWriter9.writeZonedDateTime(zonedDateTime12);
        com.alibaba.fastjson2.JSONWriter.Context context14 = jSONWriter9.context;
        com.alibaba.fastjson2.filter.LabelFilter labelFilter15 = null;
        context14.setLabelFilter(labelFilter15);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(context14);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context11 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter10);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = context22.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) feature27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        jSONWriter24.config(featureArray29);
        context22.config(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.of(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(nameFilter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter34);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        java.util.UUID uUID22 = null;
        jSONWriter12.writeUUID(uUID22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter12.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter25 = context24.getPropertyFilter();
        long long26 = context24.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter27 = null;
        context24.setLabelFilter(labelFilter27);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter29 = context24.getContextValueFilter();
        boolean boolean30 = context24.isDateFormatISO8601();
        jSONWriter1.writeAny((java.lang.Object) boolean30);
        java.io.OutputStream outputStream32 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        boolean boolean36 = jSONWriter34.utf16;
        java.nio.charset.Charset charset37 = jSONWriter34.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            int int38 = jSONWriter1.flushTo(outputStream32, charset37);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertNull(propertyFilter25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNull(contextValueFilter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charset37);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.util.List list3 = null;
        jSONWriter1.write(list3);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        boolean boolean9 = jSONWriter1.containsReference((java.lang.Object) boolean8);
        com.alibaba.fastjson2.JSONWriter.Path path10 = null;
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "");
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path12, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path16 = new com.alibaba.fastjson2.JSONWriter.Path(path14, "hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        jSONWriter18.writeBooleanNull();
        jSONWriter18.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        java.util.UUID uUID37 = null;
        jSONWriter27.writeUUID(uUID37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = jSONWriter27.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray44 = null;
        jSONWriter41.writeHex(byteArray44);
        boolean boolean46 = jSONWriter41.isRefDetect();
        jSONWriter41.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class54 = null;
        boolean boolean56 = jSONWriter49.isWriteTypeInfo((java.lang.Object) jSONWriter51, class54, (long) ' ');
        byte[] byteArray58 = new byte[] { (byte) -1 };
        boolean boolean60 = jSONWriter51.writeTypeName(byteArray58, 0L);
        java.util.UUID uUID61 = null;
        jSONWriter51.writeUUID(uUID61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = jSONWriter51.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter64 = context63.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        boolean boolean67 = jSONWriter66.isRefDetect();
        java.lang.String str70 = jSONWriter66.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter72);
        long long74 = jSONWriter72.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        boolean boolean79 = jSONWriter77.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat81 = null;
        jSONWriter77.writeDouble(1.0d, decimalFormat81);
        boolean boolean84 = jSONWriter77.removeReference((java.lang.Object) (short) -1);
        jSONWriter77.writeArrayNull();
        long long86 = jSONWriter77.getFeatures();
        java.lang.Class<?> wildcardClass87 = jSONWriter77.getClass();
        boolean boolean89 = jSONWriter72.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass87, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter90 = jSONWriter66.getObjectWriter((java.lang.Class) wildcardClass87);
        boolean boolean91 = jSONWriter41.isWriteTypeInfo((java.lang.Object) context63, (java.lang.reflect.Type) wildcardClass87);
        boolean boolean92 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter27, (java.lang.reflect.Type) wildcardClass87);
        boolean boolean93 = jSONWriter1.isWriteTypeInfo((java.lang.Object) path14, (java.lang.reflect.Type) wildcardClass87);
        com.alibaba.fastjson2.JSONWriter.Path path94 = path14.parent;
        com.alibaba.fastjson2.JSONWriter.Path path96 = new com.alibaba.fastjson2.JSONWriter.Path(path94, "[1].hi\\!");
        java.lang.String str97 = path96.toString();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(context39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(context63);
        org.junit.Assert.assertNull(propertyFilter64);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objectWriter90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(path94);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + ".\\[1\\]\\.hi\\\\\\!" + "'", str97, ".\\[1\\]\\.hi\\\\\\!");
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        boolean boolean20 = jSONWriter11.isEnabled((long) ' ');
        jSONWriter11.writeString("hi!");
        boolean boolean23 = jSONWriter11.isUTF8();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        jSONWriter11.writeString((java.util.List<java.lang.String>) strList27);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList27);
        boolean boolean31 = jSONWriter1.isUTF16();
        jSONWriter1.writeDouble((double) (-1L));
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue;
        boolean boolean21 = jSONWriter1.isEnabled(feature20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean23 = jSONWriter22.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean30 = jSONWriter25.writeTypeName(byteArray28, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        long long34 = jSONWriter32.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        long long46 = jSONWriter37.getFeatures();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean49 = jSONWriter32.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass47, (long) (short) 10);
        int[] intArray56 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter32.writeInt32(intArray56);
        jSONWriter25.writeInt32(intArray56);
        jSONWriter22.writeInt32(intArray56);
        jSONWriter22.writeInt8((byte) 10);
        boolean boolean62 = jSONWriter1.removeReference((java.lang.Object) jSONWriter22);
        boolean boolean63 = jSONWriter22.utf8;
        jSONWriter22.writeStringNull();
        java.io.OutputStream outputStream65 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int66 = jSONWriter22.flushTo(outputStream65);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: out is nulll");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) feature20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray22);
        jSONWriter17.config(featureArray22);
        context13.config(featureArray22);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context13.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        java.time.Instant instant9 = null;
        jSONWriter1.writeInstant(instant9);
        jSONWriter1.writeMillis((long) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        boolean boolean15 = jSONWriter14.isRefDetect();
        jSONWriter14.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter23 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        boolean[] booleanArray30 = new boolean[] { false, true, true, true };
        jSONWriter25.writeBool(booleanArray30);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        byte[] byteArray42 = new byte[] { (byte) -1 };
        boolean boolean44 = jSONWriter35.writeTypeName(byteArray42, 0L);
        jSONWriter25.writeBinary(byteArray42);
        java.lang.String str46 = jSONWriter14.setPath(fieldWriter23, (java.lang.Object) jSONWriter25);
        jSONWriter14.writeChar('a');
        boolean boolean49 = jSONWriter1.isRefDetect((java.lang.Object) 'a');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDateYYYMMDD10((-1), (int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isWriteNulls();
        jSONWriter1.writeInt64((long) 5);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter9 = null;
        com.alibaba.fastjson2.JSONWriter.Path path10 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str11 = path10.toString();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        jSONWriter13.writeSymbol((-1));
        jSONWriter13.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        com.alibaba.fastjson2.JSONObject jSONObject25 = null;
        jSONWriter13.write(jSONObject25);
        boolean boolean27 = path10.equals((java.lang.Object) jSONWriter13);
        java.lang.String str28 = jSONWriter1.setPath(fieldWriter9, (java.lang.Object) path10);
        float[] floatArray29 = null;
        jSONWriter1.writeFloat(floatArray29);
        boolean boolean31 = jSONWriter1.isUseSingleQuotes();
        boolean boolean32 = jSONWriter1.utf16;
        java.time.LocalDateTime localDateTime33 = null;
        jSONWriter1.writeLocalDateTime(localDateTime33);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$" + "'", str11, "$");
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        boolean boolean19 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider21 = context15.provider;
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter22 = context15.getBeforeFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(objectWriterProvider21);
        org.junit.Assert.assertNull(beforeFilter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        jSONWriter9.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter9.getContext();
        long long24 = context23.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        context23.config(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.of(featureArray25);
        long long30 = jSONWriter28.getFeatures((long) '4');
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        boolean boolean17 = context13.isDateFormatHasDay();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter4.writeStringNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        jSONWriter0.startArray(0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeName(4);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter1.writeDouble((double) 10.0f, decimalFormat24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter1.context;
        java.time.ZoneId zoneId27 = context26.getZoneId();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(zoneId27);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) feature20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray22);
        jSONWriter17.config(featureArray22);
        context13.config(featureArray22);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter27 = context13.getContextNameFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter28 = context13.getNameFilter();
        boolean boolean30 = context13.isEnabled((long) 10);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter31 = null;
        context13.setContextValueFilter(contextValueFilter31);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(contextNameFilter27);
        org.junit.Assert.assertNull(nameFilter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean1 = jSONWriter0.isUseSingleQuotes();
        jSONWriter0.writeDateTime19((-1), (int) ' ', 1, (int) '4', 10, 8);
        jSONWriter0.endObject();
        jSONWriter0.close();
        java.io.Writer writer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.flushTo(writer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path4.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        boolean boolean29 = path4.equals((java.lang.Object) context23);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context23);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1]" + "'", str7, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.endArray();
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter1.getContext();
        boolean boolean29 = jSONWriter1.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        jSONWriter31.close();
        java.util.List list33 = null;
        jSONWriter31.write(list33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray36 = null;
        jSONWriter35.writeDouble(doubleArray36);
        boolean boolean38 = jSONWriter35.utf16;
        boolean boolean39 = jSONWriter31.containsReference((java.lang.Object) boolean38);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        java.util.UUID uUID53 = null;
        jSONWriter43.writeUUID(uUID53);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter43.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context55);
        java.time.LocalTime localTime57 = null;
        jSONWriter56.writeLocalTime(localTime57);
        boolean boolean59 = jSONWriter56.isBeanToArray();
        boolean boolean60 = jSONWriter56.isIgnoreNoneSerializable();
        java.lang.Class class61 = null;
        boolean boolean63 = jSONWriter31.isWriteMapTypeInfo((java.lang.Object) boolean60, class61, 4L);
        com.alibaba.fastjson2.SymbolTable symbolTable64 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        boolean boolean69 = jSONWriter67.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class70 = null;
        boolean boolean72 = jSONWriter65.isWriteTypeInfo((java.lang.Object) jSONWriter67, class70, (long) ' ');
        char[] charArray73 = new char[] {};
        jSONWriter67.writeString(charArray73);
        jSONWriter31.writeString(charArray73, (int) (short) 10, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray73, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[]");
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = null;
        context8.setAfterFilter(afterFilter9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context26.config(feature27, false);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        java.util.UUID uUID43 = null;
        jSONWriter33.writeUUID(uUID43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter33.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter46 = context45.getPropertyFilter();
        long long47 = context45.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter48 = null;
        context45.setLabelFilter(labelFilter48);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter50 = null;
        context45.setValueFilter(valueFilter50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        jSONWriter53.close();
        jSONWriter53.writeSymbol("");
        jSONWriter53.writeBooleanNull();
        jSONWriter53.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable59 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class65 = null;
        boolean boolean67 = jSONWriter60.isWriteTypeInfo((java.lang.Object) jSONWriter62, class65, (long) ' ');
        byte[] byteArray69 = new byte[] { (byte) -1 };
        boolean boolean71 = jSONWriter62.writeTypeName(byteArray69, 0L);
        java.util.UUID uUID72 = null;
        jSONWriter62.writeUUID(uUID72);
        com.alibaba.fastjson2.JSONWriter.Context context74 = jSONWriter62.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context74);
        java.time.format.DateTimeFormatter dateTimeFormatter76 = context74.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider77 = context74.getProvider();
        java.lang.String str78 = context74.getDateFormat();
        boolean boolean79 = jSONWriter53.removeReference((java.lang.Object) context74);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter80 = context74.getLabelFilter();
        java.time.ZoneId zoneId81 = context74.getZoneId();
        context45.setZoneId(zoneId81);
        context26.setZoneId(zoneId81);
        context8.setZoneId(zoneId81);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider85 = context8.provider;
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertNull(propertyFilter46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(context74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(objectWriterProvider77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(labelFilter80);
        org.junit.Assert.assertNotNull(zoneId81);
        org.junit.Assert.assertNotNull(objectWriterProvider85);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        boolean boolean19 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter36 = context35.getPropertyFilter();
        long long37 = context35.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context35.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter40 = context35.getContextValueFilter();
        boolean boolean41 = context35.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter42 = null;
        context35.setValueFilter(valueFilter42);
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context35.config(feature44, false);
        boolean boolean47 = context15.isEnabled(feature44);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        java.lang.String str49 = context15.getDateFormat();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNull(propertyFilter36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNull(contextValueFilter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        boolean boolean11 = jSONWriter1.isBeanToArray();
        jSONWriter1.writeTypeName("[1]");
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) -1 };
        boolean boolean26 = jSONWriter17.writeTypeName(byteArray24, 0L);
        java.util.UUID uUID27 = null;
        jSONWriter17.writeUUID(uUID27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter17.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter30 = context29.getPropertyFilter();
        long long31 = context29.getFeatures();
        long long32 = context29.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter33 = context29.getContextNameFilter();
        boolean boolean34 = context29.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter35 = null;
        context29.setValueFilter(valueFilter35);
        boolean boolean37 = jSONWriter1.containsReference((java.lang.Object) valueFilter35);
        long long39 = jSONWriter1.getFeatures((long) (short) 100);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNull(propertyFilter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(contextNameFilter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter12 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        java.time.ZonedDateTime zonedDateTime20 = null;
        jSONWriter14.writeZonedDateTime(zonedDateTime20);
        long long23 = jSONWriter14.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        java.util.UUID uUID37 = null;
        jSONWriter27.writeUUID(uUID37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = jSONWriter27.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter40 = context39.getPropertyFilter();
        long long41 = context39.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter42 = null;
        context39.setLabelFilter(labelFilter42);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider44 = context39.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) feature48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature48 };
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray50);
        jSONWriter45.config(featureArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider44, featureArray50);
        boolean boolean55 = jSONWriter14.isIgnoreNoneSerializable((java.lang.Object) jSONWriter54);
        double[] doubleArray56 = null;
        jSONWriter54.writeDouble(doubleArray56);
        java.lang.String str58 = jSONWriter10.setPath(fieldWriter12, (java.lang.Object) doubleArray56);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(context39);
        org.junit.Assert.assertNull(propertyFilter40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter2.writeTypeName("");
        boolean boolean5 = jSONWriter2.isUseSingleQuotes();
        jSONWriter2.writeRaw((byte) -1);
        boolean boolean9 = jSONWriter2.hasFilter((long) 5);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        java.time.LocalDate localDate28 = null;
        jSONWriter1.writeLocalDate(localDate28);
        boolean boolean31 = jSONWriter1.hasFilter(0L);
        jSONWriter1.writeInt16((short) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        long long20 = context15.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter24.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context36.config(feature37, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) feature42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature42 };
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray44);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray44);
        context36.config(featureArray44);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray44);
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        context48.config(feature49, false);
        boolean boolean52 = context15.isEnabled(feature49);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter54 = context15.getPropertyPreFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNull(propertyPreFilter54);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        char[] charArray12 = null;
        jSONWriter0.writeString(charArray12, (int) (byte) -1, (int) (short) 1, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        java.math.BigInteger bigInteger18 = null;
        jSONWriter17.writeBigInt(bigInteger18, (long) 6);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter17.writeName((long) ' ');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray40);
        context45.setDateFormat("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal52 = null;
        jSONWriter49.writeDecimal(bigDecimal52);
        boolean boolean55 = jSONWriter49.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter49.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj60 = null;
        jSONWriter49.startArray(obj60, (-1));
        jSONWriter49.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray72 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        jSONWriter49.writeString((java.util.List<java.lang.String>) strList73);
        jSONWriter49.writeDateYYYMMDD8((int) (short) 1, (int) (byte) 0, (int) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature80 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter49.writeAny((java.lang.Object) feature80);
        boolean boolean82 = context45.isEnabled(feature80);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter83 = context45.getPropertyFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature80.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(propertyFilter83);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.of(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter7.writeDecimal(bigDecimal10);
        boolean boolean13 = jSONWriter7.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter7.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj18 = null;
        jSONWriter7.startArray(obj18, (-1));
        jSONWriter7.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray30 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        jSONWriter7.writeString((java.util.List<java.lang.String>) strList31);
        boolean boolean34 = jSONWriter5.isIgnoreNoneSerializable((java.lang.Object) strList31);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter5.writeFloat((-1.0f), decimalFormat36);
        jSONWriter5.endObject();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray1);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter5 = context4.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter6 = null;
        context4.setContextNameFilter(contextNameFilter6);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context23);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context23, symbolTable25);
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) -1 };
        boolean boolean39 = jSONWriter30.writeTypeName(byteArray37, 0L);
        java.util.UUID uUID40 = null;
        jSONWriter30.writeUUID(uUID40);
        com.alibaba.fastjson2.JSONWriter.Context context42 = jSONWriter30.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context42);
        java.time.format.DateTimeFormatter dateTimeFormatter44 = context42.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider45 = context42.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) feature48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature48 };
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider45, featureArray50);
        context23.config(featureArray50);
        context4.config(featureArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNull(contextValueFilter5);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(context42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(objectWriterProvider45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter55);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray46 = null;
        jSONWriter45.writeDouble(doubleArray46);
        jSONWriter45.writeArrayNull();
        short[] shortArray52 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter45.writeInt16(shortArray52);
        jSONWriter3.writeInt16(shortArray52);
        java.time.Instant instant55 = null;
        jSONWriter3.writeInstant(instant55);
        jSONWriter3.writeDateTime14(0, (int) (byte) 10, (int) (short) 100, 13, 8, (int) (short) 1);
        java.nio.charset.Charset charset64 = jSONWriter3.getCharset();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(charset64);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter19 = context15.getBeforeFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNull(beforeFilter19);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        java.util.Map map23 = null;
        jSONWriter0.write(map23);
        jSONWriter0.writeRaw((byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) 100 };
        boolean boolean39 = jSONWriter28.writeTypeName(byteArray37, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        int[] intArray45 = new int[] { (short) -1 };
        jSONWriter43.writeInt32(intArray45);
        java.lang.String str47 = jSONWriter28.setPath("hi!", (java.lang.Object) intArray45);
        jSONWriter0.writeInt32(intArray45);
        boolean boolean49 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal50 = null;
        jSONWriter0.writeDecimal(bigDecimal50, 65536L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1]");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter22 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = context15.getPropertyPreFilter();
        long long24 = context15.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(valueFilter22);
        org.junit.Assert.assertNull(propertyPreFilter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        jSONWriter6.writeName((int) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = context34.getPropertyFilter();
        long long36 = context34.getFeatures();
        long long37 = context34.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter38 = context34.getContextNameFilter();
        long long39 = context34.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        java.util.UUID uUID53 = null;
        jSONWriter43.writeUUID(uUID53);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter43.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context55.config(feature56, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) feature61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature61 };
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray63);
        context55.config(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Context context67 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        context67.config(feature68, false);
        boolean boolean71 = context34.isEnabled(feature68);
        jSONWriter6.setRootObject((java.lang.Object) context34);
        long long73 = jSONWriter6.getFeatures();
        jSONWriter6.close();
        byte[] byteArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter6.writeRaw(byteArray75);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNull(propertyFilter35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNull(contextNameFilter38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 137438953472L + "'", long73 == 137438953472L);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        java.lang.String str20 = context15.getDateFormat();
        boolean boolean22 = context15.isEnabled(0L);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter18.writeInt16((short) (byte) 100);
        boolean boolean34 = jSONWriter18.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        boolean boolean55 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean34, (java.lang.reflect.Type) wildcardClass51, (long) (byte) -1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter56 = null;
        com.alibaba.fastjson2.JSONWriter.Path path57 = null;
        com.alibaba.fastjson2.JSONWriter.Path path59 = new com.alibaba.fastjson2.JSONWriter.Path(path57, "");
        com.alibaba.fastjson2.JSONWriter.Path path61 = new com.alibaba.fastjson2.JSONWriter.Path(path59, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path63 = new com.alibaba.fastjson2.JSONWriter.Path(path61, "hi!");
        java.lang.String str64 = path61.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class71 = null;
        boolean boolean73 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter68, class71, (long) ' ');
        byte[] byteArray75 = new byte[] { (byte) -1 };
        boolean boolean77 = jSONWriter68.writeTypeName(byteArray75, 0L);
        java.util.UUID uUID78 = null;
        jSONWriter68.writeUUID(uUID78);
        com.alibaba.fastjson2.JSONWriter.Context context80 = jSONWriter68.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter81 = context80.getPropertyFilter();
        long long82 = context80.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter83 = null;
        context80.setLabelFilter(labelFilter83);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider85 = context80.provider;
        boolean boolean86 = path61.equals((java.lang.Object) context80);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context80.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter88 = null;
        context80.setNameFilter(nameFilter88);
        java.lang.String str90 = jSONWriter1.setPath(fieldWriter56, (java.lang.Object) context80);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter91 = null;
        context80.setContextValueFilter(contextValueFilter91);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter93 = null;
        context80.setPropertyFilter(propertyFilter93);
        com.alibaba.fastjson2.JSONWriter jSONWriter95 = com.alibaba.fastjson2.JSONWriter.of(context80);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[1]" + "'", str64, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(context80);
        org.junit.Assert.assertNull(propertyFilter81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(afterFilter87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(jSONWriter95);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter35.isWriteTypeInfo((java.lang.Object) jSONWriter37, class40, (long) ' ');
        byte[] byteArray44 = new byte[] { (byte) -1 };
        boolean boolean46 = jSONWriter37.writeTypeName(byteArray44, 0L);
        java.util.UUID uUID47 = null;
        jSONWriter37.writeUUID(uUID47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = jSONWriter37.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter50 = context49.getPropertyFilter();
        long long51 = context49.getFeatures();
        long long52 = context49.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter53 = context49.getContextNameFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter54 = context49.getNameFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter55 = null;
        context49.setNameFilter(nameFilter55);
        com.alibaba.fastjson2.filter.NameFilter nameFilter57 = context49.getNameFilter();
        boolean boolean59 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context49, (long) (short) -1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(context49);
        org.junit.Assert.assertNull(propertyFilter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNull(contextNameFilter53);
        org.junit.Assert.assertNull(nameFilter54);
        org.junit.Assert.assertNull(nameFilter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean boolean13 = jSONWriter12.isRefDetect();
        jSONWriter12.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        jSONWriter12.writeFloat((java.lang.Float) (-1.0f));
        java.lang.String str23 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        boolean boolean24 = jSONWriter1.isUTF16();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context15.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context15.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        byte[] byteArray38 = new byte[] { (byte) -1 };
        boolean boolean40 = jSONWriter31.writeTypeName(byteArray38, 0L);
        java.util.UUID uUID41 = null;
        jSONWriter31.writeUUID(uUID41);
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter31.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter44 = context43.getPropertyFilter();
        long long45 = context43.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter46 = null;
        context43.setLabelFilter(labelFilter46);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider48 = context43.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter49 = null;
        context43.setPropertyPreFilter(propertyPreFilter49);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter51 = null;
        context43.setPropertyPreFilter(propertyPreFilter51);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter53 = null;
        context43.setLabelFilter(labelFilter53);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider55 = context43.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter57);
        long long59 = jSONWriter57.getFeatures();
        java.time.LocalDateTime localDateTime60 = null;
        jSONWriter57.writeLocalDateTime(localDateTime60);
        byte[] byteArray62 = jSONWriter57.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Context context66 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray63);
        jSONWriter57.config(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.of(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Context context69 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider55, featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider27, featureArray63);
        boolean boolean71 = jSONWriter70.isIgnoreErrorGetter();
        boolean boolean72 = jSONWriter70.isUTF16();
        jSONWriter70.writeName((int) '4');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertNull(propertyFilter44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider48);
        org.junit.Assert.assertNotNull(objectWriterProvider55);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-81]");
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        long long6 = jSONWriter1.getFeatures();
        int int7 = jSONWriter1.level();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        java.lang.String str20 = context15.getDateFormat();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter21 = null;
        context15.setAfterFilter(afterFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter24 = context15.getBeforeFilter();
        boolean boolean25 = context15.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(nameFilter23);
        org.junit.Assert.assertNull(beforeFilter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter21.writeDecimal(bigDecimal24);
        boolean boolean27 = jSONWriter21.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter21.writeArrayNull();
        jSONWriter21.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        boolean boolean40 = jSONWriter31.isEnabled((long) ' ');
        jSONWriter31.writeString("hi!");
        boolean boolean43 = jSONWriter31.isUTF8();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        jSONWriter31.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter21.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList47);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        jSONWriter52.writeDateYYYMMDD8((int) (short) 0, (int) '4', (int) (short) 100);
        jSONWriter52.writeReference(".\\[52\\]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSONWriter52);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        double[] doubleArray29 = new double[] { 1L };
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter1.writeDouble(doubleArray29, decimalFormat30);
        jSONWriter1.writeBooleanNull();
        jSONWriter1.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context26.setLabelFilter(labelFilter29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context26.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        jSONWriter32.config(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray37);
        boolean boolean42 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter41);
        jSONWriter41.writeRaw('#');
        jSONWriter41.writeFloat((java.lang.Float) 100.0f);
        byte[] byteArray47 = jSONWriter41.getBytes();
        com.alibaba.fastjson2.JSONObject jSONObject48 = null;
        jSONWriter41.write(jSONObject48);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[35, 49, 48, 48, 46, 48]");
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter20 = null;
        context19.setAfterFilter(afterFilter20);
        boolean boolean22 = context19.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context19);
        jSONWriter23.endObject();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.getContext();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(context6);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean10 = jSONWriter1.isEnabled(feature9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        jSONWriter1.writeInt16((short) (byte) 1);
        jSONWriter1.writeMillis((long) 5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        jSONWriter17.close();
        jSONWriter17.writeSymbol("");
        jSONWriter17.writeBooleanNull();
        jSONWriter17.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context38);
        java.time.format.DateTimeFormatter dateTimeFormatter40 = context38.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider41 = context38.getProvider();
        java.lang.String str42 = context38.getDateFormat();
        boolean boolean43 = jSONWriter17.removeReference((java.lang.Object) context38);
        short[] shortArray50 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter17.writeInt16(shortArray50);
        jSONWriter1.writeInt16(shortArray50);
        jSONWriter1.writeBool(false);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter1.getContext();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter56 = context55.getLabelFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(objectWriterProvider41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertNull(labelFilter56);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        jSONWriter1.writeInt32((int) (byte) 0);
        jSONWriter1.writeBool(false);
        java.time.LocalTime localTime32 = null;
        jSONWriter1.writeLocalTime(localTime32);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        boolean boolean21 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter22 = null;
        context15.setBeforeFilter(beforeFilter22);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        java.time.Instant instant9 = null;
        jSONWriter1.writeInstant(instant9);
        boolean boolean11 = jSONWriter1.useSingleQuote;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        jSONWriter16.startObject();
        java.time.LocalDate localDate18 = null;
        jSONWriter16.writeLocalDate(localDate18);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        boolean boolean28 = context26.isEnabled(feature27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        jSONWriter29.writeSymbol("[1].hi\\![35]");
        java.time.LocalDateTime localDateTime32 = null;
        jSONWriter29.writeLocalDateTime(localDateTime32);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj12 = null;
        jSONWriter1.startArray(obj12, (-1));
        jSONWriter1.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray24 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList25);
        java.time.LocalDate localDate28 = null;
        jSONWriter1.writeLocalDate(localDate28);
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter1.context;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal35 = null;
        jSONWriter32.writeDecimal(bigDecimal35);
        boolean boolean38 = jSONWriter32.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter32.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj43 = null;
        jSONWriter32.startArray(obj43, (-1));
        jSONWriter32.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray55 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        jSONWriter32.writeString((java.util.List<java.lang.String>) strList56);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter32.context;
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter60 = null;
        context59.setContextValueFilter(contextValueFilter60);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter62 = null;
        context59.setContextNameFilter(contextNameFilter62);
        com.alibaba.fastjson2.SymbolTable symbolTable64 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        boolean boolean69 = jSONWriter67.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class70 = null;
        boolean boolean72 = jSONWriter65.isWriteTypeInfo((java.lang.Object) jSONWriter67, class70, (long) ' ');
        byte[] byteArray74 = new byte[] { (byte) -1 };
        boolean boolean76 = jSONWriter67.writeTypeName(byteArray74, 0L);
        java.util.UUID uUID77 = null;
        jSONWriter67.writeUUID(uUID77);
        com.alibaba.fastjson2.JSONWriter.Context context79 = jSONWriter67.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter80 = context79.getPropertyFilter();
        long long81 = context79.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter82 = null;
        context79.setLabelFilter(labelFilter82);
        com.alibaba.fastjson2.SymbolTable symbolTable84 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context79, symbolTable84);
        com.alibaba.fastjson2.JSONWriter.Feature feature86 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context79.config(feature86, true);
        context59.config(feature86, false);
        jSONWriter1.setRootObject((java.lang.Object) feature86);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(context79);
        org.junit.Assert.assertNull(propertyFilter80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertTrue("'" + feature86 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature86.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean13 = jSONWriter8.writeTypeName(byteArray11, (long) 10);
        jSONWriter1.writeStringLatin1(byteArray11);
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        int int17 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = null;
        jSONWriter18.writeDouble(doubleArray19);
        boolean boolean21 = jSONWriter18.utf16;
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter18.writeDecimal(bigDecimal22, 100L);
        boolean boolean25 = jSONWriter18.utf16;
        boolean boolean27 = jSONWriter18.isEnabled((long) '4');
        boolean boolean28 = jSONWriter1.containsReference((java.lang.Object) jSONWriter18);
        java.time.LocalDate localDate29 = null;
        jSONWriter1.writeLocalDate(localDate29);
        jSONWriter1.writeChar('#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        boolean boolean37 = jSONWriter34.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Path path38 = null;
        com.alibaba.fastjson2.JSONWriter.Path path40 = new com.alibaba.fastjson2.JSONWriter.Path(path38, "");
        com.alibaba.fastjson2.JSONWriter.Path path42 = new com.alibaba.fastjson2.JSONWriter.Path(path40, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path44 = new com.alibaba.fastjson2.JSONWriter.Path(path40, "[1].hi\\!");
        jSONWriter34.writeAny((java.lang.Object) "[1].hi\\!");
        java.time.LocalTime localTime46 = null;
        jSONWriter34.writeLocalTime(localTime46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean49 = jSONWriter48.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray57 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter50.writeRaw(charArray57);
        jSONWriter48.writeString(charArray57);
        jSONWriter34.writeString(charArray57);
        jSONWriter1.writeString(charArray57, 3, 3);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        jSONWriter22.writeBool(false);
        com.alibaba.fastjson2.JSONObject jSONObject25 = null;
        jSONWriter22.write(jSONObject25);
        boolean boolean27 = jSONWriter22.utf16;
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter28 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        jSONWriter32.close();
        java.text.DecimalFormat decimalFormat35 = null;
        jSONWriter32.writeFloat((float) 10, decimalFormat35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean43 = jSONWriter38.writeTypeName(byteArray41, (long) 10);
        boolean boolean45 = jSONWriter32.writeTypeName(byteArray41, (long) (byte) 100);
        jSONWriter30.writeNameRaw(byteArray41, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        char[] charArray52 = new char[] { '#', ' ' };
        jSONWriter49.writeString(charArray52, (int) (byte) 0, (int) (short) 1);
        jSONWriter30.writeString(charArray52);
        jSONWriter30.writeInt16((short) 10);
        java.lang.String str59 = jSONWriter22.setPath(fieldWriter28, (java.lang.Object) jSONWriter30);
        com.alibaba.fastjson2.SymbolTable symbolTable60 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable60);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        boolean boolean65 = jSONWriter63.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class66 = null;
        boolean boolean68 = jSONWriter61.isWriteTypeInfo((java.lang.Object) jSONWriter63, class66, (long) ' ');
        byte[] byteArray70 = new byte[] { (byte) -1 };
        boolean boolean72 = jSONWriter63.writeTypeName(byteArray70, 0L);
        java.util.UUID uUID73 = null;
        jSONWriter63.writeUUID(uUID73);
        com.alibaba.fastjson2.JSONWriter.Context context75 = jSONWriter63.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter76 = context75.getPropertyFilter();
        long long77 = context75.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter78 = null;
        context75.setLabelFilter(labelFilter78);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter80 = context75.getContextValueFilter();
        boolean boolean81 = context75.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter82 = null;
        context75.setValueFilter(valueFilter82);
        com.alibaba.fastjson2.JSONWriter.Feature feature84 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context75.config(feature84, false);
        jSONWriter22.writeEnum((java.lang.Enum) feature84);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[#,  ]");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(context75);
        org.junit.Assert.assertNull(propertyFilter76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNull(contextValueFilter80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + feature84 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature84.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean4 = jSONWriter0.containsReference((java.lang.Object) 5);
        jSONWriter0.writeNull();
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter0.writeDouble((double) 65536L, decimalFormat7);
        long long9 = jSONWriter0.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter0.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean12 = jSONWriter11.isUseSingleQuotes();
        boolean boolean13 = jSONWriter11.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter15.writeDecimal(bigDecimal18);
        boolean boolean21 = jSONWriter15.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter15.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        char[] charArray30 = new char[] { '#', ' ' };
        jSONWriter27.writeString(charArray30, (int) (byte) 0, (int) (short) 1);
        jSONWriter15.writeString(charArray30);
        jSONWriter11.writeString(charArray30, 1, (int) (short) 0, true);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeNameRaw(charArray30);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#,  ]");
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean10 = jSONWriter1.isEnabled(feature9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        jSONWriter1.writeInt16((short) (byte) 1);
        jSONWriter1.writeMillis((long) 5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        jSONWriter17.close();
        jSONWriter17.writeSymbol("");
        jSONWriter17.writeBooleanNull();
        jSONWriter17.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context38);
        java.time.format.DateTimeFormatter dateTimeFormatter40 = context38.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider41 = context38.getProvider();
        java.lang.String str42 = context38.getDateFormat();
        boolean boolean43 = jSONWriter17.removeReference((java.lang.Object) context38);
        short[] shortArray50 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter17.writeInt16(shortArray50);
        jSONWriter1.writeInt16(shortArray50);
        jSONWriter1.writeBool(false);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter1.getContext();
        boolean boolean56 = context55.isDateFormatMillis();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(objectWriterProvider41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        java.time.format.DateTimeFormatter dateTimeFormatter20 = context19.getDateFormatter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter21 = context19.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter22 = context19.getNameFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter23 = context19.getContextValueFilter();
        boolean boolean25 = context19.isEnabled(52L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(afterFilter21);
        org.junit.Assert.assertNull(nameFilter22);
        org.junit.Assert.assertNull(contextValueFilter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        jSONWriter1.writeBinary(byteArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = jSONWriter22.getSymbolTable();
        boolean boolean24 = jSONWriter22.hasFilter();
        boolean boolean25 = jSONWriter22.utf8;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNull(symbolTable23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray4);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = context6.getPropertyPreFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNull(propertyPreFilter7);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = null;
        context21.setAfterFilter(afterFilter22);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = context21.getLabelFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter25 = null;
        context21.setPropertyPreFilter(propertyPreFilter25);
        com.alibaba.fastjson2.filter.NameFilter nameFilter27 = context21.getNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(labelFilter24);
        org.junit.Assert.assertNull(nameFilter27);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter22.writeInt8((byte) 1);
        jSONWriter22.endArray();
        jSONWriter22.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        byte[] byteArray52 = new byte[] { (byte) -1 };
        boolean boolean54 = jSONWriter45.writeTypeName(byteArray52, 0L);
        java.util.UUID uUID55 = null;
        jSONWriter45.writeUUID(uUID55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = jSONWriter45.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context57.config(feature58, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) feature63);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature63 };
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray65);
        context57.config(featureArray65);
        com.alibaba.fastjson2.JSONWriter.Context context69 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray65);
        jSONWriter22.config(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray65);
        com.alibaba.fastjson2.JSONWriter.Context context72 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18, featureArray65);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter73 = null;
        context72.setContextValueFilter(contextValueFilter73);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(context57);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(jSONWriter71);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) feature28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider25, featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        jSONWriter1.setRootObject((java.lang.Object) jSONWriter33);
        boolean boolean36 = jSONWriter1.isEnabled((-1L));
        boolean boolean37 = jSONWriter1.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        jSONWriter9.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter9.getContext();
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter9.writeDecimal(bigDecimal24);
        boolean boolean26 = jSONWriter9.isWriteNulls();
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) -1 };
        boolean boolean39 = jSONWriter30.writeTypeName(byteArray37, 0L);
        java.util.UUID uUID40 = null;
        jSONWriter30.writeUUID(uUID40);
        com.alibaba.fastjson2.JSONWriter.Context context42 = jSONWriter30.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter43 = context42.getPropertyFilter();
        long long44 = context42.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter45 = context42.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context42);
        boolean boolean47 = jSONWriter46.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray48);
        jSONWriter46.writeAny((java.lang.Object) featureArray48);
        java.nio.charset.Charset charset52 = jSONWriter46.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        java.lang.reflect.Type type56 = null;
        boolean boolean58 = jSONWriter54.isWriteTypeInfo((java.lang.Object) (byte) 1, type56, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter60.writeDouble(1.0d, decimalFormat64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean72 = jSONWriter67.writeTypeName(byteArray70, (long) 10);
        jSONWriter60.writeStringLatin1(byteArray70);
        jSONWriter54.writeNameRaw(byteArray70);
        jSONWriter46.writeBinary(byteArray70);
        boolean boolean77 = jSONWriter9.isWriteTypeInfo((java.lang.Object) byteArray70, (long) 0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        com.alibaba.fastjson2.JSONWriter.Context context81 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray79);
        com.alibaba.fastjson2.JSONWriter.Context context82 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray79);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.of(featureArray79);
        jSONWriter83.writeName((long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter9.writeNameAny((java.lang.Object) (short) 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(context42);
        org.junit.Assert.assertNull(propertyFilter43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNull(nameFilter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter83);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray4);
        java.time.ZoneId zoneId7 = null;
        context6.setZoneId(zoneId7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter20);
        boolean boolean22 = jSONWriter20.utf16;
        long long24 = jSONWriter20.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = jSONWriter20.getSymbolTable();
        boolean boolean26 = jSONWriter12.isIgnoreNoneSerializable((java.lang.Object) jSONWriter20);
        boolean boolean27 = jSONWriter12.isUTF16();
        jSONWriter12.writeArrayNull();
        java.lang.String str29 = jSONWriter9.setPath("", (java.lang.Object) jSONWriter12);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        java.util.UUID uUID43 = null;
        jSONWriter33.writeUUID(uUID43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter33.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context45);
        java.time.format.DateTimeFormatter dateTimeFormatter47 = context45.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider48 = context45.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean52 = jSONWriter50.isRefDetect((java.lang.Object) feature51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature51 };
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray53);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider48, featureArray53);
        boolean boolean56 = jSONWriter9.containsReference((java.lang.Object) objectWriterProvider48);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNull(symbolTable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(objectWriterProvider48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context22.getProvider();
        java.lang.String str25 = jSONWriter1.setPath("$", (java.lang.Object) context22);
        jSONWriter1.writeTypeName("");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) feature30);
        jSONWriter29.writeInt16((short) 0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal38 = null;
        jSONWriter35.writeDecimal(bigDecimal38);
        java.lang.Object obj40 = null;
        java.lang.Class class41 = null;
        jSONWriter35.checkAndWriteTypeName(obj40, class41);
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean44 = jSONWriter35.isEnabled(feature43);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = jSONWriter35.symbolTable;
        jSONWriter35.writeInt16((short) (byte) 1);
        jSONWriter35.writeMillis((long) 5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        jSONWriter51.close();
        jSONWriter51.writeSymbol("");
        jSONWriter51.writeBooleanNull();
        jSONWriter51.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable57 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class63 = null;
        boolean boolean65 = jSONWriter58.isWriteTypeInfo((java.lang.Object) jSONWriter60, class63, (long) ' ');
        byte[] byteArray67 = new byte[] { (byte) -1 };
        boolean boolean69 = jSONWriter60.writeTypeName(byteArray67, 0L);
        java.util.UUID uUID70 = null;
        jSONWriter60.writeUUID(uUID70);
        com.alibaba.fastjson2.JSONWriter.Context context72 = jSONWriter60.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context72);
        java.time.format.DateTimeFormatter dateTimeFormatter74 = context72.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider75 = context72.getProvider();
        java.lang.String str76 = context72.getDateFormat();
        boolean boolean77 = jSONWriter51.removeReference((java.lang.Object) context72);
        short[] shortArray84 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter51.writeInt16(shortArray84);
        jSONWriter35.writeInt16(shortArray84);
        jSONWriter29.writeInt16(shortArray84);
        jSONWriter1.writeInt16(shortArray84);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(symbolTable45);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(context72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(objectWriterProvider75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray84), "[1, 100, 10, 10, 0, 1]");
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray20);
        context15.config(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray28 = null;
        jSONWriter27.writeDouble(doubleArray28);
        jSONWriter27.writeArrayNull();
        short[] shortArray34 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter27.writeInt16(shortArray34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal40 = null;
        jSONWriter37.writeDecimal(bigDecimal40);
        boolean boolean43 = jSONWriter37.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter37.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        char[] charArray52 = new char[] { '#', ' ' };
        jSONWriter49.writeString(charArray52, (int) (byte) 0, (int) (short) 1);
        jSONWriter37.writeString(charArray52);
        jSONWriter27.writeString(charArray52);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter26.writeString(charArray52, (int) (byte) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[#,  ]");
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean24 = context15.isEnabled((long) 'a');
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context15.provider;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) feature28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider25, featureArray30);
        jSONWriter1.config(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        jSONWriter34.writeName(5L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter34);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeDouble((double) (-1.0f));
        boolean boolean30 = jSONWriter25.isUTF16();
        jSONWriter25.writeBooleanNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.lang.reflect.Type type3 = null;
        boolean boolean5 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (byte) 1, type3, (long) '#');
        jSONWriter1.writeFloat((float) 2L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        jSONWriter1.writeInt32((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDateTimeISO8601(0, (int) (byte) 10, 0, 3, (int) ' ', (int) (short) 1, 3, 7, false);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        boolean boolean20 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter21 = null;
        context15.setValueFilter(valueFilter21);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter23 = context15.getContextNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter24 = context15.getBeforeFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context15.provider;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(contextNameFilter23);
        org.junit.Assert.assertNull(beforeFilter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean1 = jSONWriter0.useSingleQuote;
        jSONWriter0.writeRaw(' ');
        jSONWriter0.writeArrayNull();
        int int5 = jSONWriter0.level();
        boolean boolean6 = jSONWriter0.useSingleQuote;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        long long20 = context15.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString;
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        java.util.UUID uUID35 = null;
        jSONWriter25.writeUUID(uUID35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter25.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context37);
        boolean boolean40 = jSONWriter38.hasFilter((long) 0);
        jSONWriter38.endArray();
        jSONWriter38.writeString("");
        boolean boolean44 = jSONWriter38.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) feature47);
        jSONWriter38.writeEnum((java.lang.Enum) feature47);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter53.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter66 = context65.getPropertyFilter();
        long long67 = context65.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter68 = null;
        context65.setLabelFilter(labelFilter68);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context65, symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Context context72 = jSONWriter71.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter73 = null;
        context72.setPropertyFilter(propertyFilter73);
        boolean boolean75 = context72.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean77 = jSONWriter76.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean79 = jSONWriter76.isEnabled(feature78);
        boolean boolean80 = context72.isEnabled(feature78);
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature82 = com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray83 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature47, feature78, feature81, feature82 };
        context15.config(featureArray83);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter85 = context15.getContextNameFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider86 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context87 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider86);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter88 = null;
        context87.setContextNameFilter(contextNameFilter88);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString));
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(context65);
        org.junit.Assert.assertNull(propertyFilter66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(context72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature82 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii + "'", feature82.equals(com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii));
        org.junit.Assert.assertNotNull(featureArray83);
        org.junit.Assert.assertNull(contextNameFilter85);
        org.junit.Assert.assertNotNull(objectWriterProvider86);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        jSONWriter25.writeChar('4');
        java.time.LocalTime localTime28 = null;
        jSONWriter25.writeLocalTime(localTime28);
        jSONWriter25.close();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter25);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray5);
        boolean boolean9 = context8.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.NameFilter nameFilter10 = null;
        context8.setNameFilter(nameFilter10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter12 = null;
        context8.setPropertyPreFilter(propertyPreFilter12);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context15);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean26 = jSONWriter25.isUseSingleQuotes();
        boolean boolean27 = jSONWriter25.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal32 = null;
        jSONWriter29.writeDecimal(bigDecimal32);
        boolean boolean35 = jSONWriter29.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter29.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        char[] charArray44 = new char[] { '#', ' ' };
        jSONWriter41.writeString(charArray44, (int) (byte) 0, (int) (short) 1);
        jSONWriter29.writeString(charArray44);
        jSONWriter25.writeString(charArray44, 1, (int) (short) 0, true);
        jSONWriter24.writeRaw(charArray44);
        jSONWriter24.writeSymbol("[1].hi\\![35]");
        boolean boolean56 = jSONWriter24.isUseSingleQuotes();
        java.io.Reader reader57 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter24.writeString(reader57);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: read string from reader error");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#,  ]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeName("[1].hi\\!");
        jSONWriter3.writeInt8((byte) 1);
        long long18 = jSONWriter3.getFeatures((long) 'a');
        jSONWriter3.writeNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray0);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        boolean[] booleanArray10 = new boolean[] { false, true, true, true };
        jSONWriter5.writeBool(booleanArray10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        boolean boolean15 = jSONWriter13.utf16;
        long long17 = jSONWriter13.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable18 = jSONWriter13.getSymbolTable();
        boolean boolean19 = jSONWriter5.isIgnoreNoneSerializable((java.lang.Object) jSONWriter13);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter36 = context35.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter37 = null;
        context35.setContextValueFilter(contextValueFilter37);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter39 = null;
        context35.setPropertyPreFilter(propertyPreFilter39);
        boolean boolean41 = context35.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue;
        context35.config(feature42, true);
        boolean boolean45 = jSONWriter5.isEnabled(feature42);
        jSONWriter3.writeEnum((java.lang.Enum) feature42);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNull(symbolTable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNull(propertyFilter36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str1 = path0.toString();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        jSONWriter3.writeSymbol((-1));
        jSONWriter3.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        com.alibaba.fastjson2.JSONObject jSONObject15 = null;
        jSONWriter3.write(jSONObject15);
        boolean boolean17 = path0.equals((java.lang.Object) jSONWriter3);
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter3.writeFloat(0.0f, decimalFormat19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray25 = null;
        jSONWriter22.writeHex(byteArray25);
        boolean boolean27 = jSONWriter22.isRefDetect();
        jSONWriter22.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter45 = context44.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        boolean boolean48 = jSONWriter47.isRefDetect();
        java.lang.String str51 = jSONWriter47.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter53);
        long long55 = jSONWriter53.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat62 = null;
        jSONWriter58.writeDouble(1.0d, decimalFormat62);
        boolean boolean65 = jSONWriter58.removeReference((java.lang.Object) (short) -1);
        jSONWriter58.writeArrayNull();
        long long67 = jSONWriter58.getFeatures();
        java.lang.Class<?> wildcardClass68 = jSONWriter58.getClass();
        boolean boolean70 = jSONWriter53.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass68, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter71 = jSONWriter47.getObjectWriter((java.lang.Class) wildcardClass68);
        boolean boolean72 = jSONWriter22.isWriteTypeInfo((java.lang.Object) context44, (java.lang.reflect.Type) wildcardClass68);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter73 = jSONWriter3.getObjectWriter((java.lang.Class) wildcardClass68);
        jSONWriter3.writeInt16((short) 0);
        java.time.Instant instant76 = null;
        jSONWriter3.writeInstant(instant76);
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$" + "'", str1, "$");
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertNull(propertyFilter45);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectWriter71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objectWriter73);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        byte[] byteArray38 = new byte[] { (byte) -1 };
        boolean boolean40 = jSONWriter31.writeTypeName(byteArray38, 0L);
        java.util.UUID uUID41 = null;
        jSONWriter31.writeUUID(uUID41);
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter31.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter44 = context43.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter45 = context43.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter46 = context43.getValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable47 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable47);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        boolean boolean52 = jSONWriter50.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class53 = null;
        boolean boolean55 = jSONWriter48.isWriteTypeInfo((java.lang.Object) jSONWriter50, class53, (long) ' ');
        byte[] byteArray57 = new byte[] { (byte) -1 };
        boolean boolean59 = jSONWriter50.writeTypeName(byteArray57, 0L);
        java.util.UUID uUID60 = null;
        jSONWriter50.writeUUID(uUID60);
        com.alibaba.fastjson2.JSONWriter.Context context62 = jSONWriter50.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter63 = context62.getPropertyFilter();
        long long64 = context62.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter65 = null;
        context62.setLabelFilter(labelFilter65);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider67 = context62.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter68 = null;
        context62.setPropertyPreFilter(propertyPreFilter68);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        boolean boolean75 = jSONWriter73.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class76 = null;
        boolean boolean78 = jSONWriter71.isWriteTypeInfo((java.lang.Object) jSONWriter73, class76, (long) ' ');
        byte[] byteArray80 = new byte[] { (byte) -1 };
        boolean boolean82 = jSONWriter73.writeTypeName(byteArray80, 0L);
        java.util.UUID uUID83 = null;
        jSONWriter73.writeUUID(uUID83);
        com.alibaba.fastjson2.JSONWriter.Context context85 = jSONWriter73.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter86 = context85.getPropertyFilter();
        long long87 = context85.getFeatures();
        long long88 = context85.getFeatures();
        boolean boolean89 = context85.isDateFormatHasHour();
        java.time.ZoneId zoneId90 = context85.getZoneId();
        context62.setZoneId(zoneId90);
        context43.setZoneId(zoneId90);
        context15.setZoneId(zoneId90);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider94 = context15.provider;
        context15.setDateFormat("$");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertNull(propertyFilter44);
        org.junit.Assert.assertNull(beforeFilter45);
        org.junit.Assert.assertNull(valueFilter46);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(context62);
        org.junit.Assert.assertNull(propertyFilter63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider67);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(context85);
        org.junit.Assert.assertNull(propertyFilter86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(zoneId90);
        org.junit.Assert.assertNotNull(objectWriterProvider94);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        byte[] byteArray43 = null;
        jSONWriter33.writeBinary(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter33.writeHex(byteArray51);
        jSONWriter25.writeBinary(byteArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter25.containsReference(obj54);
        jSONWriter25.writeDateTime14((int) '#', (int) (short) 1, 1, (int) (byte) -1, (int) (short) -1, (int) ' ');
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter25.writeFloat((float) 0, decimalFormat64);
        com.alibaba.fastjson2.SymbolTable symbolTable66 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable66);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class72 = null;
        boolean boolean74 = jSONWriter67.isWriteTypeInfo((java.lang.Object) jSONWriter69, class72, (long) ' ');
        byte[] byteArray76 = new byte[] { (byte) -1 };
        boolean boolean78 = jSONWriter69.writeTypeName(byteArray76, 0L);
        java.util.UUID uUID79 = null;
        jSONWriter69.writeUUID(uUID79);
        com.alibaba.fastjson2.JSONWriter.Context context81 = jSONWriter69.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context81);
        java.time.format.DateTimeFormatter dateTimeFormatter83 = context81.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider84 = context81.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter85 = null;
        context81.setAfterFilter(afterFilter85);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context81.getAfterFilter();
        jSONWriter25.writeNameAny((java.lang.Object) afterFilter87);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 1, -1, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(context81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertNull(dateTimeFormatter83);
        org.junit.Assert.assertNotNull(objectWriterProvider84);
        org.junit.Assert.assertNull(afterFilter87);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        long long11 = jSONWriter9.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter9.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass24, (long) (short) 10);
        int[] intArray33 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter9.writeInt32(intArray33);
        double[] doubleArray39 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter9.writeDouble(doubleArray39);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter1.writeDouble(doubleArray39, decimalFormat41);
        jSONWriter1.writeName("[1].hi\\![35]");
        java.util.UUID uUID45 = null;
        jSONWriter1.writeUUID(uUID45);
        jSONWriter1.writeNumberNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter1.symbolTable;
        java.time.LocalTime localTime5 = null;
        jSONWriter1.writeLocalTime(localTime5);
        jSONWriter1.setRootObject((java.lang.Object) 5L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable4);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path4.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        boolean boolean29 = path4.equals((java.lang.Object) context23);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = context23.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = null;
        context23.setNameFilter(nameFilter31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context23);
        java.lang.String str34 = context23.getDateFormat();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter35 = null;
        context23.setAfterFilter(afterFilter35);
        boolean boolean37 = context23.isDateFormatMillis();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1]" + "'", str7, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(afterFilter30);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        jSONWriter16.endArray();
        jSONWriter16.writeString("");
        boolean boolean22 = jSONWriter16.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) feature25);
        jSONWriter16.writeEnum((java.lang.Enum) feature25);
        jSONWriter16.writeInt16((short) 10);
        byte[] byteArray30 = jSONWriter16.getBytes();
        boolean boolean32 = jSONWriter16.hasFilter(6L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[73, 38, -68, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray5);
        com.alibaba.fastjson2.filter.NameFilter nameFilter9 = context8.getNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) feature13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray15);
        context8.config(featureArray15);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter21 = context8.getContextNameFilter();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNull(nameFilter9);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNull(contextNameFilter21);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, ".\\[1\\]\\[0\\]");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Context context12 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray10);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter14 = context13.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter15 = null;
        context13.setContextNameFilter(contextNameFilter15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context32);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context32, symbolTable34);
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context51);
        java.time.format.DateTimeFormatter dateTimeFormatter53 = context51.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider54 = context51.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean58 = jSONWriter56.isRefDetect((java.lang.Object) feature57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature57 };
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider54, featureArray59);
        context32.config(featureArray59);
        context13.config(featureArray59);
        boolean boolean64 = path8.equals((java.lang.Object) featureArray59);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNull(contextValueFilter14);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(objectWriterProvider54);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        jSONWriter3.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray18);
        boolean boolean23 = jSONWriter3.isWriteTypeInfo((java.lang.Object) "$", (long) '4');
        long long24 = jSONWriter3.getFeatures();
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter3.writeDouble((double) 97L, decimalFormat26);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        java.lang.reflect.Type type19 = null;
        boolean boolean21 = jSONWriter17.isWriteTypeInfo((java.lang.Object) (byte) 1, type19, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        jSONWriter23.writeSymbol("");
        jSONWriter23.writeBooleanNull();
        boolean boolean28 = jSONWriter23.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter30);
        long long32 = jSONWriter30.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        boolean boolean42 = jSONWriter35.removeReference((java.lang.Object) (short) -1);
        jSONWriter35.writeArrayNull();
        long long44 = jSONWriter35.getFeatures();
        java.lang.Class<?> wildcardClass45 = jSONWriter35.getClass();
        boolean boolean47 = jSONWriter30.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass45, (long) (short) 10);
        jSONWriter17.checkAndWriteTypeName((java.lang.Object) jSONWriter23, (java.lang.Class) wildcardClass45);
        jSONWriter23.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        jSONWriter52.close();
        jSONWriter52.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray57 = null;
        jSONWriter56.writeDouble(doubleArray57);
        jSONWriter56.writeArrayNull();
        short[] shortArray63 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter56.writeInt16(shortArray63);
        jSONWriter52.writeInt16(shortArray63);
        jSONWriter23.writeInt16(shortArray63);
        jSONWriter6.writeInt16(shortArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        com.alibaba.fastjson2.SymbolTable symbolTable69 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable69);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        boolean boolean74 = jSONWriter72.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class75 = null;
        boolean boolean77 = jSONWriter70.isWriteTypeInfo((java.lang.Object) jSONWriter72, class75, (long) ' ');
        byte[] byteArray79 = new byte[] { (byte) -1 };
        boolean boolean81 = jSONWriter72.writeTypeName(byteArray79, 0L);
        java.util.UUID uUID82 = null;
        jSONWriter72.writeUUID(uUID82);
        com.alibaba.fastjson2.JSONWriter.Context context84 = jSONWriter72.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter85 = context84.getPropertyFilter();
        long long86 = context84.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter87 = context84.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter88 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context84);
        boolean boolean89 = jSONWriter88.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray90 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter91 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray90);
        com.alibaba.fastjson2.JSONWriter.Context context92 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray90);
        jSONWriter88.writeAny((java.lang.Object) featureArray90);
        java.nio.charset.Charset charset94 = jSONWriter88.getCharset();
        java.math.BigInteger bigInteger95 = null;
        jSONWriter88.writeBigInt(bigInteger95);
        boolean boolean97 = jSONWriter6.isWriteTypeInfo((java.lang.Object) bigInteger95);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(context84);
        org.junit.Assert.assertNull(propertyFilter85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNull(nameFilter87);
        org.junit.Assert.assertNotNull(jSONWriter88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(featureArray90);
        org.junit.Assert.assertNotNull(jSONWriter91);
        org.junit.Assert.assertNotNull(charset94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean10 = jSONWriter1.isEnabled(feature9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        jSONWriter1.writeInt16((short) (byte) 1);
        jSONWriter1.startObject();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(symbolTable11);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        boolean[] booleanArray6 = new boolean[] { true };
        jSONWriter1.writeBool(booleanArray6);
        int int8 = jSONWriter1.size();
        long long10 = jSONWriter1.getFeatures((long) 6);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter6.writeDouble(1.0d, decimalFormat10);
        boolean boolean13 = jSONWriter6.removeReference((java.lang.Object) (short) -1);
        jSONWriter6.writeArrayNull();
        long long15 = jSONWriter6.getFeatures();
        java.lang.Class<?> wildcardClass16 = jSONWriter6.getClass();
        boolean boolean18 = jSONWriter1.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass16, (long) (short) 10);
        int[] intArray25 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter1.writeInt32(intArray25);
        jSONWriter1.writeRaw((byte) 0);
        jSONWriter1.endArray();
        java.text.DecimalFormat decimalFormat31 = null;
        jSONWriter1.writeDouble((double) ' ', decimalFormat31);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter3.writeDouble(1.0d, decimalFormat7);
        boolean boolean10 = jSONWriter3.removeReference((java.lang.Object) (short) -1);
        jSONWriter3.writeArrayNull();
        jSONWriter3.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray15 = null;
        jSONWriter14.writeDouble(doubleArray15);
        jSONWriter14.writeArrayNull();
        short[] shortArray21 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter14.writeInt16(shortArray21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal27 = null;
        jSONWriter24.writeDecimal(bigDecimal27);
        boolean boolean30 = jSONWriter24.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter24.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        char[] charArray39 = new char[] { '#', ' ' };
        jSONWriter36.writeString(charArray39, (int) (byte) 0, (int) (short) 1);
        jSONWriter24.writeString(charArray39);
        jSONWriter14.writeString(charArray39);
        jSONWriter3.writeString(charArray39);
        jSONWriter1.writeString(charArray39);
        com.alibaba.fastjson2.JSONWriter.Context context47 = jSONWriter1.getContext();
        java.io.Reader reader48 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader48);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#,  ]");
        org.junit.Assert.assertNotNull(context47);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        java.lang.reflect.Type type19 = null;
        boolean boolean21 = jSONWriter17.isWriteTypeInfo((java.lang.Object) (byte) 1, type19, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        jSONWriter23.writeSymbol("");
        jSONWriter23.writeBooleanNull();
        boolean boolean28 = jSONWriter23.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter30);
        long long32 = jSONWriter30.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        boolean boolean42 = jSONWriter35.removeReference((java.lang.Object) (short) -1);
        jSONWriter35.writeArrayNull();
        long long44 = jSONWriter35.getFeatures();
        java.lang.Class<?> wildcardClass45 = jSONWriter35.getClass();
        boolean boolean47 = jSONWriter30.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass45, (long) (short) 10);
        jSONWriter17.checkAndWriteTypeName((java.lang.Object) jSONWriter23, (java.lang.Class) wildcardClass45);
        jSONWriter23.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        jSONWriter52.close();
        jSONWriter52.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray57 = null;
        jSONWriter56.writeDouble(doubleArray57);
        jSONWriter56.writeArrayNull();
        short[] shortArray63 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter56.writeInt16(shortArray63);
        jSONWriter52.writeInt16(shortArray63);
        jSONWriter23.writeInt16(shortArray63);
        jSONWriter6.writeInt16(shortArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        byte[] byteArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter6.writeBase64(byteArray69);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(jSONWriter68);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        java.lang.String str20 = context15.getDateFormat();
        boolean boolean22 = context15.isEnabled(0L);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider23 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider23);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        jSONWriter1.writeSymbol("$");
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        java.util.UUID uUID43 = null;
        jSONWriter33.writeUUID(uUID43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter33.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context45);
        java.time.format.DateTimeFormatter dateTimeFormatter47 = context45.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider48 = context45.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean52 = jSONWriter50.isRefDetect((java.lang.Object) feature51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature51 };
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray53);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider48, featureArray53);
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        byte[] byteArray66 = new byte[] { (byte) -1 };
        boolean boolean68 = jSONWriter59.writeTypeName(byteArray66, 0L);
        java.util.UUID uUID69 = null;
        jSONWriter59.writeUUID(uUID69);
        com.alibaba.fastjson2.JSONWriter.Context context71 = jSONWriter59.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context71);
        java.time.format.DateTimeFormatter dateTimeFormatter73 = context71.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider74 = context71.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        com.alibaba.fastjson2.JSONWriter.Feature feature77 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean78 = jSONWriter76.isRefDetect((java.lang.Object) feature77);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature77 };
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray79);
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider74, featureArray79);
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider48, featureArray79);
        jSONWriter82.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray84 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray84);
        jSONWriter85.close();
        jSONWriter85.writeSymbol("");
        jSONWriter85.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context90 = jSONWriter85.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter91 = null;
        context90.setPropertyPreFilter(propertyPreFilter91);
        boolean boolean93 = context90.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter94 = context90.getBeforeFilter();
        java.lang.Class<?> wildcardClass95 = context90.getClass();
        boolean boolean97 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter82, (java.lang.Class) wildcardClass95, (long) (byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(objectWriterProvider48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(context71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(objectWriterProvider74);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature77.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertNotNull(featureArray84);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNotNull(context90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(beforeFilter94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal30 = null;
        jSONWriter27.writeDecimal(bigDecimal30);
        boolean boolean33 = jSONWriter27.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        boolean boolean42 = jSONWriter35.removeReference((java.lang.Object) (short) -1);
        jSONWriter35.writeArrayNull();
        boolean boolean44 = jSONWriter27.isRefDetect((java.lang.Object) jSONWriter35);
        java.util.UUID uUID45 = null;
        jSONWriter35.writeUUID(uUID45);
        jSONWriter35.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context49 = jSONWriter35.getContext();
        long long50 = context49.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        context49.config(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.of(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(context49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        double[] doubleArray3 = null;
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeDouble(doubleArray3, decimalFormat4);
        jSONWriter1.writeReference("$");
        jSONWriter1.writeInt32(3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter11.writeDecimal(bigDecimal14);
        java.lang.Object obj16 = null;
        java.lang.Class class17 = null;
        jSONWriter11.checkAndWriteTypeName(obj16, class17);
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean20 = jSONWriter11.isEnabled(feature19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        boolean boolean31 = jSONWriter22.isEnabled((long) ' ');
        jSONWriter22.writeString("hi!");
        char[] charArray34 = new char[] {};
        jSONWriter22.writeString(charArray34);
        jSONWriter11.writeString(charArray34);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw(charArray34);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[]");
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray28 = null;
        jSONWriter27.writeDouble(doubleArray28);
        boolean boolean31 = jSONWriter27.containsReference((java.lang.Object) 5);
        float[] floatArray35 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter27.writeFloat(floatArray35);
        jSONWriter26.writeFloat(floatArray35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        jSONWriter39.close();
        jSONWriter39.writeSymbol("");
        jSONWriter39.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter39.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter45 = null;
        context44.setPropertyPreFilter(propertyPreFilter45);
        boolean boolean47 = context44.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter48 = context44.getBeforeFilter();
        jSONWriter26.writeAny((java.lang.Object) beforeFilter48);
        jSONWriter26.writeFloat((java.lang.Float) (-1.0f));
        boolean boolean53 = jSONWriter26.isEnabled((long) (byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(beforeFilter48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = jSONWriter21.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        jSONWriter28.writeDateTime19(4, (int) (short) 0, (int) (short) -1, (int) 'a', (int) '#', (int) (byte) 100);
        boolean[] booleanArray40 = new boolean[] { true, false, true, true };
        jSONWriter28.writeBool(booleanArray40);
        jSONWriter21.writeBool(booleanArray40);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(symbolTable22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, false, true, true]");
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        jSONWriter0.writeStringNull();
        boolean boolean24 = jSONWriter0.jsonb;
        boolean boolean25 = jSONWriter0.useSingleQuote;
        jSONWriter0.writeChar('#');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        jSONWriter20.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter23.writeDouble(1.0d, decimalFormat27);
        boolean boolean30 = jSONWriter23.removeReference((java.lang.Object) (short) -1);
        jSONWriter23.writeArrayNull();
        long long32 = jSONWriter23.getFeatures();
        java.lang.Class<?> wildcardClass33 = jSONWriter23.getClass();
        boolean boolean34 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter20, (java.lang.reflect.Type) wildcardClass33);
        com.alibaba.fastjson2.JSONWriter.Path path35 = null;
        com.alibaba.fastjson2.JSONWriter.Path path37 = new com.alibaba.fastjson2.JSONWriter.Path(path35, "");
        com.alibaba.fastjson2.JSONWriter.Path path39 = new com.alibaba.fastjson2.JSONWriter.Path(path37, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path41 = new com.alibaba.fastjson2.JSONWriter.Path(path37, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path43 = new com.alibaba.fastjson2.JSONWriter.Path(path41, 3);
        com.alibaba.fastjson2.JSONWriter.Path path45 = new com.alibaba.fastjson2.JSONWriter.Path(path43, (int) (byte) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        boolean boolean56 = jSONWriter47.isEnabled((long) ' ');
        jSONWriter47.writeString("hi!");
        boolean boolean59 = jSONWriter47.isUTF8();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        jSONWriter47.writeString((java.util.List<java.lang.String>) strList63);
        boolean boolean66 = path43.equals((java.lang.Object) strList63);
        jSONWriter20.writeString((java.util.List<java.lang.String>) strList63);
        jSONWriter20.writeSymbol("hi!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray9 = null;
        jSONWriter6.writeHex(byteArray9);
        boolean boolean11 = jSONWriter6.isRefDetect();
        jSONWriter6.writeNumberNull();
        jSONWriter6.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean16 = jSONWriter6.isEnabled(feature15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter18);
        long long20 = jSONWriter18.getFeatures();
        java.time.LocalDateTime localDateTime21 = null;
        jSONWriter18.writeLocalDateTime(localDateTime21);
        byte[] byteArray23 = jSONWriter18.getBytes();
        jSONWriter6.writeStringLatin1(byteArray23);
        jSONWriter1.writeNameRaw(byteArray23, (long) (byte) 100);
        boolean boolean27 = jSONWriter1.jsonb;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable4);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter3.getSymbolTable();
        jSONWriter3.writeRaw((byte) 0);
        jSONWriter3.writeInt32((int) (byte) 10);
        jSONWriter3.writeInt16((short) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(symbolTable14);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        jSONWriter5.writeArrayNull();
        short[] shortArray12 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter5.writeInt16(shortArray12);
        jSONWriter1.writeInt16(shortArray12);
        java.lang.Class<?> wildcardClass15 = jSONWriter1.getClass();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter1.symbolTable;
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter1.write(jSONObject8);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable4);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.startObject();
        jSONWriter1.writeSymbol("[1]");
        jSONWriter1.writeSymbol("");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter28 = null;
        context15.setContextNameFilter(contextNameFilter28);
        context15.setDateFormat("[1].hi\\![35]");
        boolean boolean32 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter33 = context15.getPropertyPreFilter();
        java.lang.String str34 = context15.getDateFormat();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(propertyPreFilter33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1].hi\\![35]" + "'", str34, "[1].hi\\![35]");
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter20 = null;
        context19.setAfterFilter(afterFilter20);
        boolean boolean22 = context19.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        jSONWriter21.startArray(0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean30 = jSONWriter25.writeTypeName(byteArray28, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        long long34 = jSONWriter32.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        long long46 = jSONWriter37.getFeatures();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean49 = jSONWriter32.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass47, (long) (short) 10);
        int[] intArray56 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter32.writeInt32(intArray56);
        jSONWriter25.writeInt32(intArray56);
        java.math.BigDecimal bigDecimal59 = null;
        jSONWriter25.writeDecimal(bigDecimal59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat66 = null;
        jSONWriter62.writeDouble(1.0d, decimalFormat66);
        boolean boolean69 = jSONWriter62.removeReference((java.lang.Object) (short) -1);
        jSONWriter62.writeArrayNull();
        jSONWriter62.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable73 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable73);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        boolean boolean78 = jSONWriter76.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class79 = null;
        boolean boolean81 = jSONWriter74.isWriteTypeInfo((java.lang.Object) jSONWriter76, class79, (long) ' ');
        char[] charArray82 = new char[] {};
        jSONWriter76.writeString(charArray82);
        jSONWriter62.writeString(charArray82, (int) (byte) -1, 0, true);
        jSONWriter25.writeString(charArray82);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter21.writeNameRaw(charArray82, 5, 2);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[]");
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter27 = context15.getLabelFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(labelFilter27);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter.Context context8 = jSONWriter1.getContext();
        jSONWriter1.writeTypeName("hi!");
        boolean boolean11 = jSONWriter1.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(context8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        boolean[] booleanArray20 = new boolean[] { false, true, true, true };
        jSONWriter15.writeBool(booleanArray20);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        jSONWriter15.writeBinary(byteArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter15);
        jSONWriter3.setRootObject((java.lang.Object) jSONWriter36);
        java.lang.Class<?> wildcardClass38 = jSONWriter36.getClass();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28);
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28);
        java.lang.Class<?> wildcardClass31 = objectWriterProvider28.getClass();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean1 = jSONWriter0.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean8 = jSONWriter3.writeTypeName(byteArray6, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        long long12 = jSONWriter10.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter15.writeDouble(1.0d, decimalFormat19);
        boolean boolean22 = jSONWriter15.removeReference((java.lang.Object) (short) -1);
        jSONWriter15.writeArrayNull();
        long long24 = jSONWriter15.getFeatures();
        java.lang.Class<?> wildcardClass25 = jSONWriter15.getClass();
        boolean boolean27 = jSONWriter10.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass25, (long) (short) 10);
        int[] intArray34 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter10.writeInt32(intArray34);
        jSONWriter3.writeInt32(intArray34);
        jSONWriter0.writeInt32(intArray34);
        jSONWriter0.writeInt8((byte) 10);
        java.math.BigDecimal bigDecimal40 = null;
        jSONWriter0.writeDecimal(bigDecimal40, (long) '#');
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class49 = null;
        boolean boolean51 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter46, class49, (long) ' ');
        byte[] byteArray53 = new byte[] { (byte) -1 };
        boolean boolean55 = jSONWriter46.writeTypeName(byteArray53, 0L);
        java.util.UUID uUID56 = null;
        jSONWriter46.writeUUID(uUID56);
        com.alibaba.fastjson2.JSONWriter.Context context58 = jSONWriter46.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter59 = context58.getPropertyFilter();
        long long60 = context58.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter61 = null;
        context58.setLabelFilter(labelFilter61);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter63 = null;
        context58.setValueFilter(valueFilter63);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter65 = context58.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        boolean boolean72 = jSONWriter70.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class73 = null;
        boolean boolean75 = jSONWriter68.isWriteTypeInfo((java.lang.Object) jSONWriter70, class73, (long) ' ');
        byte[] byteArray77 = new byte[] { (byte) -1 };
        boolean boolean79 = jSONWriter70.writeTypeName(byteArray77, 0L);
        byte[] byteArray80 = null;
        jSONWriter70.writeBinary(byteArray80);
        com.alibaba.fastjson2.JSONWriter.Feature feature82 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class83 = null;
        jSONWriter70.checkAndWriteTypeName((java.lang.Object) feature82, class83);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray85 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature66, feature82 };
        context58.config(featureArray85);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context58.getAfterFilter();
        boolean boolean88 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) afterFilter87);
        com.alibaba.fastjson2.JSONWriter jSONWriter89 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray90 = null;
        jSONWriter89.writeDouble(doubleArray90);
        jSONWriter89.writeArrayNull();
        short[] shortArray96 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter89.writeInt16(shortArray96);
        jSONWriter0.writeInt16(shortArray96);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(context58);
        org.junit.Assert.assertNull(propertyFilter59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNull(contextNameFilter65);
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + feature82 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature82.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray85);
        org.junit.Assert.assertNull(afterFilter87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jSONWriter89);
        org.junit.Assert.assertNotNull(shortArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray96), "[0, 0, 100]");
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        int[] intArray11 = new int[] { (short) 0, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt32(intArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = jSONWriter1.context;
        boolean boolean14 = context13.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context13);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context13.getProvider();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(context13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = null;
        context21.setAfterFilter(afterFilter22);
        java.time.ZoneId zoneId24 = context21.getZoneId();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = context21.getLabelFilter();
        long long26 = context21.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = null;
        context21.setContextValueFilter(contextValueFilter27);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = context21.getLabelFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(zoneId24);
        org.junit.Assert.assertNull(labelFilter25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNull(labelFilter29);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        jSONWriter1.writeName("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        boolean boolean13 = jSONWriter11.utf16;
        jSONWriter11.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter16);
        long long18 = jSONWriter16.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter21.writeDouble(1.0d, decimalFormat25);
        boolean boolean28 = jSONWriter21.removeReference((java.lang.Object) (short) -1);
        jSONWriter21.writeArrayNull();
        long long30 = jSONWriter21.getFeatures();
        java.lang.Class<?> wildcardClass31 = jSONWriter21.getClass();
        boolean boolean33 = jSONWriter16.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass31, (long) (short) 10);
        int[] intArray40 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter16.writeInt32(intArray40);
        jSONWriter11.writeInt32(intArray40);
        jSONWriter1.writeInt32(intArray40);
        jSONWriter1.startObject();
        java.nio.charset.Charset charset45 = jSONWriter1.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter47);
        boolean boolean49 = jSONWriter47.utf16;
        jSONWriter47.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter51 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray53 = null;
        jSONWriter52.writeDouble(doubleArray53);
        jSONWriter52.writeArrayNull();
        short[] shortArray59 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter52.writeInt16(shortArray59);
        java.lang.String str61 = jSONWriter47.setPath(fieldWriter51, (java.lang.Object) jSONWriter52);
        boolean boolean62 = jSONWriter52.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        boolean boolean66 = jSONWriter64.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal67 = null;
        jSONWriter64.writeDecimal(bigDecimal67);
        boolean boolean70 = jSONWriter64.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter64.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        jSONWriter64.endObject();
        java.lang.Class<?> wildcardClass76 = jSONWriter64.getClass();
        boolean boolean77 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean62, (java.lang.Class) wildcardClass76);
        java.io.OutputStream outputStream78 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofUTF8();
        com.alibaba.fastjson2.JSONWriter.Context context80 = jSONWriter79.context;
        java.nio.charset.Charset charset81 = jSONWriter79.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            int int82 = jSONWriter1.flushTo(outputStream78, charset81);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[0, 0, 100]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(context80);
        org.junit.Assert.assertNotNull(charset81);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        boolean boolean11 = jSONWriter1.utf16;
        boolean boolean12 = jSONWriter1.isWriteNulls();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        jSONWriter1.writeInt16((short) 0);
        java.math.BigDecimal bigDecimal6 = null;
        jSONWriter1.writeDecimal(bigDecimal6);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        jSONWriter16.startObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        jSONWriter19.close();
        jSONWriter19.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        boolean boolean33 = jSONWriter24.isEnabled((long) ' ');
        jSONWriter24.writeString("hi!");
        boolean boolean36 = jSONWriter24.isUTF8();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        jSONWriter24.writeString((java.util.List<java.lang.String>) strList40);
        jSONWriter19.writeString((java.util.List<java.lang.String>) strList40);
        jSONWriter16.writeString((java.util.List<java.lang.String>) strList40);
        boolean boolean45 = jSONWriter16.hasFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean1 = jSONWriter0.isUseSingleQuotes();
        java.text.DecimalFormat decimalFormat3 = null;
        jSONWriter0.writeDouble((double) 'a', decimalFormat3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        jSONWriter6.writeSymbol((-1));
        jSONWriter6.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        com.alibaba.fastjson2.JSONObject jSONObject18 = null;
        jSONWriter6.write(jSONObject18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) feature22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22 };
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) feature29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        java.time.ZoneId zoneId34 = null;
        context33.setZoneId(zoneId34);
        jSONWriter26.popPath((java.lang.Object) context33);
        java.nio.charset.Charset charset37 = jSONWriter26.getCharset();
        jSONWriter26.writeRaw("hi!");
        java.math.BigDecimal bigDecimal40 = null;
        jSONWriter26.writeDecimal(bigDecimal40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter43);
        boolean boolean45 = jSONWriter43.utf16;
        long long47 = jSONWriter43.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable48 = jSONWriter43.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        boolean boolean59 = jSONWriter50.isEnabled((long) ' ');
        jSONWriter50.writeString("hi!");
        char[] charArray62 = new char[] {};
        jSONWriter50.writeString(charArray62);
        jSONWriter43.writeString(charArray62);
        jSONWriter26.writeNameRaw(charArray62);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        boolean boolean69 = jSONWriter67.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        boolean boolean75 = jSONWriter73.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class76 = null;
        boolean boolean78 = jSONWriter71.isWriteTypeInfo((java.lang.Object) jSONWriter73, class76, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        boolean boolean82 = jSONWriter80.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat84 = null;
        jSONWriter80.writeDouble(1.0d, decimalFormat84);
        boolean boolean87 = jSONWriter80.removeReference((java.lang.Object) (short) -1);
        jSONWriter80.writeArrayNull();
        long long89 = jSONWriter80.getFeatures();
        java.lang.Class<?> wildcardClass90 = jSONWriter80.getClass();
        boolean boolean92 = jSONWriter67.isWriteTypeInfo((java.lang.Object) boolean78, (java.lang.reflect.Type) wildcardClass90, 0L);
        jSONWriter6.checkAndWriteTypeName((java.lang.Object) charArray62, (java.lang.Class) wildcardClass90);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeString(charArray62, 6, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNull(symbolTable48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[]");
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context33);
        context33.setDateFormat("hi!");
        java.time.ZoneId zoneId37 = null;
        context33.setZoneId(zoneId37);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider39 = context33.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        java.util.UUID uUID54 = null;
        jSONWriter44.writeUUID(uUID54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = jSONWriter44.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context56);
        com.alibaba.fastjson2.SymbolTable symbolTable58 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context56, symbolTable58);
        com.alibaba.fastjson2.SymbolTable symbolTable60 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable60);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        boolean boolean65 = jSONWriter63.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class66 = null;
        boolean boolean68 = jSONWriter61.isWriteTypeInfo((java.lang.Object) jSONWriter63, class66, (long) ' ');
        byte[] byteArray70 = new byte[] { (byte) -1 };
        boolean boolean72 = jSONWriter63.writeTypeName(byteArray70, 0L);
        java.util.UUID uUID73 = null;
        jSONWriter63.writeUUID(uUID73);
        com.alibaba.fastjson2.JSONWriter.Context context75 = jSONWriter63.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context75);
        java.time.format.DateTimeFormatter dateTimeFormatter77 = context75.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider78 = context75.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean82 = jSONWriter80.isRefDetect((java.lang.Object) feature81);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray83 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature81 };
        com.alibaba.fastjson2.JSONWriter jSONWriter84 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray83);
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider78, featureArray83);
        context56.config(featureArray83);
        com.alibaba.fastjson2.JSONWriter.Context context87 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray83);
        com.alibaba.fastjson2.JSONWriter jSONWriter88 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider39, featureArray83);
        java.lang.String str89 = jSONWriter16.setPath("$", (java.lang.Object) objectWriterProvider39);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(objectWriterProvider39);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(context56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(context75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNull(dateTimeFormatter77);
        org.junit.Assert.assertNotNull(objectWriterProvider78);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(featureArray83);
        org.junit.Assert.assertNotNull(jSONWriter84);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNotNull(jSONWriter88);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        jSONWriter8.writeBool(false);
        jSONWriter8.writeDateTime14(4, (int) (short) 10, (int) (short) 100, (int) (byte) 10, (int) (short) 10, (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context33);
        jSONWriter34.startObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        jSONWriter37.close();
        jSONWriter37.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        boolean boolean51 = jSONWriter42.isEnabled((long) ' ');
        jSONWriter42.writeString("hi!");
        boolean boolean54 = jSONWriter42.isUTF8();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        jSONWriter42.writeString((java.util.List<java.lang.String>) strList58);
        jSONWriter37.writeString((java.util.List<java.lang.String>) strList58);
        jSONWriter34.writeString((java.util.List<java.lang.String>) strList58);
        jSONWriter8.write((java.util.List) strList58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter65);
        boolean boolean67 = jSONWriter65.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat73 = null;
        jSONWriter69.writeDouble(1.0d, decimalFormat73);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean81 = jSONWriter76.writeTypeName(byteArray79, (long) 10);
        jSONWriter69.writeStringLatin1(byteArray79);
        jSONWriter65.writeStringLatin1(byteArray79);
        int int84 = jSONWriter65.level();
        boolean boolean85 = jSONWriter65.isBeanToArray();
        jSONWriter65.writeArrayNull();
        jSONWriter8.setRootObject((java.lang.Object) jSONWriter65);
        jSONWriter8.writeFloat((float) 4);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter1.writeFloat((float) (-1), decimalFormat16);
        jSONWriter1.writeInt16((short) (byte) -1);
        jSONWriter1.writeInt16((short) (byte) -1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        jSONWriter9.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter9.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        java.lang.String str40 = jSONWriter9.setPath((int) (short) 100, (java.lang.Object) jSONWriter26);
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        java.util.UUID uUID54 = null;
        jSONWriter44.writeUUID(uUID54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = jSONWriter44.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter57 = context56.getPropertyFilter();
        long long58 = context56.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter59 = null;
        context56.setLabelFilter(labelFilter59);
        com.alibaba.fastjson2.SymbolTable symbolTable61 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context56, symbolTable61);
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context56.config(feature63, true);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter66 = context56.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.of(context56);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter68 = context56.getPropertyPreFilter();
        boolean boolean70 = jSONWriter9.isWriteTypeInfo((java.lang.Object) propertyPreFilter68, 100L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(context56);
        org.junit.Assert.assertNull(propertyFilter57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertNull(valueFilter66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNull(propertyPreFilter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        long long13 = jSONWriter1.getFeatures((long) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        boolean boolean16 = jSONWriter15.isRefDetect();
        jSONWriter15.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter24 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        boolean[] booleanArray31 = new boolean[] { false, true, true, true };
        jSONWriter26.writeBool(booleanArray31);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        byte[] byteArray43 = new byte[] { (byte) -1 };
        boolean boolean45 = jSONWriter36.writeTypeName(byteArray43, 0L);
        jSONWriter26.writeBinary(byteArray43);
        java.lang.String str47 = jSONWriter15.setPath(fieldWriter24, (java.lang.Object) jSONWriter26);
        boolean boolean49 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter26, (long) (byte) 1);
        jSONWriter26.writeRaw((byte) 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.math.BigDecimal bigDecimal16 = null;
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter3.writeDecimal(bigDecimal16, (long) (byte) -1, decimalFormat18);
        java.math.BigDecimal bigDecimal20 = null;
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter3.writeDecimal(bigDecimal20, (long) (-1), decimalFormat22);
        com.alibaba.fastjson2.JSONWriter.Path path24 = null;
        com.alibaba.fastjson2.JSONWriter.Path path26 = new com.alibaba.fastjson2.JSONWriter.Path(path24, "");
        com.alibaba.fastjson2.JSONWriter.Path path28 = new com.alibaba.fastjson2.JSONWriter.Path(path26, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path28, "hi!");
        java.lang.String str31 = path30.toString();
        com.alibaba.fastjson2.JSONWriter.Path path33 = new com.alibaba.fastjson2.JSONWriter.Path(path30, (int) '#');
        java.lang.Object obj34 = null;
        boolean boolean35 = path33.equals(obj34);
        jSONWriter3.writeAny(obj34);
        boolean boolean37 = jSONWriter3.isUseSingleQuotes();
        jSONWriter3.writeFloat((float) 'a');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeName((long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1].hi\\!" + "'", str31, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter7);
        long long9 = jSONWriter7.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter12.writeDouble(1.0d, decimalFormat16);
        boolean boolean19 = jSONWriter12.removeReference((java.lang.Object) (short) -1);
        jSONWriter12.writeArrayNull();
        long long21 = jSONWriter12.getFeatures();
        java.lang.Class<?> wildcardClass22 = jSONWriter12.getClass();
        boolean boolean24 = jSONWriter7.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass22, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter25 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        long long29 = jSONWriter27.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter32.writeDouble(1.0d, decimalFormat36);
        boolean boolean39 = jSONWriter32.removeReference((java.lang.Object) (short) -1);
        jSONWriter32.writeArrayNull();
        long long41 = jSONWriter32.getFeatures();
        java.lang.Class<?> wildcardClass42 = jSONWriter32.getClass();
        boolean boolean44 = jSONWriter27.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass42, (long) (short) 10);
        int[] intArray51 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter27.writeInt32(intArray51);
        double[] doubleArray57 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter27.writeDouble(doubleArray57);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter1.writeDouble(doubleArray57, decimalFormat59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter62);
        long long64 = jSONWriter62.getFeatures();
        java.time.LocalDateTime localDateTime65 = null;
        jSONWriter62.writeLocalDateTime(localDateTime65);
        byte[] byteArray67 = jSONWriter62.getBytes();
        boolean boolean68 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter62);
        boolean boolean69 = jSONWriter62.isBeanToArray();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        boolean boolean18 = jSONWriter3.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        jSONWriter3.config(feature19, false);
        jSONWriter3.writeFloat((java.lang.Float) 100.0f);
        java.lang.Object obj24 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeNameAny(obj24);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        jSONWriter20.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter23.writeDouble(1.0d, decimalFormat27);
        boolean boolean30 = jSONWriter23.removeReference((java.lang.Object) (short) -1);
        jSONWriter23.writeArrayNull();
        long long32 = jSONWriter23.getFeatures();
        java.lang.Class<?> wildcardClass33 = jSONWriter23.getClass();
        boolean boolean34 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter20, (java.lang.reflect.Type) wildcardClass33);
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter36.isWriteTypeInfo((java.lang.Object) jSONWriter38, class41, (long) ' ');
        byte[] byteArray45 = new byte[] { (byte) -1 };
        boolean boolean47 = jSONWriter38.writeTypeName(byteArray45, 0L);
        java.util.UUID uUID48 = null;
        jSONWriter38.writeUUID(uUID48);
        jSONWriter38.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable52 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class58 = null;
        boolean boolean60 = jSONWriter53.isWriteTypeInfo((java.lang.Object) jSONWriter55, class58, (long) ' ');
        byte[] byteArray62 = new byte[] { (byte) -1 };
        boolean boolean64 = jSONWriter55.writeTypeName(byteArray62, 0L);
        java.util.UUID uUID65 = null;
        jSONWriter55.writeUUID(uUID65);
        com.alibaba.fastjson2.JSONWriter.Context context67 = jSONWriter55.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context67.config(feature68, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean74 = jSONWriter72.isRefDetect((java.lang.Object) feature73);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature73 };
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray75);
        context67.config(featureArray75);
        jSONWriter38.config(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray81 = null;
        jSONWriter80.writeDouble(doubleArray81);
        jSONWriter80.writeArrayNull();
        short[] shortArray87 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter80.writeInt16(shortArray87);
        jSONWriter38.writeInt16(shortArray87);
        jSONWriter1.writeInt16(shortArray87);
        com.alibaba.fastjson2.JSONObject jSONObject91 = null;
        jSONWriter1.write(jSONObject91);
        jSONWriter1.writeInt64((long) 1);
        java.text.DecimalFormat decimalFormat96 = null;
        jSONWriter1.writeFloat((float) 6, decimalFormat96);
        boolean[] booleanArray98 = null;
        jSONWriter1.writeBool(booleanArray98);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(context67);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray87), "[0, 0, 100]");
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean4 = jSONWriter0.containsReference((java.lang.Object) 5);
        jSONWriter0.writeDateTime14((int) (short) 0, (int) (byte) 0, (int) '#', (int) (byte) 1, 0, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeName((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        boolean boolean17 = jSONWriter3.jsonb;
        jSONWriter3.startObject();
        jSONWriter3.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter1.symbolTable;
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter7.writeTimeHHMMSS8((int) (byte) 1, 12, 7);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable4);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray5);
        boolean boolean9 = context8.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.NameFilter nameFilter10 = null;
        context8.setNameFilter(nameFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        java.time.Instant instant9 = null;
        jSONWriter1.writeInstant(instant9);
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter1.writeFloat((float) 52L, decimalFormat12);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter21.writeDecimal(bigDecimal24);
        boolean boolean27 = jSONWriter21.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter21.writeArrayNull();
        jSONWriter21.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        boolean boolean40 = jSONWriter31.isEnabled((long) ' ');
        jSONWriter31.writeString("hi!");
        boolean boolean43 = jSONWriter31.isUTF8();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        jSONWriter31.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter21.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList47);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        jSONWriter52.close();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSONWriter52);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class16 = null;
        jSONWriter3.checkAndWriteTypeName((java.lang.Object) feature15, class16);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter3.writeDecimal(bigDecimal18);
        java.math.BigDecimal bigDecimal20 = null;
        jSONWriter3.writeDecimal(bigDecimal20, 5L);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        boolean boolean25 = jSONWriter24.isRefDetect();
        java.lang.String str28 = jSONWriter24.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = jSONWriter24.getSymbolTable();
        java.text.DecimalFormat decimalFormat31 = null;
        jSONWriter24.writeFloat((float) 100, decimalFormat31);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeNameAny((java.lang.Object) jSONWriter24);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(symbolTable29);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter24.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter37 = context36.getPropertyFilter();
        long long38 = context36.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter39 = null;
        context36.setLabelFilter(labelFilter39);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter41 = context36.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter42 = null;
        context36.setPropertyFilter(propertyFilter42);
        boolean boolean44 = context36.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter45 = context36.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter46 = null;
        context36.setBeforeFilter(beforeFilter46);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter48 = context36.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter49 = context36.getValueFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider50 = context36.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) feature54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54 };
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context58 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray56);
        jSONWriter51.config(featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.of(featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider50, featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray56);
        boolean boolean64 = jSONWriter63.hasFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertNull(propertyFilter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNull(contextValueFilter41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(nameFilter45);
        org.junit.Assert.assertNull(propertyPreFilter48);
        org.junit.Assert.assertNull(valueFilter49);
        org.junit.Assert.assertNotNull(objectWriterProvider50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable6 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class12 = null;
        boolean boolean14 = jSONWriter7.isWriteTypeInfo((java.lang.Object) jSONWriter9, class12, (long) ' ');
        byte[] byteArray16 = new byte[] { (byte) -1 };
        boolean boolean18 = jSONWriter9.writeTypeName(byteArray16, 0L);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = jSONWriter9.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context21);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = context21.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context21.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) feature27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider24, featureArray29);
        jSONWriter31.writeRaw(' ');
        jSONWriter31.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        byte[] byteArray49 = null;
        jSONWriter39.writeBinary(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter39.writeHex(byteArray57);
        jSONWriter31.writeBinary(byteArray57);
        java.lang.Object obj60 = null;
        boolean boolean61 = jSONWriter31.containsReference(obj60);
        jSONWriter31.writeDateTime14((int) '#', (int) (short) 1, 1, (int) (byte) -1, (int) (short) -1, (int) ' ');
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter31.writeFloat((float) 0, decimalFormat70);
        com.alibaba.fastjson2.JSONWriter.Context context72 = jSONWriter31.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter73 = context72.getPropertyPreFilter();
        boolean boolean74 = jSONWriter1.isRefDetect((java.lang.Object) context72);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter75 = null;
        context72.setAfterFilter(afterFilter75);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 100, 1, -1, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context72);
        org.junit.Assert.assertNull(propertyPreFilter73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = context26.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context26.getProvider();
        boolean boolean30 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context26);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26, symbolTable31);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context26.provider;
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter34 = null;
        context26.setContextValueFilter(contextValueFilter34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context26);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertNotNull(jSONWriter36);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable18);
        boolean boolean20 = context15.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.util.Map map15 = null;
        jSONWriter3.write(map15);
        jSONWriter3.writeFloat((java.lang.Float) 1.0f);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter8.writeDecimal(bigDecimal11);
        boolean boolean14 = jSONWriter8.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter16.writeDouble(1.0d, decimalFormat20);
        boolean boolean23 = jSONWriter16.removeReference((java.lang.Object) (short) -1);
        jSONWriter16.writeArrayNull();
        boolean boolean25 = jSONWriter8.isRefDetect((java.lang.Object) jSONWriter16);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        jSONWriter16.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter16.getContext();
        boolean boolean31 = jSONWriter0.containsReference((java.lang.Object) context30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray32);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context53);
        context53.setDateFormat("hi!");
        java.time.ZoneId zoneId57 = null;
        context53.setZoneId(zoneId57);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider59 = context53.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        boolean boolean63 = jSONWriter61.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat65 = null;
        jSONWriter61.writeDouble(1.0d, decimalFormat65);
        boolean boolean68 = jSONWriter61.removeReference((java.lang.Object) (short) -1);
        jSONWriter61.writeArrayNull();
        long long70 = jSONWriter61.getFeatures();
        java.lang.Class<?> wildcardClass71 = jSONWriter61.getClass();
        boolean boolean72 = jSONWriter37.isWriteTypeInfo((java.lang.Object) objectWriterProvider59, (java.lang.reflect.Type) wildcardClass71);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter73 = jSONWriter0.getObjectWriter((java.lang.Class) wildcardClass71);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(objectWriterProvider59);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objectWriter73);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        java.math.BigDecimal bigDecimal28 = null;
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter14.writeDecimal(bigDecimal28, (long) '#', decimalFormat30);
        jSONWriter14.startObject();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        java.util.UUID uUID14 = null;
        jSONWriter4.writeUUID(uUID14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter4.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter17 = context16.getPropertyFilter();
        long long18 = context16.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter19 = null;
        context16.setLabelFilter(labelFilter19);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider21 = context16.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray22);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(featureArray22);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider21, featureArray22);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("[1][0]", featureArray22);
        boolean boolean29 = context28.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(propertyFilter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter1.context;
        byte[] byteArray10 = jSONWriter1.getBytes();
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean boolean13 = jSONWriter12.isRefDetect();
        java.lang.String str16 = jSONWriter12.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter18);
        long long20 = jSONWriter18.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter23.writeDouble(1.0d, decimalFormat27);
        boolean boolean30 = jSONWriter23.removeReference((java.lang.Object) (short) -1);
        jSONWriter23.writeArrayNull();
        long long32 = jSONWriter23.getFeatures();
        java.lang.Class<?> wildcardClass33 = jSONWriter23.getClass();
        boolean boolean35 = jSONWriter18.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass33, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter36 = jSONWriter12.getObjectWriter((java.lang.Class) wildcardClass33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter38);
        long long40 = jSONWriter38.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat47 = null;
        jSONWriter43.writeDouble(1.0d, decimalFormat47);
        boolean boolean50 = jSONWriter43.removeReference((java.lang.Object) (short) -1);
        jSONWriter43.writeArrayNull();
        long long52 = jSONWriter43.getFeatures();
        java.lang.Class<?> wildcardClass53 = jSONWriter43.getClass();
        boolean boolean55 = jSONWriter38.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass53, (long) (short) 10);
        int[] intArray62 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter38.writeInt32(intArray62);
        double[] doubleArray68 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter38.writeDouble(doubleArray68);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter12.writeDouble(doubleArray68, decimalFormat70);
        jSONWriter12.writeStringNull();
        boolean boolean73 = jSONWriter12.isBeanToArray();
        java.time.ZonedDateTime zonedDateTime74 = null;
        jSONWriter12.writeZonedDateTime(zonedDateTime74);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        com.alibaba.fastjson2.JSONWriter.Context context82 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray79);
        com.alibaba.fastjson2.JSONWriter.Context context83 = new com.alibaba.fastjson2.JSONWriter.Context("[1][0]", featureArray79);
        com.alibaba.fastjson2.JSONWriter.Context context84 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray79);
        jSONWriter12.config(featureArray79);
        com.alibaba.fastjson2.JSONWriter jSONWriter86 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        com.alibaba.fastjson2.JSONWriter jSONWriter87 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray79);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameAny((java.lang.Object) featureArray79);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-77]");
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objectWriter36);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertNotNull(jSONWriter86);
        org.junit.Assert.assertNotNull(jSONWriter87);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = null;
        context15.setNameFilter(nameFilter24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter26);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.LargeObject;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35, feature36, feature37, feature38 };
        jSONWriter34.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context43 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray39);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter60 = context59.getPropertyFilter();
        long long61 = context59.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter62 = null;
        context59.setLabelFilter(labelFilter62);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context59.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        com.alibaba.fastjson2.JSONWriter.Context context67 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.of(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider64, featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.of(featureArray65);
        com.alibaba.fastjson2.JSONWriter.Context context72 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray65);
        com.alibaba.fastjson2.JSONWriter.Context context73 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.LargeObject + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.LargeObject));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNull(propertyFilter60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter71);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        java.math.BigDecimal bigDecimal28 = null;
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter14.writeDecimal(bigDecimal28, (long) '#', decimalFormat30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.NameFilter nameFilter33 = context32.getNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertNull(nameFilter33);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (short) 1);
        java.lang.String str9 = path2.toString();
        java.lang.String str10 = path2.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.util.Map map15 = null;
        jSONWriter3.write(map15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        java.time.LocalTime localTime19 = null;
        jSONWriter18.writeLocalTime(localTime19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        jSONWriter18.writeBinary(byteArray31);
        jSONWriter3.writeBinary(byteArray31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray40 = null;
        jSONWriter37.writeHex(byteArray40);
        boolean boolean42 = jSONWriter37.isRefDetect();
        jSONWriter37.writeNumberNull();
        jSONWriter37.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean47 = jSONWriter37.isEnabled(feature46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter49);
        long long51 = jSONWriter49.getFeatures();
        java.time.LocalDateTime localDateTime52 = null;
        jSONWriter49.writeLocalDateTime(localDateTime52);
        byte[] byteArray54 = jSONWriter49.getBytes();
        jSONWriter37.writeStringLatin1(byteArray54);
        jSONWriter3.writeBinary(byteArray54);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter3.writeFloat((float) (byte) 0, decimalFormat58);
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        jSONWriter3.config(feature60, false);
        boolean boolean63 = jSONWriter3.isUTF8();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-81]");
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        jSONWriter1.writeChar('a');
        boolean boolean36 = jSONWriter1.isIgnoreNoneSerializable();
        boolean boolean37 = jSONWriter1.utf8;
        jSONWriter1.writeMillis((long) 8);
        boolean boolean41 = jSONWriter1.isEnabled(100L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        java.lang.reflect.Type type19 = null;
        boolean boolean21 = jSONWriter17.isWriteTypeInfo((java.lang.Object) (byte) 1, type19, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        jSONWriter23.writeSymbol("");
        jSONWriter23.writeBooleanNull();
        boolean boolean28 = jSONWriter23.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter30);
        long long32 = jSONWriter30.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        boolean boolean42 = jSONWriter35.removeReference((java.lang.Object) (short) -1);
        jSONWriter35.writeArrayNull();
        long long44 = jSONWriter35.getFeatures();
        java.lang.Class<?> wildcardClass45 = jSONWriter35.getClass();
        boolean boolean47 = jSONWriter30.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass45, (long) (short) 10);
        jSONWriter17.checkAndWriteTypeName((java.lang.Object) jSONWriter23, (java.lang.Class) wildcardClass45);
        jSONWriter23.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        jSONWriter52.close();
        jSONWriter52.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray57 = null;
        jSONWriter56.writeDouble(doubleArray57);
        jSONWriter56.writeArrayNull();
        short[] shortArray63 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter56.writeInt16(shortArray63);
        jSONWriter52.writeInt16(shortArray63);
        jSONWriter23.writeInt16(shortArray63);
        jSONWriter6.writeInt16(shortArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        jSONWriter68.writeSymbol("hi!");
        boolean boolean71 = jSONWriter68.utf16;
        java.io.Reader reader72 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter68.writeString(reader72);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        jSONWriter5.writeDateTime19(4, (int) (short) 0, (int) (short) -1, (int) 'a', (int) '#', (int) (byte) 100);
        boolean boolean13 = jSONWriter5.utf16;
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter5.symbolTable;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(symbolTable14);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        java.util.UUID uUID35 = null;
        jSONWriter25.writeUUID(uUID35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter25.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter38 = context37.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter39 = context37.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter40 = context37.getValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        java.util.UUID uUID54 = null;
        jSONWriter44.writeUUID(uUID54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = jSONWriter44.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter57 = context56.getPropertyFilter();
        long long58 = context56.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter59 = null;
        context56.setLabelFilter(labelFilter59);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider61 = context56.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter62 = null;
        context56.setPropertyPreFilter(propertyPreFilter62);
        com.alibaba.fastjson2.SymbolTable symbolTable64 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        boolean boolean69 = jSONWriter67.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class70 = null;
        boolean boolean72 = jSONWriter65.isWriteTypeInfo((java.lang.Object) jSONWriter67, class70, (long) ' ');
        byte[] byteArray74 = new byte[] { (byte) -1 };
        boolean boolean76 = jSONWriter67.writeTypeName(byteArray74, 0L);
        java.util.UUID uUID77 = null;
        jSONWriter67.writeUUID(uUID77);
        com.alibaba.fastjson2.JSONWriter.Context context79 = jSONWriter67.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter80 = context79.getPropertyFilter();
        long long81 = context79.getFeatures();
        long long82 = context79.getFeatures();
        boolean boolean83 = context79.isDateFormatHasHour();
        java.time.ZoneId zoneId84 = context79.getZoneId();
        context56.setZoneId(zoneId84);
        context37.setZoneId(zoneId84);
        context15.setZoneId(zoneId84);
        java.time.ZoneId zoneId88 = context15.getZoneId();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertNull(propertyFilter38);
        org.junit.Assert.assertNull(beforeFilter39);
        org.junit.Assert.assertNull(valueFilter40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(context56);
        org.junit.Assert.assertNull(propertyFilter57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider61);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(context79);
        org.junit.Assert.assertNull(propertyFilter80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(zoneId84);
        org.junit.Assert.assertNotNull(zoneId88);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter18.writeInt16((short) (byte) 100);
        boolean boolean34 = jSONWriter18.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        boolean boolean55 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean34, (java.lang.reflect.Type) wildcardClass51, (long) (byte) -1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter56 = null;
        com.alibaba.fastjson2.JSONWriter.Path path57 = null;
        com.alibaba.fastjson2.JSONWriter.Path path59 = new com.alibaba.fastjson2.JSONWriter.Path(path57, "");
        com.alibaba.fastjson2.JSONWriter.Path path61 = new com.alibaba.fastjson2.JSONWriter.Path(path59, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path63 = new com.alibaba.fastjson2.JSONWriter.Path(path61, "hi!");
        java.lang.String str64 = path61.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class71 = null;
        boolean boolean73 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter68, class71, (long) ' ');
        byte[] byteArray75 = new byte[] { (byte) -1 };
        boolean boolean77 = jSONWriter68.writeTypeName(byteArray75, 0L);
        java.util.UUID uUID78 = null;
        jSONWriter68.writeUUID(uUID78);
        com.alibaba.fastjson2.JSONWriter.Context context80 = jSONWriter68.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter81 = context80.getPropertyFilter();
        long long82 = context80.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter83 = null;
        context80.setLabelFilter(labelFilter83);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider85 = context80.provider;
        boolean boolean86 = path61.equals((java.lang.Object) context80);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context80.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter88 = null;
        context80.setNameFilter(nameFilter88);
        java.lang.String str90 = jSONWriter1.setPath(fieldWriter56, (java.lang.Object) context80);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter91 = context80.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter92 = null;
        context80.setContextValueFilter(contextValueFilter92);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter94 = context80.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter95 = com.alibaba.fastjson2.JSONWriter.of(context80);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider96 = context80.provider;
        boolean boolean97 = context80.isDateFormatISO8601();
        java.time.ZoneId zoneId98 = context80.getZoneId();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[1]" + "'", str64, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(context80);
        org.junit.Assert.assertNull(propertyFilter81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(afterFilter87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(contextValueFilter91);
        org.junit.Assert.assertNull(valueFilter94);
        org.junit.Assert.assertNotNull(jSONWriter95);
        org.junit.Assert.assertNotNull(objectWriterProvider96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(zoneId98);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean21 = jSONWriter16.writeTypeName(byteArray19, (long) 10);
        jSONWriter3.writeNameRaw(byteArray19);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter3.writeFloat((-1.0f), decimalFormat24);
        java.math.BigDecimal bigDecimal26 = null;
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter3.writeDecimal(bigDecimal26, (long) '#', decimalFormat28);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeTimeHHMMSS8(10, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context22.setPropertyFilter(propertyFilter23);
        boolean boolean25 = context22.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context22.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.of(context22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        boolean boolean31 = jSONWriter29.utf16;
        jSONWriter29.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        long long36 = jSONWriter34.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter39.writeDouble(1.0d, decimalFormat43);
        boolean boolean46 = jSONWriter39.removeReference((java.lang.Object) (short) -1);
        jSONWriter39.writeArrayNull();
        long long48 = jSONWriter39.getFeatures();
        java.lang.Class<?> wildcardClass49 = jSONWriter39.getClass();
        boolean boolean51 = jSONWriter34.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass49, (long) (short) 10);
        int[] intArray58 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter34.writeInt32(intArray58);
        jSONWriter29.writeInt32(intArray58);
        jSONWriter27.writeInt32(intArray58);
        java.math.BigDecimal bigDecimal62 = null;
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter27.writeDecimal(bigDecimal62, (long) (short) 10, decimalFormat64);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = null;
        context6.setPropertyPreFilter(propertyPreFilter7);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6, symbolTable9);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter11 = context6.getContextNameFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context27.getPropertyFilter();
        long long29 = context27.getFeatures();
        long long30 = context27.getFeatures();
        boolean boolean31 = context27.isDateFormatHasHour();
        java.time.ZoneId zoneId32 = context27.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter33 = context27.getBeforeFilter();
        boolean boolean34 = context27.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal39 = null;
        jSONWriter36.writeDecimal(bigDecimal39);
        java.lang.Object obj41 = null;
        java.lang.Class class42 = null;
        jSONWriter36.checkAndWriteTypeName(obj41, class42);
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean45 = jSONWriter36.isEnabled(feature44);
        jSONWriter36.writeBool(false);
        java.time.Instant instant48 = null;
        jSONWriter36.writeInstant(instant48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean51 = jSONWriter50.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean53 = jSONWriter50.isEnabled(feature52);
        jSONWriter36.config(feature52, true);
        context27.config(feature52, true);
        context6.config(feature52, true);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNull(contextNameFilter11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(propertyFilter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertNull(beforeFilter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.lang.reflect.Type type3 = null;
        boolean boolean5 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (byte) 1, type3, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean19 = jSONWriter14.writeTypeName(byteArray17, (long) 10);
        jSONWriter7.writeStringLatin1(byteArray17);
        jSONWriter1.writeNameRaw(byteArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = jSONWriter1.getSymbolTable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(symbolTable22);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        java.time.Instant instant9 = null;
        jSONWriter1.writeInstant(instant9);
        boolean boolean12 = jSONWriter1.isEnabled(2L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context34);
        java.time.LocalTime localTime36 = null;
        jSONWriter35.writeLocalTime(localTime36);
        boolean boolean38 = jSONWriter35.isBeanToArray();
        boolean boolean39 = jSONWriter35.isIgnoreNoneSerializable();
        byte[] byteArray40 = jSONWriter35.getBytes();
        boolean boolean42 = jSONWriter18.writeTypeName(byteArray40, (long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString;
        boolean boolean44 = jSONWriter18.isWriteTypeInfo((java.lang.Object) feature43);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        java.util.UUID uUID58 = null;
        jSONWriter48.writeUUID(uUID58);
        jSONWriter48.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        jSONWriter63.close();
        jSONWriter63.writeSymbol("");
        boolean[] booleanArray68 = new boolean[] { true };
        jSONWriter63.writeBool(booleanArray68);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        boolean boolean75 = jSONWriter73.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class76 = null;
        boolean boolean78 = jSONWriter71.isWriteTypeInfo((java.lang.Object) jSONWriter73, class76, (long) ' ');
        boolean boolean80 = jSONWriter71.isEnabled((long) ' ');
        jSONWriter71.writeString("hi!");
        char[] charArray83 = new char[] {};
        jSONWriter71.writeString(charArray83);
        jSONWriter63.writeString(charArray83, 10, (int) (short) 0);
        jSONWriter48.writeString(charArray83, (int) (short) 100, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter18.writeNameRaw(charArray83);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[true]");
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[]");
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        boolean boolean6 = jSONWriter1.isUTF8();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter8.writeDouble(1.0d, decimalFormat12);
        boolean boolean15 = jSONWriter8.removeReference((java.lang.Object) (short) -1);
        jSONWriter8.writeArrayNull();
        jSONWriter8.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        java.lang.String str21 = jSONWriter8.setPath("hi!", (java.lang.Object) feature20);
        jSONWriter1.writeEnum((java.lang.Enum) feature20);
        jSONWriter1.writeSymbol("[1].hi\\!.\\[1\\].\\[1\\]\\.hi\\\\\\!");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context21.getContextValueFilter();
        boolean boolean23 = context21.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) feature27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        jSONWriter24.config(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        context21.config(featureArray29);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter35 = null;
        context21.setBeforeFilter(beforeFilter35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter38 = null;
        context21.setNameFilter(nameFilter38);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter37);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        boolean boolean19 = jSONWriter16.isBeanToArray();
        boolean boolean20 = jSONWriter16.isIgnoreNoneSerializable();
        byte[] byteArray21 = jSONWriter16.getBytes();
        jSONWriter16.writeDouble((double) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        jSONWriter25.close();
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter25.writeFloat((float) 10, decimalFormat28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean36 = jSONWriter31.writeTypeName(byteArray34, (long) 10);
        boolean boolean38 = jSONWriter25.writeTypeName(byteArray34, (long) (byte) 100);
        jSONWriter25.writeInt16((short) (byte) 100);
        boolean boolean41 = jSONWriter25.hasFilter();
        long[] longArray45 = new long[] { 0, (byte) -1, ' ' };
        jSONWriter25.writeInt64(longArray45);
        jSONWriter16.writeInt64(longArray45);
        java.time.Instant instant48 = null;
        jSONWriter16.writeInstant(instant48);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-81]");
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[0, -1, 32]");
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        boolean boolean17 = jSONWriter1.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter34 = context33.getPropertyFilter();
        long long35 = context33.getFeatures();
        long long36 = context33.getFeatures();
        jSONWriter1.startArray((java.lang.Object) long36, (int) (short) 100);
        jSONWriter1.writeInt8((byte) 1);
        java.time.LocalDate localDate41 = null;
        jSONWriter1.writeLocalDate(localDate41);
        jSONWriter1.writeRaw((byte) -1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNull(propertyFilter34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        boolean[] booleanArray23 = new boolean[] { true };
        jSONWriter18.writeBool(booleanArray23);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        boolean boolean35 = jSONWriter26.isEnabled((long) ' ');
        jSONWriter26.writeString("hi!");
        char[] charArray38 = new char[] {};
        jSONWriter26.writeString(charArray38);
        jSONWriter18.writeString(charArray38, 10, (int) (short) 0);
        jSONWriter3.writeString(charArray38, (int) (short) 100, (int) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) feature48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature48 };
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray50);
        com.alibaba.fastjson2.SymbolTable symbolTable53 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable53);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        boolean boolean58 = jSONWriter56.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class59 = null;
        boolean boolean61 = jSONWriter54.isWriteTypeInfo((java.lang.Object) jSONWriter56, class59, (long) ' ');
        byte[] byteArray63 = new byte[] { (byte) -1 };
        boolean boolean65 = jSONWriter56.writeTypeName(byteArray63, 0L);
        java.util.UUID uUID66 = null;
        jSONWriter56.writeUUID(uUID66);
        com.alibaba.fastjson2.JSONWriter.Context context68 = jSONWriter56.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter69 = context68.getPropertyFilter();
        long long70 = context68.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter71 = null;
        context68.setLabelFilter(labelFilter71);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider73 = context68.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter74 = null;
        context68.setPropertyPreFilter(propertyPreFilter74);
        com.alibaba.fastjson2.filter.NameFilter nameFilter76 = null;
        context68.setNameFilter(nameFilter76);
        java.time.format.DateTimeFormatter dateTimeFormatter78 = context68.getDateFormatter();
        jSONWriter52.setRootObject((java.lang.Object) context68);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter80 = context68.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray82 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray82);
        com.alibaba.fastjson2.JSONWriter jSONWriter84 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context85 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray82);
        java.lang.Class<?> wildcardClass86 = context85.getClass();
        boolean boolean88 = jSONWriter3.isWriteTypeInfo((java.lang.Object) afterFilter80, (java.lang.Class) wildcardClass86, (long) 2);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true]");
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(context68);
        org.junit.Assert.assertNull(propertyFilter69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider73);
        org.junit.Assert.assertNull(dateTimeFormatter78);
        org.junit.Assert.assertNull(afterFilter80);
        org.junit.Assert.assertNotNull(featureArray82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(jSONWriter84);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = context15.getDateFormatter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter24 = null;
        context15.setContextValueFilter(contextValueFilter24);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter26 = context15.getContextValueFilter();
        boolean boolean27 = context15.isDateFormatHasHour();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(contextValueFilter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context9, symbolTable10);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter11);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        boolean boolean16 = jSONWriter6.utf16;
        java.time.LocalDate localDate17 = null;
        jSONWriter6.writeLocalDate(localDate17);
        jSONWriter6.writeChar('a');
        com.alibaba.fastjson2.JSONObject jSONObject21 = null;
        jSONWriter6.write(jSONObject21);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter20 = context19.getBeforeFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter21 = context19.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.of(context19);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(beforeFilter20);
        org.junit.Assert.assertNull(afterFilter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        boolean boolean20 = jSONWriter11.isEnabled((long) ' ');
        jSONWriter11.writeString("hi!");
        boolean boolean23 = jSONWriter11.isUTF8();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        jSONWriter11.writeString((java.util.List<java.lang.String>) strList27);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter1.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray19);
        java.math.BigInteger bigInteger24 = null;
        jSONWriter23.writeBigInt(bigInteger24, (long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        java.time.LocalTime localTime29 = null;
        jSONWriter28.writeLocalTime(localTime29);
        java.time.LocalDateTime localDateTime31 = null;
        jSONWriter28.writeLocalDateTime(localDateTime31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        boolean boolean36 = jSONWriter34.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter38.writeDouble(1.0d, decimalFormat42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean50 = jSONWriter45.writeTypeName(byteArray48, (long) 10);
        jSONWriter38.writeStringLatin1(byteArray48);
        jSONWriter34.writeStringLatin1(byteArray48);
        jSONWriter28.writeBinary(byteArray48);
        jSONWriter23.writeBinary(byteArray48);
        jSONWriter23.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = jSONWriter23.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal61 = null;
        jSONWriter58.writeDecimal(bigDecimal61);
        boolean boolean64 = jSONWriter58.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter58.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj69 = null;
        jSONWriter58.startArray(obj69, (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean73 = jSONWriter72.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean75 = jSONWriter72.isEnabled(feature74);
        boolean boolean76 = jSONWriter58.isEnabled(feature74);
        jSONWriter23.config(feature74, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter23);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter23.writeTypeName("$[10]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(symbolTable56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSONWriter79);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean10 = jSONWriter1.isEnabled(feature9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        jSONWriter1.writeInt16((short) (byte) 1);
        jSONWriter1.writeMillis((long) 5);
        jSONWriter1.endObject();
        jSONWriter1.writeStringNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(symbolTable11);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeChar('#');
        short[] shortArray18 = new short[] { (byte) 1, (short) 10, (short) 1 };
        jSONWriter3.writeInt16(shortArray18);
        jSONWriter3.writeInt16((short) (byte) 10);
        long long22 = jSONWriter3.getFeatures();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeName(2);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1, 10, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.math.BigDecimal bigDecimal16 = null;
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter3.writeDecimal(bigDecimal16, (long) (byte) -1, decimalFormat18);
        java.math.BigDecimal bigDecimal20 = null;
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter3.writeDecimal(bigDecimal20, (long) (-1), decimalFormat22);
        com.alibaba.fastjson2.JSONWriter.Path path24 = null;
        com.alibaba.fastjson2.JSONWriter.Path path26 = new com.alibaba.fastjson2.JSONWriter.Path(path24, "");
        com.alibaba.fastjson2.JSONWriter.Path path28 = new com.alibaba.fastjson2.JSONWriter.Path(path26, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path28, "hi!");
        java.lang.String str31 = path30.toString();
        com.alibaba.fastjson2.JSONWriter.Path path33 = new com.alibaba.fastjson2.JSONWriter.Path(path30, (int) '#');
        java.lang.Object obj34 = null;
        boolean boolean35 = path33.equals(obj34);
        jSONWriter3.writeAny(obj34);
        boolean boolean37 = jSONWriter3.utf8;
        jSONWriter3.writeArrayNull();
        jSONWriter3.writeDouble((double) (-1L));
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1].hi\\!" + "'", str31, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider21 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider21, featureArray23);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        byte[] byteArray38 = new byte[] { (byte) -1 };
        boolean boolean40 = jSONWriter31.writeTypeName(byteArray38, 0L);
        java.util.UUID uUID41 = null;
        jSONWriter31.writeUUID(uUID41);
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter31.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter44 = context43.getPropertyFilter();
        long long45 = context43.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter46 = null;
        context43.setLabelFilter(labelFilter46);
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context43, symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context43.config(feature50, true);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter53 = context43.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.of(context43);
        java.lang.String str55 = context43.getDateFormat();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        byte[] byteArray66 = new byte[] { (byte) -1 };
        boolean boolean68 = jSONWriter59.writeTypeName(byteArray66, 0L);
        java.util.UUID uUID69 = null;
        jSONWriter59.writeUUID(uUID69);
        com.alibaba.fastjson2.JSONWriter.Context context71 = jSONWriter59.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter72 = context71.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider73 = context71.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter74 = context71.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        com.alibaba.fastjson2.JSONWriter.Context context79 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray76);
        context71.config(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        context43.config(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider21, featureArray76);
        jSONWriter83.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertNotNull(objectWriterProvider21);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertNull(propertyFilter44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertNull(valueFilter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(context71);
        org.junit.Assert.assertNull(propertyFilter72);
        org.junit.Assert.assertNotNull(objectWriterProvider73);
        org.junit.Assert.assertNull(afterFilter74);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertNotNull(jSONWriter83);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter0.writeFloat((float) (short) 0, decimalFormat10);
        boolean boolean12 = jSONWriter0.isUTF16();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean19 = jSONWriter14.writeTypeName(byteArray17, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter21);
        long long23 = jSONWriter21.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter26.writeDouble(1.0d, decimalFormat30);
        boolean boolean33 = jSONWriter26.removeReference((java.lang.Object) (short) -1);
        jSONWriter26.writeArrayNull();
        long long35 = jSONWriter26.getFeatures();
        java.lang.Class<?> wildcardClass36 = jSONWriter26.getClass();
        boolean boolean38 = jSONWriter21.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass36, (long) (short) 10);
        int[] intArray45 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter21.writeInt32(intArray45);
        jSONWriter14.writeInt32(intArray45);
        jSONWriter0.writeInt32(intArray45);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context16, symbolTable17);
        java.lang.String str19 = context16.getDateFormat();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        boolean boolean4 = jSONWriter1.hasFilter();
        boolean boolean6 = jSONWriter1.hasFilter((-1L));
        jSONWriter1.writeBooleanNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        int int9 = jSONWriter0.level();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        boolean boolean20 = jSONWriter11.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        jSONWriter24.writeInt8((byte) 1);
        jSONWriter24.close();
        boolean boolean37 = jSONWriter11.removeReference((java.lang.Object) jSONWriter24);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        boolean[] booleanArray44 = new boolean[] { false, true, true, true };
        jSONWriter39.writeBool(booleanArray44);
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        jSONWriter39.writeBinary(byteArray56);
        jSONWriter11.writeRaw(byteArray56);
        jSONWriter0.writeStringLatin1(byteArray56);
        jSONWriter0.writeColon();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        byte[] byteArray38 = new byte[] { (byte) -1 };
        boolean boolean40 = jSONWriter31.writeTypeName(byteArray38, 0L);
        java.util.UUID uUID41 = null;
        jSONWriter31.writeUUID(uUID41);
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter31.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context43);
        java.time.format.DateTimeFormatter dateTimeFormatter45 = context43.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider46 = context43.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider46, featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27, featureArray47);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter53 = context52.getLabelFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(objectWriterProvider46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNull(labelFilter53);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateTime14((int) (short) 10, (int) (byte) -1, 0, (int) (byte) 100, (int) (short) -1, 5);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter1.writeBigInt(bigInteger14);
        boolean boolean16 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        jSONWriter18.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        java.util.Map map38 = null;
        jSONWriter26.write(map38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        java.time.LocalTime localTime42 = null;
        jSONWriter41.writeLocalTime(localTime42);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        jSONWriter41.writeBinary(byteArray54);
        jSONWriter26.writeBinary(byteArray54);
        jSONWriter18.writeStringLatin1(byteArray54);
        jSONWriter1.writeHex(byteArray54);
        java.util.Map map61 = null;
        jSONWriter1.write(map61);
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        java.util.Map map65 = null;
        jSONWriter1.write(map65);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        boolean boolean9 = jSONWriter1.isIgnoreNoneSerializable();
        boolean boolean10 = jSONWriter1.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateYYYMMDD8((int) '#', 0, (int) (byte) 10);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(symbolTable11);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        jSONWriter16.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        jSONWriter16.writeBinary(byteArray30);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = jSONWriter16.symbolTable;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(symbolTable34);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.NameFilter nameFilter20 = null;
        context15.setNameFilter(nameFilter20);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = null;
        context15.setAfterFilter(afterFilter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter39.writeDouble(1.0d, decimalFormat43);
        boolean boolean46 = jSONWriter39.removeReference((java.lang.Object) (short) -1);
        jSONWriter39.writeArrayNull();
        long long48 = jSONWriter39.getFeatures();
        java.lang.Class<?> wildcardClass49 = jSONWriter39.getClass();
        boolean boolean51 = jSONWriter26.isWriteTypeInfo((java.lang.Object) boolean37, (java.lang.reflect.Type) wildcardClass49, 0L);
        jSONWriter26.writeStringNull();
        char[] charArray53 = new char[] {};
        jSONWriter26.writeString(charArray53);
        jSONWriter24.writeString(charArray53);
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        byte[] byteArray66 = new byte[] { (byte) -1 };
        boolean boolean68 = jSONWriter59.writeTypeName(byteArray66, 0L);
        java.util.UUID uUID69 = null;
        jSONWriter59.writeUUID(uUID69);
        com.alibaba.fastjson2.JSONWriter.Context context71 = jSONWriter59.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter72 = context71.getPropertyFilter();
        long long73 = context71.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter74 = null;
        context71.setLabelFilter(labelFilter74);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter76 = context71.getContextValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context71);
        java.nio.charset.Charset charset78 = jSONWriter77.getCharset();
        byte[] byteArray79 = jSONWriter24.getBytes(charset78);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[]");
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(context71);
        org.junit.Assert.assertNull(propertyFilter72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNull(contextValueFilter76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[34, 34]");
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context15.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context15.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        long long31 = jSONWriter29.getFeatures();
        java.time.LocalDateTime localDateTime32 = null;
        jSONWriter29.writeLocalDateTime(localDateTime32);
        byte[] byteArray34 = jSONWriter29.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter29.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27, featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter44);
        boolean boolean46 = jSONWriter44.utf16;
        jSONWriter44.endObject();
        jSONWriter44.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = jSONWriter44.symbolTable;
        double[] doubleArray61 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter44.writeDouble(doubleArray61);
        java.text.DecimalFormat decimalFormat63 = null;
        jSONWriter42.writeDouble(doubleArray61, decimalFormat63);
        jSONWriter42.writeChar('a');
        long long67 = jSONWriter42.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-81]");
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(symbolTable55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        java.lang.String str14 = jSONWriter1.setPath("hi!", (java.lang.Object) feature13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName;
        boolean boolean16 = jSONWriter1.isEnabled(feature15);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter2.writeDouble((double) 0, decimalFormat4);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        jSONWriter1.writeReference("$");
        boolean boolean9 = jSONWriter1.isEnabled((long) 13);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        java.util.UUID uUID23 = null;
        jSONWriter13.writeUUID(uUID23);
        java.time.Instant instant25 = null;
        jSONWriter13.writeInstant(instant25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean33 = jSONWriter28.writeTypeName(byteArray31, (long) 10);
        jSONWriter13.writeRaw(byteArray31);
        jSONWriter1.writeNameRaw(byteArray31, 65536L);
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        boolean boolean48 = jSONWriter39.isEnabled((long) ' ');
        jSONWriter39.writeString("hi!");
        boolean boolean51 = jSONWriter39.isUTF8();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        jSONWriter39.writeString((java.util.List<java.lang.String>) strList55);
        jSONWriter1.write((java.util.List) strList55);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        jSONWriter34.close();
        jSONWriter34.writeSymbol("");
        jSONWriter34.writeBooleanNull();
        jSONWriter34.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        java.util.UUID uUID53 = null;
        jSONWriter43.writeUUID(uUID53);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter43.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context55);
        java.time.format.DateTimeFormatter dateTimeFormatter57 = context55.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider58 = context55.getProvider();
        java.lang.String str59 = context55.getDateFormat();
        boolean boolean60 = jSONWriter34.removeReference((java.lang.Object) context55);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter61 = context55.getLabelFilter();
        java.time.ZoneId zoneId62 = context55.getZoneId();
        context32.setZoneId(zoneId62);
        context15.setZoneId(zoneId62);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(objectWriterProvider58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(labelFilter61);
        org.junit.Assert.assertNotNull(zoneId62);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeName("[1].hi\\!");
        jSONWriter3.writeInt8((byte) 1);
        java.util.Map map17 = null;
        jSONWriter3.write(map17);
        java.time.LocalDate localDate19 = null;
        jSONWriter3.writeLocalDate(localDate19);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeDoubleArray((double) (short) 100, (double) 13);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context38.config(feature39, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) feature44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature44 };
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray46);
        context38.config(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        jSONWriter3.config(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray46);
        boolean boolean53 = jSONWriter52.hasFilter();
        java.io.OutputStream outputStream54 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int55 = jSONWriter52.flushTo(outputStream54);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: out is nulll");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path10 = path9.parent;
        com.alibaba.fastjson2.JSONWriter.Path path11 = path10.parent;
        com.alibaba.fastjson2.JSONWriter.Path path13 = new com.alibaba.fastjson2.JSONWriter.Path(path11, "[52]");
        com.alibaba.fastjson2.JSONWriter.Path path15 = new com.alibaba.fastjson2.JSONWriter.Path(path11, 3);
        com.alibaba.fastjson2.JSONWriter.Path path17 = new com.alibaba.fastjson2.JSONWriter.Path(path11, 10);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertNotNull(path11);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter18 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter19 = null;
        context15.setLabelFilter(labelFilter19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNull(valueFilter18);
        org.junit.Assert.assertNotNull(jSONWriter21);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) feature24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24 };
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        jSONWriter21.config(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter33);
        long long35 = jSONWriter33.getFeatures();
        java.time.LocalDateTime localDateTime36 = null;
        jSONWriter33.writeLocalDateTime(localDateTime36);
        byte[] byteArray38 = jSONWriter33.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        jSONWriter33.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray39);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter45 = context44.getAfterFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter46 = null;
        context44.setBeforeFilter(beforeFilter46);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-81]");
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNull(afterFilter45);
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        boolean boolean17 = jSONWriter1.hasFilter();
        jSONWriter1.writeReference("");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter21.writeDecimal(bigDecimal24);
        boolean boolean27 = jSONWriter21.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter21.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj32 = null;
        jSONWriter21.startArray(obj32, (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean36 = jSONWriter35.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean38 = jSONWriter35.isEnabled(feature37);
        boolean boolean39 = jSONWriter21.isEnabled(feature37);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        boolean[] booleanArray46 = new boolean[] { false, true, true, true };
        jSONWriter41.writeBool(booleanArray46);
        jSONWriter21.writeBool(booleanArray46);
        jSONWriter1.writeBool(booleanArray46);
        boolean boolean50 = jSONWriter1.utf8;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) feature20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray22);
        jSONWriter17.config(featureArray22);
        context13.config(featureArray22);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter27 = context13.getContextNameFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter28 = context13.getNameFilter();
        boolean boolean29 = context13.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter30 = null;
        context13.setValueFilter(valueFilter30);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(contextNameFilter27);
        org.junit.Assert.assertNull(nameFilter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        boolean boolean4 = jSONWriter1.hasFilter();
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter1.writeDouble((double) (short) -1, decimalFormat6);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        boolean[] booleanArray14 = new boolean[] { false, true, true, true };
        jSONWriter9.writeBool(booleanArray14);
        com.alibaba.fastjson2.SymbolTable symbolTable16 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class22 = null;
        boolean boolean24 = jSONWriter17.isWriteTypeInfo((java.lang.Object) jSONWriter19, class22, (long) ' ');
        byte[] byteArray26 = new byte[] { (byte) -1 };
        boolean boolean28 = jSONWriter19.writeTypeName(byteArray26, 0L);
        jSONWriter9.writeBinary(byteArray26);
        byte[] byteArray30 = jSONWriter9.getBytes();
        jSONWriter1.writeNameRaw(byteArray30, 100L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-104, -80, -79, -79, -79, -111, 1, -1]");
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context15.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context15.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27);
        java.time.ZoneId zoneId29 = context28.getZoneId();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNotNull(zoneId29);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable6 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class12 = null;
        boolean boolean14 = jSONWriter7.isWriteTypeInfo((java.lang.Object) jSONWriter9, class12, (long) ' ');
        boolean boolean16 = jSONWriter7.isEnabled((long) ' ');
        jSONWriter7.writeString("hi!");
        char[] charArray19 = new char[] {};
        jSONWriter7.writeString(charArray19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter22);
        long long24 = jSONWriter22.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat31 = null;
        jSONWriter27.writeDouble(1.0d, decimalFormat31);
        boolean boolean34 = jSONWriter27.removeReference((java.lang.Object) (short) -1);
        jSONWriter27.writeArrayNull();
        long long36 = jSONWriter27.getFeatures();
        java.lang.Class<?> wildcardClass37 = jSONWriter27.getClass();
        boolean boolean39 = jSONWriter22.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass37, (long) (short) 10);
        boolean boolean40 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter7, (java.lang.reflect.Type) wildcardClass37);
        boolean boolean41 = jSONWriter7.isWriteNulls();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        long long11 = jSONWriter9.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter9.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass24, (long) (short) 10);
        int[] intArray33 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter9.writeInt32(intArray33);
        double[] doubleArray39 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter9.writeDouble(doubleArray39);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter1.writeDouble(doubleArray39, decimalFormat41);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeNumberNull();
        jSONWriter1.writeDateTime14((int) 'a', (int) (byte) -1, (int) (short) 10, (int) (short) 10, (int) (byte) 1, 7);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        jSONWriter10.writeNull();
        jSONWriter10.writeChar('a');
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14);
        jSONWriter10.writeRaw('4', '#');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter10);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        java.time.LocalDateTime localDateTime4 = null;
        jSONWriter1.writeLocalDateTime(localDateTime4);
        byte[] byteArray6 = jSONWriter1.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.WriteLongAsString;
        jSONWriter1.writeEnum((java.lang.Enum) feature7);
        jSONWriter1.startArray(1);
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter1.writeDouble((-1.0d), decimalFormat12);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-81, -81]");
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteLongAsString + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteLongAsString));
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = context34.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider36 = context34.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter37 = context34.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray39);
        context34.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider17, featureArray39);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter46 = null;
        context45.setAfterFilter(afterFilter46);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter48 = context45.getPropertyPreFilter();
        boolean boolean49 = context45.isDateFormatHasHour();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNull(propertyFilter35);
        org.junit.Assert.assertNotNull(objectWriterProvider36);
        org.junit.Assert.assertNull(afterFilter37);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNull(propertyPreFilter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.writeInt8((byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = null;
        jSONWriter4.writeDouble(doubleArray5);
        boolean boolean7 = jSONWriter4.utf16;
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter4.writeDecimal(bigDecimal8, 100L);
        boolean boolean11 = jSONWriter4.utf16;
        java.lang.Object obj12 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter4.isWriteTypeInfo(obj12, (java.lang.Class) wildcardClass24, (long) (short) 0);
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter4, (long) (byte) 1);
        java.lang.Object obj30 = null;
        java.lang.String str31 = jSONWriter1.setPath("[1]", obj30);
        boolean boolean32 = jSONWriter1.hasFilter();
        java.time.LocalDate localDate33 = null;
        jSONWriter1.writeLocalDate(localDate33);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        jSONWriter1.writeReference("[1][0]");
        int int25 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        java.math.BigInteger bigInteger27 = null;
        jSONWriter1.writeBigInt(bigInteger27);
        byte[] byteArray29 = null;
        jSONWriter1.writeBinary(byteArray29);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 13 + "'", int25 == 13);
        org.junit.Assert.assertNotNull(jSONWriter26);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat9 = null;
        jSONWriter5.writeDouble(1.0d, decimalFormat9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean17 = jSONWriter12.writeTypeName(byteArray15, (long) 10);
        jSONWriter5.writeStringLatin1(byteArray15);
        jSONWriter1.writeStringLatin1(byteArray15);
        int int20 = jSONWriter1.level();
        boolean boolean21 = jSONWriter1.isBeanToArray();
        jSONWriter1.writeArrayNull();
        boolean boolean23 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter1.getContext();
        boolean boolean25 = jSONWriter1.isBeanToArray();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        boolean boolean21 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider22 = context15.getProvider();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider22);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        boolean boolean27 = context15.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = null;
        context15.setAfterFilter(afterFilter18);
        boolean boolean21 = context15.isEnabled((long) (short) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        java.util.UUID uUID35 = null;
        jSONWriter25.writeUUID(uUID35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter25.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context37.config(feature38, false);
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        java.util.UUID uUID54 = null;
        jSONWriter44.writeUUID(uUID54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = jSONWriter44.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter57 = context56.getPropertyFilter();
        long long58 = context56.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter59 = null;
        context56.setLabelFilter(labelFilter59);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter61 = null;
        context56.setValueFilter(valueFilter61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        jSONWriter64.close();
        jSONWriter64.writeSymbol("");
        jSONWriter64.writeBooleanNull();
        jSONWriter64.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        boolean boolean75 = jSONWriter73.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class76 = null;
        boolean boolean78 = jSONWriter71.isWriteTypeInfo((java.lang.Object) jSONWriter73, class76, (long) ' ');
        byte[] byteArray80 = new byte[] { (byte) -1 };
        boolean boolean82 = jSONWriter73.writeTypeName(byteArray80, 0L);
        java.util.UUID uUID83 = null;
        jSONWriter73.writeUUID(uUID83);
        com.alibaba.fastjson2.JSONWriter.Context context85 = jSONWriter73.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter86 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context85);
        java.time.format.DateTimeFormatter dateTimeFormatter87 = context85.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider88 = context85.getProvider();
        java.lang.String str89 = context85.getDateFormat();
        boolean boolean90 = jSONWriter64.removeReference((java.lang.Object) context85);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter91 = context85.getLabelFilter();
        java.time.ZoneId zoneId92 = context85.getZoneId();
        context56.setZoneId(zoneId92);
        context37.setZoneId(zoneId92);
        context15.setZoneId(zoneId92);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(context56);
        org.junit.Assert.assertNull(propertyFilter57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(context85);
        org.junit.Assert.assertNotNull(jSONWriter86);
        org.junit.Assert.assertNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(objectWriterProvider88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(labelFilter91);
        org.junit.Assert.assertNotNull(zoneId92);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider23 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) feature26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider23, featureArray28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider23, featureArray37);
        boolean boolean43 = context42.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        boolean boolean16 = jSONWriter1.isUTF16();
        boolean boolean17 = jSONWriter1.isUTF8();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeTimeHHMMSS8(3, 3, 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean13 = jSONWriter8.writeTypeName(byteArray11, (long) 10);
        jSONWriter1.writeStringLatin1(byteArray11);
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        int int17 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = null;
        jSONWriter18.writeDouble(doubleArray19);
        boolean boolean21 = jSONWriter18.utf16;
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter18.writeDecimal(bigDecimal22, 100L);
        boolean boolean25 = jSONWriter18.utf16;
        boolean boolean27 = jSONWriter18.isEnabled((long) '4');
        boolean boolean28 = jSONWriter1.containsReference((java.lang.Object) jSONWriter18);
        java.time.LocalDate localDate29 = null;
        jSONWriter1.writeLocalDate(localDate29);
        java.util.UUID uUID31 = null;
        jSONWriter1.writeUUID(uUID31);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        boolean boolean11 = jSONWriter1.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context27.getPropertyFilter();
        long long29 = context27.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter30 = null;
        context27.setLabelFilter(labelFilter30);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider32 = context27.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter33 = null;
        context27.setPropertyPreFilter(propertyPreFilter33);
        com.alibaba.fastjson2.filter.NameFilter nameFilter35 = null;
        context27.setNameFilter(nameFilter35);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean38 = context27.isEnabled(feature37);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider39 = context27.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        java.util.UUID uUID53 = null;
        jSONWriter43.writeUUID(uUID53);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter43.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context55);
        java.time.format.DateTimeFormatter dateTimeFormatter57 = context55.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider58 = context55.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider58, featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider39, featureArray59);
        boolean boolean65 = jSONWriter1.isRefDetect((java.lang.Object) featureArray59);
        java.lang.Class<?> wildcardClass66 = featureArray59.getClass();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(propertyFilter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider32);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(objectWriterProvider58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        java.time.format.DateTimeFormatter dateTimeFormatter25 = context15.getDateFormatter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter26 = context15.getNameFilter();
        java.time.ZoneId zoneId27 = context15.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter28 = null;
        context15.setAfterFilter(afterFilter28);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(nameFilter26);
        org.junit.Assert.assertNotNull(zoneId27);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        java.time.LocalDate localDate12 = null;
        jSONWriter1.writeLocalDate(localDate12);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.SymbolTable symbolTable16 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable16);
        boolean[] booleanArray22 = new boolean[] { false, true, true, true };
        jSONWriter17.writeBool(booleanArray22);
        jSONWriter15.writeBool(booleanArray22);
        jSONWriter1.writeBool(booleanArray22);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter42 = context41.getPropertyFilter();
        long long43 = context41.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter44 = null;
        context41.setLabelFilter(labelFilter44);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider46 = context41.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter47 = null;
        context41.setPropertyPreFilter(propertyPreFilter47);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter49 = null;
        context41.setPropertyPreFilter(propertyPreFilter49);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter51 = null;
        context41.setLabelFilter(labelFilter51);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider53 = context41.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter55);
        long long57 = jSONWriter55.getFeatures();
        java.time.LocalDateTime localDateTime58 = null;
        jSONWriter55.writeLocalDateTime(localDateTime58);
        byte[] byteArray60 = jSONWriter55.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray61);
        jSONWriter55.config(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.of(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context67 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider53, featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.of(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter70);
        boolean boolean72 = jSONWriter70.utf16;
        jSONWriter70.endObject();
        jSONWriter70.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable81 = jSONWriter70.symbolTable;
        double[] doubleArray87 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter70.writeDouble(doubleArray87);
        java.text.DecimalFormat decimalFormat89 = null;
        jSONWriter68.writeDouble(doubleArray87, decimalFormat89);
        java.text.DecimalFormat decimalFormat91 = null;
        jSONWriter1.writeDouble(doubleArray87, decimalFormat91);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNull(propertyFilter42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider46);
        org.junit.Assert.assertNotNull(objectWriterProvider53);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-81]");
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(symbolTable81);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0, -1.0, 1.0]");
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        boolean boolean14 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter4);
        java.math.BigInteger bigInteger15 = null;
        jSONWriter4.writeBigInt(bigInteger15);
        long long18 = jSONWriter4.getFeatures(10L);
        boolean boolean19 = jSONWriter4.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        jSONWriter23.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        jSONWriter38.close();
        jSONWriter38.writeSymbol("");
        boolean[] booleanArray43 = new boolean[] { true };
        jSONWriter38.writeBool(booleanArray43);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        boolean boolean55 = jSONWriter46.isEnabled((long) ' ');
        jSONWriter46.writeString("hi!");
        char[] charArray58 = new char[] {};
        jSONWriter46.writeString(charArray58);
        jSONWriter38.writeString(charArray58, 10, (int) (short) 0);
        jSONWriter23.writeString(charArray58, (int) (short) 100, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter4.writeNameRaw(charArray58, (int) (short) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[true]");
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[]");
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray5);
        com.alibaba.fastjson2.filter.NameFilter nameFilter9 = context8.getNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) feature13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray15);
        context8.config(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.of(featureArray15);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNull(nameFilter9);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = null;
        context6.setPropertyPreFilter(propertyPreFilter7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) feature12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray14);
        context6.config(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray14);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeBool(true);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        jSONWriter3.writeInt64((long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[1].hi\\!", "[1].hi\\![35]" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        jSONWriter19.writeString((java.util.List<java.lang.String>) strList26);
        boolean boolean30 = jSONWriter3.isWriteTypeInfo((java.lang.Object) jSONWriter19, (long) 5);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        jSONWriter34.writeNull();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter34.writeFloat((float) 0, decimalFormat46);
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class54 = null;
        boolean boolean56 = jSONWriter49.isWriteTypeInfo((java.lang.Object) jSONWriter51, class54, (long) ' ');
        byte[] byteArray58 = new byte[] { (byte) -1 };
        boolean boolean60 = jSONWriter51.writeTypeName(byteArray58, 0L);
        java.util.UUID uUID61 = null;
        jSONWriter51.writeUUID(uUID61);
        java.time.Instant instant63 = null;
        jSONWriter51.writeInstant(instant63);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean71 = jSONWriter66.writeTypeName(byteArray69, (long) 10);
        jSONWriter51.writeRaw(byteArray69);
        jSONWriter34.writeStringLatin1(byteArray69);
        jSONWriter19.writeHex(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter19.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str1 = path0.toString();
        com.alibaba.fastjson2.JSONWriter.Path path3 = new com.alibaba.fastjson2.JSONWriter.Path(path0, (int) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Path path5 = new com.alibaba.fastjson2.JSONWriter.Path(path3, (int) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Path path7 = new com.alibaba.fastjson2.JSONWriter.Path(path3, ".\\[1\\]\\[0\\]");
        com.alibaba.fastjson2.JSONWriter.Path path8 = path7.parent;
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$" + "'", str1, "$");
        org.junit.Assert.assertNotNull(path8);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        boolean boolean14 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter4);
        java.math.BigInteger bigInteger15 = null;
        jSONWriter4.writeBigInt(bigInteger15);
        java.time.LocalDateTime localDateTime17 = null;
        jSONWriter4.writeLocalDateTime(localDateTime17);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter4.writeDoubleArray((double) (short) -1, (double) 137439019008L);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = null;
        context15.setLabelFilter(labelFilter24);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter26 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal31 = null;
        jSONWriter28.writeDecimal(bigDecimal31);
        boolean boolean34 = jSONWriter28.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat40 = null;
        jSONWriter36.writeDouble(1.0d, decimalFormat40);
        boolean boolean43 = jSONWriter36.removeReference((java.lang.Object) (short) -1);
        jSONWriter36.writeArrayNull();
        boolean boolean45 = jSONWriter28.isRefDetect((java.lang.Object) jSONWriter36);
        java.util.UUID uUID46 = null;
        jSONWriter36.writeUUID(uUID46);
        jSONWriter36.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context50 = jSONWriter36.getContext();
        long long51 = context50.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        context50.config(featureArray52);
        context15.config(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        com.alibaba.fastjson2.JSONObject jSONObject57 = null;
        jSONWriter56.write(jSONObject57);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(propertyPreFilter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(context50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter56);
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter28 = context22.getLabelFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter45 = context44.getPropertyFilter();
        long long46 = context44.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter47 = context44.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context44);
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBigDecimalAsPlain;
        boolean boolean50 = context44.isEnabled(feature49);
        boolean boolean51 = context22.isEnabled(feature49);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(labelFilter28);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertNull(propertyFilter45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNull(nameFilter47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBigDecimalAsPlain + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBigDecimalAsPlain));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        boolean boolean16 = jSONWriter1.isUTF16();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter19.writeDecimal(bigDecimal22);
        java.time.LocalDate localDate24 = null;
        jSONWriter19.writeLocalDate(localDate24);
        jSONWriter19.writeName("hi!");
        java.time.LocalTime localTime28 = null;
        jSONWriter19.writeLocalTime(localTime28);
        java.util.UUID uUID30 = null;
        jSONWriter19.writeUUID(uUID30);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        byte[] byteArray42 = new byte[] { (byte) -1 };
        boolean boolean44 = jSONWriter35.writeTypeName(byteArray42, 0L);
        jSONWriter35.writeInt8((byte) 1);
        jSONWriter35.close();
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean50 = jSONWriter49.isUseSingleQuotes();
        java.lang.String str51 = jSONWriter35.setPath("[1][0]", (java.lang.Object) jSONWriter49);
        java.lang.Class class52 = null;
        jSONWriter19.checkAndWriteTypeName((java.lang.Object) jSONWriter49, class52);
        boolean boolean54 = jSONWriter1.containsReference((java.lang.Object) class52);
        java.math.BigInteger bigInteger55 = null;
        jSONWriter1.writeBigInt(bigInteger55);
        jSONWriter1.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        com.alibaba.fastjson2.SymbolTable symbolTable16 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class22 = null;
        boolean boolean24 = jSONWriter17.isWriteTypeInfo((java.lang.Object) jSONWriter19, class22, (long) ' ');
        byte[] byteArray26 = new byte[] { (byte) 100 };
        boolean boolean28 = jSONWriter17.writeTypeName(byteArray26, (long) (-1));
        jSONWriter9.writeNameRaw(byteArray26, (long) (short) 100);
        java.math.BigInteger bigInteger31 = null;
        jSONWriter9.writeBigInt(bigInteger31, 5L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter6.writeDouble(1.0d, decimalFormat10);
        boolean boolean13 = jSONWriter6.removeReference((java.lang.Object) (short) -1);
        jSONWriter6.writeArrayNull();
        long long15 = jSONWriter6.getFeatures();
        java.lang.Class<?> wildcardClass16 = jSONWriter6.getClass();
        boolean boolean18 = jSONWriter1.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass16, (long) (short) 10);
        int[] intArray25 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter1.writeInt32(intArray25);
        com.alibaba.fastjson2.JSONObject jSONObject27 = null;
        jSONWriter1.write(jSONObject27);
        long long30 = jSONWriter1.getFeatures((long) (short) 10);
        boolean boolean31 = jSONWriter1.isUTF8();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        jSONWriter1.writeRaw((byte) -1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        java.time.LocalDateTime localDateTime4 = null;
        jSONWriter1.writeLocalDateTime(localDateTime4);
        byte[] byteArray6 = jSONWriter1.getBytes();
        java.math.BigDecimal bigDecimal7 = null;
        jSONWriter1.writeDecimal(bigDecimal7, (long) 8);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-81]");
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateYYYMMDD8((int) 'a', (int) '4', 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray12 = null;
        jSONWriter11.writeDouble(doubleArray12);
        jSONWriter11.writeArrayNull();
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter11.writeFloat((float) (short) 1, decimalFormat16);
        boolean boolean18 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter36 = context35.getPropertyFilter();
        long long37 = context35.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context35.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context35, symbolTable40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter41);
        java.lang.String str43 = jSONWriter1.setPath((int) (byte) 1, (java.lang.Object) jSONWriter41);
        jSONWriter41.writeMillis((long) (short) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter62 = context61.getPropertyFilter();
        long long63 = context61.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter64 = null;
        context61.setLabelFilter(labelFilter64);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider66 = context61.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        com.alibaba.fastjson2.JSONWriter.Context context69 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.of(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider66, featureArray67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        com.alibaba.fastjson2.JSONWriter.Context context77 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray74);
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider66, featureArray74);
        jSONWriter41.config(featureArray74);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNull(propertyFilter36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNull(propertyFilter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(jSONWriter80);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.NameFilter nameFilter20 = null;
        context15.setNameFilter(nameFilter20);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = null;
        context15.setAfterFilter(afterFilter22);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter24 = null;
        context15.setAfterFilter(afterFilter24);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }
}

