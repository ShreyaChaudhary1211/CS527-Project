import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.time.ZonedDateTime zonedDateTime16 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray22 = null;
        jSONWriter19.writeHex(byteArray22);
        boolean boolean24 = jSONWriter19.isRefDetect();
        jSONWriter19.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter42 = context41.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        boolean boolean45 = jSONWriter44.isRefDetect();
        java.lang.String str48 = jSONWriter44.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter50);
        long long52 = jSONWriter50.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter55.writeDouble(1.0d, decimalFormat59);
        boolean boolean62 = jSONWriter55.removeReference((java.lang.Object) (short) -1);
        jSONWriter55.writeArrayNull();
        long long64 = jSONWriter55.getFeatures();
        java.lang.Class<?> wildcardClass65 = jSONWriter55.getClass();
        boolean boolean67 = jSONWriter50.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass65, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter68 = jSONWriter44.getObjectWriter((java.lang.Class) wildcardClass65);
        boolean boolean69 = jSONWriter19.isWriteTypeInfo((java.lang.Object) context41, (java.lang.reflect.Type) wildcardClass65);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter70 = jSONWriter3.getObjectWriter((java.lang.Class) wildcardClass65);
        com.alibaba.fastjson2.SymbolTable symbolTable71 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable71);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        boolean boolean76 = jSONWriter74.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class77 = null;
        boolean boolean79 = jSONWriter72.isWriteTypeInfo((java.lang.Object) jSONWriter74, class77, (long) ' ');
        byte[] byteArray81 = new byte[] { (byte) 100 };
        boolean boolean83 = jSONWriter72.writeTypeName(byteArray81, (long) (-1));
        jSONWriter3.writeStringLatin1(byteArray81);
        boolean boolean85 = jSONWriter3.jsonb;
        java.time.Instant instant86 = null;
        jSONWriter3.writeInstant(instant86);
        int int88 = jSONWriter3.size();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeRaw('#', ' ');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNull(propertyFilter42);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objectWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectWriter70);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 8 + "'", int88 == 8);
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        int int6 = jSONWriter1.level();
        jSONWriter1.writeString("hi!");
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = null;
        jSONWriter9.writeDouble(doubleArray10);
        boolean boolean12 = jSONWriter9.utf16;
        java.math.BigDecimal bigDecimal13 = null;
        jSONWriter9.writeDecimal(bigDecimal13, 100L);
        boolean boolean16 = jSONWriter9.utf16;
        java.lang.Object obj17 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat23 = null;
        jSONWriter19.writeDouble(1.0d, decimalFormat23);
        boolean boolean26 = jSONWriter19.removeReference((java.lang.Object) (short) -1);
        jSONWriter19.writeArrayNull();
        long long28 = jSONWriter19.getFeatures();
        java.lang.Class<?> wildcardClass29 = jSONWriter19.getClass();
        boolean boolean31 = jSONWriter9.isWriteTypeInfo(obj17, (java.lang.Class) wildcardClass29, (long) (short) 0);
        jSONWriter9.writeStringNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        boolean boolean36 = jSONWriter34.utf16;
        jSONWriter34.endObject();
        jSONWriter34.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = jSONWriter34.symbolTable;
        double[] doubleArray51 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter34.writeDouble(doubleArray51);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter9.writeDouble(doubleArray51, decimalFormat53);
        jSONWriter1.writeDouble(doubleArray51);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(symbolTable45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0, -1.0, 1.0]");
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class16 = null;
        jSONWriter3.checkAndWriteTypeName((java.lang.Object) feature15, class16);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter3.writeDecimal(bigDecimal18);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter20 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter24.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context36);
        boolean boolean39 = jSONWriter37.hasFilter((long) 0);
        jSONWriter37.endArray();
        java.time.Instant instant41 = null;
        jSONWriter37.writeInstant(instant41);
        java.math.BigDecimal bigDecimal43 = null;
        jSONWriter37.writeDecimal(bigDecimal43);
        jSONWriter37.close();
        java.lang.String str46 = jSONWriter3.setPath(fieldWriter20, (java.lang.Object) jSONWriter37);
        com.alibaba.fastjson2.SymbolTable symbolTable47 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable47);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        boolean boolean52 = jSONWriter50.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class53 = null;
        boolean boolean55 = jSONWriter48.isWriteTypeInfo((java.lang.Object) jSONWriter50, class53, (long) ' ');
        boolean boolean57 = jSONWriter48.isEnabled((long) ' ');
        jSONWriter48.writeString("hi!");
        boolean boolean60 = jSONWriter48.isUTF8();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        jSONWriter48.writeString((java.util.List<java.lang.String>) strList64);
        jSONWriter48.writeRaw((byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable69 = jSONWriter48.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        com.alibaba.fastjson2.JSONWriter.Context context72 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray70);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        jSONWriter48.writeAny((java.lang.Object) featureArray70);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        boolean boolean76 = jSONWriter3.isIgnoreNoneSerializable((java.lang.Object) jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(symbolTable69);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        jSONWriter3.endArray();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        boolean boolean9 = jSONWriter0.isEnabled((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeTimeHHMMSS8(2, 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter45 = context44.getPropertyFilter();
        long long46 = context44.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter47 = null;
        context44.setLabelFilter(labelFilter47);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider49 = context44.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        jSONWriter53.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        boolean boolean72 = jSONWriter70.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class73 = null;
        boolean boolean75 = jSONWriter68.isWriteTypeInfo((java.lang.Object) jSONWriter70, class73, (long) ' ');
        byte[] byteArray77 = new byte[] { (byte) -1 };
        boolean boolean79 = jSONWriter70.writeTypeName(byteArray77, 0L);
        java.util.UUID uUID80 = null;
        jSONWriter70.writeUUID(uUID80);
        com.alibaba.fastjson2.JSONWriter.Context context82 = jSONWriter70.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature83 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context82.config(feature83, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray86 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter87 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray86);
        com.alibaba.fastjson2.JSONWriter.Feature feature88 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean89 = jSONWriter87.isRefDetect((java.lang.Object) feature88);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray90 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature88 };
        com.alibaba.fastjson2.JSONWriter jSONWriter91 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray90);
        com.alibaba.fastjson2.JSONWriter jSONWriter92 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray90);
        context82.config(featureArray90);
        jSONWriter53.config(featureArray90);
        com.alibaba.fastjson2.JSONWriter.Context context95 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider49, featureArray90);
        com.alibaba.fastjson2.JSONWriter.Context context96 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28, featureArray90);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider97 = context96.provider;
        boolean boolean98 = context96.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertNull(propertyFilter45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider49);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(context82);
        org.junit.Assert.assertTrue("'" + feature83 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature83.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray86);
        org.junit.Assert.assertNotNull(jSONWriter87);
        org.junit.Assert.assertTrue("'" + feature88 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature88.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(featureArray90);
        org.junit.Assert.assertNotNull(jSONWriter91);
        org.junit.Assert.assertNotNull(jSONWriter92);
        org.junit.Assert.assertNotNull(objectWriterProvider97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path4.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        boolean boolean29 = path4.equals((java.lang.Object) context23);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = context23.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = null;
        context23.setNameFilter(nameFilter31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context23);
        java.lang.String str34 = context23.getDateFormat();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter35 = null;
        context23.setContextValueFilter(contextValueFilter35);
        boolean boolean37 = context23.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter38 = null;
        context23.setContextNameFilter(contextNameFilter38);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1]" + "'", str7, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(afterFilter30);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        jSONWriter9.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter9.getContext();
        long long24 = context23.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter25 = null;
        context23.setContextValueFilter(contextValueFilter25);
        boolean boolean27 = context23.isDateFormatHasHour();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) feature32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature32 };
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray34);
        jSONWriter29.config(featureArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.of(featureArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray34);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28, featureArray34);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter39);
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        java.util.UUID uUID14 = null;
        jSONWriter3.writeUUID(uUID14);
        com.alibaba.fastjson2.SymbolTable symbolTable16 = jSONWriter3.getSymbolTable();
        jSONWriter3.writeDateTime19(1, (int) (byte) 10, 21, (int) ' ', (int) (short) 10, 100);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(symbolTable16);
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        int[] intArray11 = new int[] { (short) 0, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt32(intArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = jSONWriter1.context;
        boolean boolean14 = context13.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context13);
        boolean boolean17 = context13.isEnabled(1L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(context13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter6.writeDouble(1.0d, decimalFormat10);
        boolean boolean13 = jSONWriter6.removeReference((java.lang.Object) (short) -1);
        jSONWriter6.writeArrayNull();
        long long15 = jSONWriter6.getFeatures();
        java.lang.Class<?> wildcardClass16 = jSONWriter6.getClass();
        boolean boolean18 = jSONWriter1.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass16, (long) (short) 10);
        int[] intArray25 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter1.writeInt32(intArray25);
        jSONWriter1.writeRaw((byte) 0);
        jSONWriter1.endArray();
        jSONWriter1.startArray((int) (byte) 100);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context15.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context15.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        long long31 = jSONWriter29.getFeatures();
        java.time.LocalDateTime localDateTime32 = null;
        jSONWriter29.writeLocalDateTime(localDateTime32);
        byte[] byteArray34 = jSONWriter29.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter29.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27, featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray35);
        boolean boolean44 = jSONWriter43.isWriteNulls();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-81]");
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        jSONWriter3.writeInt64((long) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        jSONWriter21.close();
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter21.writeFloat((float) 10, decimalFormat24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean32 = jSONWriter27.writeTypeName(byteArray30, (long) 10);
        boolean boolean34 = jSONWriter21.writeTypeName(byteArray30, (long) (byte) 100);
        jSONWriter19.writeNameRaw(byteArray30, 0L);
        jSONWriter3.writeBinary(byteArray30);
        jSONWriter3.writeFloat((float) 'a');
        boolean boolean40 = jSONWriter3.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal45 = null;
        jSONWriter42.writeDecimal(bigDecimal45);
        boolean boolean48 = jSONWriter42.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter42.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj53 = null;
        jSONWriter42.startArray(obj53, (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        jSONWriter57.close();
        jSONWriter57.writeSymbol("");
        boolean[] booleanArray62 = new boolean[] { true };
        jSONWriter57.writeBool(booleanArray62);
        jSONWriter42.writeBool(booleanArray62);
        jSONWriter3.writeBool(booleanArray62);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[true]");
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter1.symbolTable;
        float[] floatArray5 = null;
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter1.writeFloat(floatArray5, decimalFormat6);
        java.util.Map map8 = null;
        jSONWriter1.write(map8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter11.writeDecimal(bigDecimal14);
        boolean boolean17 = jSONWriter11.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter11.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj22 = null;
        jSONWriter11.startArray(obj22, (-1));
        jSONWriter11.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        jSONWriter11.writeDateTime19(5, (-1), (int) (byte) -1, (int) (short) -1, (int) (short) -1, (int) (byte) 0);
        boolean boolean36 = jSONWriter11.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) -1 };
        boolean boolean49 = jSONWriter40.writeTypeName(byteArray47, 0L);
        java.util.UUID uUID50 = null;
        jSONWriter40.writeUUID(uUID50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter40.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context52);
        java.time.format.DateTimeFormatter dateTimeFormatter54 = context52.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider55 = context52.getProvider();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter56 = context52.getContextNameFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable57 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context52, symbolTable57);
        com.alibaba.fastjson2.SymbolTable symbolTable59 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable59);
        boolean boolean61 = jSONWriter60.isRefDetect();
        java.lang.String str64 = jSONWriter60.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter66);
        long long68 = jSONWriter66.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        boolean boolean73 = jSONWriter71.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat75 = null;
        jSONWriter71.writeDouble(1.0d, decimalFormat75);
        boolean boolean78 = jSONWriter71.removeReference((java.lang.Object) (short) -1);
        jSONWriter71.writeArrayNull();
        long long80 = jSONWriter71.getFeatures();
        java.lang.Class<?> wildcardClass81 = jSONWriter71.getClass();
        boolean boolean83 = jSONWriter66.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass81, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter84 = jSONWriter60.getObjectWriter((java.lang.Class) wildcardClass81);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter85 = jSONWriter58.getObjectWriter((java.lang.Class) wildcardClass81);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter86 = jSONWriter11.getObjectWriter((java.lang.Class) wildcardClass81);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameAny((java.lang.Object) jSONWriter11);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable4);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(objectWriterProvider55);
        org.junit.Assert.assertNull(contextNameFilter56);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objectWriter84);
        org.junit.Assert.assertNotNull(objectWriter85);
        org.junit.Assert.assertNotNull(objectWriter86);
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = null;
        context8.setAfterFilter(afterFilter9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context26.config(feature27, false);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        java.util.UUID uUID43 = null;
        jSONWriter33.writeUUID(uUID43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter33.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter46 = context45.getPropertyFilter();
        long long47 = context45.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter48 = null;
        context45.setLabelFilter(labelFilter48);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter50 = null;
        context45.setValueFilter(valueFilter50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        jSONWriter53.close();
        jSONWriter53.writeSymbol("");
        jSONWriter53.writeBooleanNull();
        jSONWriter53.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable59 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class65 = null;
        boolean boolean67 = jSONWriter60.isWriteTypeInfo((java.lang.Object) jSONWriter62, class65, (long) ' ');
        byte[] byteArray69 = new byte[] { (byte) -1 };
        boolean boolean71 = jSONWriter62.writeTypeName(byteArray69, 0L);
        java.util.UUID uUID72 = null;
        jSONWriter62.writeUUID(uUID72);
        com.alibaba.fastjson2.JSONWriter.Context context74 = jSONWriter62.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context74);
        java.time.format.DateTimeFormatter dateTimeFormatter76 = context74.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider77 = context74.getProvider();
        java.lang.String str78 = context74.getDateFormat();
        boolean boolean79 = jSONWriter53.removeReference((java.lang.Object) context74);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter80 = context74.getLabelFilter();
        java.time.ZoneId zoneId81 = context74.getZoneId();
        context45.setZoneId(zoneId81);
        context26.setZoneId(zoneId81);
        context8.setZoneId(zoneId81);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter85 = context8.getBeforeFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter86 = com.alibaba.fastjson2.JSONWriter.of(context8);
        long long87 = context8.getFeatures();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertNull(propertyFilter46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(context74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(objectWriterProvider77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(labelFilter80);
        org.junit.Assert.assertNotNull(zoneId81);
        org.junit.Assert.assertNull(beforeFilter85);
        org.junit.Assert.assertNotNull(jSONWriter86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 137438953472L + "'", long87 == 137438953472L);
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        boolean boolean17 = jSONWriter1.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter34 = context33.getPropertyFilter();
        long long35 = context33.getFeatures();
        long long36 = context33.getFeatures();
        jSONWriter1.startArray((java.lang.Object) long36, (int) (short) 100);
        jSONWriter1.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray42 = null;
        jSONWriter41.writeDouble(doubleArray42);
        boolean boolean44 = jSONWriter41.utf16;
        java.time.Instant instant45 = null;
        jSONWriter41.writeInstant(instant45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) feature49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature49 };
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) feature56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature56 };
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray58);
        java.time.ZoneId zoneId61 = null;
        context60.setZoneId(zoneId61);
        jSONWriter53.popPath((java.lang.Object) context60);
        float[] floatArray64 = new float[] {};
        jSONWriter53.writeFloat(floatArray64);
        jSONWriter41.writeFloat(floatArray64);
        jSONWriter1.writeFloat(floatArray64);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDateYYYMMDD10(0, 12, 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNull(propertyFilter34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[]");
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        boolean boolean6 = jSONWriter1.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Path path8 = null;
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path8, "");
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal17 = null;
        jSONWriter14.writeDecimal(bigDecimal17);
        boolean boolean20 = jSONWriter14.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter14.writeArrayNull();
        jSONWriter14.writeChar('a');
        jSONWriter14.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter14.writeNull();
        jSONWriter14.writeInt32((int) (short) 1);
        boolean boolean34 = path10.equals((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter.Path path36 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "[1][0]");
        boolean boolean37 = jSONWriter1.containsReference((java.lang.Object) "[1][0]");
        boolean boolean38 = jSONWriter1.hasFilter();
        jSONWriter1.writeInt8((byte) 10);
        boolean boolean41 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        char[] charArray51 = new char[] {};
        jSONWriter45.writeString(charArray51);
        jSONWriter1.writeString(charArray51, 0, (int) (byte) 100);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(symbolTable7);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[]");
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable18);
        jSONWriter19.writeName("hi!");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNotNull(jSONWriter19);
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.util.List list3 = null;
        jSONWriter1.write(list3);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        boolean boolean9 = jSONWriter1.containsReference((java.lang.Object) boolean8);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        java.util.UUID uUID23 = null;
        jSONWriter13.writeUUID(uUID23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter13.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context25);
        java.time.LocalTime localTime27 = null;
        jSONWriter26.writeLocalTime(localTime27);
        boolean boolean29 = jSONWriter26.isBeanToArray();
        boolean boolean30 = jSONWriter26.isIgnoreNoneSerializable();
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) boolean30, class31, 4L);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter35.isWriteTypeInfo((java.lang.Object) jSONWriter37, class40, (long) ' ');
        char[] charArray43 = new char[] {};
        jSONWriter37.writeString(charArray43);
        jSONWriter1.writeString(charArray43, (int) (short) 10, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        jSONWriter49.close();
        jSONWriter49.writeSymbol("");
        jSONWriter49.writeBooleanNull();
        jSONWriter49.endArray();
        boolean boolean55 = jSONWriter49.isRefDetect();
        boolean boolean56 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter49);
        java.math.BigInteger bigInteger57 = null;
        jSONWriter49.writeBigInt(bigInteger57);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[]");
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        jSONWriter1.writeSymbol("$");
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray32 = null;
        jSONWriter31.writeDouble(doubleArray32);
        boolean boolean34 = jSONWriter31.utf16;
        java.math.BigDecimal bigDecimal35 = null;
        jSONWriter31.writeDecimal(bigDecimal35, 100L);
        boolean boolean38 = jSONWriter31.utf16;
        java.lang.Object obj39 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter31.isWriteTypeInfo(obj39, (java.lang.Class) wildcardClass51, (long) (short) 0);
        jSONWriter31.writeStringNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter56);
        boolean boolean58 = jSONWriter56.utf16;
        jSONWriter56.endObject();
        jSONWriter56.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = jSONWriter56.symbolTable;
        double[] doubleArray73 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter56.writeDouble(doubleArray73);
        java.text.DecimalFormat decimalFormat75 = null;
        jSONWriter31.writeDouble(doubleArray73, decimalFormat75);
        jSONWriter1.writeDouble(doubleArray73);
        jSONWriter1.endObject();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(symbolTable67);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0, -1.0, 1.0]");
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        jSONWriter16.endArray();
        java.time.Instant instant20 = null;
        jSONWriter16.writeInstant(instant20);
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter16.writeDecimal(bigDecimal22);
        jSONWriter16.close();
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter16.context;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        context25.config(feature26, true);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = context25.getBeforeFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertNull(beforeFilter29);
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.SymbolTable symbolTable2 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable2);
        boolean[] booleanArray8 = new boolean[] { false, true, true, true };
        jSONWriter3.writeBool(booleanArray8);
        jSONWriter1.writeBool(booleanArray8);
        jSONWriter1.writeFloat((-1.0f));
        java.math.BigDecimal bigDecimal13 = null;
        jSONWriter1.writeDecimal(bigDecimal13);
        java.time.LocalDateTime localDateTime15 = null;
        jSONWriter1.writeLocalDateTime(localDateTime15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, true, true, true]");
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.math.BigInteger bigInteger3 = null;
        jSONWriter1.writeBigInt(bigInteger3);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray1);
        boolean boolean10 = jSONWriter9.isRefDetect();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.endArray();
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter1.getContext();
        boolean boolean29 = context28.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter1.writeDouble((double) 10.0f, decimalFormat24);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter1.writeFloat((float) '#', decimalFormat27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context("[1][0]", featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray32);
        jSONWriter1.config(featureArray32);
        com.alibaba.fastjson2.SymbolTable symbolTable39 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class45 = null;
        boolean boolean47 = jSONWriter40.isWriteTypeInfo((java.lang.Object) jSONWriter42, class45, (long) ' ');
        byte[] byteArray49 = new byte[] { (byte) -1 };
        boolean boolean51 = jSONWriter42.writeTypeName(byteArray49, 0L);
        java.util.UUID uUID52 = null;
        jSONWriter42.writeUUID(uUID52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = jSONWriter42.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context54);
        java.time.format.DateTimeFormatter dateTimeFormatter56 = context54.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider57 = context54.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context58 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider57);
        java.time.format.DateTimeFormatter dateTimeFormatter59 = context58.getDateFormatter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter60 = context58.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        java.lang.reflect.Type type64 = null;
        boolean boolean66 = jSONWriter62.isWriteTypeInfo((java.lang.Object) (byte) 1, type64, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        jSONWriter68.close();
        jSONWriter68.writeSymbol("");
        jSONWriter68.writeBooleanNull();
        boolean boolean73 = jSONWriter68.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter75);
        long long77 = jSONWriter75.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        boolean boolean82 = jSONWriter80.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat84 = null;
        jSONWriter80.writeDouble(1.0d, decimalFormat84);
        boolean boolean87 = jSONWriter80.removeReference((java.lang.Object) (short) -1);
        jSONWriter80.writeArrayNull();
        long long89 = jSONWriter80.getFeatures();
        java.lang.Class<?> wildcardClass90 = jSONWriter80.getClass();
        boolean boolean92 = jSONWriter75.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass90, (long) (short) 10);
        jSONWriter62.checkAndWriteTypeName((java.lang.Object) jSONWriter68, (java.lang.Class) wildcardClass90);
        jSONWriter1.checkAndWriteTypeName((java.lang.Object) context58, (java.lang.Class) wildcardClass90);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(context54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(objectWriterProvider57);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertNull(afterFilter60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter1.writeDecimal(bigDecimal12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) feature16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean22 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context20, 65536L);
        jSONWriter1.writeSymbol("[1]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        boolean boolean6 = jSONWriter1.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        byte[] byteArray20 = null;
        jSONWriter10.writeBinary(byteArray20);
        jSONWriter10.endObject();
        jSONWriter10.close();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        jSONWriter27.endObject();
        java.time.ZonedDateTime zonedDateTime40 = null;
        jSONWriter27.writeZonedDateTime(zonedDateTime40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray46 = null;
        jSONWriter43.writeHex(byteArray46);
        boolean boolean48 = jSONWriter43.isRefDetect();
        jSONWriter43.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter53.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter66 = context65.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        boolean boolean69 = jSONWriter68.isRefDetect();
        java.lang.String str72 = jSONWriter68.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter74);
        long long76 = jSONWriter74.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        boolean boolean81 = jSONWriter79.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat83 = null;
        jSONWriter79.writeDouble(1.0d, decimalFormat83);
        boolean boolean86 = jSONWriter79.removeReference((java.lang.Object) (short) -1);
        jSONWriter79.writeArrayNull();
        long long88 = jSONWriter79.getFeatures();
        java.lang.Class<?> wildcardClass89 = jSONWriter79.getClass();
        boolean boolean91 = jSONWriter74.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass89, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter92 = jSONWriter68.getObjectWriter((java.lang.Class) wildcardClass89);
        boolean boolean93 = jSONWriter43.isWriteTypeInfo((java.lang.Object) context65, (java.lang.reflect.Type) wildcardClass89);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter94 = jSONWriter27.getObjectWriter((java.lang.Class) wildcardClass89);
        boolean boolean96 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter10, (java.lang.Class) wildcardClass89, (long) (short) 1);
        java.util.Map map97 = null;
        jSONWriter1.write(map97);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(context65);
        org.junit.Assert.assertNull(propertyFilter66);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objectWriter92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(objectWriter94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalDate localDate2 = null;
        jSONWriter1.writeLocalDate(localDate2);
        boolean boolean4 = jSONWriter1.utf8;
        java.util.UUID uUID5 = null;
        jSONWriter1.writeUUID(uUID5);
        jSONWriter1.endObject();
        boolean boolean8 = jSONWriter1.isIgnoreErrorGetter();
        jSONWriter1.writeDateTime19((int) '4', (int) (byte) -1, (-1), 3, (int) (byte) 0, (int) (byte) -1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter6.writeDecimal(bigDecimal9);
        boolean boolean12 = jSONWriter6.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter6.writeArrayNull();
        jSONWriter6.writeChar('a');
        jSONWriter6.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter6.writeNull();
        jSONWriter6.writeInt32((int) (short) 1);
        boolean boolean26 = path2.equals((java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Path path28 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1][0]");
        com.alibaba.fastjson2.JSONWriter.Path path29 = path2.parent;
        com.alibaba.fastjson2.JSONWriter.Path path31 = new com.alibaba.fastjson2.JSONWriter.Path(path29, "$");
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(path29);
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = context27.getDateFormatter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter29 = context27.getValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(valueFilter29);
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        boolean boolean12 = jSONWriter1.utf8;
        java.time.LocalTime localTime13 = null;
        jSONWriter1.writeLocalTime(localTime13);
        java.io.Reader reader15 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader15);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.of(context2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        jSONWriter7.close();
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter7.writeFloat((float) 10, decimalFormat10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean18 = jSONWriter13.writeTypeName(byteArray16, (long) 10);
        boolean boolean20 = jSONWriter7.writeTypeName(byteArray16, (long) (byte) 100);
        jSONWriter5.writeNameRaw(byteArray16, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter24);
        boolean boolean26 = jSONWriter24.utf16;
        jSONWriter24.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray30 = null;
        jSONWriter29.writeDouble(doubleArray30);
        jSONWriter29.writeArrayNull();
        short[] shortArray36 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter29.writeInt16(shortArray36);
        java.lang.String str38 = jSONWriter24.setPath(fieldWriter28, (java.lang.Object) jSONWriter29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        java.lang.reflect.Type type42 = null;
        boolean boolean44 = jSONWriter40.isWriteTypeInfo((java.lang.Object) (byte) 1, type42, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        jSONWriter46.close();
        jSONWriter46.writeSymbol("");
        jSONWriter46.writeBooleanNull();
        boolean boolean51 = jSONWriter46.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter53);
        long long55 = jSONWriter53.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat62 = null;
        jSONWriter58.writeDouble(1.0d, decimalFormat62);
        boolean boolean65 = jSONWriter58.removeReference((java.lang.Object) (short) -1);
        jSONWriter58.writeArrayNull();
        long long67 = jSONWriter58.getFeatures();
        java.lang.Class<?> wildcardClass68 = jSONWriter58.getClass();
        boolean boolean70 = jSONWriter53.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass68, (long) (short) 10);
        jSONWriter40.checkAndWriteTypeName((java.lang.Object) jSONWriter46, (java.lang.Class) wildcardClass68);
        jSONWriter46.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        jSONWriter75.close();
        jSONWriter75.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray80 = null;
        jSONWriter79.writeDouble(doubleArray80);
        jSONWriter79.writeArrayNull();
        short[] shortArray86 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter79.writeInt16(shortArray86);
        jSONWriter75.writeInt16(shortArray86);
        jSONWriter46.writeInt16(shortArray86);
        jSONWriter29.writeInt16(shortArray86);
        jSONWriter5.writeInt16(shortArray86);
        jSONWriter3.writeInt16(shortArray86);
        boolean boolean93 = jSONWriter3.jsonb;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[0, 0, 100]");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(shortArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray86), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray28);
        java.time.format.DateTimeFormatter dateTimeFormatter33 = context32.getDateFormatter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter34 = null;
        context32.setPropertyFilter(propertyFilter34);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter36 = context32.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(contextNameFilter36);
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        boolean boolean19 = jSONWriter16.isBeanToArray();
        boolean boolean20 = jSONWriter16.isIgnoreNoneSerializable();
        byte[] byteArray21 = jSONWriter16.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter16.config(feature22, false);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter16.writeDouble(0.0d, decimalFormat26);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-81]");
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean4 = jSONWriter0.containsReference((java.lang.Object) 5);
        float[] floatArray8 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter0.writeFloat(floatArray8);
        java.time.ZonedDateTime zonedDateTime10 = null;
        jSONWriter0.writeZonedDateTime(zonedDateTime10);
        jSONWriter0.writeFloat((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0, 10.0]");
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context22.setPropertyFilter(propertyFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context22.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context22.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter28 = null;
        context22.setAfterFilter(afterFilter28);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        java.util.UUID uUID35 = null;
        jSONWriter25.writeUUID(uUID35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter25.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter38 = context37.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter39 = context37.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter40 = context37.getValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        java.util.UUID uUID54 = null;
        jSONWriter44.writeUUID(uUID54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = jSONWriter44.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter57 = context56.getPropertyFilter();
        long long58 = context56.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter59 = null;
        context56.setLabelFilter(labelFilter59);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider61 = context56.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter62 = null;
        context56.setPropertyPreFilter(propertyPreFilter62);
        com.alibaba.fastjson2.SymbolTable symbolTable64 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        boolean boolean69 = jSONWriter67.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class70 = null;
        boolean boolean72 = jSONWriter65.isWriteTypeInfo((java.lang.Object) jSONWriter67, class70, (long) ' ');
        byte[] byteArray74 = new byte[] { (byte) -1 };
        boolean boolean76 = jSONWriter67.writeTypeName(byteArray74, 0L);
        java.util.UUID uUID77 = null;
        jSONWriter67.writeUUID(uUID77);
        com.alibaba.fastjson2.JSONWriter.Context context79 = jSONWriter67.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter80 = context79.getPropertyFilter();
        long long81 = context79.getFeatures();
        long long82 = context79.getFeatures();
        boolean boolean83 = context79.isDateFormatHasHour();
        java.time.ZoneId zoneId84 = context79.getZoneId();
        context56.setZoneId(zoneId84);
        context37.setZoneId(zoneId84);
        context15.setZoneId(zoneId84);
        com.alibaba.fastjson2.filter.NameFilter nameFilter88 = null;
        context15.setNameFilter(nameFilter88);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter90 = null;
        context15.setPropertyPreFilter(propertyPreFilter90);
        boolean boolean92 = context15.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertNull(propertyFilter38);
        org.junit.Assert.assertNull(beforeFilter39);
        org.junit.Assert.assertNull(valueFilter40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(context56);
        org.junit.Assert.assertNull(propertyFilter57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider61);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(context79);
        org.junit.Assert.assertNull(propertyFilter80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(zoneId84);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = null;
        context15.setValueFilter(valueFilter28);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter1.writeBinary(byteArray27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean47 = jSONWriter42.writeTypeName(byteArray45, (long) 10);
        jSONWriter35.writeStringLatin1(byteArray45);
        jSONWriter35.writeFloat((java.lang.Float) 1.0f);
        int int51 = jSONWriter35.size();
        java.lang.String str52 = jSONWriter1.setPath(0, (java.lang.Object) jSONWriter35);
        boolean boolean53 = jSONWriter1.isWriteNulls();
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter1.writeFloat((float) 65536L, decimalFormat55);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDoubleArray((double) 137439019008L, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        jSONWriter3.writeInt8((byte) 100);
        jSONWriter3.writeMillis((long) 5);
        jSONWriter3.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        java.util.Map map34 = null;
        jSONWriter22.write(map34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        java.time.LocalTime localTime38 = null;
        jSONWriter37.writeLocalTime(localTime38);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        jSONWriter37.writeBinary(byteArray50);
        jSONWriter22.writeBinary(byteArray50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        boolean boolean58 = jSONWriter56.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray59 = null;
        jSONWriter56.writeHex(byteArray59);
        boolean boolean61 = jSONWriter56.isRefDetect();
        jSONWriter56.writeNumberNull();
        jSONWriter56.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean66 = jSONWriter56.isEnabled(feature65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter68);
        long long70 = jSONWriter68.getFeatures();
        java.time.LocalDateTime localDateTime71 = null;
        jSONWriter68.writeLocalDateTime(localDateTime71);
        byte[] byteArray73 = jSONWriter68.getBytes();
        jSONWriter56.writeStringLatin1(byteArray73);
        jSONWriter22.writeBinary(byteArray73);
        boolean boolean77 = jSONWriter3.writeTypeName(byteArray73, 10L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        jSONWriter79.close();
        java.text.DecimalFormat decimalFormat82 = null;
        jSONWriter79.writeFloat((float) 10, decimalFormat82);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray84 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray84);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean90 = jSONWriter85.writeTypeName(byteArray88, (long) 10);
        boolean boolean92 = jSONWriter79.writeTypeName(byteArray88, (long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeNameRaw(byteArray88, 21, (int) '4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(featureArray84);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        jSONWriter1.writeNull();
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader5);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        jSONWriter0.writeSymbol((int) (byte) 10);
        jSONWriter0.close();
        jSONWriter0.writeMillis((long) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = jSONWriter0.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNull(symbolTable9);
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        boolean boolean8 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) feature11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11 };
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) feature18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature18 };
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        java.time.ZoneId zoneId23 = null;
        context22.setZoneId(zoneId23);
        jSONWriter15.popPath((java.lang.Object) context22);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) feature29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        jSONWriter26.config(featureArray31);
        context22.config(featureArray31);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider36 = context22.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) -1 };
        boolean boolean49 = jSONWriter40.writeTypeName(byteArray47, 0L);
        java.util.UUID uUID50 = null;
        jSONWriter40.writeUUID(uUID50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter40.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter53 = context52.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter54 = null;
        context52.setContextValueFilter(contextValueFilter54);
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        byte[] byteArray66 = new byte[] { (byte) -1 };
        boolean boolean68 = jSONWriter59.writeTypeName(byteArray66, 0L);
        java.util.UUID uUID69 = null;
        jSONWriter59.writeUUID(uUID69);
        com.alibaba.fastjson2.JSONWriter.Context context71 = jSONWriter59.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter72 = context71.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider73 = context71.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter74 = context71.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        com.alibaba.fastjson2.JSONWriter.Context context79 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray76);
        context71.config(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        context52.config(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider36, featureArray76);
        boolean boolean84 = jSONWriter1.removeReference((java.lang.Object) objectWriterProvider36);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName((long) (short) 100);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(objectWriterProvider36);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertNull(propertyFilter53);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(context71);
        org.junit.Assert.assertNull(propertyFilter72);
        org.junit.Assert.assertNotNull(objectWriterProvider73);
        org.junit.Assert.assertNull(afterFilter74);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        jSONWriter1.writeString("");
        long[] longArray16 = new long[] { (short) -1 };
        jSONWriter1.writeInt64(longArray16);
        boolean boolean18 = jSONWriter1.utf8;
        jSONWriter1.writeNumberNull();
        int int20 = jSONWriter1.size();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context22.setPropertyFilter(propertyFilter23);
        boolean boolean25 = context22.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context22.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.of(context22);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter28 = null;
        context22.setContextNameFilter(contextNameFilter28);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter30 = context22.getBeforeFilter();
        java.time.format.DateTimeFormatter dateTimeFormatter31 = context22.getDateFormatter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNull(beforeFilter30);
        org.junit.Assert.assertNull(dateTimeFormatter31);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        byte[] byteArray17 = jSONWriter1.getBytes();
        jSONWriter1.writeNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-91]");
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        jSONWriter24.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context53.config(feature54, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) feature59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature59 };
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray61);
        context53.config(featureArray61);
        jSONWriter24.config(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context66 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.of(featureArray61);
        jSONWriter67.writeFloat((float) 4L);
        int int70 = jSONWriter67.level();
        boolean boolean71 = jSONWriter67.jsonb;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        char[] charArray9 = new char[] {};
        jSONWriter3.writeString(charArray9);
        jSONWriter3.startArray((int) '#');
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter16.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter29 = context28.getPropertyFilter();
        long long30 = context28.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter31 = null;
        context28.setLabelFilter(labelFilter31);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context28.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) feature37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature37 };
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        jSONWriter34.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider33, featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider33);
        boolean boolean45 = jSONWriter3.containsReference((java.lang.Object) objectWriterProvider33);
        jSONWriter3.writeDouble((double) 100.0f);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNull(propertyFilter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context15.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter30.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider29, featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider29);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.isBeanToArray();
        jSONWriter0.writeName("[1]");
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        long long24 = context22.getFeatures();
        long long25 = context22.getFeatures();
        boolean boolean26 = context22.isDateFormatHasHour();
        java.time.ZoneId zoneId27 = context22.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter28 = context22.getBeforeFilter();
        boolean boolean29 = context22.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context22.getProvider();
        java.lang.String str31 = jSONWriter0.setPath("[1].hi\\![35]", (java.lang.Object) objectWriterProvider30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider30);
        boolean boolean33 = context32.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNull(beforeFilter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.time.ZonedDateTime zonedDateTime16 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray22 = null;
        jSONWriter19.writeHex(byteArray22);
        boolean boolean24 = jSONWriter19.isRefDetect();
        jSONWriter19.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter42 = context41.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        boolean boolean45 = jSONWriter44.isRefDetect();
        java.lang.String str48 = jSONWriter44.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter50);
        long long52 = jSONWriter50.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter55.writeDouble(1.0d, decimalFormat59);
        boolean boolean62 = jSONWriter55.removeReference((java.lang.Object) (short) -1);
        jSONWriter55.writeArrayNull();
        long long64 = jSONWriter55.getFeatures();
        java.lang.Class<?> wildcardClass65 = jSONWriter55.getClass();
        boolean boolean67 = jSONWriter50.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass65, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter68 = jSONWriter44.getObjectWriter((java.lang.Class) wildcardClass65);
        boolean boolean69 = jSONWriter19.isWriteTypeInfo((java.lang.Object) context41, (java.lang.reflect.Type) wildcardClass65);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter70 = jSONWriter3.getObjectWriter((java.lang.Class) wildcardClass65);
        jSONWriter3.writeBooleanNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNull(propertyFilter42);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objectWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectWriter70);
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.util.Map map4 = null;
        jSONWriter0.write(map4);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter0.writeDouble((double) 0, decimalFormat7);
        boolean boolean9 = jSONWriter0.isBeanToArray();
        java.math.BigInteger bigInteger10 = null;
        jSONWriter0.writeBigInt(bigInteger10, 4L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        java.lang.reflect.Type type8 = null;
        boolean boolean10 = jSONWriter6.isWriteTypeInfo((java.lang.Object) (byte) 1, type8, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        jSONWriter12.close();
        jSONWriter12.writeSymbol("");
        jSONWriter12.writeBooleanNull();
        boolean boolean17 = jSONWriter12.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter19);
        long long21 = jSONWriter19.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter24.writeDouble(1.0d, decimalFormat28);
        boolean boolean31 = jSONWriter24.removeReference((java.lang.Object) (short) -1);
        jSONWriter24.writeArrayNull();
        long long33 = jSONWriter24.getFeatures();
        java.lang.Class<?> wildcardClass34 = jSONWriter24.getClass();
        boolean boolean36 = jSONWriter19.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass34, (long) (short) 10);
        jSONWriter6.checkAndWriteTypeName((java.lang.Object) jSONWriter12, (java.lang.Class) wildcardClass34);
        boolean boolean38 = jSONWriter4.containsReference((java.lang.Object) jSONWriter6);
        jSONWriter6.writeSymbol(".hi\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context21.getContextValueFilter();
        boolean boolean23 = context21.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) feature27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        jSONWriter24.config(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        context21.config(featureArray29);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter35 = context21.getValueFilter();
        java.lang.String str36 = context21.getDateFormat();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNull(valueFilter35);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray20);
        context15.config(featureArray20);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter25 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter26 = null;
        context15.setPropertyPreFilter(propertyPreFilter26);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNull(afterFilter25);
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context22);
        boolean boolean24 = jSONWriter23.isBeanToArray();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter23.writeTypeName("");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.LargeObject;
        jSONWriter1.config(feature6, true);
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter1.writeDecimal(bigDecimal9, 0L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.LargeObject + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.LargeObject));
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        int int14 = jSONWriter3.size();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter21);
        jSONWriter22.writeDateYYYMMDD8((int) (short) 0, 3, 4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(context31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter34.writeDouble(1.0d, decimalFormat38);
        boolean boolean41 = jSONWriter34.removeReference((java.lang.Object) (short) -1);
        jSONWriter34.writeArrayNull();
        jSONWriter34.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray46 = null;
        jSONWriter45.writeDouble(doubleArray46);
        jSONWriter45.writeArrayNull();
        short[] shortArray52 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter45.writeInt16(shortArray52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal58 = null;
        jSONWriter55.writeDecimal(bigDecimal58);
        boolean boolean61 = jSONWriter55.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter55.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        char[] charArray70 = new char[] { '#', ' ' };
        jSONWriter67.writeString(charArray70, (int) (byte) 0, (int) (short) 1);
        jSONWriter55.writeString(charArray70);
        jSONWriter45.writeString(charArray70);
        jSONWriter34.writeString(charArray70);
        jSONWriter32.writeString(charArray70);
        boolean boolean78 = jSONWriter32.utf16;
        long long80 = jSONWriter32.getFeatures((long) ' ');
        jSONWriter22.popPath((java.lang.Object) ' ');
        com.alibaba.fastjson2.JSONWriter.Context context82 = jSONWriter22.getContext();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[#,  ]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 32L + "'", long80 == 32L);
        org.junit.Assert.assertNotNull(context82);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateTime14((int) (short) 10, (int) (byte) -1, 0, (int) (byte) 100, (int) (short) -1, 5);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter1.writeBigInt(bigInteger14);
        boolean boolean16 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        jSONWriter18.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        java.util.Map map38 = null;
        jSONWriter26.write(map38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        java.time.LocalTime localTime42 = null;
        jSONWriter41.writeLocalTime(localTime42);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        jSONWriter41.writeBinary(byteArray54);
        jSONWriter26.writeBinary(byteArray54);
        jSONWriter18.writeStringLatin1(byteArray54);
        jSONWriter1.writeHex(byteArray54);
        java.util.Map map61 = null;
        jSONWriter1.write(map61);
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        jSONWriter1.writeDateTime19((int) (short) 0, 0, 21, (int) (byte) 1, (int) '4', 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = jSONWriter12.getSymbolTable();
        jSONWriter12.writeFloat((float) 10);
        java.math.BigDecimal bigDecimal37 = null;
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter12.writeDecimal(bigDecimal37, (long) 13, decimalFormat39);
        boolean boolean41 = jSONWriter12.utf16;
        jSONWriter12.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(symbolTable34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        boolean boolean19 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter36 = context35.getPropertyFilter();
        long long37 = context35.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context35.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter40 = context35.getContextValueFilter();
        boolean boolean41 = context35.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter42 = null;
        context35.setValueFilter(valueFilter42);
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context35.config(feature44, false);
        boolean boolean47 = context15.isEnabled(feature44);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.filter.NameFilter nameFilter49 = null;
        context15.setNameFilter(nameFilter49);
        boolean boolean51 = context15.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNull(propertyFilter36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNull(contextValueFilter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean21 = jSONWriter16.writeTypeName(byteArray19, (long) 10);
        jSONWriter3.writeNameRaw(byteArray19);
        boolean boolean23 = jSONWriter3.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray24);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray24);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray24);
        jSONWriter29.writeDateTime19(4, (int) (short) 0, (int) (short) -1, (int) 'a', (int) '#', (int) (byte) 100);
        boolean[] booleanArray41 = new boolean[] { true, false, true, true };
        jSONWriter29.writeBool(booleanArray41);
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean44 = jSONWriter29.isEnabled(feature43);
        jSONWriter3.config(feature43, true);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[true, false, true, true]");
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        jSONWriter3.close();
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter3.writeFloat((float) 10, decimalFormat6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean14 = jSONWriter9.writeTypeName(byteArray12, (long) 10);
        boolean boolean16 = jSONWriter3.writeTypeName(byteArray12, (long) (byte) 100);
        jSONWriter1.writeNameRaw(byteArray12, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        char[] charArray23 = new char[] { '#', ' ' };
        jSONWriter20.writeString(charArray23, (int) (byte) 0, (int) (short) 1);
        jSONWriter1.writeString(charArray23);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        byte[] byteArray38 = new byte[] { (byte) -1 };
        boolean boolean40 = jSONWriter31.writeTypeName(byteArray38, 0L);
        java.util.UUID uUID41 = null;
        jSONWriter31.writeUUID(uUID41);
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter31.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context43);
        java.time.format.DateTimeFormatter dateTimeFormatter45 = context43.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider46 = context43.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context47 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider46);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter48 = null;
        context47.setAfterFilter(afterFilter48);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter50 = null;
        context47.setContextValueFilter(contextValueFilter50);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter52 = null;
        context47.setBeforeFilter(beforeFilter52);
        boolean boolean54 = context47.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter55 = null;
        context47.setPropertyPreFilter(propertyPreFilter55);
        com.alibaba.fastjson2.SymbolTable symbolTable57 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable57);
        boolean[] booleanArray63 = new boolean[] { false, true, true, true };
        jSONWriter58.writeBool(booleanArray63);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter66);
        boolean boolean68 = jSONWriter66.utf16;
        long long70 = jSONWriter66.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable71 = jSONWriter66.getSymbolTable();
        boolean boolean72 = jSONWriter58.isIgnoreNoneSerializable((java.lang.Object) jSONWriter66);
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        jSONWriter66.writeEnum((java.lang.Enum) feature73);
        boolean boolean75 = context47.isEnabled(feature73);
        jSONWriter1.startArray((java.lang.Object) context47, 4);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter78 = context47.getLabelFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter79 = null;
        context47.setContextValueFilter(contextValueFilter79);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#,  ]");
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(objectWriterProvider46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
        org.junit.Assert.assertNull(symbolTable71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(labelFilter78);
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path10 = path9.parent;
        com.alibaba.fastjson2.JSONWriter.Path path11 = path10.parent;
        com.alibaba.fastjson2.JSONWriter.Path path13 = new com.alibaba.fastjson2.JSONWriter.Path(path11, 13);
        com.alibaba.fastjson2.JSONWriter.Path path15 = new com.alibaba.fastjson2.JSONWriter.Path(path11, "[1][10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertNotNull(path11);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter16 = context15.getContextValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter18 = context15.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(contextValueFilter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNull(contextNameFilter18);
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.JSONObject jSONObject7 = null;
        jSONWriter1.write(jSONObject7);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = context15.getDateFormatter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter24 = context15.getPropertyPreFilter();
        long long25 = context15.getFeatures();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context15.provider;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(propertyPreFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        jSONWriter1.writeReference("$");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.writeTypeName("[1].hi\\![35][100]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context21.getContextValueFilter();
        boolean boolean23 = context21.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) feature27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        jSONWriter24.config(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        context21.config(featureArray29);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter35 = null;
        context21.setBeforeFilter(beforeFilter35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context21);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter38 = null;
        context21.setBeforeFilter(beforeFilter38);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter37);
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.LargeObject;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5 };
        jSONWriter1.config(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        java.util.Map map10 = null;
        jSONWriter9.write(map10);
        long long13 = jSONWriter9.getFeatures((-1L));
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.LargeObject + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.LargeObject));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        jSONWriter3.close();
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter3.writeFloat((float) 10, decimalFormat6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean14 = jSONWriter9.writeTypeName(byteArray12, (long) 10);
        boolean boolean16 = jSONWriter3.writeTypeName(byteArray12, (long) (byte) 100);
        jSONWriter1.writeNameRaw(byteArray12, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        char[] charArray23 = new char[] { '#', ' ' };
        jSONWriter20.writeString(charArray23, (int) (byte) 0, (int) (short) 1);
        jSONWriter1.writeString(charArray23);
        jSONWriter1.writeInt16((short) 10);
        java.nio.charset.Charset charset30 = jSONWriter1.getCharset();
        jSONWriter1.endArray();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#,  ]");
        org.junit.Assert.assertNotNull(charset30);
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        java.util.UUID uUID43 = null;
        jSONWriter33.writeUUID(uUID43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter33.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter46 = context45.getPropertyFilter();
        long long47 = context45.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter48 = null;
        context45.setLabelFilter(labelFilter48);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context45, symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter51.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter53 = null;
        context52.setPropertyFilter(propertyFilter53);
        boolean boolean55 = context52.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean57 = jSONWriter56.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean59 = jSONWriter56.isEnabled(feature58);
        boolean boolean60 = context52.isEnabled(feature58);
        boolean boolean61 = context29.isEnabled(feature58);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter62 = context29.getBeforeFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertNull(propertyFilter46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(beforeFilter62);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        jSONWriter22.writeBool(false);
        com.alibaba.fastjson2.JSONObject jSONObject25 = null;
        jSONWriter22.write(jSONObject25);
        boolean boolean27 = jSONWriter22.isIgnoreErrorGetter();
        jSONWriter22.writeBool(false);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray31 = null;
        jSONWriter30.writeDouble(doubleArray31);
        boolean boolean33 = jSONWriter30.utf16;
        java.math.BigDecimal bigDecimal34 = null;
        jSONWriter30.writeDecimal(bigDecimal34, 100L);
        boolean boolean37 = jSONWriter30.utf16;
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter54 = context53.getPropertyFilter();
        long long55 = context53.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter56 = null;
        context53.setLabelFilter(labelFilter56);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter58 = context53.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter59 = null;
        context53.setPropertyFilter(propertyFilter59);
        context53.setDateFormat("hi!");
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context53);
        com.alibaba.fastjson2.SymbolTable symbolTable64 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        jSONWriter67.close();
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter67.writeFloat((float) 10, decimalFormat70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean78 = jSONWriter73.writeTypeName(byteArray76, (long) 10);
        boolean boolean80 = jSONWriter67.writeTypeName(byteArray76, (long) (byte) 100);
        jSONWriter65.writeNameRaw(byteArray76, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray83 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter84 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray83);
        char[] charArray87 = new char[] { '#', ' ' };
        jSONWriter84.writeString(charArray87, (int) (byte) 0, (int) (short) 1);
        jSONWriter65.writeString(charArray87);
        jSONWriter63.writeString(charArray87);
        jSONWriter30.writeString(charArray87, 5, 2);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter22.writeNameRaw(charArray87, 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertNull(propertyFilter54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNull(contextValueFilter58);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(featureArray83);
        org.junit.Assert.assertNotNull(jSONWriter84);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[#,  ]");
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        jSONWriter9.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter9.getContext();
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter9.writeDecimal(bigDecimal24);
        boolean boolean26 = jSONWriter9.isWriteNulls();
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) -1 };
        boolean boolean39 = jSONWriter30.writeTypeName(byteArray37, 0L);
        java.util.UUID uUID40 = null;
        jSONWriter30.writeUUID(uUID40);
        com.alibaba.fastjson2.JSONWriter.Context context42 = jSONWriter30.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter43 = context42.getPropertyFilter();
        long long44 = context42.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter45 = context42.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context42);
        boolean boolean47 = jSONWriter46.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray48);
        jSONWriter46.writeAny((java.lang.Object) featureArray48);
        java.nio.charset.Charset charset52 = jSONWriter46.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        java.lang.reflect.Type type56 = null;
        boolean boolean58 = jSONWriter54.isWriteTypeInfo((java.lang.Object) (byte) 1, type56, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter60.writeDouble(1.0d, decimalFormat64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean72 = jSONWriter67.writeTypeName(byteArray70, (long) 10);
        jSONWriter60.writeStringLatin1(byteArray70);
        jSONWriter54.writeNameRaw(byteArray70);
        jSONWriter46.writeBinary(byteArray70);
        boolean boolean77 = jSONWriter9.isWriteTypeInfo((java.lang.Object) byteArray70, (long) 0);
        java.time.Instant instant78 = null;
        jSONWriter9.writeInstant(instant78);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(context42);
        org.junit.Assert.assertNull(propertyFilter43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNull(nameFilter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context15.setPropertyFilter(propertyFilter23);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter25 = context15.getPropertyFilter();
        boolean boolean26 = context15.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter27 = null;
        context15.setValueFilter(valueFilter27);
        boolean boolean29 = context15.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertNull(propertyFilter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        jSONWriter30.close();
        jSONWriter30.writeSymbol("");
        jSONWriter30.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter30.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter36 = null;
        context35.setPropertyPreFilter(propertyPreFilter36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) feature41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41 };
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray43);
        com.alibaba.fastjson2.JSONWriter.Context context46 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray43);
        context35.config(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider28, featureArray43);
        java.util.Map map50 = null;
        jSONWriter49.write(map50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter53);
        boolean boolean55 = jSONWriter53.utf16;
        java.nio.charset.Charset charset56 = jSONWriter53.getCharset();
        byte[] byteArray57 = jSONWriter49.getBytes(charset56);
        jSONWriter49.endArray();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[110, 117, 108, 108]");
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter5.writeDecimal(bigDecimal9, 100L);
        boolean boolean12 = jSONWriter5.utf16;
        java.lang.Object obj13 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter15.writeDouble(1.0d, decimalFormat19);
        boolean boolean22 = jSONWriter15.removeReference((java.lang.Object) (short) -1);
        jSONWriter15.writeArrayNull();
        long long24 = jSONWriter15.getFeatures();
        java.lang.Class<?> wildcardClass25 = jSONWriter15.getClass();
        boolean boolean27 = jSONWriter5.isWriteTypeInfo(obj13, (java.lang.Class) wildcardClass25, (long) (short) 0);
        boolean boolean28 = jSONWriter5.isRefDetect();
        jSONWriter5.popPath((java.lang.Object) "[1].hi\\![35]");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        jSONWriter32.close();
        java.text.DecimalFormat decimalFormat35 = null;
        jSONWriter32.writeFloat((float) 10, decimalFormat35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean43 = jSONWriter38.writeTypeName(byteArray41, (long) 10);
        boolean boolean45 = jSONWriter32.writeTypeName(byteArray41, (long) (byte) 100);
        jSONWriter5.writeHex(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter4.writeBase64(byteArray41);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeName("[1].hi\\!");
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context33);
        boolean boolean36 = jSONWriter34.hasFilter((long) 0);
        jSONWriter34.endArray();
        jSONWriter34.writeString("");
        boolean boolean40 = jSONWriter34.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) feature43);
        jSONWriter34.writeEnum((java.lang.Enum) feature43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        jSONWriter47.close();
        jSONWriter47.writeSymbol("");
        jSONWriter47.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter47.context;
        jSONWriter47.writeInt8((byte) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class61 = null;
        boolean boolean63 = jSONWriter56.isWriteTypeInfo((java.lang.Object) jSONWriter58, class61, (long) ' ');
        byte[] byteArray65 = new byte[] { (byte) -1 };
        boolean boolean67 = jSONWriter58.writeTypeName(byteArray65, 0L);
        java.util.UUID uUID68 = null;
        jSONWriter58.writeUUID(uUID68);
        com.alibaba.fastjson2.JSONWriter.Context context70 = jSONWriter58.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter71 = context70.getPropertyFilter();
        long long72 = context70.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter73 = null;
        context70.setLabelFilter(labelFilter73);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider75 = context70.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.of(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider75, featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray83 = null;
        jSONWriter82.writeDouble(doubleArray83);
        boolean boolean86 = jSONWriter82.containsReference((java.lang.Object) 5);
        float[] floatArray90 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter82.writeFloat(floatArray90);
        jSONWriter81.writeFloat(floatArray90);
        jSONWriter47.writeFloat(floatArray90);
        jSONWriter34.writeFloat(floatArray90);
        jSONWriter3.writeFloat(floatArray90);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(context70);
        org.junit.Assert.assertNull(propertyFilter71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider75);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(floatArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray90), "[10.0, 10.0, 10.0]");
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable6);
        boolean[] booleanArray12 = new boolean[] { false, true, true, true };
        jSONWriter7.writeBool(booleanArray12);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) -1 };
        boolean boolean26 = jSONWriter17.writeTypeName(byteArray24, 0L);
        jSONWriter7.writeBinary(byteArray24);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter7);
        jSONWriter28.writeInt32((int) (short) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        jSONWriter28.writeHex(byteArray41);
        jSONWriter5.writeBase64(byteArray41);
        jSONWriter5.writeBooleanNull();
        jSONWriter5.writeReference("[1].hi\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.of(featureArray40);
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        boolean[] booleanArray52 = new boolean[] { false, true, true, true };
        jSONWriter47.writeBool(booleanArray52);
        com.alibaba.fastjson2.SymbolTable symbolTable54 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        boolean boolean59 = jSONWriter57.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class60 = null;
        boolean boolean62 = jSONWriter55.isWriteTypeInfo((java.lang.Object) jSONWriter57, class60, (long) ' ');
        byte[] byteArray64 = new byte[] { (byte) -1 };
        boolean boolean66 = jSONWriter57.writeTypeName(byteArray64, 0L);
        jSONWriter47.writeBinary(byteArray64);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter47);
        com.alibaba.fastjson2.SymbolTable symbolTable69 = jSONWriter68.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Context context70 = jSONWriter68.context;
        boolean boolean71 = jSONWriter45.containsReference((java.lang.Object) context70);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter72 = null;
        context70.setAfterFilter(afterFilter72);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNull(symbolTable69);
        org.junit.Assert.assertNotNull(context70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        jSONWriter3.close();
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter3.writeFloat((float) 10, decimalFormat6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean14 = jSONWriter9.writeTypeName(byteArray12, (long) 10);
        boolean boolean16 = jSONWriter3.writeTypeName(byteArray12, (long) (byte) 100);
        jSONWriter1.writeNameRaw(byteArray12, 0L);
        java.time.ZonedDateTime zonedDateTime19 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime19);
        int int21 = jSONWriter1.size();
        boolean boolean22 = jSONWriter1.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) feature25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature25 };
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) feature32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature32 };
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray34);
        java.time.ZoneId zoneId37 = null;
        context36.setZoneId(zoneId37);
        jSONWriter29.popPath((java.lang.Object) context36);
        java.nio.charset.Charset charset40 = jSONWriter29.getCharset();
        jSONWriter29.writeRaw("hi!");
        java.math.BigDecimal bigDecimal43 = null;
        jSONWriter29.writeDecimal(bigDecimal43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter46);
        boolean boolean48 = jSONWriter46.utf16;
        long long50 = jSONWriter46.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable51 = jSONWriter46.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable52 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class58 = null;
        boolean boolean60 = jSONWriter53.isWriteTypeInfo((java.lang.Object) jSONWriter55, class58, (long) ' ');
        boolean boolean62 = jSONWriter53.isEnabled((long) ' ');
        jSONWriter53.writeString("hi!");
        char[] charArray65 = new char[] {};
        jSONWriter53.writeString(charArray65);
        jSONWriter46.writeString(charArray65);
        jSONWriter29.writeNameRaw(charArray65);
        jSONWriter1.writeString(charArray65);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertNull(symbolTable51);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[]");
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        jSONWriter25.writeNull();
        java.text.DecimalFormat decimalFormat37 = null;
        jSONWriter25.writeFloat((float) 0, decimalFormat37);
        boolean boolean39 = jSONWriter25.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter41);
        boolean boolean43 = jSONWriter41.utf16;
        jSONWriter41.endObject();
        jSONWriter41.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable52 = jSONWriter41.symbolTable;
        double[] doubleArray58 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter41.writeDouble(doubleArray58);
        jSONWriter25.writeDouble(doubleArray58);
        jSONWriter21.writeDouble(doubleArray58);
        byte[] byteArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter21.writeRaw(byteArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(symbolTable52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0, -1.0, 1.0]");
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        boolean boolean18 = jSONWriter3.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteLongAsString;
        boolean boolean20 = jSONWriter3.isEnabled(feature19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteLongAsString + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteLongAsString));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter2.writeTypeName("");
        jSONWriter2.writeBool(false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter8.writeDecimal(bigDecimal11);
        boolean boolean14 = jSONWriter8.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter8.writeArrayNull();
        jSONWriter8.writeChar('a');
        jSONWriter8.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        jSONWriter26.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter43.writeFloat((float) 10, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean54 = jSONWriter49.writeTypeName(byteArray52, (long) 10);
        boolean boolean56 = jSONWriter43.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter26.writeBinary(byteArray52);
        jSONWriter8.writeHex(byteArray52);
        jSONWriter2.writeNameRaw(byteArray52, (long) 'a');
        java.text.DecimalFormat decimalFormat62 = null;
        jSONWriter2.writeDouble((double) (byte) 0, decimalFormat62);
        java.time.LocalDateTime localDateTime64 = null;
        jSONWriter2.writeLocalDateTime(localDateTime64);
        java.time.LocalDateTime localDateTime66 = null;
        jSONWriter2.writeLocalDateTime(localDateTime66);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = null;
        context6.setPropertyPreFilter(propertyPreFilter7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) feature12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray14);
        context6.config(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray14);
        java.io.Reader reader20 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter19.writeString(reader20);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: read string from reader error");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter19);
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray4);
        java.time.ZoneId zoneId7 = null;
        context6.setZoneId(zoneId7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        boolean boolean13 = jSONWriter11.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter15.writeDouble(1.0d, decimalFormat19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean27 = jSONWriter22.writeTypeName(byteArray25, (long) 10);
        jSONWriter15.writeStringLatin1(byteArray25);
        jSONWriter11.writeStringLatin1(byteArray25);
        int int30 = jSONWriter11.level();
        boolean boolean31 = jSONWriter11.isBeanToArray();
        jSONWriter11.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        byte[] byteArray43 = new byte[] { (byte) -1 };
        boolean boolean45 = jSONWriter36.writeTypeName(byteArray43, 0L);
        java.util.UUID uUID46 = null;
        jSONWriter36.writeUUID(uUID46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = jSONWriter36.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context48);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context48, symbolTable50);
        com.alibaba.fastjson2.SymbolTable symbolTable52 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class58 = null;
        boolean boolean60 = jSONWriter53.isWriteTypeInfo((java.lang.Object) jSONWriter55, class58, (long) ' ');
        byte[] byteArray62 = new byte[] { (byte) -1 };
        boolean boolean64 = jSONWriter55.writeTypeName(byteArray62, 0L);
        java.util.UUID uUID65 = null;
        jSONWriter55.writeUUID(uUID65);
        com.alibaba.fastjson2.JSONWriter.Context context67 = jSONWriter55.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context67);
        java.time.LocalTime localTime69 = null;
        jSONWriter68.writeLocalTime(localTime69);
        boolean boolean71 = jSONWriter68.isBeanToArray();
        boolean boolean72 = jSONWriter68.isIgnoreNoneSerializable();
        byte[] byteArray73 = jSONWriter68.getBytes();
        boolean boolean75 = jSONWriter51.writeTypeName(byteArray73, (long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString;
        boolean boolean77 = jSONWriter51.isWriteTypeInfo((java.lang.Object) feature76);
        boolean boolean78 = jSONWriter11.isEnabled(feature76);
        boolean boolean79 = context6.isEnabled(feature76);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter80 = context6.getContextNameFilter();
        boolean boolean82 = context6.isEnabled((long) (byte) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(context48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(context67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(contextNameFilter80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path4.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        boolean boolean29 = path4.equals((java.lang.Object) context23);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = context23.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = null;
        context23.setNameFilter(nameFilter31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context23);
        boolean boolean34 = jSONWriter33.utf8;
        jSONWriter33.writeBooleanNull();
        jSONWriter33.writeDateTime14((int) '#', (int) (short) 10, 0, 12, 3, (int) (short) 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1]" + "'", str7, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(afterFilter30);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        long long10 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter1.writeNameRaw(byteArray21);
        java.time.ZonedDateTime zonedDateTime25 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        java.util.UUID uUID43 = null;
        jSONWriter33.writeUUID(uUID43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter33.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter46 = context45.getPropertyFilter();
        long long47 = context45.getFeatures();
        long long48 = context45.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter49 = context45.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context45, symbolTable50);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter52 = context45.getAfterFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter53 = null;
        context45.setContextValueFilter(contextValueFilter53);
        java.lang.String str55 = jSONWriter28.setPath((int) (short) 100, (java.lang.Object) contextValueFilter53);
        com.alibaba.fastjson2.SymbolTable symbolTable56 = jSONWriter28.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable58 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        boolean boolean63 = jSONWriter61.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class64 = null;
        boolean boolean66 = jSONWriter59.isWriteTypeInfo((java.lang.Object) jSONWriter61, class64, (long) ' ');
        byte[] byteArray68 = new byte[] { (byte) -1 };
        boolean boolean70 = jSONWriter61.writeTypeName(byteArray68, 0L);
        java.util.UUID uUID71 = null;
        jSONWriter61.writeUUID(uUID71);
        com.alibaba.fastjson2.JSONWriter.Context context73 = jSONWriter61.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter74 = context73.getPropertyFilter();
        long long75 = context73.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter76 = null;
        context73.setLabelFilter(labelFilter76);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider78 = context73.provider;
        com.alibaba.fastjson2.JSONWriter.Context context79 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider78);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter80 = null;
        context79.setAfterFilter(afterFilter80);
        java.time.ZoneId zoneId82 = context79.getZoneId();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter83 = context79.getLabelFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter84 = context79.getContextValueFilter();
        java.lang.String str85 = jSONWriter28.setPath(0, (java.lang.Object) contextValueFilter84);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertNull(propertyFilter46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNull(contextValueFilter49);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNull(afterFilter52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(symbolTable56);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(context73);
        org.junit.Assert.assertNull(propertyFilter74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider78);
        org.junit.Assert.assertNotNull(zoneId82);
        org.junit.Assert.assertNull(labelFilter83);
        org.junit.Assert.assertNull(contextValueFilter84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter19 = null;
        context15.setBeforeFilter(beforeFilter19);
        boolean boolean21 = context15.isFormatyyyyMMddhhmmss19();
        java.lang.String str22 = context15.getDateFormat();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(context15);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = null;
        context15.setPropertyPreFilter(propertyPreFilter22);
        java.lang.Class<?> wildcardClass24 = context15.getClass();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        java.util.UUID uUID14 = null;
        jSONWriter4.writeUUID(uUID14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter4.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter17 = context16.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context16.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter19 = context16.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray21);
        context16.config(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context("[1]", featureArray21);
        boolean boolean27 = context26.isDateFormatUnixTime();
        context26.setDateFormat("$");
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(propertyFilter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(afterFilter19);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        java.lang.String str23 = jSONWriter1.setPath(10, (java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter38.writeDouble(1.0d, decimalFormat42);
        boolean boolean45 = jSONWriter38.removeReference((java.lang.Object) (short) -1);
        jSONWriter38.writeArrayNull();
        long long47 = jSONWriter38.getFeatures();
        java.lang.Class<?> wildcardClass48 = jSONWriter38.getClass();
        boolean boolean50 = jSONWriter25.isWriteTypeInfo((java.lang.Object) boolean36, (java.lang.reflect.Type) wildcardClass48, 0L);
        jSONWriter25.writeStringNull();
        char[] charArray52 = new char[] {};
        jSONWriter25.writeString(charArray52);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(charArray52, 12, (int) '#', true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[]");
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter18.writeInt16((short) (byte) 100);
        boolean boolean34 = jSONWriter18.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        boolean boolean55 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean34, (java.lang.reflect.Type) wildcardClass51, (long) (byte) -1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter56 = null;
        com.alibaba.fastjson2.JSONWriter.Path path57 = null;
        com.alibaba.fastjson2.JSONWriter.Path path59 = new com.alibaba.fastjson2.JSONWriter.Path(path57, "");
        com.alibaba.fastjson2.JSONWriter.Path path61 = new com.alibaba.fastjson2.JSONWriter.Path(path59, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path63 = new com.alibaba.fastjson2.JSONWriter.Path(path61, "hi!");
        java.lang.String str64 = path61.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class71 = null;
        boolean boolean73 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter68, class71, (long) ' ');
        byte[] byteArray75 = new byte[] { (byte) -1 };
        boolean boolean77 = jSONWriter68.writeTypeName(byteArray75, 0L);
        java.util.UUID uUID78 = null;
        jSONWriter68.writeUUID(uUID78);
        com.alibaba.fastjson2.JSONWriter.Context context80 = jSONWriter68.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter81 = context80.getPropertyFilter();
        long long82 = context80.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter83 = null;
        context80.setLabelFilter(labelFilter83);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider85 = context80.provider;
        boolean boolean86 = path61.equals((java.lang.Object) context80);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context80.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter88 = null;
        context80.setNameFilter(nameFilter88);
        java.lang.String str90 = jSONWriter1.setPath(fieldWriter56, (java.lang.Object) context80);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter91 = context80.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter92 = null;
        context80.setContextValueFilter(contextValueFilter92);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter94 = context80.getValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter95 = null;
        context80.setPropertyFilter(propertyFilter95);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[1]" + "'", str64, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(context80);
        org.junit.Assert.assertNull(propertyFilter81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(afterFilter87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(contextValueFilter91);
        org.junit.Assert.assertNull(valueFilter94);
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        boolean boolean3 = jSONWriter2.isRefDetect();
        java.lang.String str6 = jSONWriter2.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter8);
        long long10 = jSONWriter8.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter13.writeDouble(1.0d, decimalFormat17);
        boolean boolean20 = jSONWriter13.removeReference((java.lang.Object) (short) -1);
        jSONWriter13.writeArrayNull();
        long long22 = jSONWriter13.getFeatures();
        java.lang.Class<?> wildcardClass23 = jSONWriter13.getClass();
        boolean boolean25 = jSONWriter8.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass23, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter26 = jSONWriter2.getObjectWriter((java.lang.Class) wildcardClass23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter28);
        long long30 = jSONWriter28.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat37 = null;
        jSONWriter33.writeDouble(1.0d, decimalFormat37);
        boolean boolean40 = jSONWriter33.removeReference((java.lang.Object) (short) -1);
        jSONWriter33.writeArrayNull();
        long long42 = jSONWriter33.getFeatures();
        java.lang.Class<?> wildcardClass43 = jSONWriter33.getClass();
        boolean boolean45 = jSONWriter28.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass43, (long) (short) 10);
        int[] intArray52 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter28.writeInt32(intArray52);
        double[] doubleArray58 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter28.writeDouble(doubleArray58);
        java.text.DecimalFormat decimalFormat60 = null;
        jSONWriter2.writeDouble(doubleArray58, decimalFormat60);
        jSONWriter2.writeStringNull();
        boolean boolean63 = jSONWriter2.isBeanToArray();
        java.time.ZonedDateTime zonedDateTime64 = null;
        jSONWriter2.writeZonedDateTime(zonedDateTime64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        com.alibaba.fastjson2.JSONWriter.Context context72 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray69);
        com.alibaba.fastjson2.JSONWriter.Context context73 = new com.alibaba.fastjson2.JSONWriter.Context("[1][0]", featureArray69);
        com.alibaba.fastjson2.JSONWriter.Context context74 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray69);
        jSONWriter2.config(featureArray69);
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context("[1].hi\\![35][100]", featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objectWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter71);
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path4.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        boolean boolean29 = path4.equals((java.lang.Object) context23);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = context23.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = null;
        context23.setNameFilter(nameFilter31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context23);
        boolean boolean34 = jSONWriter33.utf8;
        boolean boolean35 = jSONWriter33.jsonb;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1]" + "'", str7, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(afterFilter30);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        boolean boolean17 = jSONWriter3.jsonb;
        java.lang.Enum enum18 = null;
        jSONWriter3.writeEnum(enum18);
        jSONWriter3.writeSymbol("[52]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeChar('#');
        java.time.ZonedDateTime zonedDateTime15 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime15);
        int int17 = jSONWriter3.size();
        boolean boolean18 = jSONWriter3.isUTF8();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter.Context context8 = jSONWriter1.getContext();
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter1.getContext();
        jSONWriter1.writeStringNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(context8);
        org.junit.Assert.assertNotNull(context9);
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        jSONWriter3.close();
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter3.writeFloat((float) 10, decimalFormat6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean14 = jSONWriter9.writeTypeName(byteArray12, (long) 10);
        boolean boolean16 = jSONWriter3.writeTypeName(byteArray12, (long) (byte) 100);
        jSONWriter1.writeNameRaw(byteArray12, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter20);
        boolean boolean22 = jSONWriter20.utf16;
        jSONWriter20.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray26 = null;
        jSONWriter25.writeDouble(doubleArray26);
        jSONWriter25.writeArrayNull();
        short[] shortArray32 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter25.writeInt16(shortArray32);
        java.lang.String str34 = jSONWriter20.setPath(fieldWriter24, (java.lang.Object) jSONWriter25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        java.lang.reflect.Type type38 = null;
        boolean boolean40 = jSONWriter36.isWriteTypeInfo((java.lang.Object) (byte) 1, type38, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        jSONWriter42.close();
        jSONWriter42.writeSymbol("");
        jSONWriter42.writeBooleanNull();
        boolean boolean47 = jSONWriter42.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter49);
        long long51 = jSONWriter49.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter54.writeDouble(1.0d, decimalFormat58);
        boolean boolean61 = jSONWriter54.removeReference((java.lang.Object) (short) -1);
        jSONWriter54.writeArrayNull();
        long long63 = jSONWriter54.getFeatures();
        java.lang.Class<?> wildcardClass64 = jSONWriter54.getClass();
        boolean boolean66 = jSONWriter49.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass64, (long) (short) 10);
        jSONWriter36.checkAndWriteTypeName((java.lang.Object) jSONWriter42, (java.lang.Class) wildcardClass64);
        jSONWriter42.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        jSONWriter71.close();
        jSONWriter71.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray76 = null;
        jSONWriter75.writeDouble(doubleArray76);
        jSONWriter75.writeArrayNull();
        short[] shortArray82 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter75.writeInt16(shortArray82);
        jSONWriter71.writeInt16(shortArray82);
        jSONWriter42.writeInt16(shortArray82);
        jSONWriter25.writeInt16(shortArray82);
        jSONWriter1.writeInt16(shortArray82);
        jSONWriter1.writeInt16((short) (byte) 0);
        int int90 = jSONWriter1.level();
        java.text.DecimalFormat decimalFormat92 = null;
        jSONWriter1.writeFloat((float) 'a', decimalFormat92);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[0, 0, 100]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.startArray((int) (short) 1);
        java.time.Instant instant12 = null;
        jSONWriter1.writeInstant(instant12);
        double[] doubleArray14 = null;
        jSONWriter1.writeDouble(doubleArray14);
        jSONWriter1.writeArrayNull();
        byte[] byteArray17 = null;
        jSONWriter1.writeHex(byteArray17);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context("[1][0]", featureArray2);
        long long7 = context6.getFeatures();
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        boolean boolean25 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context15.provider;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        context15.setDateFormat("[1]");
        com.alibaba.fastjson2.filter.LabelFilter labelFilter30 = null;
        context15.setLabelFilter(labelFilter30);
        boolean boolean32 = context15.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context15.getProvider();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        boolean boolean4 = jSONWriter1.hasFilter();
        jSONWriter1.writeArrayNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray5);
        com.alibaba.fastjson2.filter.NameFilter nameFilter9 = context8.getNameFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter10 = context8.getContextNameFilter();
        java.time.format.DateTimeFormatter dateTimeFormatter11 = context8.getDateFormatter();
        boolean boolean12 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter13 = null;
        context8.setAfterFilter(afterFilter13);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNull(nameFilter9);
        org.junit.Assert.assertNull(contextNameFilter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat9 = null;
        jSONWriter5.writeDouble(1.0d, decimalFormat9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean17 = jSONWriter12.writeTypeName(byteArray15, (long) 10);
        jSONWriter5.writeStringLatin1(byteArray15);
        jSONWriter1.writeStringLatin1(byteArray15);
        int int20 = jSONWriter1.level();
        boolean boolean21 = jSONWriter1.isBeanToArray();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        jSONWriter1.config(feature23, true);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        boolean boolean28 = jSONWriter27.isRefDetect();
        java.lang.String str31 = jSONWriter27.setPath("hi!", (java.lang.Object) 1);
        jSONWriter27.writeReference("hi!");
        boolean boolean34 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) "hi!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeInt8((byte) 1);
        jSONWriter1.writeChar('a');
        jSONWriter1.writeRaw((byte) -1);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter1.writeFloat((float) (byte) -1, decimalFormat14);
        boolean boolean16 = jSONWriter1.utf16;
        boolean boolean17 = jSONWriter1.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context16, symbolTable17);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter19 = context16.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.of(context16);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNull(valueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Context context18 = jSONWriter1.getContext();
        boolean boolean20 = context18.isEnabled((long) (short) 100);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter21 = null;
        context18.setLabelFilter(labelFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = context18.getNameFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter24 = context18.getContextValueFilter();
        boolean boolean25 = context18.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter26 = context18.getContextValueFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(context18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(nameFilter23);
        org.junit.Assert.assertNull(contextValueFilter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(contextValueFilter26);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        boolean boolean17 = jSONWriter3.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) feature20);
        boolean boolean22 = jSONWriter19.hasFilter();
        jSONWriter19.endArray();
        boolean boolean24 = jSONWriter3.isWriteTypeInfo((java.lang.Object) jSONWriter19);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter19.config(feature25, true);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context15.setContextValueFilter(contextValueFilter17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = context34.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider36 = context34.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter37 = context34.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray39);
        context34.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        context15.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray39);
        jSONWriter46.writeInt64((long) 8);
        java.time.Instant instant49 = null;
        jSONWriter46.writeInstant(instant49);
        boolean boolean52 = jSONWriter46.isEnabled((long) (byte) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNull(propertyFilter35);
        org.junit.Assert.assertNotNull(objectWriterProvider36);
        org.junit.Assert.assertNull(afterFilter37);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        java.lang.String str20 = context15.getDateFormat();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter21 = context15.getValueFilter();
        java.time.format.DateTimeFormatter dateTimeFormatter22 = context15.getDateFormatter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = context15.getPropertyPreFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(valueFilter21);
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(propertyPreFilter23);
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal13 = null;
        jSONWriter10.writeDecimal(bigDecimal13);
        boolean boolean16 = jSONWriter10.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter10.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        char[] charArray25 = new char[] { '#', ' ' };
        jSONWriter22.writeString(charArray25, (int) (byte) 0, (int) (short) 1);
        jSONWriter10.writeString(charArray25);
        jSONWriter0.writeString(charArray25);
        jSONWriter0.writeRaw((byte) 0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#,  ]");
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context15.setContextValueFilter(contextValueFilter17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = context34.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider36 = context34.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter37 = context34.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray39);
        context34.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        context15.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray39);
        jSONWriter46.writeInt64((long) 8);
        java.nio.charset.Charset charset49 = jSONWriter46.getCharset();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNull(propertyFilter35);
        org.junit.Assert.assertNotNull(objectWriterProvider36);
        org.junit.Assert.assertNull(afterFilter37);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(charset49);
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateTime14((int) (short) 10, (int) (byte) -1, 0, (int) (byte) 100, (int) (short) -1, 5);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter1.writeBigInt(bigInteger14);
        boolean boolean16 = jSONWriter1.utf16;
        java.math.BigInteger bigInteger17 = null;
        jSONWriter1.writeBigInt(bigInteger17, (long) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter21.writeDecimal(bigDecimal24);
        java.lang.Object obj26 = null;
        java.lang.Class class27 = null;
        jSONWriter21.checkAndWriteTypeName(obj26, class27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean30 = jSONWriter21.isEnabled(feature29);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = jSONWriter21.symbolTable;
        jSONWriter21.writeInt16((short) (byte) 1);
        jSONWriter21.writeMillis((long) 5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        jSONWriter37.close();
        jSONWriter37.writeSymbol("");
        jSONWriter37.writeBooleanNull();
        jSONWriter37.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class49 = null;
        boolean boolean51 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter46, class49, (long) ' ');
        byte[] byteArray53 = new byte[] { (byte) -1 };
        boolean boolean55 = jSONWriter46.writeTypeName(byteArray53, 0L);
        java.util.UUID uUID56 = null;
        jSONWriter46.writeUUID(uUID56);
        com.alibaba.fastjson2.JSONWriter.Context context58 = jSONWriter46.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context58);
        java.time.format.DateTimeFormatter dateTimeFormatter60 = context58.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider61 = context58.getProvider();
        java.lang.String str62 = context58.getDateFormat();
        boolean boolean63 = jSONWriter37.removeReference((java.lang.Object) context58);
        short[] shortArray70 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter37.writeInt16(shortArray70);
        jSONWriter21.writeInt16(shortArray70);
        jSONWriter1.writeInt16(shortArray70);
        com.alibaba.fastjson2.SymbolTable symbolTable74 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable74);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        boolean boolean79 = jSONWriter77.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class80 = null;
        boolean boolean82 = jSONWriter75.isWriteTypeInfo((java.lang.Object) jSONWriter77, class80, (long) ' ');
        byte[] byteArray84 = new byte[] { (byte) -1 };
        boolean boolean86 = jSONWriter77.writeTypeName(byteArray84, 0L);
        java.util.UUID uUID87 = null;
        jSONWriter77.writeUUID(uUID87);
        com.alibaba.fastjson2.JSONWriter.Context context89 = jSONWriter77.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter90 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context89);
        java.time.format.DateTimeFormatter dateTimeFormatter91 = context89.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider92 = context89.getProvider();
        java.lang.String str93 = context89.getDateFormat();
        com.alibaba.fastjson2.JSONWriter jSONWriter94 = com.alibaba.fastjson2.JSONWriter.of(context89);
        java.lang.Class class95 = null;
        boolean boolean96 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter94, class95);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(symbolTable31);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(context58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(objectWriterProvider61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(context89);
        org.junit.Assert.assertNotNull(jSONWriter90);
        org.junit.Assert.assertNull(dateTimeFormatter91);
        org.junit.Assert.assertNotNull(objectWriterProvider92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(jSONWriter94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable5 = jSONWriter1.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Path path6 = null;
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path6, "");
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path8, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path10, 0);
        com.alibaba.fastjson2.SymbolTable symbolTable15 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class21 = null;
        boolean boolean23 = jSONWriter16.isWriteTypeInfo((java.lang.Object) jSONWriter18, class21, (long) ' ');
        byte[] byteArray25 = new byte[] { (byte) -1 };
        boolean boolean27 = jSONWriter18.writeTypeName(byteArray25, 0L);
        jSONWriter18.writeInt8((byte) 1);
        jSONWriter18.endArray();
        jSONWriter18.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        jSONWriter18.endObject();
        boolean boolean39 = path10.equals((java.lang.Object) jSONWriter18);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        boolean boolean50 = jSONWriter41.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable51 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class57 = null;
        boolean boolean59 = jSONWriter52.isWriteTypeInfo((java.lang.Object) jSONWriter54, class57, (long) ' ');
        byte[] byteArray61 = new byte[] { (byte) -1 };
        boolean boolean63 = jSONWriter54.writeTypeName(byteArray61, 0L);
        jSONWriter54.writeInt8((byte) 1);
        jSONWriter54.close();
        boolean boolean67 = jSONWriter41.removeReference((java.lang.Object) jSONWriter54);
        com.alibaba.fastjson2.SymbolTable symbolTable68 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable68);
        boolean[] booleanArray74 = new boolean[] { false, true, true, true };
        jSONWriter69.writeBool(booleanArray74);
        com.alibaba.fastjson2.SymbolTable symbolTable76 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable76);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        boolean boolean81 = jSONWriter79.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class82 = null;
        boolean boolean84 = jSONWriter77.isWriteTypeInfo((java.lang.Object) jSONWriter79, class82, (long) ' ');
        byte[] byteArray86 = new byte[] { (byte) -1 };
        boolean boolean88 = jSONWriter79.writeTypeName(byteArray86, 0L);
        jSONWriter69.writeBinary(byteArray86);
        jSONWriter41.writeRaw(byteArray86);
        boolean boolean91 = path10.equals((java.lang.Object) byteArray86);
        java.lang.Object obj92 = null;
        boolean boolean93 = path10.equals(obj92);
        java.lang.String str94 = path10.toString();
        boolean boolean95 = jSONWriter1.removeReference((java.lang.Object) path10);
        com.alibaba.fastjson2.JSONWriter.Path path97 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "[1]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNull(symbolTable5);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[1]" + "'", str94, "[1]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        jSONWriter3.endArray();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal21 = null;
        jSONWriter18.writeDecimal(bigDecimal21);
        boolean boolean24 = jSONWriter18.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter18.writeArrayNull();
        jSONWriter18.writeChar('a');
        jSONWriter18.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        jSONWriter36.close();
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter36.writeFloat((float) 10, decimalFormat39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean47 = jSONWriter42.writeTypeName(byteArray45, (long) 10);
        boolean boolean49 = jSONWriter36.writeTypeName(byteArray45, (long) (byte) 100);
        jSONWriter36.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        jSONWriter53.close();
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter53.writeFloat((float) 10, decimalFormat56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean64 = jSONWriter59.writeTypeName(byteArray62, (long) 10);
        boolean boolean66 = jSONWriter53.writeTypeName(byteArray62, (long) (byte) 100);
        jSONWriter36.writeBinary(byteArray62);
        jSONWriter18.writeHex(byteArray62);
        jSONWriter3.writeStringLatin1(byteArray62);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        jSONWriter4.writeSymbol((-1));
        java.lang.String str9 = jSONWriter1.setPath("", (java.lang.Object) jSONWriter4);
        java.time.LocalDateTime localDateTime10 = null;
        jSONWriter4.writeLocalDateTime(localDateTime10);
        java.math.BigDecimal bigDecimal12 = null;
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter4.writeDecimal(bigDecimal12, (long) 13, decimalFormat14);
        java.util.Map map16 = null;
        jSONWriter4.write(map16);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        jSONWriter1.writeSymbol("$");
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeTimeHHMMSS8((int) (short) 0, (int) (byte) 10, 2);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        java.lang.String str19 = context15.getDateFormat();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter21.writeDecimal(bigDecimal24);
        boolean boolean27 = jSONWriter21.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter21.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj32 = null;
        jSONWriter21.startArray(obj32, (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        jSONWriter36.close();
        jSONWriter36.writeSymbol("");
        boolean[] booleanArray41 = new boolean[] { true };
        jSONWriter36.writeBool(booleanArray41);
        jSONWriter21.writeBool(booleanArray41);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter60 = context59.getPropertyFilter();
        long long61 = context59.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter62 = null;
        context59.setLabelFilter(labelFilter62);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context59.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter65 = null;
        context59.setPropertyPreFilter(propertyPreFilter65);
        com.alibaba.fastjson2.filter.NameFilter nameFilter67 = null;
        context59.setNameFilter(nameFilter67);
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean70 = context59.isEnabled(feature69);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider71 = context59.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable72 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable72);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        boolean boolean77 = jSONWriter75.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class78 = null;
        boolean boolean80 = jSONWriter73.isWriteTypeInfo((java.lang.Object) jSONWriter75, class78, (long) ' ');
        byte[] byteArray82 = new byte[] { (byte) -1 };
        boolean boolean84 = jSONWriter75.writeTypeName(byteArray82, 0L);
        java.util.UUID uUID85 = null;
        jSONWriter75.writeUUID(uUID85);
        com.alibaba.fastjson2.JSONWriter.Context context87 = jSONWriter75.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter88 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context87);
        java.time.format.DateTimeFormatter dateTimeFormatter89 = context87.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider90 = context87.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray91 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter92 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray91);
        com.alibaba.fastjson2.JSONWriter.Context context93 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray91);
        com.alibaba.fastjson2.JSONWriter jSONWriter94 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray91);
        com.alibaba.fastjson2.JSONWriter jSONWriter95 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider90, featureArray91);
        com.alibaba.fastjson2.JSONWriter.Context context96 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider71, featureArray91);
        jSONWriter21.config(featureArray91);
        com.alibaba.fastjson2.JSONWriter jSONWriter98 = com.alibaba.fastjson2.JSONWriter.of(featureArray91);
        context15.config(featureArray91);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[true]");
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNull(propertyFilter60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider71);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(context87);
        org.junit.Assert.assertNotNull(jSONWriter88);
        org.junit.Assert.assertNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(objectWriterProvider90);
        org.junit.Assert.assertNotNull(featureArray91);
        org.junit.Assert.assertNotNull(jSONWriter92);
        org.junit.Assert.assertNotNull(jSONWriter94);
        org.junit.Assert.assertNotNull(jSONWriter95);
        org.junit.Assert.assertNotNull(jSONWriter98);
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter0.getContext();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter10 = context9.getBeforeFilter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertNull(beforeFilter10);
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        boolean boolean19 = jSONWriter9.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        jSONWriter22.writeTypeName("");
        boolean boolean25 = jSONWriter22.isUseSingleQuotes();
        jSONWriter22.startObject();
        boolean boolean27 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter22);
        jSONWriter9.writeInt32((int) (byte) 0);
        jSONWriter9.writeNumberNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        jSONWriter1.writeDateTime19(100, 10, 10, (int) (byte) 0, (int) 'a', (int) (short) 1);
        boolean boolean15 = jSONWriter1.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean22 = jSONWriter17.writeTypeName(byteArray20, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter24);
        long long26 = jSONWriter24.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat33 = null;
        jSONWriter29.writeDouble(1.0d, decimalFormat33);
        boolean boolean36 = jSONWriter29.removeReference((java.lang.Object) (short) -1);
        jSONWriter29.writeArrayNull();
        long long38 = jSONWriter29.getFeatures();
        java.lang.Class<?> wildcardClass39 = jSONWriter29.getClass();
        boolean boolean41 = jSONWriter24.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass39, (long) (short) 10);
        int[] intArray48 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter24.writeInt32(intArray48);
        jSONWriter17.writeInt32(intArray48);
        java.math.BigDecimal bigDecimal51 = null;
        jSONWriter17.writeDecimal(bigDecimal51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter54.writeDouble(1.0d, decimalFormat58);
        boolean boolean61 = jSONWriter54.removeReference((java.lang.Object) (short) -1);
        jSONWriter54.writeArrayNull();
        jSONWriter54.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class71 = null;
        boolean boolean73 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter68, class71, (long) ' ');
        char[] charArray74 = new char[] {};
        jSONWriter68.writeString(charArray74);
        jSONWriter54.writeString(charArray74, (int) (byte) -1, 0, true);
        jSONWriter17.writeString(charArray74);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw(charArray74);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[]");
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context38.config(feature39, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) feature44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature44 };
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray46);
        context38.config(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        jSONWriter3.config(featureArray46);
        com.alibaba.fastjson2.SymbolTable symbolTable52 = jSONWriter3.symbolTable;
        jSONWriter3.writeNumberNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNull(symbolTable52);
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider23 = context15.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        java.util.UUID uUID37 = null;
        jSONWriter27.writeUUID(uUID37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = jSONWriter27.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context39);
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context39, symbolTable41);
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class49 = null;
        boolean boolean51 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter46, class49, (long) ' ');
        byte[] byteArray53 = new byte[] { (byte) -1 };
        boolean boolean55 = jSONWriter46.writeTypeName(byteArray53, 0L);
        java.util.UUID uUID56 = null;
        jSONWriter46.writeUUID(uUID56);
        com.alibaba.fastjson2.JSONWriter.Context context58 = jSONWriter46.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context58);
        java.time.format.DateTimeFormatter dateTimeFormatter60 = context58.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider61 = context58.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean65 = jSONWriter63.isRefDetect((java.lang.Object) feature64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature64 };
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider61, featureArray66);
        context39.config(featureArray66);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray66);
        com.alibaba.fastjson2.JSONWriter.Context context72 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider23, featureArray66);
        long long73 = context72.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider23);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(context39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(context58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(objectWriterProvider61);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 137438953472L + "'", long73 == 137438953472L);
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.util.List list3 = null;
        jSONWriter1.write(list3);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        boolean boolean9 = jSONWriter1.containsReference((java.lang.Object) boolean8);
        jSONWriter1.writeStringNull();
        com.alibaba.fastjson2.JSONObject jSONObject11 = null;
        jSONWriter1.write(jSONObject11);
        boolean boolean13 = jSONWriter1.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context22.setPropertyFilter(propertyFilter23);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22, symbolTable25);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context22.getContextValueFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        jSONWriter29.close();
        jSONWriter29.writeSymbol("");
        jSONWriter29.startObject();
        boolean boolean34 = jSONWriter29.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        java.lang.String str37 = jSONWriter29.setPath("", (java.lang.Object) feature36);
        context22.config(feature36, false);
        java.lang.String str40 = context22.getDateFormat();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider41 = context22.provider;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(objectWriterProvider41);
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean6 = jSONWriter1.writeTypeName(byteArray4, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter8);
        long long10 = jSONWriter8.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter13.writeDouble(1.0d, decimalFormat17);
        boolean boolean20 = jSONWriter13.removeReference((java.lang.Object) (short) -1);
        jSONWriter13.writeArrayNull();
        long long22 = jSONWriter13.getFeatures();
        java.lang.Class<?> wildcardClass23 = jSONWriter13.getClass();
        boolean boolean25 = jSONWriter8.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass23, (long) (short) 10);
        int[] intArray32 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter8.writeInt32(intArray32);
        jSONWriter1.writeInt32(intArray32);
        java.math.BigDecimal bigDecimal35 = null;
        jSONWriter1.writeDecimal(bigDecimal35);
        jSONWriter1.writeMillis((long) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path10 = path9.parent;
        com.alibaba.fastjson2.JSONWriter.Path path11 = path10.parent;
        com.alibaba.fastjson2.JSONWriter.Path path13 = new com.alibaba.fastjson2.JSONWriter.Path(path11, 13);
        java.lang.String str14 = path13.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1][13]" + "'", str14, "[1][13]");
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) 100 };
        boolean boolean24 = jSONWriter13.writeTypeName(byteArray22, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        int[] intArray30 = new int[] { (short) -1 };
        jSONWriter28.writeInt32(intArray30);
        java.lang.String str32 = jSONWriter13.setPath("hi!", (java.lang.Object) intArray30);
        jSONWriter1.writeInt32(intArray30);
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        int[] intArray60 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter36.writeInt32(intArray60);
        jSONWriter1.writeInt32(intArray60);
        jSONWriter1.writeDateYYYMMDD8((int) (short) 100, (int) (byte) 100, 8);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        boolean boolean11 = jSONWriter1.isBeanToArray();
        int int12 = jSONWriter1.level();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeInt8((byte) 1);
        jSONWriter1.writeChar('a');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter20);
        boolean boolean22 = jSONWriter20.utf16;
        long long24 = jSONWriter20.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = jSONWriter20.getSymbolTable();
        boolean boolean26 = jSONWriter12.isIgnoreNoneSerializable((java.lang.Object) jSONWriter20);
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) 100 };
        boolean boolean39 = jSONWriter28.writeTypeName(byteArray37, (long) (-1));
        jSONWriter20.writeNameRaw(byteArray37, (long) (short) 100);
        boolean boolean43 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter20, (long) 8);
        jSONWriter1.writeMillis(32L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNull(symbolTable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        context15.setDateFormat("");
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter20 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter21 = null;
        context15.setNameFilter(nameFilter21);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context15.setPropertyFilter(propertyFilter23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(propertyFilter20);
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray4);
        java.time.ZoneId zoneId7 = null;
        context6.setZoneId(zoneId7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter20);
        boolean boolean22 = jSONWriter20.utf16;
        long long24 = jSONWriter20.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = jSONWriter20.getSymbolTable();
        boolean boolean26 = jSONWriter12.isIgnoreNoneSerializable((java.lang.Object) jSONWriter20);
        boolean boolean27 = jSONWriter12.isUTF16();
        jSONWriter12.writeArrayNull();
        java.lang.String str29 = jSONWriter9.setPath("", (java.lang.Object) jSONWriter12);
        java.time.Instant instant30 = null;
        jSONWriter9.writeInstant(instant30);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNull(symbolTable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = null;
        context6.setPropertyPreFilter(propertyPreFilter7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) feature12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray14);
        context6.config(featureArray14);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = context34.getPropertyFilter();
        long long36 = context34.getFeatures();
        long long37 = context34.getFeatures();
        boolean boolean38 = context34.isDateFormatHasHour();
        java.time.ZoneId zoneId39 = context34.getZoneId();
        java.time.ZoneId zoneId40 = context34.getZoneId();
        context6.setZoneId(zoneId40);
        boolean boolean42 = context6.isDateFormatMillis();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNull(propertyFilter35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneId39);
        org.junit.Assert.assertNotNull(zoneId40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        short[] shortArray34 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt16(shortArray34);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) -1 };
        boolean boolean49 = jSONWriter40.writeTypeName(byteArray47, 0L);
        java.util.UUID uUID50 = null;
        jSONWriter40.writeUUID(uUID50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter40.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context52);
        java.time.format.DateTimeFormatter dateTimeFormatter54 = context52.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider55 = context52.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context56 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider55);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter57 = null;
        context56.setAfterFilter(afterFilter57);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter59 = null;
        context56.setContextValueFilter(contextValueFilter59);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter61 = null;
        context56.setBeforeFilter(beforeFilter61);
        boolean boolean63 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) context56);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(objectWriterProvider55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) 100 };
        boolean boolean24 = jSONWriter13.writeTypeName(byteArray22, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        int[] intArray30 = new int[] { (short) -1 };
        jSONWriter28.writeInt32(intArray30);
        java.lang.String str32 = jSONWriter13.setPath("hi!", (java.lang.Object) intArray30);
        jSONWriter1.writeInt32(intArray30);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter35.isWriteTypeInfo((java.lang.Object) jSONWriter37, class40, (long) ' ');
        byte[] byteArray44 = new byte[] { (byte) -1 };
        boolean boolean46 = jSONWriter37.writeTypeName(byteArray44, 0L);
        java.util.UUID uUID47 = null;
        jSONWriter37.writeUUID(uUID47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = jSONWriter37.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context49);
        java.time.LocalTime localTime51 = null;
        jSONWriter50.writeLocalTime(localTime51);
        boolean boolean53 = jSONWriter50.isBeanToArray();
        boolean boolean54 = jSONWriter50.isIgnoreNoneSerializable();
        byte[] byteArray55 = jSONWriter50.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty;
        jSONWriter50.config(feature56, false);
        jSONWriter1.writeEnum((java.lang.Enum) feature56);
        jSONWriter1.writeNumberNull();
        jSONWriter1.writeChar('4');
        boolean boolean63 = jSONWriter1.isWriteNulls();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(context49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-81]");
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        java.time.LocalDateTime localDateTime4 = null;
        jSONWriter1.writeLocalDateTime(localDateTime4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter7);
        boolean boolean9 = jSONWriter7.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter11.writeDouble(1.0d, decimalFormat15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean23 = jSONWriter18.writeTypeName(byteArray21, (long) 10);
        jSONWriter11.writeStringLatin1(byteArray21);
        jSONWriter7.writeStringLatin1(byteArray21);
        jSONWriter1.writeBinary(byteArray21);
        jSONWriter1.close();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        boolean boolean7 = jSONWriter1.isUTF16();
        jSONWriter1.writeMillis(100L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        long long13 = jSONWriter11.getFeatures();
        java.time.LocalDateTime localDateTime14 = null;
        jSONWriter11.writeLocalDateTime(localDateTime14);
        byte[] byteArray16 = jSONWriter11.getBytes();
        jSONWriter11.writeDateYYYMMDD8((int) (byte) 0, 0, (int) '#');
        jSONWriter11.writeNull();
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        boolean boolean32 = jSONWriter23.isEnabled((long) ' ');
        jSONWriter23.writeString("hi!");
        boolean boolean35 = jSONWriter23.isUTF8();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        jSONWriter23.writeString((java.util.List<java.lang.String>) strList39);
        jSONWriter23.writeRaw((byte) -1);
        java.math.BigInteger bigInteger44 = null;
        jSONWriter23.writeBigInt(bigInteger44, (long) '#');
        java.lang.Class<?> wildcardClass47 = jSONWriter23.getClass();
        boolean boolean48 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter11, (java.lang.reflect.Type) wildcardClass47);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context22.getProvider();
        java.lang.String str25 = jSONWriter1.setPath("$", (java.lang.Object) context22);
        boolean boolean26 = jSONWriter1.isRefDetect();
        java.io.Reader reader27 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader27);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.of(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) '4');
        java.lang.String str9 = path8.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        java.util.UUID uUID23 = null;
        jSONWriter13.writeUUID(uUID23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter13.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context25);
        java.time.LocalTime localTime27 = null;
        jSONWriter26.writeLocalTime(localTime27);
        jSONWriter26.writeInt8((byte) -1);
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName;
        boolean boolean32 = jSONWriter26.isEnabled(feature31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal37 = null;
        jSONWriter34.writeDecimal(bigDecimal37);
        boolean boolean40 = jSONWriter34.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter34.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj45 = null;
        jSONWriter34.startArray(obj45, (-1));
        jSONWriter34.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray57 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        jSONWriter34.writeString((java.util.List<java.lang.String>) strList58);
        jSONWriter26.write((java.util.List) strList58);
        boolean boolean62 = path8.equals((java.lang.Object) jSONWriter26);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52]" + "'", str9, "[52]");
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.startArray((int) (short) 1);
        jSONWriter1.endArray();
        java.nio.charset.Charset charset13 = jSONWriter1.getCharset();
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        jSONWriter17.close();
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter17.writeFloat((float) 10, decimalFormat20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean28 = jSONWriter23.writeTypeName(byteArray26, (long) 10);
        boolean boolean30 = jSONWriter17.writeTypeName(byteArray26, (long) (byte) 100);
        jSONWriter15.writeNameRaw(byteArray26, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        char[] charArray37 = new char[] { '#', ' ' };
        jSONWriter34.writeString(charArray37, (int) (byte) 0, (int) (short) 1);
        jSONWriter15.writeString(charArray37);
        jSONWriter15.writeInt16((short) 10);
        boolean boolean44 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#,  ]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter5.writeFloat((float) 4, decimalFormat7);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        boolean boolean16 = jSONWriter1.isUTF16();
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        boolean boolean27 = jSONWriter18.isEnabled((long) ' ');
        jSONWriter18.writeString("hi!");
        boolean boolean30 = jSONWriter18.isUTF8();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        jSONWriter18.writeString((java.util.List<java.lang.String>) strList34);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue;
        boolean boolean38 = jSONWriter18.isEnabled(feature37);
        jSONWriter1.popPath((java.lang.Object) feature37);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw(' ', '#');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) feature20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray22);
        jSONWriter17.config(featureArray22);
        context13.config(featureArray22);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter27 = context13.getContextNameFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter28 = null;
        context13.setPropertyPreFilter(propertyPreFilter28);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(contextNameFilter27);
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        boolean boolean27 = context15.isDateFormatHasDay();
        boolean boolean29 = context15.isEnabled(97L);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter30 = null;
        context15.setContextNameFilter(contextNameFilter30);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        boolean boolean6 = jSONWriter5.isWriteNulls();
        jSONWriter5.writeRaw('4', '#');
        boolean boolean11 = jSONWriter5.hasFilter(137438953482L);
        jSONWriter5.writeDateTime19((-1), (int) 'a', (int) ' ', 10, (int) (byte) 100, 21);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean1 = jSONWriter0.useSingleQuote;
        jSONWriter0.writeRaw(' ');
        jSONWriter0.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Path path5 = null;
        com.alibaba.fastjson2.JSONWriter.Path path7 = new com.alibaba.fastjson2.JSONWriter.Path(path5, "");
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path7, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path9, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path13 = new com.alibaba.fastjson2.JSONWriter.Path(path9, 0);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) -1 };
        boolean boolean26 = jSONWriter17.writeTypeName(byteArray24, 0L);
        jSONWriter17.writeInt8((byte) 1);
        jSONWriter17.endArray();
        jSONWriter17.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        jSONWriter17.endObject();
        boolean boolean38 = path9.equals((java.lang.Object) jSONWriter17);
        com.alibaba.fastjson2.SymbolTable symbolTable39 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class45 = null;
        boolean boolean47 = jSONWriter40.isWriteTypeInfo((java.lang.Object) jSONWriter42, class45, (long) ' ');
        boolean boolean49 = jSONWriter40.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        jSONWriter53.writeInt8((byte) 1);
        jSONWriter53.close();
        boolean boolean66 = jSONWriter40.removeReference((java.lang.Object) jSONWriter53);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        boolean[] booleanArray73 = new boolean[] { false, true, true, true };
        jSONWriter68.writeBool(booleanArray73);
        com.alibaba.fastjson2.SymbolTable symbolTable75 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable75);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray77 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray77);
        boolean boolean80 = jSONWriter78.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class81 = null;
        boolean boolean83 = jSONWriter76.isWriteTypeInfo((java.lang.Object) jSONWriter78, class81, (long) ' ');
        byte[] byteArray85 = new byte[] { (byte) -1 };
        boolean boolean87 = jSONWriter78.writeTypeName(byteArray85, 0L);
        jSONWriter68.writeBinary(byteArray85);
        jSONWriter40.writeRaw(byteArray85);
        boolean boolean90 = path9.equals((java.lang.Object) byteArray85);
        jSONWriter0.writeBase64(byteArray85);
        boolean boolean92 = jSONWriter0.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray73), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(featureArray77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        java.time.ZonedDateTime zonedDateTime34 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime34);
        java.lang.Object obj36 = null;
        boolean boolean37 = jSONWriter1.isWriteTypeInfo(obj36);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.writeInt8((byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = null;
        jSONWriter4.writeDouble(doubleArray5);
        boolean boolean7 = jSONWriter4.utf16;
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter4.writeDecimal(bigDecimal8, 100L);
        boolean boolean11 = jSONWriter4.utf16;
        java.lang.Object obj12 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter4.isWriteTypeInfo(obj12, (java.lang.Class) wildcardClass24, (long) (short) 0);
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter4, (long) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        jSONWriter30.close();
        java.text.DecimalFormat decimalFormat33 = null;
        jSONWriter30.writeFloat((float) 10, decimalFormat33);
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter36.isWriteTypeInfo((java.lang.Object) jSONWriter38, class41, (long) ' ');
        boolean boolean45 = jSONWriter36.isEnabled((long) ' ');
        jSONWriter36.writeString("hi!");
        boolean boolean48 = jSONWriter36.isUTF8();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        jSONWriter36.writeString((java.util.List<java.lang.String>) strList52);
        jSONWriter36.writeRaw((byte) -1);
        java.math.BigInteger bigInteger57 = null;
        jSONWriter36.writeBigInt(bigInteger57, (long) '#');
        byte[] byteArray60 = jSONWriter36.getBytes();
        jSONWriter30.writeHex(byteArray60);
        jSONWriter4.writeRaw(byteArray60);
        boolean boolean63 = jSONWriter4.isUTF8();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[76, 104, 105, 33, -106, 76, 104, 105, 33, 73, -1, -81]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context15.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context15.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        long long31 = jSONWriter29.getFeatures();
        java.time.LocalDateTime localDateTime32 = null;
        jSONWriter29.writeLocalDateTime(localDateTime32);
        byte[] byteArray34 = jSONWriter29.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter29.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27, featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter44);
        boolean boolean46 = jSONWriter44.utf16;
        jSONWriter44.endObject();
        jSONWriter44.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = jSONWriter44.symbolTable;
        double[] doubleArray61 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter44.writeDouble(doubleArray61);
        java.text.DecimalFormat decimalFormat63 = null;
        jSONWriter42.writeDouble(doubleArray61, decimalFormat63);
        jSONWriter42.writeBool(true);
        jSONWriter42.writeDateYYYMMDD10((int) '4', 0, 21);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-81]");
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(symbolTable55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0, -1.0, 1.0]");
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        boolean boolean14 = jSONWriter7.removeReference((java.lang.Object) (short) -1);
        jSONWriter7.writeArrayNull();
        jSONWriter7.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        java.lang.String str20 = jSONWriter7.setPath("hi!", (java.lang.Object) feature19);
        boolean boolean21 = jSONWriter1.isEnabled(feature19);
        int int22 = jSONWriter1.level();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) feature26);
        jSONWriter25.writeInt16((short) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = jSONWriter25.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter39);
        long long41 = jSONWriter39.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat48 = null;
        jSONWriter44.writeDouble(1.0d, decimalFormat48);
        boolean boolean51 = jSONWriter44.removeReference((java.lang.Object) (short) -1);
        jSONWriter44.writeArrayNull();
        long long53 = jSONWriter44.getFeatures();
        java.lang.Class<?> wildcardClass54 = jSONWriter44.getClass();
        boolean boolean56 = jSONWriter39.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass54, (long) (short) 10);
        int[] intArray63 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter39.writeInt32(intArray63);
        jSONWriter32.writeInt32(intArray63);
        jSONWriter25.writeInt32(intArray63);
        jSONWriter1.writeInt32(intArray63);
        jSONWriter1.writeRaw((byte) 100);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(symbolTable30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path0, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, (int) '#');
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter1.writeDecimal(bigDecimal8, (long) (byte) 0);
        jSONWriter1.writeSymbol(4);
        long long13 = jSONWriter1.getFeatures();
        jSONWriter1.writeSymbol("[1][13]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter18.writeInt16((short) (byte) 100);
        boolean boolean34 = jSONWriter18.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        boolean boolean55 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean34, (java.lang.reflect.Type) wildcardClass51, (long) (byte) -1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter56 = null;
        com.alibaba.fastjson2.JSONWriter.Path path57 = null;
        com.alibaba.fastjson2.JSONWriter.Path path59 = new com.alibaba.fastjson2.JSONWriter.Path(path57, "");
        com.alibaba.fastjson2.JSONWriter.Path path61 = new com.alibaba.fastjson2.JSONWriter.Path(path59, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path63 = new com.alibaba.fastjson2.JSONWriter.Path(path61, "hi!");
        java.lang.String str64 = path61.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class71 = null;
        boolean boolean73 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter68, class71, (long) ' ');
        byte[] byteArray75 = new byte[] { (byte) -1 };
        boolean boolean77 = jSONWriter68.writeTypeName(byteArray75, 0L);
        java.util.UUID uUID78 = null;
        jSONWriter68.writeUUID(uUID78);
        com.alibaba.fastjson2.JSONWriter.Context context80 = jSONWriter68.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter81 = context80.getPropertyFilter();
        long long82 = context80.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter83 = null;
        context80.setLabelFilter(labelFilter83);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider85 = context80.provider;
        boolean boolean86 = path61.equals((java.lang.Object) context80);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context80.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter88 = null;
        context80.setNameFilter(nameFilter88);
        java.lang.String str90 = jSONWriter1.setPath(fieldWriter56, (java.lang.Object) context80);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter91 = context80.getContextValueFilter();
        boolean boolean92 = context80.isDateFormatUnixTime();
        boolean boolean93 = context80.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter94 = context80.getPropertyFilter();
        boolean boolean95 = context80.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[1]" + "'", str64, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(context80);
        org.junit.Assert.assertNull(propertyFilter81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(afterFilter87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(contextValueFilter91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(propertyFilter94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        java.time.format.DateTimeFormatter dateTimeFormatter20 = context19.getDateFormatter();
        java.time.format.DateTimeFormatter dateTimeFormatter21 = context19.getDateFormatter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimeFormatter21);
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        jSONWriter1.writeReference("$");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endObject();
        boolean boolean10 = jSONWriter1.useSingleQuote;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        jSONWriter3.writeInt64((long) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        jSONWriter21.close();
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter21.writeFloat((float) 10, decimalFormat24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean32 = jSONWriter27.writeTypeName(byteArray30, (long) 10);
        boolean boolean34 = jSONWriter21.writeTypeName(byteArray30, (long) (byte) 100);
        jSONWriter19.writeNameRaw(byteArray30, 0L);
        jSONWriter3.writeBinary(byteArray30);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        boolean boolean52 = jSONWriter3.writeTypeName(byteArray48, 0L);
        com.alibaba.fastjson2.SymbolTable symbolTable53 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable53);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        boolean boolean58 = jSONWriter56.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class59 = null;
        boolean boolean61 = jSONWriter54.isWriteTypeInfo((java.lang.Object) jSONWriter56, class59, (long) ' ');
        boolean boolean63 = jSONWriter54.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable64 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        boolean boolean69 = jSONWriter67.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class70 = null;
        boolean boolean72 = jSONWriter65.isWriteTypeInfo((java.lang.Object) jSONWriter67, class70, (long) ' ');
        byte[] byteArray74 = new byte[] { (byte) -1 };
        boolean boolean76 = jSONWriter67.writeTypeName(byteArray74, 0L);
        jSONWriter67.writeInt8((byte) 1);
        jSONWriter67.close();
        boolean boolean80 = jSONWriter54.removeReference((java.lang.Object) jSONWriter67);
        jSONWriter54.writeSymbol("$");
        boolean boolean84 = jSONWriter3.isWriteTypeInfo((java.lang.Object) jSONWriter54, (long) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter18 = context15.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean20 = jSONWriter19.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        jSONWriter19.writeAny((java.lang.Object) featureArray21);
        java.nio.charset.Charset charset25 = jSONWriter19.getCharset();
        boolean boolean26 = jSONWriter19.isUTF8();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter19.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(nameFilter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter6.writeDecimal(bigDecimal9);
        boolean boolean12 = jSONWriter6.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter6.writeArrayNull();
        jSONWriter6.writeChar('a');
        jSONWriter6.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter6.writeNull();
        jSONWriter6.writeInt32((int) (short) 1);
        boolean boolean26 = path2.equals((java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Path path28 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1][0]");
        java.lang.String str29 = path28.toString();
        com.alibaba.fastjson2.JSONWriter.Path path30 = path28.parent;
        com.alibaba.fastjson2.JSONWriter.Path path32 = new com.alibaba.fastjson2.JSONWriter.Path(path30, "[1].hi\\![35]");
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + ".\\[1\\]\\[0\\]" + "'", str29, ".\\[1\\]\\[0\\]");
        org.junit.Assert.assertNotNull(path30);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter25 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter26 = null;
        context15.setAfterFilter(afterFilter26);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertNull(valueFilter25);
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context34);
        java.time.format.DateTimeFormatter dateTimeFormatter36 = context34.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider37 = context34.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) feature40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature40 };
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider37, featureArray42);
        context15.config(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.of(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(objectWriterProvider37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter47);
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        java.lang.String str23 = context21.getDateFormat();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        jSONWriter25.close();
        jSONWriter25.writeSymbol("");
        jSONWriter25.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter25.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter31 = null;
        context30.setPropertyPreFilter(propertyPreFilter31);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context30, symbolTable33);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter35 = null;
        context30.setLabelFilter(labelFilter35);
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) -1 };
        boolean boolean49 = jSONWriter40.writeTypeName(byteArray47, 0L);
        java.util.UUID uUID50 = null;
        jSONWriter40.writeUUID(uUID50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter40.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter53 = context52.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider54 = context52.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter55 = context52.getAfterFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        char[] charArray65 = new char[] {};
        jSONWriter59.writeString(charArray65);
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue;
        boolean boolean68 = jSONWriter59.isEnabled(feature67);
        context52.config(feature67, false);
        boolean boolean71 = context30.isEnabled(feature67);
        context21.config(feature67, true);
        java.lang.Class<?> wildcardClass74 = feature67.getClass();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertNull(propertyFilter53);
        org.junit.Assert.assertNotNull(objectWriterProvider54);
        org.junit.Assert.assertNull(afterFilter55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[]");
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        jSONWriter22.writeBool(false);
        com.alibaba.fastjson2.JSONObject jSONObject25 = null;
        jSONWriter22.write(jSONObject25);
        boolean boolean27 = jSONWriter22.utf16;
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter22.writeDouble((double) 1.0f, decimalFormat29);
        jSONWriter22.writeDateTimeISO8601((int) (byte) 100, (-1), (int) (short) -1, 2, (int) (short) 100, 0, (int) (byte) 0, (int) (short) 1, false);
        boolean boolean41 = jSONWriter22.useSingleQuote;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter1.writeDouble((double) 1.0f, decimalFormat7);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        long long22 = jSONWriter12.getFeatures();
        boolean boolean23 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.of(context28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat35 = null;
        jSONWriter31.writeDouble(1.0d, decimalFormat35);
        boolean boolean38 = jSONWriter31.removeReference((java.lang.Object) (short) -1);
        jSONWriter31.writeArrayNull();
        jSONWriter31.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray43 = null;
        jSONWriter42.writeDouble(doubleArray43);
        jSONWriter42.writeArrayNull();
        short[] shortArray49 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter42.writeInt16(shortArray49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal55 = null;
        jSONWriter52.writeDecimal(bigDecimal55);
        boolean boolean58 = jSONWriter52.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter52.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        char[] charArray67 = new char[] { '#', ' ' };
        jSONWriter64.writeString(charArray67, (int) (byte) 0, (int) (short) 1);
        jSONWriter52.writeString(charArray67);
        jSONWriter42.writeString(charArray67);
        jSONWriter31.writeString(charArray67);
        jSONWriter29.writeString(charArray67);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw(charArray67);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[#,  ]");
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        jSONWriter20.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter23.writeDouble(1.0d, decimalFormat27);
        boolean boolean30 = jSONWriter23.removeReference((java.lang.Object) (short) -1);
        jSONWriter23.writeArrayNull();
        long long32 = jSONWriter23.getFeatures();
        java.lang.Class<?> wildcardClass33 = jSONWriter23.getClass();
        boolean boolean34 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter20, (java.lang.reflect.Type) wildcardClass33);
        jSONWriter1.writeMillis((long) '#');
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter1.context;
        long long38 = jSONWriter1.getFeatures();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        jSONWriter1.writeInt8((byte) 0);
        jSONWriter1.writeChar('4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) feature14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14 };
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        java.time.ZoneId zoneId26 = null;
        context25.setZoneId(zoneId26);
        jSONWriter18.popPath((java.lang.Object) context25);
        java.nio.charset.Charset charset29 = jSONWriter18.getCharset();
        jSONWriter18.writeRaw("hi!");
        java.math.BigDecimal bigDecimal32 = null;
        jSONWriter18.writeDecimal(bigDecimal32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter35);
        boolean boolean37 = jSONWriter35.utf16;
        long long39 = jSONWriter35.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = jSONWriter35.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        boolean boolean51 = jSONWriter42.isEnabled((long) ' ');
        jSONWriter42.writeString("hi!");
        char[] charArray54 = new char[] {};
        jSONWriter42.writeString(charArray54);
        jSONWriter35.writeString(charArray54);
        jSONWriter18.writeNameRaw(charArray54);
        jSONWriter1.writeString(charArray54);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNull(symbolTable40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[]");
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter27 = null;
        context26.setContextNameFilter(contextNameFilter27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter29.context;
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        jSONWriter34.writeNull();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter34.writeFloat((float) 0, decimalFormat46);
        boolean boolean48 = jSONWriter34.utf16;
        boolean boolean49 = jSONWriter34.isRefDetect();
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        jSONWriter34.config(feature50, false);
        boolean boolean53 = context30.isEnabled(feature50);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        int[] intArray4 = new int[] { (short) -1 };
        jSONWriter2.writeInt32(intArray4);
        com.alibaba.fastjson2.JSONWriter.Path path6 = null;
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path6, "");
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path8, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path10, 0);
        com.alibaba.fastjson2.SymbolTable symbolTable15 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class21 = null;
        boolean boolean23 = jSONWriter16.isWriteTypeInfo((java.lang.Object) jSONWriter18, class21, (long) ' ');
        byte[] byteArray25 = new byte[] { (byte) -1 };
        boolean boolean27 = jSONWriter18.writeTypeName(byteArray25, 0L);
        jSONWriter18.writeInt8((byte) 1);
        jSONWriter18.endArray();
        jSONWriter18.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        jSONWriter18.endObject();
        boolean boolean39 = path10.equals((java.lang.Object) jSONWriter18);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        boolean boolean50 = jSONWriter41.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable51 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class57 = null;
        boolean boolean59 = jSONWriter52.isWriteTypeInfo((java.lang.Object) jSONWriter54, class57, (long) ' ');
        byte[] byteArray61 = new byte[] { (byte) -1 };
        boolean boolean63 = jSONWriter54.writeTypeName(byteArray61, 0L);
        jSONWriter54.writeInt8((byte) 1);
        jSONWriter54.close();
        boolean boolean67 = jSONWriter41.removeReference((java.lang.Object) jSONWriter54);
        com.alibaba.fastjson2.SymbolTable symbolTable68 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable68);
        boolean[] booleanArray74 = new boolean[] { false, true, true, true };
        jSONWriter69.writeBool(booleanArray74);
        com.alibaba.fastjson2.SymbolTable symbolTable76 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable76);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        boolean boolean81 = jSONWriter79.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class82 = null;
        boolean boolean84 = jSONWriter77.isWriteTypeInfo((java.lang.Object) jSONWriter79, class82, (long) ' ');
        byte[] byteArray86 = new byte[] { (byte) -1 };
        boolean boolean88 = jSONWriter79.writeTypeName(byteArray86, 0L);
        jSONWriter69.writeBinary(byteArray86);
        jSONWriter41.writeRaw(byteArray86);
        boolean boolean91 = path10.equals((java.lang.Object) byteArray86);
        java.lang.Object obj92 = null;
        boolean boolean93 = path10.equals(obj92);
        java.lang.String str94 = path10.toString();
        java.lang.String str95 = path10.toString();
        boolean boolean96 = jSONWriter2.removeReference((java.lang.Object) str95);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1]");
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[1]" + "'", str94, "[1]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[1]" + "'", str95, "[1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        jSONWriter1.writeReference("$");
        jSONWriter1.writeTypeName("$");
        com.alibaba.fastjson2.JSONWriter.Path path10 = null;
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "");
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path12, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path16 = new com.alibaba.fastjson2.JSONWriter.Path(path14, "hi!");
        java.lang.String str17 = path16.toString();
        com.alibaba.fastjson2.JSONWriter.Path path19 = new com.alibaba.fastjson2.JSONWriter.Path(path16, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path21 = new com.alibaba.fastjson2.JSONWriter.Path(path19, (int) (byte) 100);
        jSONWriter1.startArray((java.lang.Object) path21, (int) (byte) 10);
        java.time.LocalDate localDate24 = null;
        jSONWriter1.writeLocalDate(localDate24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1].hi\\!" + "'", str17, "[1].hi\\!");
        org.junit.Assert.assertNotNull(jSONWriter26);
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) feature4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature4 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(".\\[52\\]", featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context("[1]", featureArray6);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter27 = null;
        context15.setAfterFilter(afterFilter27);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context15.provider;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter17 = context16.getContextNameFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter18 = context16.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context16.getContextNameFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(contextNameFilter17);
        org.junit.Assert.assertNull(contextValueFilter18);
        org.junit.Assert.assertNull(contextNameFilter19);
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter25 = context15.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(context15);
        boolean boolean27 = jSONWriter26.isUTF16();
        java.time.Instant instant28 = null;
        jSONWriter26.writeInstant(instant28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        java.time.LocalTime localTime33 = null;
        jSONWriter32.writeLocalTime(localTime33);
        java.time.LocalDateTime localDateTime35 = null;
        jSONWriter32.writeLocalDateTime(localDateTime35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter38);
        boolean boolean40 = jSONWriter38.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter42.writeDouble(1.0d, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean54 = jSONWriter49.writeTypeName(byteArray52, (long) 10);
        jSONWriter42.writeStringLatin1(byteArray52);
        jSONWriter38.writeStringLatin1(byteArray52);
        jSONWriter32.writeBinary(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = jSONWriter26.writeTypeName(byteArray52, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertNull(valueFilter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter1.writeBinary(byteArray27);
        int int33 = jSONWriter1.level();
        jSONWriter1.writeRaw((byte) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        boolean boolean6 = jSONWriter1.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter29 = null;
        context23.setPropertyPreFilter(propertyPreFilter29);
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = null;
        context23.setNameFilter(nameFilter31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean34 = context23.isEnabled(feature33);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider35 = context23.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context51);
        java.time.format.DateTimeFormatter dateTimeFormatter53 = context51.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider54 = context51.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider54, featureArray55);
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider35, featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        java.lang.String str62 = jSONWriter1.setPath((int) (byte) -1, (java.lang.Object) jSONWriter61);
        boolean boolean63 = jSONWriter61.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(objectWriterProvider54);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat9 = null;
        jSONWriter5.writeDouble(1.0d, decimalFormat9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean17 = jSONWriter12.writeTypeName(byteArray15, (long) 10);
        jSONWriter5.writeStringLatin1(byteArray15);
        jSONWriter1.writeStringLatin1(byteArray15);
        int int20 = jSONWriter1.level();
        boolean boolean21 = jSONWriter1.isBeanToArray();
        jSONWriter1.writeArrayNull();
        boolean boolean23 = jSONWriter1.utf16;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 1, 1, (int) ' ');
        jSONWriter1.writeInt16((short) (byte) -1);
        boolean boolean30 = jSONWriter1.utf8;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        long long20 = context15.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter24.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context36.config(feature37, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) feature42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature42 };
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray44);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray44);
        context36.config(featureArray44);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray44);
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        context48.config(feature49, false);
        boolean boolean52 = context15.isEnabled(feature49);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter53 = context15.getContextNameFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter54 = null;
        context15.setValueFilter(valueFilter54);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter56 = null;
        context15.setPropertyFilter(propertyFilter56);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(contextNameFilter53);
        org.junit.Assert.assertNotNull(jSONWriter58);
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateYYYMMDD8((int) 'a', (int) '4', 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray12 = null;
        jSONWriter11.writeDouble(doubleArray12);
        jSONWriter11.writeArrayNull();
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter11.writeFloat((float) (short) 1, decimalFormat16);
        boolean boolean18 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter36 = context35.getPropertyFilter();
        long long37 = context35.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context35.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context35, symbolTable40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter41);
        java.lang.String str43 = jSONWriter1.setPath((int) (byte) 1, (java.lang.Object) jSONWriter41);
        boolean boolean44 = jSONWriter41.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter41.getContext();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNull(propertyFilter36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(context45);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        jSONWriter9.writeEnum((java.lang.Enum) feature16);
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter34 = context33.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider35 = context33.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter36 = context33.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        context33.config(featureArray38);
        jSONWriter9.setRootObject((java.lang.Object) context33);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNull(propertyFilter34);
        org.junit.Assert.assertNotNull(objectWriterProvider35);
        org.junit.Assert.assertNull(afterFilter36);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter18 = context15.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean20 = jSONWriter19.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        jSONWriter19.writeAny((java.lang.Object) featureArray21);
        byte[] byteArray25 = jSONWriter19.getBytes();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(nameFilter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-108]");
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        jSONWriter1.writeInt8((byte) 10);
        java.math.BigInteger bigInteger7 = null;
        jSONWriter1.writeBigInt(bigInteger7, 100L);
        jSONWriter1.close();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        context15.setDateFormat("[1][0]");
        com.alibaba.fastjson2.filter.ValueFilter valueFilter30 = null;
        context15.setValueFilter(valueFilter30);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray16 = null;
        jSONWriter13.writeHex(byteArray16);
        boolean boolean18 = jSONWriter13.isWriteNulls();
        jSONWriter13.writeInt64((long) 5);
        boolean boolean21 = jSONWriter0.removeReference((java.lang.Object) jSONWriter13);
        boolean boolean22 = jSONWriter0.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter24);
        boolean boolean26 = jSONWriter24.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat32 = null;
        jSONWriter28.writeDouble(1.0d, decimalFormat32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean40 = jSONWriter35.writeTypeName(byteArray38, (long) 10);
        jSONWriter28.writeStringLatin1(byteArray38);
        jSONWriter24.writeStringLatin1(byteArray38);
        int int43 = jSONWriter24.level();
        boolean boolean44 = jSONWriter24.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        boolean boolean55 = jSONWriter46.isEnabled((long) ' ');
        boolean boolean56 = jSONWriter46.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable57 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class63 = null;
        boolean boolean65 = jSONWriter58.isWriteTypeInfo((java.lang.Object) jSONWriter60, class63, (long) ' ');
        byte[] byteArray67 = new byte[] { (byte) 100 };
        boolean boolean69 = jSONWriter58.writeTypeName(byteArray67, (long) (-1));
        jSONWriter58.writeString("");
        long[] longArray73 = new long[] { (short) -1 };
        jSONWriter58.writeInt64(longArray73);
        jSONWriter46.writeInt64(longArray73);
        jSONWriter24.writeInt64(longArray73);
        jSONWriter0.writeInt64(longArray73);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[-1]");
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter1.symbolTable;
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        long long8 = jSONWriter1.getFeatures((long) (-1));
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter1.writeFloat((float) (-1L), decimalFormat7);
        int int9 = jSONWriter1.size();
        jSONWriter1.writeNull();
        jSONWriter1.endObject();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter20 = context19.getBeforeFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context19);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context19.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(beforeFilter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(contextNameFilter22);
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        jSONWriter0.endObject();
        java.math.BigDecimal bigDecimal10 = null;
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) 100, decimalFormat12);
        boolean boolean14 = jSONWriter0.utf16;
        jSONWriter0.writeRaw(' ');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.writeName("[1].hi\\![35]");
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        jSONWriter1.config(feature4, true);
        com.alibaba.fastjson2.JSONWriter.Context context7 = jSONWriter1.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        java.time.LocalTime localTime10 = null;
        jSONWriter9.writeLocalTime(localTime10);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        jSONWriter9.writeBinary(byteArray22);
        jSONWriter9.writeArrayNull();
        jSONWriter9.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        boolean boolean38 = jSONWriter29.isEnabled((long) ' ');
        jSONWriter29.writeString("hi!");
        char[] charArray41 = new char[] {};
        jSONWriter29.writeString(charArray41);
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class49 = null;
        boolean boolean51 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter46, class49, (long) ' ');
        byte[] byteArray53 = new byte[] { (byte) -1 };
        boolean boolean55 = jSONWriter46.writeTypeName(byteArray53, 0L);
        jSONWriter46.writeNull();
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter46.writeFloat((float) 0, decimalFormat58);
        boolean boolean60 = jSONWriter46.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter62);
        boolean boolean64 = jSONWriter62.utf16;
        jSONWriter62.endObject();
        jSONWriter62.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable73 = jSONWriter62.symbolTable;
        double[] doubleArray79 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter62.writeDouble(doubleArray79);
        jSONWriter46.writeDouble(doubleArray79);
        jSONWriter29.writeDouble(doubleArray79);
        java.text.DecimalFormat decimalFormat83 = null;
        jSONWriter9.writeDouble(doubleArray79, decimalFormat83);
        java.text.DecimalFormat decimalFormat85 = null;
        jSONWriter1.writeDouble(doubleArray79, decimalFormat85);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertNotNull(context7);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(symbolTable73);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0, -1.0, 1.0]");
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeName((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        char[] charArray9 = new char[] {};
        jSONWriter3.writeString(charArray9);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue;
        boolean boolean12 = jSONWriter3.isEnabled(feature11);
        jSONWriter3.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) -1 };
        boolean boolean26 = jSONWriter17.writeTypeName(byteArray24, 0L);
        java.util.UUID uUID27 = null;
        jSONWriter17.writeUUID(uUID27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter17.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context29);
        java.time.format.DateTimeFormatter dateTimeFormatter31 = context29.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider32 = context29.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider32, featureArray33);
        java.math.BigInteger bigInteger38 = null;
        jSONWriter37.writeBigInt(bigInteger38, (long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        java.time.LocalTime localTime43 = null;
        jSONWriter42.writeLocalTime(localTime43);
        java.time.LocalDateTime localDateTime45 = null;
        jSONWriter42.writeLocalDateTime(localDateTime45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter48);
        boolean boolean50 = jSONWriter48.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter52.writeDouble(1.0d, decimalFormat56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean64 = jSONWriter59.writeTypeName(byteArray62, (long) 10);
        jSONWriter52.writeStringLatin1(byteArray62);
        jSONWriter48.writeStringLatin1(byteArray62);
        jSONWriter42.writeBinary(byteArray62);
        jSONWriter37.writeBinary(byteArray62);
        jSONWriter3.writeStringLatin1(byteArray62);
        jSONWriter3.writeStringNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(objectWriterProvider32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray0);
        jSONWriter3.writeArrayNull();
        jSONWriter3.writeMillis((long) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        boolean boolean11 = jSONWriter8.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Path path12 = null;
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path12, "");
        com.alibaba.fastjson2.JSONWriter.Path path16 = new com.alibaba.fastjson2.JSONWriter.Path(path14, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path18 = new com.alibaba.fastjson2.JSONWriter.Path(path14, "[1].hi\\!");
        jSONWriter8.writeAny((java.lang.Object) "[1].hi\\!");
        java.time.LocalTime localTime20 = null;
        jSONWriter8.writeLocalTime(localTime20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean23 = jSONWriter22.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray31 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter24.writeRaw(charArray31);
        jSONWriter22.writeString(charArray31);
        jSONWriter8.writeString(charArray31);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeNameRaw(charArray31);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj12 = null;
        jSONWriter1.startArray(obj12, (-1));
        jSONWriter1.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        jSONWriter1.writeDateTime19(5, (-1), (int) (byte) -1, (int) (short) -1, (int) (short) -1, (int) (byte) 0);
        boolean boolean26 = jSONWriter1.isUTF8();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName((int) ' ');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter1.writeBinary(byteArray27);
        boolean boolean34 = jSONWriter1.hasFilter((long) 100);
        jSONWriter1.endObject();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeDateTime14(1, (int) (short) -1, (int) (short) 0, (int) 'a', (int) (short) 10, 10);
        jSONWriter1.startObject();
        boolean boolean12 = jSONWriter1.hasFilter((long) 6);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter23 = null;
        context15.setContextValueFilter(contextValueFilter23);
        long long25 = context15.getFeatures();
        boolean boolean27 = context15.isEnabled((long) (short) -1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        com.alibaba.fastjson2.SymbolTable symbolTable16 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class22 = null;
        boolean boolean24 = jSONWriter17.isWriteTypeInfo((java.lang.Object) jSONWriter19, class22, (long) ' ');
        byte[] byteArray26 = new byte[] { (byte) 100 };
        boolean boolean28 = jSONWriter17.writeTypeName(byteArray26, (long) (-1));
        jSONWriter9.writeNameRaw(byteArray26, (long) (short) 100);
        java.lang.Class<?> wildcardClass31 = jSONWriter9.getClass();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat9 = null;
        jSONWriter5.writeDouble(1.0d, decimalFormat9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean17 = jSONWriter12.writeTypeName(byteArray15, (long) 10);
        jSONWriter5.writeStringLatin1(byteArray15);
        jSONWriter1.writeStringLatin1(byteArray15);
        java.lang.Object obj20 = null;
        jSONWriter1.setRootObject(obj20);
        long long22 = jSONWriter1.getFeatures();
        jSONWriter1.writeString("hi!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        java.util.Map map26 = null;
        jSONWriter14.write(map26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        java.time.LocalTime localTime30 = null;
        jSONWriter29.writeLocalTime(localTime30);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        byte[] byteArray42 = new byte[] { (byte) -1 };
        boolean boolean44 = jSONWriter35.writeTypeName(byteArray42, 0L);
        jSONWriter29.writeBinary(byteArray42);
        jSONWriter14.writeBinary(byteArray42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray51 = null;
        jSONWriter48.writeHex(byteArray51);
        boolean boolean53 = jSONWriter48.isRefDetect();
        jSONWriter48.writeNumberNull();
        jSONWriter48.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean58 = jSONWriter48.isEnabled(feature57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter60);
        long long62 = jSONWriter60.getFeatures();
        java.time.LocalDateTime localDateTime63 = null;
        jSONWriter60.writeLocalDateTime(localDateTime63);
        byte[] byteArray65 = jSONWriter60.getBytes();
        jSONWriter48.writeStringLatin1(byteArray65);
        jSONWriter14.writeBinary(byteArray65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter69);
        boolean boolean71 = jSONWriter69.utf16;
        long long73 = jSONWriter69.getFeatures((long) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        java.time.LocalTime localTime76 = null;
        jSONWriter75.writeLocalTime(localTime76);
        com.alibaba.fastjson2.SymbolTable symbolTable78 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable78);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray80 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray80);
        boolean boolean83 = jSONWriter81.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class84 = null;
        boolean boolean86 = jSONWriter79.isWriteTypeInfo((java.lang.Object) jSONWriter81, class84, (long) ' ');
        byte[] byteArray88 = new byte[] { (byte) -1 };
        boolean boolean90 = jSONWriter81.writeTypeName(byteArray88, 0L);
        jSONWriter75.writeBinary(byteArray88);
        jSONWriter69.writeStringLatin1(byteArray88);
        jSONWriter14.writeNameRaw(byteArray88, (-1L));
        jSONWriter1.writeRaw(byteArray88);
        boolean boolean96 = jSONWriter1.isUTF8();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-81]");
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L + "'", long73 == 100L);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(featureArray80);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        java.time.LocalTime localTime8 = null;
        jSONWriter7.writeLocalTime(localTime8);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        jSONWriter7.writeBinary(byteArray20);
        jSONWriter1.writeStringLatin1(byteArray20);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        java.util.UUID uUID38 = null;
        jSONWriter28.writeUUID(uUID38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter28.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter41 = context40.getPropertyFilter();
        long long42 = context40.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = null;
        context40.setLabelFilter(labelFilter43);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter45 = context40.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter46 = null;
        context40.setPropertyFilter(propertyFilter46);
        boolean boolean48 = context40.isDateFormatUnixTime();
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.of(context40);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean51 = jSONWriter50.isUseSingleQuotes();
        boolean boolean52 = jSONWriter50.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal57 = null;
        jSONWriter54.writeDecimal(bigDecimal57);
        boolean boolean60 = jSONWriter54.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter54.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        char[] charArray69 = new char[] { '#', ' ' };
        jSONWriter66.writeString(charArray69, (int) (byte) 0, (int) (short) 1);
        jSONWriter54.writeString(charArray69);
        jSONWriter50.writeString(charArray69, 1, (int) (short) 0, true);
        jSONWriter49.writeRaw(charArray69);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw(charArray69);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertNull(propertyFilter41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNull(contextValueFilter45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[#,  ]");
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 0);
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path4, (int) (byte) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        long long29 = context26.getFeatures();
        boolean boolean30 = context26.isDateFormatHasHour();
        java.time.ZoneId zoneId31 = context26.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter32 = null;
        context26.setPropertyFilter(propertyFilter32);
        boolean boolean35 = context26.isEnabled((long) 'a');
        com.alibaba.fastjson2.filter.LabelFilter labelFilter36 = context26.getLabelFilter();
        boolean boolean37 = path10.equals((java.lang.Object) context26);
        boolean boolean38 = context26.isDateFormatHasDay();
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(labelFilter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        java.util.UUID uUID22 = null;
        jSONWriter12.writeUUID(uUID22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter12.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter25 = context24.getPropertyFilter();
        long long26 = context24.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter27 = null;
        context24.setLabelFilter(labelFilter27);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context24, symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context24.config(feature31, true);
        boolean boolean34 = context24.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter35 = context24.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter52 = context51.getPropertyFilter();
        long long53 = context51.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter54 = null;
        context51.setLabelFilter(labelFilter54);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider56 = context51.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter57 = null;
        context51.setPropertyPreFilter(propertyPreFilter57);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter59 = null;
        context51.setPropertyPreFilter(propertyPreFilter59);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter61 = null;
        context51.setLabelFilter(labelFilter61);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider63 = context51.getProvider();
        java.lang.Class<?> wildcardClass64 = context51.getClass();
        boolean boolean65 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context24, (java.lang.Class) wildcardClass64);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter66 = context24.getLabelFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider67 = context24.provider;
        com.alibaba.fastjson2.JSONWriter.Context context68 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider67);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertNull(propertyFilter25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(propertyPreFilter35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNull(propertyFilter52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider56);
        org.junit.Assert.assertNotNull(objectWriterProvider63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(labelFilter66);
        org.junit.Assert.assertNotNull(objectWriterProvider67);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeMillis((long) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        jSONWriter18.writeSymbol("$");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        jSONWriter23.writeSymbol("");
        jSONWriter23.writeBooleanNull();
        jSONWriter23.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context44);
        java.time.format.DateTimeFormatter dateTimeFormatter46 = context44.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider47 = context44.getProvider();
        java.lang.String str48 = context44.getDateFormat();
        boolean boolean49 = jSONWriter23.removeReference((java.lang.Object) context44);
        java.lang.String str50 = jSONWriter18.setPath("$", (java.lang.Object) jSONWriter23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) feature53);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature53 };
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) feature60);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature60 };
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray62);
        java.time.ZoneId zoneId65 = null;
        context64.setZoneId(zoneId65);
        jSONWriter57.popPath((java.lang.Object) context64);
        java.nio.charset.Charset charset68 = jSONWriter57.getCharset();
        jSONWriter57.writeRaw("hi!");
        java.math.BigDecimal bigDecimal71 = null;
        jSONWriter57.writeDecimal(bigDecimal71);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter74);
        boolean boolean76 = jSONWriter74.utf16;
        long long78 = jSONWriter74.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable79 = jSONWriter74.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable80 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable80);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray82 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray82);
        boolean boolean85 = jSONWriter83.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class86 = null;
        boolean boolean88 = jSONWriter81.isWriteTypeInfo((java.lang.Object) jSONWriter83, class86, (long) ' ');
        boolean boolean90 = jSONWriter81.isEnabled((long) ' ');
        jSONWriter81.writeString("hi!");
        char[] charArray93 = new char[] {};
        jSONWriter81.writeString(charArray93);
        jSONWriter74.writeString(charArray93);
        jSONWriter57.writeNameRaw(charArray93);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter18.writeRaw(charArray93, 2, (int) 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(objectWriterProvider47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L + "'", long78 == 100L);
        org.junit.Assert.assertNull(symbolTable79);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertNotNull(featureArray82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray93), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray93), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray93), "[]");
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) feature28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider25, featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        jSONWriter1.setRootObject((java.lang.Object) jSONWriter33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray36 = null;
        jSONWriter35.writeDouble(doubleArray36);
        jSONWriter35.writeArrayNull();
        short[] shortArray42 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter35.writeInt16(shortArray42);
        boolean boolean44 = jSONWriter35.isWriteNulls();
        boolean boolean46 = jSONWriter35.isEnabled((long) (byte) -1);
        jSONWriter35.writeFloat((java.lang.Float) 1.0f);
        jSONWriter35.writeBool(false);
        boolean boolean51 = jSONWriter35.isUTF16();
        boolean boolean52 = jSONWriter35.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        java.lang.reflect.Type type56 = null;
        boolean boolean58 = jSONWriter54.isWriteTypeInfo((java.lang.Object) (byte) 1, type56, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        jSONWriter60.close();
        jSONWriter60.writeSymbol("");
        jSONWriter60.writeBooleanNull();
        boolean boolean65 = jSONWriter60.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter67);
        long long69 = jSONWriter67.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        boolean boolean74 = jSONWriter72.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat76 = null;
        jSONWriter72.writeDouble(1.0d, decimalFormat76);
        boolean boolean79 = jSONWriter72.removeReference((java.lang.Object) (short) -1);
        jSONWriter72.writeArrayNull();
        long long81 = jSONWriter72.getFeatures();
        java.lang.Class<?> wildcardClass82 = jSONWriter72.getClass();
        boolean boolean84 = jSONWriter67.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass82, (long) (short) 10);
        jSONWriter54.checkAndWriteTypeName((java.lang.Object) jSONWriter60, (java.lang.Class) wildcardClass82);
        byte[] byteArray86 = jSONWriter54.getBytes();
        jSONWriter35.writeNameRaw(byteArray86);
        boolean boolean89 = jSONWriter1.writeTypeName(byteArray86, 0L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        boolean boolean6 = jSONWriter1.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        boolean boolean9 = jSONWriter8.isRefDetect();
        java.lang.String str12 = jSONWriter8.setPath("hi!", (java.lang.Object) 1);
        jSONWriter8.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter16);
        long long18 = jSONWriter16.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter21.writeDouble(1.0d, decimalFormat25);
        boolean boolean28 = jSONWriter21.removeReference((java.lang.Object) (short) -1);
        jSONWriter21.writeArrayNull();
        long long30 = jSONWriter21.getFeatures();
        java.lang.Class<?> wildcardClass31 = jSONWriter21.getClass();
        boolean boolean33 = jSONWriter16.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass31, (long) (short) 10);
        int[] intArray40 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter16.writeInt32(intArray40);
        double[] doubleArray46 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter16.writeDouble(doubleArray46);
        java.text.DecimalFormat decimalFormat48 = null;
        jSONWriter8.writeDouble(doubleArray46, decimalFormat48);
        jSONWriter1.writeDouble(doubleArray46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter52.writeDouble(1.0d, decimalFormat56);
        boolean boolean59 = jSONWriter52.removeReference((java.lang.Object) (short) -1);
        jSONWriter52.writeArrayNull();
        jSONWriter52.startArray((int) (short) 1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter63 = null;
        com.alibaba.fastjson2.JSONWriter.Path path64 = null;
        com.alibaba.fastjson2.JSONWriter.Path path66 = new com.alibaba.fastjson2.JSONWriter.Path(path64, "");
        com.alibaba.fastjson2.JSONWriter.Path path68 = new com.alibaba.fastjson2.JSONWriter.Path(path66, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path70 = new com.alibaba.fastjson2.JSONWriter.Path(path68, "hi!");
        java.lang.String str71 = path70.toString();
        com.alibaba.fastjson2.JSONWriter.Path path73 = new com.alibaba.fastjson2.JSONWriter.Path(path70, (int) '#');
        java.lang.Object obj74 = null;
        boolean boolean75 = path73.equals(obj74);
        java.lang.String str76 = jSONWriter52.setPath(fieldWriter63, obj74);
        boolean boolean77 = jSONWriter1.isWriteTypeInfo((java.lang.Object) fieldWriter63);
        jSONWriter1.writeTypeName("");
        byte[] byteArray80 = jSONWriter1.getBytes();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[1].hi\\!" + "'", str71, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-104, -76, -33, -78, -76, -48, 100, -76, -48, 100, -110, 73, 0]");
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        jSONWriter3.close();
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter3.writeFloat((float) 10, decimalFormat6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean14 = jSONWriter9.writeTypeName(byteArray12, (long) 10);
        boolean boolean16 = jSONWriter3.writeTypeName(byteArray12, (long) (byte) 100);
        jSONWriter1.writeNameRaw(byteArray12, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter20);
        boolean boolean22 = jSONWriter20.utf16;
        jSONWriter20.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray26 = null;
        jSONWriter25.writeDouble(doubleArray26);
        jSONWriter25.writeArrayNull();
        short[] shortArray32 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter25.writeInt16(shortArray32);
        java.lang.String str34 = jSONWriter20.setPath(fieldWriter24, (java.lang.Object) jSONWriter25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        java.lang.reflect.Type type38 = null;
        boolean boolean40 = jSONWriter36.isWriteTypeInfo((java.lang.Object) (byte) 1, type38, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        jSONWriter42.close();
        jSONWriter42.writeSymbol("");
        jSONWriter42.writeBooleanNull();
        boolean boolean47 = jSONWriter42.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter49);
        long long51 = jSONWriter49.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter54.writeDouble(1.0d, decimalFormat58);
        boolean boolean61 = jSONWriter54.removeReference((java.lang.Object) (short) -1);
        jSONWriter54.writeArrayNull();
        long long63 = jSONWriter54.getFeatures();
        java.lang.Class<?> wildcardClass64 = jSONWriter54.getClass();
        boolean boolean66 = jSONWriter49.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass64, (long) (short) 10);
        jSONWriter36.checkAndWriteTypeName((java.lang.Object) jSONWriter42, (java.lang.Class) wildcardClass64);
        jSONWriter42.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        jSONWriter71.close();
        jSONWriter71.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray76 = null;
        jSONWriter75.writeDouble(doubleArray76);
        jSONWriter75.writeArrayNull();
        short[] shortArray82 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter75.writeInt16(shortArray82);
        jSONWriter71.writeInt16(shortArray82);
        jSONWriter42.writeInt16(shortArray82);
        jSONWriter25.writeInt16(shortArray82);
        jSONWriter1.writeInt16(shortArray82);
        jSONWriter1.writeInt16((short) (byte) 0);
        int int90 = jSONWriter1.level();
        boolean boolean91 = jSONWriter1.isIgnoreErrorGetter();
        byte[] byteArray92 = jSONWriter1.getBytes();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[0, 0, 100]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[10, 100, -105, 0, 0, 56, 100, -68, 0, 0]");
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        boolean boolean14 = jSONWriter3.hasFilter();
        boolean boolean15 = jSONWriter3.utf8;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeDateYYYMMDD10((int) 'a', 6, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        int int6 = jSONWriter1.level();
        jSONWriter1.writeString("hi!");
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter1.writeDecimal(bigDecimal9, (long) (byte) 0);
        com.alibaba.fastjson2.JSONWriter.Context context12 = jSONWriter1.getContext();
        java.time.LocalTime localTime13 = null;
        jSONWriter1.writeLocalTime(localTime13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean21 = jSONWriter16.writeTypeName(byteArray19, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter23);
        long long25 = jSONWriter23.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat32 = null;
        jSONWriter28.writeDouble(1.0d, decimalFormat32);
        boolean boolean35 = jSONWriter28.removeReference((java.lang.Object) (short) -1);
        jSONWriter28.writeArrayNull();
        long long37 = jSONWriter28.getFeatures();
        java.lang.Class<?> wildcardClass38 = jSONWriter28.getClass();
        boolean boolean40 = jSONWriter23.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass38, (long) (short) 10);
        int[] intArray47 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter23.writeInt32(intArray47);
        jSONWriter16.writeInt32(intArray47);
        java.math.BigDecimal bigDecimal50 = null;
        jSONWriter16.writeDecimal(bigDecimal50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat57 = null;
        jSONWriter53.writeDouble(1.0d, decimalFormat57);
        boolean boolean60 = jSONWriter53.removeReference((java.lang.Object) (short) -1);
        jSONWriter53.writeArrayNull();
        jSONWriter53.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable64 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        boolean boolean69 = jSONWriter67.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class70 = null;
        boolean boolean72 = jSONWriter65.isWriteTypeInfo((java.lang.Object) jSONWriter67, class70, (long) ' ');
        char[] charArray73 = new char[] {};
        jSONWriter67.writeString(charArray73);
        jSONWriter53.writeString(charArray73, (int) (byte) -1, 0, true);
        jSONWriter16.writeString(charArray73);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray73);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(context12);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[]");
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray9 = null;
        jSONWriter6.writeHex(byteArray9);
        boolean boolean11 = jSONWriter6.isRefDetect();
        jSONWriter6.writeNumberNull();
        jSONWriter6.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean16 = jSONWriter6.isEnabled(feature15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter18);
        long long20 = jSONWriter18.getFeatures();
        java.time.LocalDateTime localDateTime21 = null;
        jSONWriter18.writeLocalDateTime(localDateTime21);
        byte[] byteArray23 = jSONWriter18.getBytes();
        jSONWriter6.writeStringLatin1(byteArray23);
        jSONWriter1.writeNameRaw(byteArray23, (long) (byte) 100);
        java.time.LocalDate localDate27 = null;
        jSONWriter1.writeLocalDate(localDate27);
        int int29 = jSONWriter1.size();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable4);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-81]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        context15.setDateFormat("hi!");
        java.time.ZoneId zoneId19 = null;
        context15.setZoneId(zoneId19);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider21 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context38);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context38, symbolTable40);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        byte[] byteArray52 = new byte[] { (byte) -1 };
        boolean boolean54 = jSONWriter45.writeTypeName(byteArray52, 0L);
        java.util.UUID uUID55 = null;
        jSONWriter45.writeUUID(uUID55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = jSONWriter45.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context57);
        java.time.format.DateTimeFormatter dateTimeFormatter59 = context57.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider60 = context57.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) feature63);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature63 };
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider60, featureArray65);
        context38.config(featureArray65);
        com.alibaba.fastjson2.JSONWriter.Context context69 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider21, featureArray65);
        com.alibaba.fastjson2.JSONWriter.Context context71 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(objectWriterProvider21);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(context57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(objectWriterProvider60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(jSONWriter70);
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.startObject();
        boolean boolean6 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        java.lang.String str9 = jSONWriter1.setPath("", (java.lang.Object) feature8);
        java.util.Map map10 = null;
        jSONWriter1.write(map10);
        java.time.LocalTime localTime12 = null;
        jSONWriter1.writeLocalTime(localTime12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter15.writeDouble(1.0d, decimalFormat19);
        boolean boolean22 = jSONWriter15.removeReference((java.lang.Object) (short) -1);
        jSONWriter15.writeArrayNull();
        jSONWriter15.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        char[] charArray35 = new char[] {};
        jSONWriter29.writeString(charArray35);
        jSONWriter15.writeString(charArray35, (int) (byte) -1, 0, true);
        jSONWriter1.writeString(charArray35, (int) (short) 10, (int) (byte) -1, false);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray19);
        java.math.BigInteger bigInteger24 = null;
        jSONWriter23.writeBigInt(bigInteger24, (long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        java.time.LocalTime localTime29 = null;
        jSONWriter28.writeLocalTime(localTime29);
        java.time.LocalDateTime localDateTime31 = null;
        jSONWriter28.writeLocalDateTime(localDateTime31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        boolean boolean36 = jSONWriter34.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter38.writeDouble(1.0d, decimalFormat42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean50 = jSONWriter45.writeTypeName(byteArray48, (long) 10);
        jSONWriter38.writeStringLatin1(byteArray48);
        jSONWriter34.writeStringLatin1(byteArray48);
        jSONWriter28.writeBinary(byteArray48);
        jSONWriter23.writeBinary(byteArray48);
        jSONWriter23.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = jSONWriter23.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal61 = null;
        jSONWriter58.writeDecimal(bigDecimal61);
        boolean boolean64 = jSONWriter58.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter58.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj69 = null;
        jSONWriter58.startArray(obj69, (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean73 = jSONWriter72.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean75 = jSONWriter72.isEnabled(feature74);
        boolean boolean76 = jSONWriter58.isEnabled(feature74);
        jSONWriter23.config(feature74, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter23);
        com.alibaba.fastjson2.JSONWriter.Context context80 = jSONWriter79.context;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(symbolTable56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(context80);
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.writeInt8((byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = null;
        jSONWriter4.writeDouble(doubleArray5);
        boolean boolean7 = jSONWriter4.utf16;
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter4.writeDecimal(bigDecimal8, 100L);
        boolean boolean11 = jSONWriter4.utf16;
        java.lang.Object obj12 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter4.isWriteTypeInfo(obj12, (java.lang.Class) wildcardClass24, (long) (short) 0);
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter4, (long) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        jSONWriter30.close();
        java.text.DecimalFormat decimalFormat33 = null;
        jSONWriter30.writeFloat((float) 10, decimalFormat33);
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter36.isWriteTypeInfo((java.lang.Object) jSONWriter38, class41, (long) ' ');
        boolean boolean45 = jSONWriter36.isEnabled((long) ' ');
        jSONWriter36.writeString("hi!");
        boolean boolean48 = jSONWriter36.isUTF8();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        jSONWriter36.writeString((java.util.List<java.lang.String>) strList52);
        jSONWriter36.writeRaw((byte) -1);
        java.math.BigInteger bigInteger57 = null;
        jSONWriter36.writeBigInt(bigInteger57, (long) '#');
        byte[] byteArray60 = jSONWriter36.getBytes();
        jSONWriter30.writeHex(byteArray60);
        jSONWriter4.writeRaw(byteArray60);
        boolean boolean64 = jSONWriter4.hasFilter((long) 6);
        jSONWriter4.startObject();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[76, 104, 105, 33, -106, 76, 104, 105, 33, 73, -1, -81]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        context22.setDateFormat("hi!");
        com.alibaba.fastjson2.filter.AfterFilter afterFilter25 = null;
        context22.setAfterFilter(afterFilter25);
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22, symbolTable27);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter28);
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        boolean boolean25 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter26 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable27);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(propertyPreFilter26);
        org.junit.Assert.assertNotNull(jSONWriter28);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean1 = jSONWriter0.isUseSingleQuotes();
        boolean boolean2 = jSONWriter0.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal7 = null;
        jSONWriter4.writeDecimal(bigDecimal7);
        boolean boolean10 = jSONWriter4.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter4.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        char[] charArray19 = new char[] { '#', ' ' };
        jSONWriter16.writeString(charArray19, (int) (byte) 0, (int) (short) 1);
        jSONWriter4.writeString(charArray19);
        jSONWriter0.writeString(charArray19, 1, (int) (short) 0, true);
        jSONWriter0.writeString("[1]");
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        long long43 = jSONWriter33.getFeatures();
        java.time.LocalDate localDate44 = null;
        jSONWriter33.writeLocalDate(localDate44);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter33);
        com.alibaba.fastjson2.SymbolTable symbolTable47 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable47);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        boolean boolean52 = jSONWriter50.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class53 = null;
        boolean boolean55 = jSONWriter48.isWriteTypeInfo((java.lang.Object) jSONWriter50, class53, (long) ' ');
        byte[] byteArray57 = new byte[] { (byte) -1 };
        boolean boolean59 = jSONWriter50.writeTypeName(byteArray57, 0L);
        byte[] byteArray60 = null;
        jSONWriter50.writeBinary(byteArray60);
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class63 = null;
        jSONWriter50.checkAndWriteTypeName((java.lang.Object) feature62, class63);
        jSONWriter33.popPath((java.lang.Object) feature62);
        jSONWriter0.config(feature62, false);
        com.alibaba.fastjson2.SymbolTable symbolTable68 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable68);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        boolean boolean73 = jSONWriter71.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class74 = null;
        boolean boolean76 = jSONWriter69.isWriteTypeInfo((java.lang.Object) jSONWriter71, class74, (long) ' ');
        boolean boolean78 = jSONWriter69.isEnabled((long) ' ');
        jSONWriter69.writeString("hi!");
        boolean boolean81 = jSONWriter69.isUTF8();
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        jSONWriter69.writeString((java.util.List<java.lang.String>) strList85);
        jSONWriter69.writeRaw((byte) -1);
        java.math.BigInteger bigInteger90 = null;
        jSONWriter69.writeBigInt(bigInteger90, (long) '#');
        byte[] byteArray93 = jSONWriter69.getBytes();
        jSONWriter0.writeHex(byteArray93);
        boolean boolean95 = jSONWriter0.isIgnoreErrorGetter();
        jSONWriter0.writeReference("");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#,  ]");
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[76, 104, 105, 33, -106, 76, 104, 105, 33, 73, -1, -81]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter6.writeDouble(1.0d, decimalFormat10);
        boolean boolean13 = jSONWriter6.removeReference((java.lang.Object) (short) -1);
        jSONWriter6.writeArrayNull();
        long long15 = jSONWriter6.getFeatures();
        java.lang.Class<?> wildcardClass16 = jSONWriter6.getClass();
        boolean boolean18 = jSONWriter1.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass16, (long) (short) 10);
        int[] intArray25 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter1.writeInt32(intArray25);
        jSONWriter1.writeRaw((byte) 0);
        jSONWriter1.endArray();
        java.time.LocalDateTime localDateTime30 = null;
        jSONWriter1.writeLocalDateTime(localDateTime30);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.of(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        jSONWriter5.writeFloat((java.lang.Float) (-1.0f));
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter5);
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean1 = jSONWriter0.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean8 = jSONWriter3.writeTypeName(byteArray6, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        long long12 = jSONWriter10.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter15.writeDouble(1.0d, decimalFormat19);
        boolean boolean22 = jSONWriter15.removeReference((java.lang.Object) (short) -1);
        jSONWriter15.writeArrayNull();
        long long24 = jSONWriter15.getFeatures();
        java.lang.Class<?> wildcardClass25 = jSONWriter15.getClass();
        boolean boolean27 = jSONWriter10.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass25, (long) (short) 10);
        int[] intArray34 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter10.writeInt32(intArray34);
        jSONWriter3.writeInt32(intArray34);
        jSONWriter0.writeInt32(intArray34);
        jSONWriter0.writeRaw(' ', '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal45 = null;
        jSONWriter42.writeDecimal(bigDecimal45);
        long long48 = jSONWriter42.getFeatures((long) 10);
        java.time.ZonedDateTime zonedDateTime49 = null;
        jSONWriter42.writeZonedDateTime(zonedDateTime49);
        int int51 = jSONWriter42.size();
        boolean boolean52 = jSONWriter0.isWriteTypeInfo((java.lang.Object) int51);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter23.getContext();
        boolean boolean26 = jSONWriter23.isEnabled((long) (byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        jSONWriter10.writeChar('#');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        jSONWriter9.close();
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter9.writeFloat((float) 10, decimalFormat12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean20 = jSONWriter15.writeTypeName(byteArray18, (long) 10);
        boolean boolean22 = jSONWriter9.writeTypeName(byteArray18, (long) (byte) 100);
        jSONWriter9.writeInt16((short) (byte) 100);
        boolean boolean25 = jSONWriter9.hasFilter();
        java.nio.charset.Charset charset26 = jSONWriter9.getCharset();
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter9, (long) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        boolean boolean39 = jSONWriter30.isEnabled((long) ' ');
        jSONWriter30.writeString("hi!");
        boolean boolean42 = jSONWriter30.isUTF8();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        jSONWriter30.writeString((java.util.List<java.lang.String>) strList46);
        jSONWriter9.write((java.util.List) strList46);
        boolean boolean50 = jSONWriter9.isIgnoreNoneSerializable();
        java.time.Instant instant51 = null;
        jSONWriter9.writeInstant(instant51);
        jSONWriter9.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable54 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        boolean boolean59 = jSONWriter57.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class60 = null;
        boolean boolean62 = jSONWriter55.isWriteTypeInfo((java.lang.Object) jSONWriter57, class60, (long) ' ');
        byte[] byteArray64 = new byte[] { (byte) -1 };
        boolean boolean66 = jSONWriter57.writeTypeName(byteArray64, 0L);
        java.util.UUID uUID67 = null;
        jSONWriter57.writeUUID(uUID67);
        com.alibaba.fastjson2.JSONWriter.Context context69 = jSONWriter57.getContext();
        jSONWriter57.writeInt64((long) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable72 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable72);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        jSONWriter75.close();
        java.text.DecimalFormat decimalFormat78 = null;
        jSONWriter75.writeFloat((float) 10, decimalFormat78);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray80 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray80);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean86 = jSONWriter81.writeTypeName(byteArray84, (long) 10);
        boolean boolean88 = jSONWriter75.writeTypeName(byteArray84, (long) (byte) 100);
        jSONWriter73.writeNameRaw(byteArray84, 0L);
        jSONWriter57.writeBinary(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter9.writeBase64(byteArray84);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(context69);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(featureArray80);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        boolean boolean6 = jSONWriter1.isUTF8();
        java.math.BigDecimal bigDecimal7 = null;
        jSONWriter1.writeDecimal(bigDecimal7);
        jSONWriter1.startArray(10);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter11 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context27.getPropertyFilter();
        long long29 = context27.getFeatures();
        long long30 = context27.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter31 = context27.getContextNameFilter();
        long long32 = context27.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        byte[] byteArray43 = new byte[] { (byte) -1 };
        boolean boolean45 = jSONWriter36.writeTypeName(byteArray43, 0L);
        java.util.UUID uUID46 = null;
        jSONWriter36.writeUUID(uUID46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = jSONWriter36.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context48.config(feature49, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) feature54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54 };
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray56);
        context48.config(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        context60.config(feature61, false);
        boolean boolean64 = context27.isEnabled(feature61);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter65 = context27.getPropertyPreFilter();
        java.lang.String str66 = jSONWriter1.setPath(fieldWriter11, (java.lang.Object) context27);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(propertyFilter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(contextNameFilter31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(context48);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(propertyPreFilter65);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        byte[] byteArray43 = null;
        jSONWriter33.writeBinary(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter33.writeHex(byteArray51);
        jSONWriter25.writeBinary(byteArray51);
        jSONWriter25.writeName((int) (short) 0);
        jSONWriter25.close();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 1, -1, 1, -1]");
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter23 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter24 = context15.getContextValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNull(contextValueFilter23);
        org.junit.Assert.assertNull(contextValueFilter24);
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        jSONWriter19.writeChar(' ');
        jSONWriter19.writeBooleanNull();
        jSONWriter19.writeInt32((int) (short) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(jSONWriter19);
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        jSONWriter0.endObject();
        java.math.BigDecimal bigDecimal10 = null;
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) 100, decimalFormat12);
        boolean boolean14 = jSONWriter0.utf16;
        com.alibaba.fastjson2.SymbolTable symbolTable15 = jSONWriter0.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(symbolTable15);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = context27.getDateFormatter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter29 = null;
        context27.setContextNameFilter(contextNameFilter29);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(dateTimeFormatter28);
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context15.setContextValueFilter(contextValueFilter17);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter19 = null;
        context15.setPropertyPreFilter(propertyPreFilter19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable21);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context15.setPropertyFilter(propertyFilter23);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable25);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter26);
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        context15.setDateFormat("hi!");
        java.time.ZoneId zoneId19 = null;
        context15.setZoneId(zoneId19);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider21 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        jSONWriter23.writeSymbol("");
        jSONWriter23.writeBooleanNull();
        jSONWriter23.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context44);
        java.time.format.DateTimeFormatter dateTimeFormatter46 = context44.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider47 = context44.getProvider();
        java.lang.String str48 = context44.getDateFormat();
        boolean boolean49 = jSONWriter23.removeReference((java.lang.Object) context44);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter53.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter66 = context65.getPropertyFilter();
        long long67 = context65.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter68 = null;
        context65.setLabelFilter(labelFilter68);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context65, symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context65.config(feature72, true);
        boolean boolean75 = jSONWriter23.isEnabled(feature72);
        boolean boolean76 = context15.isEnabled(feature72);
        boolean boolean77 = context15.isFormatyyyyMMddhhmmss19();
        boolean boolean78 = context15.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(objectWriterProvider21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(objectWriterProvider47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(context65);
        org.junit.Assert.assertNull(propertyFilter66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        java.time.ZonedDateTime zonedDateTime17 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime17);
        java.math.BigInteger bigInteger19 = null;
        jSONWriter3.writeBigInt(bigInteger19, (long) (byte) 10);
        jSONWriter3.writeRaw((byte) 1);
        java.util.Map map24 = null;
        jSONWriter3.write(map24);
        jSONWriter3.writeInt64((long) 8);
        java.util.UUID uUID28 = null;
        jSONWriter3.writeUUID(uUID28);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean4 = jSONWriter0.containsReference((java.lang.Object) 5);
        float[] floatArray8 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter0.writeFloat(floatArray8);
        jSONWriter0.writeInt64((long) (byte) 1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0, 10.0]");
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateTime14((int) (short) 10, (int) (byte) -1, 0, (int) (byte) 100, (int) (short) -1, 5);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter1.writeBigInt(bigInteger14);
        boolean boolean16 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        jSONWriter18.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        java.util.Map map38 = null;
        jSONWriter26.write(map38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        java.time.LocalTime localTime42 = null;
        jSONWriter41.writeLocalTime(localTime42);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        jSONWriter41.writeBinary(byteArray54);
        jSONWriter26.writeBinary(byteArray54);
        jSONWriter18.writeStringLatin1(byteArray54);
        jSONWriter1.writeHex(byteArray54);
        java.time.LocalDate localDate61 = null;
        jSONWriter1.writeLocalDate(localDate61);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray20);
        context15.config(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray20);
        java.nio.charset.Charset charset27 = jSONWriter26.getCharset();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(charset27);
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        java.util.UUID uUID43 = null;
        jSONWriter33.writeUUID(uUID43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter33.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter46 = context45.getPropertyFilter();
        long long47 = context45.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter48 = null;
        context45.setLabelFilter(labelFilter48);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider50 = context45.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.of(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider50, featureArray51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray58);
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider50, featureArray58);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = context62.getDateFormatter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter64 = context62.getAfterFilter();
        java.time.ZoneId zoneId65 = context62.getZoneId();
        context15.setZoneId(zoneId65);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertNull(propertyFilter46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNull(afterFilter64);
        org.junit.Assert.assertNotNull(zoneId65);
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        long long24 = context22.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context22.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context22.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = null;
        context22.setPropertyFilter(propertyFilter28);
        boolean boolean30 = context22.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = context22.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter32 = null;
        context22.setBeforeFilter(beforeFilter32);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter34 = context22.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider35 = context22.provider;
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider35);
        boolean boolean37 = jSONWriter1.containsReference((java.lang.Object) objectWriterProvider35);
        jSONWriter1.writeArrayNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(nameFilter31);
        org.junit.Assert.assertNull(propertyPreFilter34);
        org.junit.Assert.assertNotNull(objectWriterProvider35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter28);
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter1.writeFloat((float) ' ', decimalFormat21);
        boolean boolean23 = jSONWriter1.utf16;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray13 = null;
        jSONWriter12.writeDouble(doubleArray13);
        jSONWriter12.writeArrayNull();
        short[] shortArray19 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter12.writeInt16(shortArray19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal25 = null;
        jSONWriter22.writeDecimal(bigDecimal25);
        boolean boolean28 = jSONWriter22.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter22.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        char[] charArray37 = new char[] { '#', ' ' };
        jSONWriter34.writeString(charArray37, (int) (byte) 0, (int) (short) 1);
        jSONWriter22.writeString(charArray37);
        jSONWriter12.writeString(charArray37);
        jSONWriter1.writeString(charArray37);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        jSONWriter47.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean65 = jSONWriter60.writeTypeName(byteArray63, (long) 10);
        jSONWriter47.writeNameRaw(byteArray63);
        jSONWriter1.writeStringLatin1(byteArray63);
        boolean boolean68 = jSONWriter1.isWriteNulls();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#,  ]");
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        jSONWriter1.writeReference("$");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.of(context13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter16.writeDouble(1.0d, decimalFormat20);
        boolean boolean23 = jSONWriter16.removeReference((java.lang.Object) (short) -1);
        jSONWriter16.writeArrayNull();
        jSONWriter16.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray28 = null;
        jSONWriter27.writeDouble(doubleArray28);
        jSONWriter27.writeArrayNull();
        short[] shortArray34 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter27.writeInt16(shortArray34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal40 = null;
        jSONWriter37.writeDecimal(bigDecimal40);
        boolean boolean43 = jSONWriter37.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter37.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        char[] charArray52 = new char[] { '#', ' ' };
        jSONWriter49.writeString(charArray52, (int) (byte) 0, (int) (short) 1);
        jSONWriter37.writeString(charArray52);
        jSONWriter27.writeString(charArray52);
        jSONWriter16.writeString(charArray52);
        jSONWriter14.writeString(charArray52);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray52);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[#,  ]");
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        jSONWriter22.writeBool(false);
        jSONWriter22.writeBooleanNull();
        jSONWriter22.writeSymbol("$");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        jSONWriter29.close();
        java.text.DecimalFormat decimalFormat32 = null;
        jSONWriter29.writeFloat((float) 10, decimalFormat32);
        boolean boolean35 = jSONWriter29.isEnabled((long) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray44 = null;
        jSONWriter41.writeHex(byteArray44);
        boolean boolean46 = jSONWriter41.isRefDetect();
        jSONWriter41.writeNumberNull();
        jSONWriter41.writeFloat((java.lang.Float) 0.0f);
        java.time.LocalDateTime localDateTime50 = null;
        jSONWriter41.writeLocalDateTime(localDateTime50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter53.isWriteTypeInfo((java.lang.Object) boolean64, (java.lang.reflect.Type) wildcardClass76, 0L);
        jSONWriter37.checkAndWriteTypeName((java.lang.Object) localDateTime50, (java.lang.Class) wildcardClass76);
        boolean boolean81 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter29, (java.lang.Class) wildcardClass76, 0L);
        int int82 = jSONWriter29.level();
        jSONWriter29.writeDateTime14((int) (short) 100, 6, 100, (int) (short) 100, (int) ' ', (int) (byte) 100);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        char[] charArray9 = new char[] {};
        jSONWriter3.writeString(charArray9);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue;
        boolean boolean12 = jSONWriter3.isEnabled(feature11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter16.writeDouble(1.0d, decimalFormat20);
        boolean boolean23 = jSONWriter16.removeReference((java.lang.Object) (short) -1);
        jSONWriter16.writeArrayNull();
        jSONWriter16.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray28 = null;
        jSONWriter27.writeDouble(doubleArray28);
        jSONWriter27.writeArrayNull();
        short[] shortArray34 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter27.writeInt16(shortArray34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal40 = null;
        jSONWriter37.writeDecimal(bigDecimal40);
        boolean boolean43 = jSONWriter37.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter37.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        char[] charArray52 = new char[] { '#', ' ' };
        jSONWriter49.writeString(charArray52, (int) (byte) 0, (int) (short) 1);
        jSONWriter37.writeString(charArray52);
        jSONWriter27.writeString(charArray52);
        jSONWriter16.writeString(charArray52);
        jSONWriter14.writeString(charArray52);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeRaw(charArray52);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[#,  ]");
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        int int17 = jSONWriter16.size();
        jSONWriter16.writeBooleanNull();
        jSONWriter16.writeInt64((long) 2);
        boolean boolean22 = jSONWriter16.hasFilter((long) 7);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateYYYMMDD8((int) 'a', (int) '4', 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray12 = null;
        jSONWriter11.writeDouble(doubleArray12);
        jSONWriter11.writeArrayNull();
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter11.writeFloat((float) (short) 1, decimalFormat16);
        boolean boolean18 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter36 = context35.getPropertyFilter();
        long long37 = context35.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context35.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context35, symbolTable40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter41);
        java.lang.String str43 = jSONWriter1.setPath((int) (byte) 1, (java.lang.Object) jSONWriter41);
        jSONWriter41.writeMillis((long) (short) 100);
        jSONWriter41.writeString("hi!");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNull(propertyFilter36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 0);
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 0);
        java.lang.String str11 = path10.toString();
        com.alibaba.fastjson2.JSONWriter.Path path12 = path10.parent;
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path12, 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1][0]" + "'", str11, "[1][0]");
        org.junit.Assert.assertNotNull(path12);
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean13 = jSONWriter8.writeTypeName(byteArray11, (long) 10);
        jSONWriter1.writeStringLatin1(byteArray11);
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        com.alibaba.fastjson2.JSONWriter.Context context17 = jSONWriter1.context;
        jSONWriter1.writeInt32(0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(context17);
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean24 = context15.isEnabled((long) 'a');
        com.alibaba.fastjson2.filter.ValueFilter valueFilter25 = null;
        context15.setValueFilter(valueFilter25);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter27 = null;
        context15.setLabelFilter(labelFilter27);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter0.writeFloat((float) (short) 0, decimalFormat10);
        boolean boolean12 = jSONWriter0.isUTF16();
        jSONWriter0.writeFloat((java.lang.Float) 1.0f);
        com.alibaba.fastjson2.JSONObject jSONObject15 = null;
        jSONWriter0.write(jSONObject15);
        boolean boolean17 = jSONWriter0.isIgnoreNoneSerializable();
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter0.writeDecimal(bigDecimal18, (long) (short) 0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context15.setPropertyFilter(propertyFilter23);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter25 = context15.getPropertyFilter();
        boolean boolean26 = context15.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter27 = null;
        context15.setValueFilter(valueFilter27);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter29 = null;
        context15.setValueFilter(valueFilter29);
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = context15.getNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertNull(propertyFilter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(nameFilter31);
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = null;
        context8.setAfterFilter(afterFilter9);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider11 = context8.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter12 = context8.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(objectWriterProvider11);
        org.junit.Assert.assertNull(afterFilter12);
        org.junit.Assert.assertNotNull(jSONWriter13);
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        short[] shortArray34 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt16(shortArray34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        int int42 = jSONWriter41.size();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter44);
        long long46 = jSONWriter44.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter49.writeDouble(1.0d, decimalFormat53);
        boolean boolean56 = jSONWriter49.removeReference((java.lang.Object) (short) -1);
        jSONWriter49.writeArrayNull();
        long long58 = jSONWriter49.getFeatures();
        java.lang.Class<?> wildcardClass59 = jSONWriter49.getClass();
        boolean boolean61 = jSONWriter44.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass59, (long) (short) 10);
        jSONWriter1.checkAndWriteTypeName((java.lang.Object) jSONWriter41, (java.lang.Class) wildcardClass59);
        jSONWriter41.writeInt8((byte) 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable6 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class12 = null;
        boolean boolean14 = jSONWriter7.isWriteTypeInfo((java.lang.Object) jSONWriter9, class12, (long) ' ');
        boolean boolean16 = jSONWriter7.isEnabled((long) ' ');
        jSONWriter7.writeString("hi!");
        char[] charArray19 = new char[] {};
        jSONWriter7.writeString(charArray19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter22);
        long long24 = jSONWriter22.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat31 = null;
        jSONWriter27.writeDouble(1.0d, decimalFormat31);
        boolean boolean34 = jSONWriter27.removeReference((java.lang.Object) (short) -1);
        jSONWriter27.writeArrayNull();
        long long36 = jSONWriter27.getFeatures();
        java.lang.Class<?> wildcardClass37 = jSONWriter27.getClass();
        boolean boolean39 = jSONWriter22.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass37, (long) (short) 10);
        boolean boolean40 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter7, (java.lang.reflect.Type) wildcardClass37);
        java.time.LocalDate localDate41 = null;
        jSONWriter7.writeLocalDate(localDate41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal47 = null;
        jSONWriter44.writeDecimal(bigDecimal47);
        boolean boolean50 = jSONWriter44.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter44.writeArrayNull();
        jSONWriter44.writeChar('a');
        jSONWriter44.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        jSONWriter62.close();
        java.text.DecimalFormat decimalFormat65 = null;
        jSONWriter62.writeFloat((float) 10, decimalFormat65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean73 = jSONWriter68.writeTypeName(byteArray71, (long) 10);
        boolean boolean75 = jSONWriter62.writeTypeName(byteArray71, (long) (byte) 100);
        jSONWriter62.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        jSONWriter79.close();
        java.text.DecimalFormat decimalFormat82 = null;
        jSONWriter79.writeFloat((float) 10, decimalFormat82);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray84 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray84);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean90 = jSONWriter85.writeTypeName(byteArray88, (long) 10);
        boolean boolean92 = jSONWriter79.writeTypeName(byteArray88, (long) (byte) 100);
        jSONWriter62.writeBinary(byteArray88);
        jSONWriter44.writeHex(byteArray88);
        jSONWriter7.writeBinary(byteArray88);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(featureArray84);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        java.time.LocalDateTime localDateTime12 = null;
        jSONWriter1.writeLocalDateTime(localDateTime12);
        java.time.LocalTime localTime14 = null;
        jSONWriter1.writeLocalTime(localTime14);
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter1.writeFloat((float) 5, decimalFormat17);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        byte[] byteArray14 = new byte[] { (byte) -1 };
        boolean boolean16 = jSONWriter7.writeTypeName(byteArray14, 0L);
        byte[] byteArray17 = null;
        jSONWriter7.writeBinary(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter7.writeHex(byteArray25);
        jSONWriter0.writeNameRaw(byteArray25);
        jSONWriter0.writeChar('#');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 1, -1, 1, -1]");
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        jSONWriter16.writeInt8((byte) -1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName;
        boolean boolean22 = jSONWriter16.isEnabled(feature21);
        boolean boolean23 = jSONWriter16.utf16;
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter16.writeDouble((double) 2, decimalFormat25);
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter16.writeDouble((double) 65536L, decimalFormat28);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.lang.reflect.Type type3 = null;
        boolean boolean5 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (byte) 1, type3, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean19 = jSONWriter14.writeTypeName(byteArray17, (long) 10);
        jSONWriter7.writeStringLatin1(byteArray17);
        jSONWriter1.writeNameRaw(byteArray17);
        boolean boolean23 = jSONWriter1.isEnabled((long) 5);
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter1.context;
        java.time.format.DateTimeFormatter dateTimeFormatter25 = context24.getDateFormatter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertNull(dateTimeFormatter25);
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        long long20 = context15.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter24.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context36.config(feature37, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) feature42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature42 };
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray44);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray44);
        context36.config(featureArray44);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray44);
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        context48.config(feature49, false);
        boolean boolean52 = context15.isEnabled(feature49);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter53 = context15.getValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(valueFilter53);
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        boolean boolean22 = context15.isDateFormatHasHour();
        java.lang.Class<?> wildcardClass23 = context15.getClass();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter27 = null;
        context26.setContextNameFilter(contextNameFilter27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter29.context;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context30.getProvider();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        jSONWriter1.writeName("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        boolean boolean13 = jSONWriter11.utf16;
        jSONWriter11.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter16);
        long long18 = jSONWriter16.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter21.writeDouble(1.0d, decimalFormat25);
        boolean boolean28 = jSONWriter21.removeReference((java.lang.Object) (short) -1);
        jSONWriter21.writeArrayNull();
        long long30 = jSONWriter21.getFeatures();
        java.lang.Class<?> wildcardClass31 = jSONWriter21.getClass();
        boolean boolean33 = jSONWriter16.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass31, (long) (short) 10);
        int[] intArray40 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter16.writeInt32(intArray40);
        jSONWriter11.writeInt32(intArray40);
        jSONWriter1.writeInt32(intArray40);
        jSONWriter1.startObject();
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        jSONWriter1.writeInt8((byte) 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) '#');
        jSONWriter1.startArray(0);
        jSONWriter1.writeInt32((int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter1.context;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context29.getProvider();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter31 = context29.getContextValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNull(contextValueFilter31);
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        char[] charArray28 = new char[] {};
        jSONWriter22.writeString(charArray28);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue;
        boolean boolean31 = jSONWriter22.isEnabled(feature30);
        context15.config(feature30, false);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider34 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter36.isWriteTypeInfo((java.lang.Object) jSONWriter38, class41, (long) ' ');
        byte[] byteArray45 = new byte[] { (byte) -1 };
        boolean boolean47 = jSONWriter38.writeTypeName(byteArray45, 0L);
        java.util.UUID uUID48 = null;
        jSONWriter38.writeUUID(uUID48);
        com.alibaba.fastjson2.JSONWriter.Context context50 = jSONWriter38.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter51 = context50.getPropertyFilter();
        long long52 = context50.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter53 = null;
        context50.setLabelFilter(labelFilter53);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter55 = context50.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter56 = null;
        context50.setPropertyFilter(propertyFilter56);
        boolean boolean58 = context50.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter59 = context50.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter60 = null;
        context50.setBeforeFilter(beforeFilter60);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter62 = context50.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider63 = context50.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        jSONWriter65.close();
        jSONWriter65.writeSymbol("");
        jSONWriter65.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context70 = jSONWriter65.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter71 = null;
        context70.setPropertyPreFilter(propertyPreFilter71);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean77 = jSONWriter75.isRefDetect((java.lang.Object) feature76);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature76 };
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray78);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray78);
        com.alibaba.fastjson2.JSONWriter.Context context81 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray78);
        context70.config(featureArray78);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray78);
        com.alibaba.fastjson2.JSONWriter jSONWriter84 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider63, featureArray78);
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider34, featureArray78);
        jSONWriter85.writeName((long) (short) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider34);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(context50);
        org.junit.Assert.assertNull(propertyFilter51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNull(contextValueFilter55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(nameFilter59);
        org.junit.Assert.assertNull(propertyPreFilter62);
        org.junit.Assert.assertNotNull(objectWriterProvider63);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(context70);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(jSONWriter84);
        org.junit.Assert.assertNotNull(jSONWriter85);
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter2.writeTypeName("");
        jSONWriter2.writeBool(false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter8.writeDecimal(bigDecimal11);
        boolean boolean14 = jSONWriter8.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter8.writeArrayNull();
        jSONWriter8.writeChar('a');
        jSONWriter8.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        jSONWriter26.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter43.writeFloat((float) 10, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean54 = jSONWriter49.writeTypeName(byteArray52, (long) 10);
        boolean boolean56 = jSONWriter43.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter26.writeBinary(byteArray52);
        jSONWriter8.writeHex(byteArray52);
        jSONWriter2.writeNameRaw(byteArray52, (long) 'a');
        java.text.DecimalFormat decimalFormat62 = null;
        jSONWriter2.writeDouble((double) (byte) 0, decimalFormat62);
        java.time.LocalDate localDate64 = null;
        jSONWriter2.writeLocalDate(localDate64);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        short[] shortArray34 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter1.writeInt16(shortArray34);
        boolean boolean37 = jSONWriter1.isRefDetect((java.lang.Object) (-1.0f));
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray39 = null;
        jSONWriter38.writeDouble(doubleArray39);
        jSONWriter38.writeArrayNull();
        short[] shortArray45 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter38.writeInt16(shortArray45);
        jSONWriter1.writeInt16(shortArray45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter49.writeDouble(1.0d, decimalFormat53);
        java.time.ZonedDateTime zonedDateTime55 = null;
        jSONWriter49.writeZonedDateTime(zonedDateTime55);
        long long58 = jSONWriter49.getFeatures((long) (-1));
        java.lang.reflect.Type type59 = null;
        boolean boolean61 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (-1), type59, (long) (short) 1);
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter64);
        boolean boolean66 = jSONWriter64.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat72 = null;
        jSONWriter68.writeDouble(1.0d, decimalFormat72);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean80 = jSONWriter75.writeTypeName(byteArray78, (long) 10);
        jSONWriter68.writeStringLatin1(byteArray78);
        jSONWriter64.writeStringLatin1(byteArray78);
        jSONWriter1.writeStringLatin1(byteArray78);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray2);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        char[] charArray21 = new char[] {};
        jSONWriter15.writeString(charArray21);
        jSONWriter1.writeString(charArray21, (int) (byte) -1, 0, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray28 = null;
        jSONWriter27.writeDouble(doubleArray28);
        boolean boolean30 = jSONWriter27.utf16;
        java.math.BigDecimal bigDecimal31 = null;
        jSONWriter27.writeDecimal(bigDecimal31, 100L);
        boolean boolean34 = jSONWriter27.utf16;
        java.lang.Object obj35 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        long long46 = jSONWriter37.getFeatures();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean49 = jSONWriter27.isWriteTypeInfo(obj35, (java.lang.Class) wildcardClass47, (long) (short) 0);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter50 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass47);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objectWriter50);
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter3.writeDouble(1.0d, decimalFormat7);
        boolean boolean10 = jSONWriter3.removeReference((java.lang.Object) (short) -1);
        jSONWriter3.writeArrayNull();
        jSONWriter3.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray15 = null;
        jSONWriter14.writeDouble(doubleArray15);
        jSONWriter14.writeArrayNull();
        short[] shortArray21 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter14.writeInt16(shortArray21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal27 = null;
        jSONWriter24.writeDecimal(bigDecimal27);
        boolean boolean30 = jSONWriter24.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter24.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        char[] charArray39 = new char[] { '#', ' ' };
        jSONWriter36.writeString(charArray39, (int) (byte) 0, (int) (short) 1);
        jSONWriter24.writeString(charArray39);
        jSONWriter14.writeString(charArray39);
        jSONWriter3.writeString(charArray39);
        jSONWriter1.writeString(charArray39);
        com.alibaba.fastjson2.JSONWriter.Context context47 = jSONWriter1.context;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider48 = context47.getProvider();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#,  ]");
        org.junit.Assert.assertNotNull(context47);
        org.junit.Assert.assertNotNull(objectWriterProvider48);
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeBool(false);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatISO8601();
        java.lang.String str20 = context15.getDateFormat();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        long long22 = context15.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        java.lang.String str25 = context15.getDateFormat();
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        boolean boolean36 = jSONWriter27.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) -1 };
        boolean boolean49 = jSONWriter40.writeTypeName(byteArray47, 0L);
        jSONWriter40.writeInt8((byte) 1);
        jSONWriter40.close();
        boolean boolean53 = jSONWriter27.removeReference((java.lang.Object) jSONWriter40);
        com.alibaba.fastjson2.SymbolTable symbolTable54 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable54);
        boolean[] booleanArray60 = new boolean[] { false, true, true, true };
        jSONWriter55.writeBool(booleanArray60);
        com.alibaba.fastjson2.SymbolTable symbolTable62 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable62);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        boolean boolean67 = jSONWriter65.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class68 = null;
        boolean boolean70 = jSONWriter63.isWriteTypeInfo((java.lang.Object) jSONWriter65, class68, (long) ' ');
        byte[] byteArray72 = new byte[] { (byte) -1 };
        boolean boolean74 = jSONWriter65.writeTypeName(byteArray72, 0L);
        jSONWriter55.writeBinary(byteArray72);
        jSONWriter27.writeRaw(byteArray72);
        boolean boolean77 = jSONWriter27.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Context context78 = jSONWriter27.getContext();
        java.time.ZoneId zoneId79 = context78.getZoneId();
        context15.setZoneId(zoneId79);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(context78);
        org.junit.Assert.assertNotNull(zoneId79);
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.of(context28);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter29);
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        char[] charArray9 = new char[] {};
        jSONWriter3.writeString(charArray9);
        java.math.BigInteger bigInteger11 = null;
        jSONWriter3.writeBigInt(bigInteger11, (long) 100);
        java.time.LocalDateTime localDateTime14 = null;
        jSONWriter3.writeLocalDateTime(localDateTime14);
        java.time.LocalDateTime localDateTime16 = null;
        jSONWriter3.writeLocalDateTime(localDateTime16);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) feature10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature10 };
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) feature17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature17 };
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        java.time.ZoneId zoneId22 = null;
        context21.setZoneId(zoneId22);
        jSONWriter14.popPath((java.lang.Object) context21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) feature28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray30);
        jSONWriter25.config(featureArray30);
        context21.config(featureArray30);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider35 = context21.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter52 = context51.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter53 = null;
        context51.setContextValueFilter(contextValueFilter53);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class61 = null;
        boolean boolean63 = jSONWriter56.isWriteTypeInfo((java.lang.Object) jSONWriter58, class61, (long) ' ');
        byte[] byteArray65 = new byte[] { (byte) -1 };
        boolean boolean67 = jSONWriter58.writeTypeName(byteArray65, 0L);
        java.util.UUID uUID68 = null;
        jSONWriter58.writeUUID(uUID68);
        com.alibaba.fastjson2.JSONWriter.Context context70 = jSONWriter58.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter71 = context70.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider72 = context70.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter73 = context70.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray75);
        context70.config(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        context51.config(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider35, featureArray75);
        boolean boolean83 = jSONWriter1.containsReference((java.lang.Object) featureArray75);
        boolean boolean85 = jSONWriter1.hasFilter((long) (short) -1);
        java.math.BigInteger bigInteger86 = null;
        jSONWriter1.writeBigInt(bigInteger86);
        java.lang.Class<?> wildcardClass88 = jSONWriter1.getClass();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(objectWriterProvider35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNull(propertyFilter52);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(context70);
        org.junit.Assert.assertNull(propertyFilter71);
        org.junit.Assert.assertNotNull(objectWriterProvider72);
        org.junit.Assert.assertNull(afterFilter73);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter20 = null;
        context19.setAfterFilter(afterFilter20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = null;
        context19.setContextValueFilter(contextValueFilter22);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = context19.getLabelFilter();
        boolean boolean25 = context19.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter26 = context19.getContextValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(labelFilter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(contextValueFilter26);
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.SymbolTable symbolTable2 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable2);
        boolean boolean4 = jSONWriter3.isRefDetect();
        java.lang.String str7 = jSONWriter3.setPath("hi!", (java.lang.Object) 1);
        jSONWriter3.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        long long13 = jSONWriter11.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter16.writeDouble(1.0d, decimalFormat20);
        boolean boolean23 = jSONWriter16.removeReference((java.lang.Object) (short) -1);
        jSONWriter16.writeArrayNull();
        long long25 = jSONWriter16.getFeatures();
        java.lang.Class<?> wildcardClass26 = jSONWriter16.getClass();
        boolean boolean28 = jSONWriter11.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass26, (long) (short) 10);
        int[] intArray35 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter11.writeInt32(intArray35);
        double[] doubleArray41 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter11.writeDouble(doubleArray41);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter3.writeDouble(doubleArray41, decimalFormat43);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        jSONWriter48.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean66 = jSONWriter61.writeTypeName(byteArray64, (long) 10);
        jSONWriter48.writeNameRaw(byteArray64);
        jSONWriter3.writeNameRaw(byteArray64, (long) (short) -1);
        jSONWriter1.writeHex(byteArray64);
        jSONWriter1.writeStringNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeBooleanNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw("$[10]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = jSONWriter14.symbolTable;
        boolean boolean29 = jSONWriter14.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(symbolTable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter6.writeDouble(1.0d, decimalFormat10);
        boolean boolean13 = jSONWriter6.removeReference((java.lang.Object) (short) -1);
        jSONWriter6.writeArrayNull();
        long long15 = jSONWriter6.getFeatures();
        java.lang.Class<?> wildcardClass16 = jSONWriter6.getClass();
        boolean boolean18 = jSONWriter1.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass16, (long) (short) 10);
        int[] intArray25 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter1.writeInt32(intArray25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal31 = null;
        jSONWriter28.writeDecimal(bigDecimal31);
        boolean boolean34 = jSONWriter28.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter28.writeArrayNull();
        jSONWriter28.writeChar('a');
        jSONWriter28.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        jSONWriter46.close();
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter46.writeFloat((float) 10, decimalFormat49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean57 = jSONWriter52.writeTypeName(byteArray55, (long) 10);
        boolean boolean59 = jSONWriter46.writeTypeName(byteArray55, (long) (byte) 100);
        jSONWriter46.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        jSONWriter63.close();
        java.text.DecimalFormat decimalFormat66 = null;
        jSONWriter63.writeFloat((float) 10, decimalFormat66);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean74 = jSONWriter69.writeTypeName(byteArray72, (long) 10);
        boolean boolean76 = jSONWriter63.writeTypeName(byteArray72, (long) (byte) 100);
        jSONWriter46.writeBinary(byteArray72);
        jSONWriter28.writeHex(byteArray72);
        jSONWriter1.writeHex(byteArray72);
        boolean boolean81 = jSONWriter1.isEnabled((-1L));
        jSONWriter1.writeMillis((-1L));
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean10 = jSONWriter1.isEnabled(feature9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        jSONWriter1.writeInt16((short) (byte) 1);
        jSONWriter1.writeMillis((long) 5);
        jSONWriter1.endObject();
        jSONWriter1.writeMillis((long) 13);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(symbolTable11);
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean14 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (-1.0f));
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter1.writeDouble((double) (-1.0f), decimalFormat16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = null;
        jSONWriter18.writeDouble(doubleArray19);
        boolean boolean22 = jSONWriter18.containsReference((java.lang.Object) 5);
        float[] floatArray26 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter18.writeFloat(floatArray26);
        java.time.ZonedDateTime zonedDateTime28 = null;
        jSONWriter18.writeZonedDateTime(zonedDateTime28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        jSONWriter32.writeTypeName("");
        boolean boolean35 = jSONWriter32.isUseSingleQuotes();
        boolean boolean36 = jSONWriter32.isRefDetect();
        java.time.LocalTime localTime37 = null;
        jSONWriter32.writeLocalTime(localTime37);
        jSONWriter18.setRootObject((java.lang.Object) localTime37);
        jSONWriter18.writeRaw((byte) 10);
        java.math.BigDecimal bigDecimal42 = null;
        jSONWriter18.writeDecimal(bigDecimal42, 137439019008L);
        boolean boolean45 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        char[] charArray28 = new char[] {};
        jSONWriter1.writeString(charArray28);
        com.alibaba.fastjson2.JSONObject jSONObject30 = null;
        jSONWriter1.write(jSONObject30);
        long long33 = jSONWriter1.getFeatures((long) 12);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter35.isWriteTypeInfo((java.lang.Object) jSONWriter37, class40, (long) ' ');
        byte[] byteArray44 = new byte[] { (byte) -1 };
        boolean boolean46 = jSONWriter37.writeTypeName(byteArray44, 0L);
        java.util.UUID uUID47 = null;
        jSONWriter37.writeUUID(uUID47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = jSONWriter37.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context49);
        java.time.LocalTime localTime51 = null;
        jSONWriter50.writeLocalTime(localTime51);
        boolean boolean53 = jSONWriter50.isBeanToArray();
        boolean boolean54 = jSONWriter50.isIgnoreNoneSerializable();
        byte[] byteArray55 = jSONWriter50.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty;
        jSONWriter50.config(feature56, false);
        boolean boolean59 = jSONWriter1.isEnabled(feature56);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 12L + "'", long33 == 12L);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(context49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-81]");
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray28);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context32.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider33);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter36 = context35.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertNull(afterFilter36);
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context34);
        java.time.format.DateTimeFormatter dateTimeFormatter36 = context34.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider37 = context34.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) feature40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature40 };
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider37, featureArray42);
        context15.config(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter46.writeSymbol(1);
        com.alibaba.fastjson2.JSONObject jSONObject49 = null;
        jSONWriter46.write(jSONObject49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean52 = jSONWriter51.isUseSingleQuotes();
        boolean boolean53 = jSONWriter51.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal58 = null;
        jSONWriter55.writeDecimal(bigDecimal58);
        boolean boolean61 = jSONWriter55.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter55.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        char[] charArray70 = new char[] { '#', ' ' };
        jSONWriter67.writeString(charArray70, (int) (byte) 0, (int) (short) 1);
        jSONWriter55.writeString(charArray70);
        jSONWriter51.writeString(charArray70, 1, (int) (short) 0, true);
        jSONWriter46.writeString(charArray70);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter46.writeRaw('#', ' ');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(objectWriterProvider37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[#,  ]");
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = null;
        context15.setValueFilter(valueFilter28);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context15.getProvider();
        context15.setDateFormat(".\\[52\\]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        long long8 = jSONWriter6.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter11.writeDouble(1.0d, decimalFormat15);
        boolean boolean18 = jSONWriter11.removeReference((java.lang.Object) (short) -1);
        jSONWriter11.writeArrayNull();
        long long20 = jSONWriter11.getFeatures();
        java.lang.Class<?> wildcardClass21 = jSONWriter11.getClass();
        boolean boolean23 = jSONWriter6.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass21, (long) (short) 10);
        int[] intArray30 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter6.writeInt32(intArray30);
        jSONWriter1.writeInt32(intArray30);
        java.nio.charset.Charset charset33 = jSONWriter1.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal38 = null;
        jSONWriter35.writeDecimal(bigDecimal38);
        boolean boolean41 = jSONWriter35.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter35.writeArrayNull();
        jSONWriter35.writeChar('a');
        jSONWriter35.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        jSONWriter53.close();
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter53.writeFloat((float) 10, decimalFormat56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean64 = jSONWriter59.writeTypeName(byteArray62, (long) 10);
        boolean boolean66 = jSONWriter53.writeTypeName(byteArray62, (long) (byte) 100);
        jSONWriter53.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        jSONWriter70.close();
        java.text.DecimalFormat decimalFormat73 = null;
        jSONWriter70.writeFloat((float) 10, decimalFormat73);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean81 = jSONWriter76.writeTypeName(byteArray79, (long) 10);
        boolean boolean83 = jSONWriter70.writeTypeName(byteArray79, (long) (byte) 100);
        jSONWriter53.writeBinary(byteArray79);
        jSONWriter35.writeHex(byteArray79);
        java.util.UUID uUID86 = null;
        jSONWriter35.writeUUID(uUID86);
        float[] floatArray92 = new float[] { 5, (short) 10, (short) 0, 10.0f };
        jSONWriter35.writeFloat(floatArray92);
        java.text.DecimalFormat decimalFormat94 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeFloat(floatArray92, decimalFormat94);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(floatArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray92), "[5.0, 10.0, 0.0, 10.0]");
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        jSONWriter4.writeSymbol((-1));
        java.lang.String str9 = jSONWriter1.setPath("", (java.lang.Object) jSONWriter4);
        jSONWriter4.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) feature13);
        boolean boolean15 = jSONWriter12.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Path path16 = null;
        com.alibaba.fastjson2.JSONWriter.Path path18 = new com.alibaba.fastjson2.JSONWriter.Path(path16, "");
        com.alibaba.fastjson2.JSONWriter.Path path20 = new com.alibaba.fastjson2.JSONWriter.Path(path18, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path22 = new com.alibaba.fastjson2.JSONWriter.Path(path18, "[1].hi\\!");
        jSONWriter12.writeAny((java.lang.Object) "[1].hi\\!");
        java.time.LocalTime localTime24 = null;
        jSONWriter12.writeLocalTime(localTime24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean27 = jSONWriter26.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray35 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter28.writeRaw(charArray35);
        jSONWriter26.writeString(charArray35);
        jSONWriter12.writeString(charArray35);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter4.writeString(charArray35, (int) ' ', 10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        jSONWriter1.writeInt8((byte) 0);
        boolean boolean10 = jSONWriter1.isUTF16();
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.FieldBased;
        jSONWriter1.config(feature11, true);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.FieldBased + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.FieldBased));
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        jSONWriter40.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = context61.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context61.getProvider();
        java.lang.String str65 = context61.getDateFormat();
        boolean boolean66 = jSONWriter40.removeReference((java.lang.Object) context61);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = context61.getLabelFilter();
        java.time.ZoneId zoneId68 = context61.getZoneId();
        context38.setZoneId(zoneId68);
        context21.setZoneId(zoneId68);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter71 = null;
        context21.setAfterFilter(afterFilter71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        com.alibaba.fastjson2.SymbolTable symbolTable75 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context21, symbolTable75);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider77 = context21.provider;
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider77);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(labelFilter67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(objectWriterProvider77);
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        jSONWriter3.writeInt64((long) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter34 = context33.getPropertyFilter();
        long long35 = context33.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter36 = null;
        context33.setLabelFilter(labelFilter36);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter38 = context33.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter39 = null;
        context33.setPropertyFilter(propertyFilter39);
        boolean boolean41 = context33.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter42 = context33.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter43 = null;
        context33.setBeforeFilter(beforeFilter43);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter45 = context33.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider46 = context33.provider;
        com.alibaba.fastjson2.JSONWriter.Context context47 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider46);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter48 = context47.getContextValueFilter();
        boolean boolean49 = jSONWriter3.isIgnoreNoneSerializable((java.lang.Object) contextValueFilter48);
        int int50 = jSONWriter3.size();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNull(propertyFilter34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNull(contextValueFilter38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(nameFilter42);
        org.junit.Assert.assertNull(propertyPreFilter45);
        org.junit.Assert.assertNotNull(objectWriterProvider46);
        org.junit.Assert.assertNull(contextValueFilter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        byte[] byteArray43 = null;
        jSONWriter33.writeBinary(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter33.writeHex(byteArray51);
        jSONWriter25.writeBinary(byteArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter25.containsReference(obj54);
        jSONWriter25.writeDateTime14((int) '#', (int) (short) 1, 1, (int) (byte) -1, (int) (short) -1, (int) ' ');
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter25.writeFloat((float) 0, decimalFormat64);
        com.alibaba.fastjson2.JSONWriter.Context context66 = jSONWriter25.context;
        jSONWriter25.writeBooleanNull();
        jSONWriter25.writeInt64((long) (byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 1, -1, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(context66);
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeDateTime14(1, (int) (short) -1, (int) (short) 0, (int) 'a', (int) (short) 10, 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray11 = null;
        jSONWriter10.writeDouble(doubleArray11);
        jSONWriter10.writeArrayNull();
        short[] shortArray17 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter10.writeInt16(shortArray17);
        jSONWriter1.writeInt16(shortArray17);
        boolean boolean20 = jSONWriter1.isUTF8();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateTime14((int) (short) 10, (int) (byte) -1, 0, (int) (byte) 100, (int) (short) -1, 5);
        jSONWriter1.writeMillis((long) 100);
        java.util.UUID uUID16 = null;
        jSONWriter1.writeUUID(uUID16);
        jSONWriter1.writeInt64(0L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter5.writeDecimal(bigDecimal9, 100L);
        boolean boolean12 = jSONWriter5.utf16;
        java.lang.Object obj13 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter15.writeDouble(1.0d, decimalFormat19);
        boolean boolean22 = jSONWriter15.removeReference((java.lang.Object) (short) -1);
        jSONWriter15.writeArrayNull();
        long long24 = jSONWriter15.getFeatures();
        java.lang.Class<?> wildcardClass25 = jSONWriter15.getClass();
        boolean boolean27 = jSONWriter5.isWriteTypeInfo(obj13, (java.lang.Class) wildcardClass25, (long) (short) 0);
        jSONWriter5.writeStringNull();
        java.lang.String str29 = jSONWriter0.setPath(fieldWriter4, (java.lang.Object) jSONWriter5);
        boolean boolean31 = jSONWriter5.hasFilter(0L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        java.lang.Class<?> wildcardClass22 = context15.getClass();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean21 = jSONWriter16.writeTypeName(byteArray19, (long) 10);
        jSONWriter3.writeNameRaw(byteArray19);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter3.writeFloat((-1.0f), decimalFormat24);
        java.math.BigDecimal bigDecimal26 = null;
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter3.writeDecimal(bigDecimal26, (long) '#', decimalFormat28);
        boolean boolean30 = jSONWriter3.hasFilter();
        long long31 = jSONWriter3.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        boolean boolean6 = jSONWriter1.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Path path8 = null;
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path8, "");
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal17 = null;
        jSONWriter14.writeDecimal(bigDecimal17);
        boolean boolean20 = jSONWriter14.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter14.writeArrayNull();
        jSONWriter14.writeChar('a');
        jSONWriter14.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter14.writeNull();
        jSONWriter14.writeInt32((int) (short) 1);
        boolean boolean34 = path10.equals((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter.Path path36 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "[1][0]");
        boolean boolean37 = jSONWriter1.containsReference((java.lang.Object) "[1][0]");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal42 = null;
        jSONWriter39.writeDecimal(bigDecimal42);
        boolean boolean45 = jSONWriter39.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter39.writeArrayNull();
        jSONWriter39.writeChar('a');
        jSONWriter39.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        jSONWriter57.close();
        java.text.DecimalFormat decimalFormat60 = null;
        jSONWriter57.writeFloat((float) 10, decimalFormat60);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean68 = jSONWriter63.writeTypeName(byteArray66, (long) 10);
        boolean boolean70 = jSONWriter57.writeTypeName(byteArray66, (long) (byte) 100);
        jSONWriter57.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        jSONWriter74.close();
        java.text.DecimalFormat decimalFormat77 = null;
        jSONWriter74.writeFloat((float) 10, decimalFormat77);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean85 = jSONWriter80.writeTypeName(byteArray83, (long) 10);
        boolean boolean87 = jSONWriter74.writeTypeName(byteArray83, (long) (byte) 100);
        jSONWriter57.writeBinary(byteArray83);
        jSONWriter39.writeHex(byteArray83);
        java.util.UUID uUID90 = null;
        jSONWriter39.writeUUID(uUID90);
        float[] floatArray96 = new float[] { 5, (short) 10, (short) 0, 10.0f };
        jSONWriter39.writeFloat(floatArray96);
        java.text.DecimalFormat decimalFormat98 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeFloat(floatArray96, decimalFormat98);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(symbolTable7);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(floatArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray96), "[5.0, 10.0, 0.0, 10.0]");
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        jSONWriter4.close();
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter4.writeFloat((float) 10, decimalFormat7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean15 = jSONWriter10.writeTypeName(byteArray13, (long) 10);
        boolean boolean17 = jSONWriter4.writeTypeName(byteArray13, (long) (byte) 100);
        jSONWriter4.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        int[] intArray23 = new int[] { (short) -1 };
        jSONWriter21.writeInt32(intArray23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal29 = null;
        jSONWriter26.writeDecimal(bigDecimal29);
        boolean boolean32 = jSONWriter26.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter26.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        jSONWriter38.close();
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter38.writeFloat((float) 10, decimalFormat41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean49 = jSONWriter44.writeTypeName(byteArray47, (long) 10);
        boolean boolean51 = jSONWriter38.writeTypeName(byteArray47, (long) (byte) 100);
        jSONWriter38.writeInt16((short) (byte) 100);
        boolean boolean54 = jSONWriter38.hasFilter();
        long[] longArray58 = new long[] { 0, (byte) -1, ' ' };
        jSONWriter38.writeInt64(longArray58);
        jSONWriter26.writeInt64(longArray58);
        jSONWriter21.writeInt64(longArray58);
        jSONWriter4.writeInt64(longArray58);
        jSONWriter1.writeInt64(longArray58);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1]");
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[0, -1, 32]");
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        jSONWriter1.writeChar('a');
        jSONWriter1.startObject();
        jSONWriter1.writeInt32((int) 'a');
        com.alibaba.fastjson2.SymbolTable symbolTable39 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class45 = null;
        boolean boolean47 = jSONWriter40.isWriteTypeInfo((java.lang.Object) jSONWriter42, class45, (long) ' ');
        byte[] byteArray49 = new byte[] { (byte) -1 };
        boolean boolean51 = jSONWriter42.writeTypeName(byteArray49, 0L);
        java.util.UUID uUID52 = null;
        jSONWriter42.writeUUID(uUID52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = jSONWriter42.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context54);
        java.time.format.DateTimeFormatter dateTimeFormatter56 = context54.getDateFormatter();
        boolean boolean57 = context54.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter58 = context54.getAfterFilter();
        jSONWriter1.setRootObject((java.lang.Object) afterFilter58);
        boolean boolean60 = jSONWriter1.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(context54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNull(dateTimeFormatter56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(afterFilter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        boolean boolean16 = jSONWriter6.utf16;
        jSONWriter6.writeBooleanNull();
        jSONWriter6.writeReference("[1].hi\\!.\\[1\\].\\[1\\]\\.hi\\\\\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean4 = jSONWriter0.containsReference((java.lang.Object) 5);
        jSONWriter0.writeNull();
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter0.writeDouble((double) 65536L, decimalFormat7);
        long long9 = jSONWriter0.getFeatures();
        jSONWriter0.startArray(8);
        java.nio.charset.Charset charset12 = jSONWriter0.getCharset();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(charset12);
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatISO8601();
        java.lang.String str20 = context15.getDateFormat();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter21 = null;
        context15.setAfterFilter(afterFilter21);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter23 = context15.getLabelFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(labelFilter23);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter1.writeDouble((double) 10.0f, decimalFormat24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter1.context;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(context26);
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONObject jSONObject7 = null;
        jSONWriter1.write(jSONObject7);
        java.time.LocalDate localDate9 = null;
        jSONWriter1.writeLocalDate(localDate9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        boolean boolean21 = jSONWriter12.isEnabled((long) ' ');
        jSONWriter12.writeString("hi!");
        boolean boolean24 = jSONWriter12.isUTF8();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        jSONWriter12.writeString((java.util.List<java.lang.String>) strList28);
        jSONWriter12.writeRaw((byte) -1);
        java.math.BigInteger bigInteger33 = null;
        jSONWriter12.writeBigInt(bigInteger33, (long) '#');
        jSONWriter12.startArray(0);
        jSONWriter12.writeInt32((int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter12.context;
        jSONWriter12.writeName("[1][0]");
        boolean boolean44 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter12, (long) 10);
        jSONWriter12.writeDateTime19(10, 6, (int) (byte) 10, (int) (byte) 1, (int) (short) -1, (int) (short) 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        boolean boolean23 = jSONWriter0.isRefDetect();
        java.util.Map map24 = null;
        jSONWriter0.write(map24);
        jSONWriter0.writeDouble((double) 97L);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDateTimeISO8601(0, 12, 7, 0, (int) (short) -1, (int) (short) 1, 1, 0, true);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        boolean boolean15 = jSONWriter3.hasFilter((long) 100);
        jSONWriter3.writeDateYYYMMDD8(4, (int) ' ', (int) (short) 1);
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter3.writeFloat((float) (short) -1, decimalFormat21);
        boolean boolean24 = jSONWriter3.isEnabled((long) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        boolean boolean25 = context15.isDateFormatHasDay();
        long long26 = context15.getFeatures();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = null;
        context15.setPropertyPreFilter(propertyPreFilter27);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter29 = context15.getPropertyPreFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 65536L + "'", long26 == 65536L);
        org.junit.Assert.assertNull(propertyPreFilter29);
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        boolean boolean20 = jSONWriter11.isEnabled((long) ' ');
        jSONWriter11.writeString("hi!");
        boolean boolean23 = jSONWriter11.isUTF8();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        jSONWriter11.writeString((java.util.List<java.lang.String>) strList27);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter1.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat44 = null;
        jSONWriter40.writeDouble(1.0d, decimalFormat44);
        java.time.ZonedDateTime zonedDateTime46 = null;
        jSONWriter40.writeZonedDateTime(zonedDateTime46);
        long long49 = jSONWriter40.getFeatures((long) (-1));
        java.math.BigInteger bigInteger50 = null;
        jSONWriter40.writeBigInt(bigInteger50, (-1L));
        java.util.Map map53 = null;
        jSONWriter40.write(map53);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean58 = jSONWriter56.isRefDetect((java.lang.Object) feature57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature57 };
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean65 = jSONWriter63.isRefDetect((java.lang.Object) feature64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature64 };
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray66);
        com.alibaba.fastjson2.JSONWriter.Context context68 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray66);
        java.time.ZoneId zoneId69 = null;
        context68.setZoneId(zoneId69);
        jSONWriter61.popPath((java.lang.Object) context68);
        float[] floatArray72 = new float[] {};
        jSONWriter61.writeFloat(floatArray72);
        jSONWriter40.writeFloat(floatArray72);
        jSONWriter1.writeFloat(floatArray72);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[]");
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.SymbolTable symbolTable5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter6.isWriteTypeInfo((java.lang.Object) jSONWriter8, class11, (long) ' ');
        byte[] byteArray15 = new byte[] { (byte) -1 };
        boolean boolean17 = jSONWriter8.writeTypeName(byteArray15, 0L);
        java.util.UUID uUID18 = null;
        jSONWriter8.writeUUID(uUID18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = jSONWriter8.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = context20.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider23 = context20.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) feature26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider23, featureArray28);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        java.util.UUID uUID44 = null;
        jSONWriter34.writeUUID(uUID44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = jSONWriter34.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context46);
        java.time.format.DateTimeFormatter dateTimeFormatter48 = context46.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider49 = context46.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) feature52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature52 };
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider49, featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider23, featureArray54);
        float[] floatArray58 = null;
        jSONWriter57.writeFloat(floatArray58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.of(context64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        boolean boolean69 = jSONWriter67.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal70 = null;
        jSONWriter67.writeDecimal(bigDecimal70);
        boolean boolean73 = jSONWriter67.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter67.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj78 = null;
        jSONWriter67.startArray(obj78, (-1));
        jSONWriter67.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray90 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList91 = new java.util.ArrayList<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList91, strArray90);
        jSONWriter67.writeString((java.util.List<java.lang.String>) strList91);
        jSONWriter65.writeString((java.util.List<java.lang.String>) strList91);
        jSONWriter57.writeString((java.util.List<java.lang.String>) strList91);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList91);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(context20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(objectWriterProvider23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(context46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(objectWriterProvider49);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj12 = null;
        jSONWriter1.startArray(obj12, (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        jSONWriter16.close();
        jSONWriter16.writeSymbol("");
        boolean[] booleanArray21 = new boolean[] { true };
        jSONWriter16.writeBool(booleanArray21);
        jSONWriter1.writeBool(booleanArray21);
        jSONWriter1.startObject();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[true]");
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble((double) 0L, decimalFormat2);
        org.junit.Assert.assertNotNull(jSONWriter0);
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter3.getSymbolTable();
        jSONWriter3.writeRaw((byte) 0);
        jSONWriter3.writeInt32((int) (byte) 10);
        boolean boolean19 = jSONWriter3.jsonb;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.startObject();
        boolean boolean6 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber;
        java.lang.String str9 = jSONWriter1.setPath("", (java.lang.Object) feature8);
        java.util.Map map10 = null;
        jSONWriter1.write(map10);
        boolean boolean12 = jSONWriter1.isWriteNulls();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteBooleanAsNumber));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter25 = context15.getValueFilter();
        boolean boolean26 = context15.isDateFormatHasHour();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertNull(valueFilter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        int[] intArray4 = new int[] { (short) -1 };
        jSONWriter2.writeInt32(intArray4);
        boolean boolean6 = jSONWriter2.jsonb;
        jSONWriter2.writeChar('a');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        jSONWriter11.close();
        jSONWriter11.writeSymbol("");
        jSONWriter11.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter11.context;
        jSONWriter11.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = jSONWriter11.symbolTable;
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) 100 };
        boolean boolean34 = jSONWriter23.writeTypeName(byteArray32, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        int[] intArray40 = new int[] { (short) -1 };
        jSONWriter38.writeInt32(intArray40);
        java.lang.String str42 = jSONWriter23.setPath("hi!", (java.lang.Object) intArray40);
        jSONWriter11.writeInt32(intArray40);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context59);
        java.time.LocalTime localTime61 = null;
        jSONWriter60.writeLocalTime(localTime61);
        boolean boolean63 = jSONWriter60.isBeanToArray();
        boolean boolean64 = jSONWriter60.isIgnoreNoneSerializable();
        byte[] byteArray65 = jSONWriter60.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty;
        jSONWriter60.config(feature66, false);
        jSONWriter11.writeEnum((java.lang.Enum) feature66);
        int int70 = jSONWriter11.size();
        java.lang.String str71 = jSONWriter2.setPath(7, (java.lang.Object) jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(symbolTable21);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1]");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-81]");
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        jSONWriter1.writeInt8((byte) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        boolean boolean17 = jSONWriter8.isEnabled((long) ' ');
        jSONWriter8.writeString("hi!");
        boolean boolean20 = jSONWriter8.isUTF8();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        jSONWriter8.writeString((java.util.List<java.lang.String>) strList24);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue;
        boolean boolean28 = jSONWriter8.isEnabled(feature27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean30 = jSONWriter29.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter39);
        long long41 = jSONWriter39.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat48 = null;
        jSONWriter44.writeDouble(1.0d, decimalFormat48);
        boolean boolean51 = jSONWriter44.removeReference((java.lang.Object) (short) -1);
        jSONWriter44.writeArrayNull();
        long long53 = jSONWriter44.getFeatures();
        java.lang.Class<?> wildcardClass54 = jSONWriter44.getClass();
        boolean boolean56 = jSONWriter39.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass54, (long) (short) 10);
        int[] intArray63 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter39.writeInt32(intArray63);
        jSONWriter32.writeInt32(intArray63);
        jSONWriter29.writeInt32(intArray63);
        jSONWriter29.writeInt8((byte) 10);
        boolean boolean69 = jSONWriter8.removeReference((java.lang.Object) jSONWriter29);
        boolean boolean70 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        java.time.LocalDate localDate4 = null;
        jSONWriter1.writeLocalDate(localDate4);
        jSONWriter1.writeTypeName("");
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        long long26 = context23.getFeatures();
        boolean boolean27 = context23.isDateFormatISO8601();
        java.lang.String str28 = context23.getDateFormat();
        boolean boolean30 = jSONWriter1.isWriteTypeInfo((java.lang.Object) str28, 65536L);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = jSONWriter1.symbolTable;
        boolean boolean32 = jSONWriter1.hasFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        long long36 = jSONWriter34.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter39.writeDouble(1.0d, decimalFormat43);
        boolean boolean46 = jSONWriter39.removeReference((java.lang.Object) (short) -1);
        jSONWriter39.writeArrayNull();
        long long48 = jSONWriter39.getFeatures();
        java.lang.Class<?> wildcardClass49 = jSONWriter39.getClass();
        boolean boolean51 = jSONWriter34.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass49, (long) (short) 10);
        int[] intArray58 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter34.writeInt32(intArray58);
        jSONWriter1.writeInt32(intArray58);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(symbolTable31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Path path7 = null;
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path7, "");
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path9, (int) (byte) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        jSONWriter15.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context44.config(feature45, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) feature50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature50 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        context44.config(featureArray52);
        jSONWriter15.config(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.of(featureArray52);
        byte[] byteArray58 = jSONWriter57.getBytes();
        boolean boolean59 = path11.equals((java.lang.Object) byteArray58);
        boolean boolean61 = jSONWriter1.writeTypeName(byteArray58, 97L);
        java.util.Map map62 = null;
        jSONWriter1.write(map62);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean4 = jSONWriter0.containsReference((java.lang.Object) 5);
        com.alibaba.fastjson2.JSONWriter.Context context5 = jSONWriter0.getContext();
        long long6 = context5.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(context5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        byte[] byteArray38 = new byte[] { (byte) -1 };
        boolean boolean40 = jSONWriter31.writeTypeName(byteArray38, 0L);
        java.util.UUID uUID41 = null;
        jSONWriter31.writeUUID(uUID41);
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter31.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context43);
        java.time.format.DateTimeFormatter dateTimeFormatter45 = context43.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider46 = context43.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider46, featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27, featureArray47);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter53 = null;
        context52.setContextValueFilter(contextValueFilter53);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.of(context52);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(objectWriterProvider46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(jSONWriter55);
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22, symbolTable24);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context41);
        java.time.LocalTime localTime43 = null;
        jSONWriter42.writeLocalTime(localTime43);
        boolean boolean45 = jSONWriter42.isBeanToArray();
        boolean boolean46 = jSONWriter42.isIgnoreNoneSerializable();
        byte[] byteArray47 = jSONWriter42.getBytes();
        boolean boolean49 = jSONWriter25.writeTypeName(byteArray47, (long) (byte) 10);
        jSONWriter1.writeHex(byteArray47);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context38.config(feature39, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) feature44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature44 };
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray46);
        context38.config(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        jSONWriter3.config(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context53 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter52);
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        jSONWriter9.close();
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter9.writeFloat((float) 10, decimalFormat12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean20 = jSONWriter15.writeTypeName(byteArray18, (long) 10);
        boolean boolean22 = jSONWriter9.writeTypeName(byteArray18, (long) (byte) 100);
        jSONWriter9.writeInt16((short) (byte) 100);
        boolean boolean25 = jSONWriter9.hasFilter();
        java.nio.charset.Charset charset26 = jSONWriter9.getCharset();
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter9, (long) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        boolean boolean39 = jSONWriter30.isEnabled((long) ' ');
        jSONWriter30.writeString("hi!");
        boolean boolean42 = jSONWriter30.isUTF8();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        jSONWriter30.writeString((java.util.List<java.lang.String>) strList46);
        jSONWriter9.write((java.util.List) strList46);
        boolean boolean50 = jSONWriter9.isIgnoreNoneSerializable();
        java.time.Instant instant51 = null;
        jSONWriter9.writeInstant(instant51);
        boolean boolean53 = jSONWriter9.utf8;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        int int28 = jSONWriter1.level();
        jSONWriter1.writeStringNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.of(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal40 = null;
        jSONWriter37.writeDecimal(bigDecimal40);
        boolean boolean43 = jSONWriter37.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter37.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj48 = null;
        jSONWriter37.startArray(obj48, (-1));
        jSONWriter37.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray60 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        jSONWriter37.writeString((java.util.List<java.lang.String>) strList61);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter37.context;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        jSONWriter66.close();
        jSONWriter66.writeSymbol("");
        jSONWriter66.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context71 = jSONWriter66.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter72 = null;
        context71.setPropertyPreFilter(propertyPreFilter72);
        boolean boolean74 = context71.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter75 = context71.getBeforeFilter();
        java.lang.Class<?> wildcardClass76 = context71.getClass();
        boolean boolean77 = jSONWriter35.isWriteTypeInfo((java.lang.Object) context64, (java.lang.reflect.Type) wildcardClass76);
        java.lang.Class class78 = null;
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter79 = null; // flaky: jSONWriter1.getObjectWriter((java.lang.reflect.Type) wildcardClass76, class78);
        jSONWriter1.writeReference(".\\[1\\]\\[0\\]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(context71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(beforeFilter75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertNotNull(objectWriter79);
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalDate localDate2 = null;
        jSONWriter1.writeLocalDate(localDate2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray4);
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        long long24 = context22.getFeatures();
        long long25 = context22.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter26 = context22.getContextNameFilter();
        long long27 = context22.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        byte[] byteArray38 = new byte[] { (byte) -1 };
        boolean boolean40 = jSONWriter31.writeTypeName(byteArray38, 0L);
        java.util.UUID uUID41 = null;
        jSONWriter31.writeUUID(uUID41);
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter31.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context43.config(feature44, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) feature49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature49 };
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray51);
        context43.config(featureArray51);
        com.alibaba.fastjson2.JSONWriter.Context context55 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray51);
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        context55.config(feature56, false);
        boolean boolean59 = context22.isEnabled(feature56);
        boolean boolean60 = context6.isEnabled(feature56);
        boolean boolean61 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) context6);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(contextNameFilter26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean4 = jSONWriter0.containsReference((java.lang.Object) 5);
        float[] floatArray8 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter0.writeFloat(floatArray8);
        java.time.ZonedDateTime zonedDateTime10 = null;
        jSONWriter0.writeZonedDateTime(zonedDateTime10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        jSONWriter14.writeTypeName("");
        boolean boolean17 = jSONWriter14.isUseSingleQuotes();
        boolean boolean18 = jSONWriter14.isRefDetect();
        java.time.LocalTime localTime19 = null;
        jSONWriter14.writeLocalTime(localTime19);
        jSONWriter0.setRootObject((java.lang.Object) localTime19);
        jSONWriter0.writeRaw((byte) 10);
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter0.writeDecimal(bigDecimal24, 137439019008L);
        jSONWriter0.close();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        jSONWriter3.writeInt64((long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[1].hi\\!", "[1].hi\\![35]" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        jSONWriter19.writeString((java.util.List<java.lang.String>) strList26);
        boolean boolean30 = jSONWriter3.isWriteTypeInfo((java.lang.Object) jSONWriter19, (long) 5);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter19);
        jSONWriter31.writeInt64((long) (short) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        com.alibaba.fastjson2.JSONWriter.Context context11 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray9);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray9);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray9);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray9);
        context8.config(featureArray9);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter15);
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter1.writeFloat(100.0f, decimalFormat18);
        long long20 = jSONWriter1.getFeatures();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable6 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class12 = null;
        boolean boolean14 = jSONWriter7.isWriteTypeInfo((java.lang.Object) jSONWriter9, class12, (long) ' ');
        boolean boolean16 = jSONWriter7.isEnabled((long) ' ');
        jSONWriter7.writeString("hi!");
        char[] charArray19 = new char[] {};
        jSONWriter7.writeString(charArray19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter22);
        long long24 = jSONWriter22.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat31 = null;
        jSONWriter27.writeDouble(1.0d, decimalFormat31);
        boolean boolean34 = jSONWriter27.removeReference((java.lang.Object) (short) -1);
        jSONWriter27.writeArrayNull();
        long long36 = jSONWriter27.getFeatures();
        java.lang.Class<?> wildcardClass37 = jSONWriter27.getClass();
        boolean boolean39 = jSONWriter22.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass37, (long) (short) 10);
        boolean boolean40 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter7, (java.lang.reflect.Type) wildcardClass37);
        jSONWriter1.writeDateTime14(13, 10, 0, (int) (byte) 100, 10, 12);
        java.time.LocalDate localDate48 = null;
        jSONWriter1.writeLocalDate(localDate48);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        jSONWriter53.close();
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter53.writeFloat((float) 10, decimalFormat56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean64 = jSONWriter59.writeTypeName(byteArray62, (long) 10);
        boolean boolean66 = jSONWriter53.writeTypeName(byteArray62, (long) (byte) 100);
        jSONWriter51.writeNameRaw(byteArray62, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        char[] charArray73 = new char[] { '#', ' ' };
        jSONWriter70.writeString(charArray73, (int) (byte) 0, (int) (short) 1);
        jSONWriter51.writeString(charArray73);
        jSONWriter1.writeString(charArray73);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[#,  ]");
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        long long13 = jSONWriter1.getFeatures((long) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        boolean boolean16 = jSONWriter15.isRefDetect();
        jSONWriter15.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter24 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        boolean[] booleanArray31 = new boolean[] { false, true, true, true };
        jSONWriter26.writeBool(booleanArray31);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        byte[] byteArray43 = new byte[] { (byte) -1 };
        boolean boolean45 = jSONWriter36.writeTypeName(byteArray43, 0L);
        jSONWriter26.writeBinary(byteArray43);
        java.lang.String str47 = jSONWriter15.setPath(fieldWriter24, (java.lang.Object) jSONWriter26);
        boolean boolean49 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter26, (long) (byte) 1);
        java.util.Map map50 = null;
        jSONWriter26.write(map50);
        boolean boolean52 = jSONWriter26.isIgnoreNoneSerializable();
        long long54 = jSONWriter26.getFeatures((long) 10);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray17 = null;
        jSONWriter14.writeHex(byteArray17);
        boolean boolean19 = jSONWriter14.isRefDetect();
        jSONWriter14.writeNumberNull();
        jSONWriter14.writeFloat((java.lang.Float) 0.0f);
        java.time.LocalDateTime localDateTime23 = null;
        jSONWriter14.writeLocalDateTime(localDateTime23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter39.writeDouble(1.0d, decimalFormat43);
        boolean boolean46 = jSONWriter39.removeReference((java.lang.Object) (short) -1);
        jSONWriter39.writeArrayNull();
        long long48 = jSONWriter39.getFeatures();
        java.lang.Class<?> wildcardClass49 = jSONWriter39.getClass();
        boolean boolean51 = jSONWriter26.isWriteTypeInfo((java.lang.Object) boolean37, (java.lang.reflect.Type) wildcardClass49, 0L);
        jSONWriter10.checkAndWriteTypeName((java.lang.Object) localDateTime23, (java.lang.Class) wildcardClass49);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter53 = jSONWriter8.getObjectWriter((java.lang.Class) wildcardClass49);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objectWriter53);
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = context26.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context26.getProvider();
        boolean boolean30 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context26);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26, symbolTable31);
        jSONWriter32.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter35);
        boolean boolean37 = jSONWriter35.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter39.writeDouble(1.0d, decimalFormat43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean51 = jSONWriter46.writeTypeName(byteArray49, (long) 10);
        jSONWriter39.writeStringLatin1(byteArray49);
        jSONWriter35.writeStringLatin1(byteArray49);
        int int54 = jSONWriter35.level();
        boolean boolean55 = jSONWriter35.isBeanToArray();
        jSONWriter35.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        jSONWriter35.config(feature57, true);
        jSONWriter32.writeEnum((java.lang.Enum) feature57);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        long long11 = jSONWriter9.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter9.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass24, (long) (short) 10);
        int[] intArray33 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter9.writeInt32(intArray33);
        double[] doubleArray39 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter9.writeDouble(doubleArray39);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter1.writeDouble(doubleArray39, decimalFormat41);
        jSONWriter1.writeName("[1].hi\\![35]");
        java.util.UUID uUID45 = null;
        jSONWriter1.writeUUID(uUID45);
        jSONWriter1.writeInt16((short) (byte) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        boolean boolean7 = jSONWriter1.isEnabled((long) (short) 1);
        jSONWriter1.endArray();
        boolean boolean9 = jSONWriter1.utf16;
        java.util.UUID uUID10 = null;
        jSONWriter1.writeUUID(uUID10);
        byte[] byteArray12 = jSONWriter1.getBytes();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-74, 10, -81]");
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        boolean boolean27 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter28 = null;
        context15.setContextNameFilter(contextNameFilter28);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        jSONWriter9.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter9.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        java.lang.String str40 = jSONWriter9.setPath((int) (short) 100, (java.lang.Object) jSONWriter26);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) feature45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature45 };
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        jSONWriter42.config(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.of(featureArray47);
        java.lang.String str53 = jSONWriter26.setPath("$", (java.lang.Object) featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray47);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(jSONWriter54);
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        boolean boolean25 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context15.provider;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter28 = context15.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNull(afterFilter28);
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        boolean[] booleanArray34 = new boolean[] { false, true, true, true };
        jSONWriter29.writeBool(booleanArray34);
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        jSONWriter29.writeBinary(byteArray46);
        jSONWriter1.writeRaw(byteArray46);
        boolean boolean51 = jSONWriter1.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter1.getContext();
        com.alibaba.fastjson2.filter.NameFilter nameFilter53 = null;
        context52.setNameFilter(nameFilter53);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter55 = context52.getBeforeFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertNull(beforeFilter55);
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context21.getPropertyFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter24 = context21.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertNull(afterFilter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        jSONWriter6.writeString(".\\[1\\]\\[0\\]");
        jSONWriter6.writeRaw("[52]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.startArray((int) (short) 1);
        java.time.Instant instant12 = null;
        jSONWriter1.writeInstant(instant12);
        java.math.BigDecimal bigDecimal14 = null;
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter1.writeDecimal(bigDecimal14, (-1L), decimalFormat16);
        java.time.LocalTime localTime18 = null;
        jSONWriter1.writeLocalTime(localTime18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter21.writeDecimal(bigDecimal24);
        java.lang.Object obj26 = null;
        java.lang.Class class27 = null;
        jSONWriter21.checkAndWriteTypeName(obj26, class27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean30 = jSONWriter21.isEnabled(feature29);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        boolean boolean41 = jSONWriter32.isEnabled((long) ' ');
        jSONWriter32.writeString("hi!");
        char[] charArray44 = new char[] {};
        jSONWriter32.writeString(charArray44);
        jSONWriter21.writeString(charArray44);
        jSONWriter1.writeString(charArray44, (int) (short) 10, 7);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[]");
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue;
        boolean boolean11 = jSONWriter9.isEnabled(feature10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray16 = null;
        jSONWriter13.writeHex(byteArray16);
        boolean boolean18 = jSONWriter13.isWriteNulls();
        jSONWriter13.writeInt64((long) 5);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter21 = null;
        com.alibaba.fastjson2.JSONWriter.Path path22 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str23 = path22.toString();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        jSONWriter25.writeSymbol((-1));
        jSONWriter25.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        com.alibaba.fastjson2.JSONObject jSONObject37 = null;
        jSONWriter25.write(jSONObject37);
        boolean boolean39 = path22.equals((java.lang.Object) jSONWriter25);
        java.lang.String str40 = jSONWriter13.setPath(fieldWriter21, (java.lang.Object) path22);
        float[] floatArray41 = null;
        jSONWriter13.writeFloat(floatArray41);
        boolean boolean43 = jSONWriter13.isUseSingleQuotes();
        java.nio.charset.Charset charset44 = jSONWriter13.getCharset();
        byte[] byteArray45 = jSONWriter9.getBytes(charset44);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "$" + "'", str23, "$");
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        jSONWriter19.startObject();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter19.writeRaw('a', ' ');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(jSONWriter19);
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider22 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        jSONWriter24.close();
        jSONWriter24.writeSymbol("");
        jSONWriter24.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter24.context;
        jSONWriter24.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = jSONWriter24.symbolTable;
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter36.isWriteTypeInfo((java.lang.Object) jSONWriter38, class41, (long) ' ');
        byte[] byteArray45 = new byte[] { (byte) 100 };
        boolean boolean47 = jSONWriter36.writeTypeName(byteArray45, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        int[] intArray53 = new int[] { (short) -1 };
        jSONWriter51.writeInt32(intArray53);
        java.lang.String str55 = jSONWriter36.setPath("hi!", (java.lang.Object) intArray53);
        jSONWriter24.writeInt32(intArray53);
        com.alibaba.fastjson2.SymbolTable symbolTable57 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class63 = null;
        boolean boolean65 = jSONWriter58.isWriteTypeInfo((java.lang.Object) jSONWriter60, class63, (long) ' ');
        byte[] byteArray67 = new byte[] { (byte) -1 };
        boolean boolean69 = jSONWriter60.writeTypeName(byteArray67, 0L);
        java.util.UUID uUID70 = null;
        jSONWriter60.writeUUID(uUID70);
        com.alibaba.fastjson2.JSONWriter.Context context72 = jSONWriter60.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context72);
        java.time.LocalTime localTime74 = null;
        jSONWriter73.writeLocalTime(localTime74);
        boolean boolean76 = jSONWriter73.isBeanToArray();
        boolean boolean77 = jSONWriter73.isIgnoreNoneSerializable();
        byte[] byteArray78 = jSONWriter73.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature feature79 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty;
        jSONWriter73.config(feature79, false);
        jSONWriter24.writeEnum((java.lang.Enum) feature79);
        boolean boolean83 = context15.isEnabled(feature79);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNull(symbolTable34);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1]");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(context72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-81]");
        org.junit.Assert.assertTrue("'" + feature79 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty + "'", feature79.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        jSONWriter29.writeInt8((byte) 1);
        jSONWriter29.endArray();
        jSONWriter29.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context64.config(feature65, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) feature70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70 };
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        context64.config(featureArray72);
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray72);
        jSONWriter29.config(featureArray72);
        boolean boolean78 = jSONWriter25.isIgnoreNoneSerializable((java.lang.Object) featureArray72);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        jSONWriter80.close();
        jSONWriter80.writeSymbol("");
        jSONWriter80.writeBooleanNull();
        boolean boolean85 = jSONWriter80.isUTF8();
        java.time.ZonedDateTime zonedDateTime86 = null;
        jSONWriter80.writeZonedDateTime(zonedDateTime86);
        float[] floatArray90 = new float[] { 0, 8 };
        jSONWriter80.writeFloat(floatArray90);
        boolean boolean92 = jSONWriter25.isWriteTypeInfo((java.lang.Object) floatArray90);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(floatArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray90), "[0.0, 8.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter18.writeInt16((short) (byte) 100);
        boolean boolean34 = jSONWriter18.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        boolean boolean55 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean34, (java.lang.reflect.Type) wildcardClass51, (long) (byte) -1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter56 = null;
        com.alibaba.fastjson2.JSONWriter.Path path57 = null;
        com.alibaba.fastjson2.JSONWriter.Path path59 = new com.alibaba.fastjson2.JSONWriter.Path(path57, "");
        com.alibaba.fastjson2.JSONWriter.Path path61 = new com.alibaba.fastjson2.JSONWriter.Path(path59, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path63 = new com.alibaba.fastjson2.JSONWriter.Path(path61, "hi!");
        java.lang.String str64 = path61.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class71 = null;
        boolean boolean73 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter68, class71, (long) ' ');
        byte[] byteArray75 = new byte[] { (byte) -1 };
        boolean boolean77 = jSONWriter68.writeTypeName(byteArray75, 0L);
        java.util.UUID uUID78 = null;
        jSONWriter68.writeUUID(uUID78);
        com.alibaba.fastjson2.JSONWriter.Context context80 = jSONWriter68.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter81 = context80.getPropertyFilter();
        long long82 = context80.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter83 = null;
        context80.setLabelFilter(labelFilter83);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider85 = context80.provider;
        boolean boolean86 = path61.equals((java.lang.Object) context80);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context80.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter88 = null;
        context80.setNameFilter(nameFilter88);
        java.lang.String str90 = jSONWriter1.setPath(fieldWriter56, (java.lang.Object) context80);
        boolean boolean91 = context80.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter92 = context80.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter93 = context80.getContextNameFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[1]" + "'", str64, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(context80);
        org.junit.Assert.assertNull(propertyFilter81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(afterFilter87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(contextValueFilter92);
        org.junit.Assert.assertNull(contextNameFilter93);
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        java.util.UUID uUID14 = null;
        jSONWriter4.writeUUID(uUID14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter4.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context16);
        java.time.format.DateTimeFormatter dateTimeFormatter18 = context16.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider19 = context16.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) feature22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22 };
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider19, featureArray24);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray24);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("[1][10]", featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(objectWriterProvider19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.getProvider();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateTime14((int) (short) 10, (int) (byte) -1, 0, (int) (byte) 100, (int) (short) -1, 5);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter1.writeBigInt(bigInteger14);
        boolean boolean16 = jSONWriter1.utf16;
        jSONWriter1.writeStringNull();
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context33);
        java.time.LocalTime localTime35 = null;
        jSONWriter34.writeLocalTime(localTime35);
        jSONWriter34.writeInt8((byte) -1);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName;
        boolean boolean40 = jSONWriter34.isEnabled(feature39);
        boolean boolean41 = jSONWriter34.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        boolean boolean43 = jSONWriter34.isEnabled(feature42);
        jSONWriter1.writeEnum((java.lang.Enum) feature42);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        boolean boolean55 = jSONWriter46.isEnabled((long) ' ');
        jSONWriter46.writeString("hi!");
        char[] charArray58 = new char[] {};
        jSONWriter46.writeString(charArray58);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(charArray58, (int) (byte) 100, 2, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteHashMapArrayListClassName));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[]");
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        java.time.LocalDate localDate16 = null;
        jSONWriter1.writeLocalDate(localDate16);
        jSONWriter1.writeTypeName(".\\[1\\]\\[0\\]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        int int12 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray14 = null;
        jSONWriter13.writeDouble(doubleArray14);
        jSONWriter13.writeArrayNull();
        jSONWriter13.writeSymbol((int) (byte) 10);
        jSONWriter13.close();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter36 = context35.getPropertyFilter();
        long long37 = context35.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context35.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider40 = context35.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter41 = null;
        context35.setPropertyPreFilter(propertyPreFilter41);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter43 = null;
        context35.setPropertyPreFilter(propertyPreFilter43);
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        boolean boolean46 = context35.isEnabled(feature45);
        boolean boolean47 = jSONWriter13.isEnabled(feature45);
        jSONWriter1.config(feature45, false);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNull(propertyFilter36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider40);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter1.context;
        byte[] byteArray17 = jSONWriter1.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        jSONWriter19.close();
        jSONWriter19.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        boolean boolean33 = jSONWriter24.isEnabled((long) ' ');
        jSONWriter24.writeString("hi!");
        boolean boolean36 = jSONWriter24.isUTF8();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        jSONWriter24.writeString((java.util.List<java.lang.String>) strList40);
        jSONWriter19.writeString((java.util.List<java.lang.String>) strList40);
        jSONWriter19.writeDateYYYMMDD8((int) (byte) 10, (int) (short) -1, 10);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter48 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        boolean boolean59 = jSONWriter50.isEnabled((long) ' ');
        jSONWriter50.writeString("hi!");
        boolean boolean62 = jSONWriter50.isUTF8();
        java.lang.String str63 = jSONWriter19.setPath(fieldWriter48, (java.lang.Object) boolean62);
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 10 };
        jSONWriter19.writeStringLatin1(byteArray66);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable72 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable72);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        boolean boolean77 = jSONWriter75.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class78 = null;
        boolean boolean80 = jSONWriter73.isWriteTypeInfo((java.lang.Object) jSONWriter75, class78, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray81 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray81);
        boolean boolean84 = jSONWriter82.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat86 = null;
        jSONWriter82.writeDouble(1.0d, decimalFormat86);
        boolean boolean89 = jSONWriter82.removeReference((java.lang.Object) (short) -1);
        jSONWriter82.writeArrayNull();
        long long91 = jSONWriter82.getFeatures();
        java.lang.Class<?> wildcardClass92 = jSONWriter82.getClass();
        boolean boolean94 = jSONWriter69.isWriteTypeInfo((java.lang.Object) boolean80, (java.lang.reflect.Type) wildcardClass92, 0L);
        jSONWriter69.writeStringNull();
        char[] charArray96 = new char[] {};
        jSONWriter69.writeString(charArray96);
        jSONWriter19.writeString(charArray96);
        jSONWriter1.writeString(charArray96);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-91]");
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100, 10]");
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(featureArray81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray96), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray96), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray96), "[]");
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3358");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        java.math.BigDecimal bigDecimal1 = null;
        java.text.DecimalFormat decimalFormat3 = null;
        jSONWriter0.writeDecimal(bigDecimal1, (-1L), decimalFormat3);
        jSONWriter0.writeRaw(' ');
        boolean boolean7 = jSONWriter0.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter9.writeDecimal(bigDecimal12);
        java.lang.Object obj14 = null;
        java.lang.Class class15 = null;
        jSONWriter9.checkAndWriteTypeName(obj14, class15);
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean18 = jSONWriter9.isEnabled(feature17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = jSONWriter9.symbolTable;
        jSONWriter9.writeInt16((short) (byte) 1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter22 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter39 = context38.getPropertyFilter();
        long long40 = context38.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter41 = null;
        context38.setLabelFilter(labelFilter41);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter43 = context38.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter44 = null;
        context38.setPropertyFilter(propertyFilter44);
        boolean boolean46 = context38.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter47 = context38.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter48 = null;
        context38.setBeforeFilter(beforeFilter48);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter50 = context38.getPropertyPreFilter();
        java.lang.String str51 = jSONWriter9.setPath(fieldWriter22, (java.lang.Object) propertyPreFilter50);
        java.time.ZonedDateTime zonedDateTime52 = null;
        jSONWriter9.writeZonedDateTime(zonedDateTime52);
        boolean boolean54 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter9.writeRaw("[1].hi\\!");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(symbolTable19);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNull(propertyFilter39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNull(contextValueFilter43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(nameFilter47);
        org.junit.Assert.assertNull(propertyPreFilter50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        jSONWriter1.writeName("hi!");
        java.time.LocalTime localTime10 = null;
        jSONWriter1.writeLocalTime(localTime10);
        java.util.UUID uUID12 = null;
        jSONWriter1.writeUUID(uUID12);
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter1.writeDecimal(bigDecimal14, (long) 1);
        jSONWriter1.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter26.writeDouble(1.0d, decimalFormat30);
        boolean boolean33 = jSONWriter26.removeReference((java.lang.Object) (short) -1);
        jSONWriter26.writeArrayNull();
        jSONWriter26.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray38 = null;
        jSONWriter37.writeDouble(doubleArray38);
        jSONWriter37.writeArrayNull();
        short[] shortArray44 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter37.writeInt16(shortArray44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal50 = null;
        jSONWriter47.writeDecimal(bigDecimal50);
        boolean boolean53 = jSONWriter47.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter47.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        char[] charArray62 = new char[] { '#', ' ' };
        jSONWriter59.writeString(charArray62, (int) (byte) 0, (int) (short) 1);
        jSONWriter47.writeString(charArray62);
        jSONWriter37.writeString(charArray62);
        jSONWriter26.writeString(charArray62);
        jSONWriter24.writeString(charArray62);
        jSONWriter1.writeString(charArray62);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[#,  ]");
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) feature20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray22);
        jSONWriter17.config(featureArray22);
        context13.config(featureArray22);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter27 = context13.getContextNameFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter28 = context13.getNameFilter();
        boolean boolean29 = context13.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter30 = context13.getLabelFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(contextNameFilter27);
        org.junit.Assert.assertNull(nameFilter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(labelFilter30);
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3361");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        jSONWriter5.writeChar('4');
        jSONWriter5.writeReference("hi!");
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3362");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.writeName("[1].hi\\![35]");
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        jSONWriter1.config(feature4, true);
        com.alibaba.fastjson2.JSONWriter.Context context7 = jSONWriter1.getContext();
        jSONWriter1.endArray();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertNotNull(context7);
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter6.isWriteTypeInfo((java.lang.Object) jSONWriter8, class11, (long) ' ');
        boolean boolean15 = jSONWriter6.isEnabled((long) ' ');
        jSONWriter6.writeString("hi!");
        boolean boolean18 = jSONWriter6.isUTF8();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        jSONWriter6.writeString((java.util.List<java.lang.String>) strList22);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList22);
        jSONWriter1.writeDateYYYMMDD8((int) (byte) 10, (int) (short) -1, 10);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter30 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        boolean boolean41 = jSONWriter32.isEnabled((long) ' ');
        jSONWriter32.writeString("hi!");
        boolean boolean44 = jSONWriter32.isUTF8();
        java.lang.String str45 = jSONWriter1.setPath(fieldWriter30, (java.lang.Object) boolean44);
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 10 };
        jSONWriter1.writeStringLatin1(byteArray48);
        jSONWriter1.writeDateTime14(10, (int) (byte) 10, (int) '#', 7, 12, 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100, 10]");
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3364");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter27 = null;
        context15.setAfterFilter(afterFilter27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.FieldBased;
        context15.config(feature29, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.FieldBased + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.FieldBased));
        org.junit.Assert.assertNotNull(jSONWriter32);
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        jSONWriter1.writeMillis((long) (short) 10);
        int int10 = jSONWriter1.level();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3366");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        jSONWriter29.writeInt8((byte) 1);
        jSONWriter29.endArray();
        jSONWriter29.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context64.config(feature65, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) feature70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70 };
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        context64.config(featureArray72);
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray72);
        jSONWriter29.config(featureArray72);
        boolean boolean78 = jSONWriter25.isIgnoreNoneSerializable((java.lang.Object) featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray72);
        com.alibaba.fastjson2.SymbolTable symbolTable80 = jSONWriter79.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNull(symbolTable80);
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) feature28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider25, featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        jSONWriter1.setRootObject((java.lang.Object) jSONWriter33);
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter36.isWriteTypeInfo((java.lang.Object) jSONWriter38, class41, (long) ' ');
        byte[] byteArray45 = new byte[] { (byte) 100 };
        boolean boolean47 = jSONWriter36.writeTypeName(byteArray45, (long) (-1));
        jSONWriter1.writeNameRaw(byteArray45);
        jSONWriter1.startArray((int) (byte) 10);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3368");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) '4');
        java.lang.String str9 = path2.toString();
        java.lang.String str10 = path2.toString();
        java.lang.String str11 = path2.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3369");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        java.util.UUID uUID22 = null;
        jSONWriter12.writeUUID(uUID22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter12.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter25 = context24.getPropertyFilter();
        long long26 = context24.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter27 = null;
        context24.setLabelFilter(labelFilter27);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context24, symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context24.config(feature31, true);
        boolean boolean34 = context24.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter35 = context24.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter52 = context51.getPropertyFilter();
        long long53 = context51.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter54 = null;
        context51.setLabelFilter(labelFilter54);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider56 = context51.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter57 = null;
        context51.setPropertyPreFilter(propertyPreFilter57);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter59 = null;
        context51.setPropertyPreFilter(propertyPreFilter59);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter61 = null;
        context51.setLabelFilter(labelFilter61);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider63 = context51.getProvider();
        java.lang.Class<?> wildcardClass64 = context51.getClass();
        boolean boolean65 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context24, (java.lang.Class) wildcardClass64);
        jSONWriter1.startObject();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertNull(propertyFilter25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(propertyPreFilter35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNull(propertyFilter52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider56);
        org.junit.Assert.assertNotNull(objectWriterProvider63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        jSONWriter5.close();
        java.text.DecimalFormat decimalFormat8 = null;
        jSONWriter5.writeFloat((float) 10, decimalFormat8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean16 = jSONWriter11.writeTypeName(byteArray14, (long) 10);
        boolean boolean18 = jSONWriter5.writeTypeName(byteArray14, (long) (byte) 100);
        jSONWriter5.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        jSONWriter22.close();
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter22.writeFloat((float) 10, decimalFormat25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean33 = jSONWriter28.writeTypeName(byteArray31, (long) 10);
        boolean boolean35 = jSONWriter22.writeTypeName(byteArray31, (long) (byte) 100);
        jSONWriter22.writeInt16((short) (byte) 100);
        boolean boolean38 = jSONWriter22.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter40);
        long long42 = jSONWriter40.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter45.writeDouble(1.0d, decimalFormat49);
        boolean boolean52 = jSONWriter45.removeReference((java.lang.Object) (short) -1);
        jSONWriter45.writeArrayNull();
        long long54 = jSONWriter45.getFeatures();
        java.lang.Class<?> wildcardClass55 = jSONWriter45.getClass();
        boolean boolean57 = jSONWriter40.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass55, (long) (short) 10);
        boolean boolean59 = jSONWriter5.isWriteTypeInfo((java.lang.Object) boolean38, (java.lang.reflect.Type) wildcardClass55, (long) (byte) -1);
        jSONWriter5.writeSymbol("[1].hi\\!");
        boolean boolean63 = jSONWriter1.isWriteTypeInfo((java.lang.Object) "[1].hi\\!", 1L);
        jSONWriter1.endArray();
        com.alibaba.fastjson2.JSONObject jSONObject65 = null;
        jSONWriter1.write(jSONObject65);
        jSONWriter1.close();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter19 = context15.getValueFilter();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(valueFilter19);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(jSONWriter21);
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        byte[] byteArray43 = null;
        jSONWriter33.writeBinary(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter33.writeHex(byteArray51);
        jSONWriter25.writeBinary(byteArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter25.containsReference(obj54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        jSONWriter57.close();
        jSONWriter57.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable61 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        boolean boolean66 = jSONWriter64.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class67 = null;
        boolean boolean69 = jSONWriter62.isWriteTypeInfo((java.lang.Object) jSONWriter64, class67, (long) ' ');
        boolean boolean71 = jSONWriter62.isEnabled((long) ' ');
        jSONWriter62.writeString("hi!");
        boolean boolean74 = jSONWriter62.isUTF8();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        jSONWriter62.writeString((java.util.List<java.lang.String>) strList78);
        jSONWriter57.writeString((java.util.List<java.lang.String>) strList78);
        jSONWriter25.write((java.util.List) strList78);
        jSONWriter25.writeChar('4');
        jSONWriter25.writeDouble((double) 10.0f);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 1, -1, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        jSONWriter1.writeEnum((java.lang.Enum) feature7);
        boolean boolean9 = jSONWriter1.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter1.writeDouble((double) 1.0f, decimalFormat7);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        long long22 = jSONWriter12.getFeatures();
        boolean boolean23 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter12);
        boolean boolean24 = jSONWriter12.isWriteNulls();
        java.time.ZonedDateTime zonedDateTime25 = null;
        jSONWriter12.writeZonedDateTime(zonedDateTime25);
        jSONWriter12.writeRaw((byte) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeRaw((byte) 10);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3376");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        jSONWriter25.writeNull();
        java.text.DecimalFormat decimalFormat37 = null;
        jSONWriter25.writeFloat((float) 0, decimalFormat37);
        boolean boolean39 = jSONWriter25.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter41);
        boolean boolean43 = jSONWriter41.utf16;
        jSONWriter41.endObject();
        jSONWriter41.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable52 = jSONWriter41.symbolTable;
        double[] doubleArray58 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter41.writeDouble(doubleArray58);
        jSONWriter25.writeDouble(doubleArray58);
        jSONWriter21.writeDouble(doubleArray58);
        jSONWriter21.writeDateTimeISO8601((int) (short) 10, 0, 4, (int) (byte) 1, 12, (int) (byte) 100, (int) (short) 100, 7, false);
        java.text.DecimalFormat decimalFormat73 = null;
        jSONWriter21.writeFloat((float) 97L, decimalFormat73);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        jSONWriter76.writeName("[1].hi\\![35]");
        com.alibaba.fastjson2.JSONWriter.Feature feature79 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        jSONWriter76.config(feature79, true);
        jSONWriter21.writeEnum((java.lang.Enum) feature79);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(symbolTable52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + feature79 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature79.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3377");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        jSONWriter1.writeChar('a');
        boolean boolean36 = jSONWriter1.isIgnoreNoneSerializable();
        boolean boolean37 = jSONWriter1.utf8;
        jSONWriter1.writeMillis((long) 8);
        jSONWriter1.writeTypeName("[1]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        java.util.UUID uUID14 = null;
        jSONWriter4.writeUUID(uUID14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter4.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter17 = context16.getPropertyFilter();
        long long18 = context16.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter19 = null;
        context16.setLabelFilter(labelFilter19);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter21 = null;
        context16.setValueFilter(valueFilter21);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter23 = context16.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        byte[] byteArray38 = null;
        jSONWriter28.writeBinary(byteArray38);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class41 = null;
        jSONWriter28.checkAndWriteTypeName((java.lang.Object) feature40, class41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature40 };
        context16.config(featureArray43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context("[1]", featureArray43);
        boolean boolean46 = context45.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(propertyFilter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.time.ZonedDateTime zonedDateTime16 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray22 = null;
        jSONWriter19.writeHex(byteArray22);
        boolean boolean24 = jSONWriter19.isRefDetect();
        jSONWriter19.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter42 = context41.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        boolean boolean45 = jSONWriter44.isRefDetect();
        java.lang.String str48 = jSONWriter44.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter50);
        long long52 = jSONWriter50.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter55.writeDouble(1.0d, decimalFormat59);
        boolean boolean62 = jSONWriter55.removeReference((java.lang.Object) (short) -1);
        jSONWriter55.writeArrayNull();
        long long64 = jSONWriter55.getFeatures();
        java.lang.Class<?> wildcardClass65 = jSONWriter55.getClass();
        boolean boolean67 = jSONWriter50.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass65, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter68 = jSONWriter44.getObjectWriter((java.lang.Class) wildcardClass65);
        boolean boolean69 = jSONWriter19.isWriteTypeInfo((java.lang.Object) context41, (java.lang.reflect.Type) wildcardClass65);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter70 = jSONWriter3.getObjectWriter((java.lang.Class) wildcardClass65);
        com.alibaba.fastjson2.JSONWriter.Context context71 = jSONWriter3.context;
        java.util.Map map72 = null;
        jSONWriter3.write(map72);
        boolean boolean74 = jSONWriter3.isRefDetect();
        jSONWriter3.writeName(".hi\\!");
        boolean boolean77 = jSONWriter3.hasFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNull(propertyFilter42);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objectWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectWriter70);
        org.junit.Assert.assertNotNull(context71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context15.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter30.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider29, featureArray35);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        byte[] byteArray52 = new byte[] { (byte) -1 };
        boolean boolean54 = jSONWriter45.writeTypeName(byteArray52, 0L);
        java.util.UUID uUID55 = null;
        jSONWriter45.writeUUID(uUID55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = jSONWriter45.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter58 = context57.getPropertyFilter();
        long long59 = context57.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter60 = null;
        context57.setLabelFilter(labelFilter60);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider62 = context57.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter63 = null;
        context57.setPropertyPreFilter(propertyPreFilter63);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter65 = null;
        context57.setPropertyPreFilter(propertyPreFilter65);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = null;
        context57.setLabelFilter(labelFilter67);
        jSONWriter41.popPath((java.lang.Object) context57);
        boolean boolean70 = context57.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean75 = jSONWriter73.isRefDetect((java.lang.Object) feature74);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature74 };
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray76);
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray76);
        jSONWriter71.config(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.of(featureArray76);
        context57.config(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(context57);
        org.junit.Assert.assertNull(propertyFilter58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(jSONWriter80);
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3381");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context22.getProvider();
        java.lang.String str25 = jSONWriter1.setPath("$", (java.lang.Object) context22);
        java.nio.charset.Charset charset26 = jSONWriter1.getCharset();
        jSONWriter1.writeDouble((double) (byte) 0);
        jSONWriter1.writeSymbol("[1][0]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(charset26);
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        boolean boolean19 = context15.isDateFormatISO8601();
        boolean boolean20 = context15.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean13 = jSONWriter8.writeTypeName(byteArray11, (long) 10);
        jSONWriter1.writeStringLatin1(byteArray11);
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        int int17 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = null;
        jSONWriter18.writeDouble(doubleArray19);
        boolean boolean21 = jSONWriter18.utf16;
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter18.writeDecimal(bigDecimal22, 100L);
        boolean boolean25 = jSONWriter18.utf16;
        boolean boolean27 = jSONWriter18.isEnabled((long) '4');
        boolean boolean28 = jSONWriter1.containsReference((java.lang.Object) jSONWriter18);
        java.time.LocalDate localDate29 = null;
        jSONWriter1.writeLocalDate(localDate29);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.of(context4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        boolean boolean14 = jSONWriter7.removeReference((java.lang.Object) (short) -1);
        jSONWriter7.writeArrayNull();
        jSONWriter7.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = null;
        jSONWriter18.writeDouble(doubleArray19);
        jSONWriter18.writeArrayNull();
        short[] shortArray25 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter18.writeInt16(shortArray25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal31 = null;
        jSONWriter28.writeDecimal(bigDecimal31);
        boolean boolean34 = jSONWriter28.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter28.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        char[] charArray43 = new char[] { '#', ' ' };
        jSONWriter40.writeString(charArray43, (int) (byte) 0, (int) (short) 1);
        jSONWriter28.writeString(charArray43);
        jSONWriter18.writeString(charArray43);
        jSONWriter7.writeString(charArray43);
        jSONWriter5.writeString(charArray43);
        boolean boolean51 = jSONWriter5.isUTF8();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#,  ]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3385");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        boolean boolean11 = jSONWriter9.utf16;
        long long13 = jSONWriter9.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter9.getSymbolTable();
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        boolean boolean16 = jSONWriter1.isUTF16();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter19.writeDecimal(bigDecimal22);
        boolean boolean25 = jSONWriter19.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter19.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj30 = null;
        jSONWriter19.startArray(obj30, (-1));
        jSONWriter19.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        jSONWriter19.writeDateTime19(5, (-1), (int) (byte) -1, (int) (short) -1, (int) (short) -1, (int) (byte) 0);
        boolean boolean44 = jSONWriter19.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        java.util.UUID uUID58 = null;
        jSONWriter48.writeUUID(uUID58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = jSONWriter48.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context60);
        java.time.format.DateTimeFormatter dateTimeFormatter62 = context60.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider63 = context60.getProvider();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter64 = context60.getContextNameFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context60, symbolTable65);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        boolean boolean69 = jSONWriter68.isRefDetect();
        java.lang.String str72 = jSONWriter68.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter74);
        long long76 = jSONWriter74.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        boolean boolean81 = jSONWriter79.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat83 = null;
        jSONWriter79.writeDouble(1.0d, decimalFormat83);
        boolean boolean86 = jSONWriter79.removeReference((java.lang.Object) (short) -1);
        jSONWriter79.writeArrayNull();
        long long88 = jSONWriter79.getFeatures();
        java.lang.Class<?> wildcardClass89 = jSONWriter79.getClass();
        boolean boolean91 = jSONWriter74.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass89, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter92 = jSONWriter68.getObjectWriter((java.lang.Class) wildcardClass89);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter93 = jSONWriter66.getObjectWriter((java.lang.Class) wildcardClass89);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter94 = jSONWriter19.getObjectWriter((java.lang.Class) wildcardClass89);
        boolean boolean95 = jSONWriter1.removeReference((java.lang.Object) wildcardClass89);
        java.time.LocalTime localTime96 = null;
        jSONWriter1.writeLocalTime(localTime96);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(context60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(objectWriterProvider63);
        org.junit.Assert.assertNull(contextNameFilter64);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objectWriter92);
        org.junit.Assert.assertNotNull(objectWriter93);
        org.junit.Assert.assertNotNull(objectWriter94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        long long30 = context15.getFeatures();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter33);
        boolean boolean35 = jSONWriter33.utf16;
        jSONWriter33.endObject();
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter33.getContext();
        java.time.ZoneId zoneId38 = context37.getZoneId();
        context15.setZoneId(zoneId38);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertNotNull(zoneId38);
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.util.Map map4 = null;
        jSONWriter0.write(map4);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter0.writeDouble((double) 0, decimalFormat7);
        jSONWriter0.writeFloat((java.lang.Float) 1.0f);
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter0.writeDecimal(bigDecimal11);
        jSONWriter0.writeDateTime14(7, 10, (int) (short) -1, (int) (short) 0, 6, (int) (short) 1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter1.writeFloat((float) ' ', decimalFormat21);
        jSONWriter1.writeInt32(0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDateYYYMMDD10(7, 8, 6);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context26.setLabelFilter(labelFilter29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context26.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        jSONWriter32.config(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray37);
        boolean boolean42 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter41);
        java.time.LocalTime localTime43 = null;
        jSONWriter1.writeLocalTime(localTime43);
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Path path46 = null;
        com.alibaba.fastjson2.JSONWriter.Path path48 = new com.alibaba.fastjson2.JSONWriter.Path(path46, "");
        com.alibaba.fastjson2.JSONWriter.Path path50 = new com.alibaba.fastjson2.JSONWriter.Path(path48, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path52 = new com.alibaba.fastjson2.JSONWriter.Path(path50, "hi!");
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF8();
        com.alibaba.fastjson2.JSONWriter.Context context54 = jSONWriter53.context;
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter55 = null;
        context54.setContextNameFilter(contextNameFilter55);
        boolean boolean57 = context54.isDateFormatMillis();
        boolean boolean58 = context54.isDateFormatHasDay();
        boolean boolean59 = path52.equals((java.lang.Object) context54);
        jSONWriter1.writeAny((java.lang.Object) boolean59);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(context54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3390");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat9 = null;
        jSONWriter5.writeDouble(1.0d, decimalFormat9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean17 = jSONWriter12.writeTypeName(byteArray15, (long) 10);
        jSONWriter5.writeStringLatin1(byteArray15);
        jSONWriter1.writeStringLatin1(byteArray15);
        int int20 = jSONWriter1.level();
        boolean boolean21 = jSONWriter1.isBeanToArray();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context38.config(feature39, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) feature44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature44 };
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray46);
        context38.config(featureArray46);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter50 = context38.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter51 = null;
        context38.setContextNameFilter(contextNameFilter51);
        context38.setDateFormat("[1].hi\\![35]");
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean56 = context38.isEnabled(feature55);
        jSONWriter1.config(feature55, false);
        char[] charArray65 = new char[] { '#', '#', '#', '#', '4', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray65, 13, 5);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNull(contextValueFilter50);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "####4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "####4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[#, #, #, #, 4, a]");
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3391");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class40 = null;
        jSONWriter27.checkAndWriteTypeName((java.lang.Object) feature39, class40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature39 };
        context15.config(featureArray42);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter44 = context15.getContextValueFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        boolean boolean46 = context15.isEnabled(feature45);
        boolean boolean47 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        jSONWriter49.writeName("[1].hi\\![35]");
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        jSONWriter49.config(feature52, true);
        boolean boolean55 = context15.isEnabled(feature52);
        java.time.ZoneId zoneId56 = context15.getZoneId();
        boolean boolean57 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider58 = context15.provider;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextNameFilter22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNull(contextValueFilter44);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneId56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider58);
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3392");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.SymbolTable symbolTable2 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable2);
        boolean[] booleanArray8 = new boolean[] { false, true, true, true };
        jSONWriter3.writeBool(booleanArray8);
        jSONWriter1.writeBool(booleanArray8);
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context27.getPropertyFilter();
        long long29 = context27.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter30 = null;
        context27.setLabelFilter(labelFilter30);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context27, symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter33.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = null;
        context34.setPropertyFilter(propertyFilter35);
        boolean boolean37 = context34.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider38 = context34.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.of(context34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter41);
        boolean boolean43 = jSONWriter41.utf16;
        jSONWriter41.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter46);
        long long48 = jSONWriter46.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter51.writeDouble(1.0d, decimalFormat55);
        boolean boolean58 = jSONWriter51.removeReference((java.lang.Object) (short) -1);
        jSONWriter51.writeArrayNull();
        long long60 = jSONWriter51.getFeatures();
        java.lang.Class<?> wildcardClass61 = jSONWriter51.getClass();
        boolean boolean63 = jSONWriter46.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass61, (long) (short) 10);
        int[] intArray70 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter46.writeInt32(intArray70);
        jSONWriter41.writeInt32(intArray70);
        jSONWriter39.writeInt32(intArray70);
        jSONWriter1.writeInt32(intArray70);
        java.util.Map map75 = null;
        jSONWriter1.write(map75);
        jSONWriter1.startObject();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(propertyFilter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter22 = null;
        context15.setValueFilter(valueFilter22);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context15.config(feature24, false);
        java.time.format.DateTimeFormatter dateTimeFormatter27 = context15.getDateFormatter();
        boolean boolean28 = context15.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
        org.junit.Assert.assertNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3394");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter27 = null;
        context15.setAfterFilter(afterFilter27);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter30 = null;
        context15.setContextValueFilter(contextValueFilter30);
        boolean boolean32 = context15.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(beforeFilter29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3395");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter22 = null;
        context15.setValueFilter(valueFilter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context15);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter25 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter26 = context15.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNull(propertyPreFilter25);
        org.junit.Assert.assertNull(afterFilter26);
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3396");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        byte[] byteArray14 = new byte[] { (byte) -1 };
        boolean boolean16 = jSONWriter7.writeTypeName(byteArray14, 0L);
        jSONWriter1.writeBinary(byteArray14);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        jSONWriter20.writeInt8((byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray24 = null;
        jSONWriter23.writeDouble(doubleArray24);
        boolean boolean26 = jSONWriter23.utf16;
        java.math.BigDecimal bigDecimal27 = null;
        jSONWriter23.writeDecimal(bigDecimal27, 100L);
        boolean boolean30 = jSONWriter23.utf16;
        java.lang.Object obj31 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat37 = null;
        jSONWriter33.writeDouble(1.0d, decimalFormat37);
        boolean boolean40 = jSONWriter33.removeReference((java.lang.Object) (short) -1);
        jSONWriter33.writeArrayNull();
        long long42 = jSONWriter33.getFeatures();
        java.lang.Class<?> wildcardClass43 = jSONWriter33.getClass();
        boolean boolean45 = jSONWriter23.isWriteTypeInfo(obj31, (java.lang.Class) wildcardClass43, (long) (short) 0);
        boolean boolean47 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter23, (long) (byte) 1);
        java.lang.Object obj49 = null;
        java.lang.String str50 = jSONWriter20.setPath("[1]", obj49);
        byte[] byteArray51 = jSONWriter20.getBytes();
        jSONWriter1.writeNameRaw(byteArray51, 0L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-67, 0]");
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3397");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        jSONWriter16.startObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        jSONWriter19.close();
        jSONWriter19.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        boolean boolean33 = jSONWriter24.isEnabled((long) ' ');
        jSONWriter24.writeString("hi!");
        boolean boolean36 = jSONWriter24.isUTF8();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        jSONWriter24.writeString((java.util.List<java.lang.String>) strList40);
        jSONWriter19.writeString((java.util.List<java.lang.String>) strList40);
        jSONWriter16.writeString((java.util.List<java.lang.String>) strList40);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        java.util.UUID uUID58 = null;
        jSONWriter48.writeUUID(uUID58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = jSONWriter48.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context60);
        java.time.format.DateTimeFormatter dateTimeFormatter62 = context60.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider63 = context60.getProvider();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter64 = context60.getContextNameFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context60, symbolTable65);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        boolean boolean69 = jSONWriter68.isRefDetect();
        java.lang.String str72 = jSONWriter68.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter74);
        long long76 = jSONWriter74.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        boolean boolean81 = jSONWriter79.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat83 = null;
        jSONWriter79.writeDouble(1.0d, decimalFormat83);
        boolean boolean86 = jSONWriter79.removeReference((java.lang.Object) (short) -1);
        jSONWriter79.writeArrayNull();
        long long88 = jSONWriter79.getFeatures();
        java.lang.Class<?> wildcardClass89 = jSONWriter79.getClass();
        boolean boolean91 = jSONWriter74.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass89, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter92 = jSONWriter68.getObjectWriter((java.lang.Class) wildcardClass89);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter93 = jSONWriter66.getObjectWriter((java.lang.Class) wildcardClass89);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter94 = jSONWriter16.getObjectWriter((java.lang.Class) wildcardClass89);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(context60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(objectWriterProvider63);
        org.junit.Assert.assertNull(contextNameFilter64);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objectWriter92);
        org.junit.Assert.assertNotNull(objectWriter93);
        org.junit.Assert.assertNotNull(objectWriter94);
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        long long15 = jSONWriter3.getFeatures(100L);
        boolean boolean17 = jSONWriter3.hasFilter((long) (short) 0);
        boolean boolean18 = jSONWriter3.jsonb;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.NameFilter nameFilter17 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter18 = context15.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(nameFilter17);
        org.junit.Assert.assertNull(contextNameFilter18);
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat9 = null;
        jSONWriter5.writeDouble(1.0d, decimalFormat9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean17 = jSONWriter12.writeTypeName(byteArray15, (long) 10);
        jSONWriter5.writeStringLatin1(byteArray15);
        jSONWriter1.writeStringLatin1(byteArray15);
        int int20 = jSONWriter1.level();
        boolean boolean21 = jSONWriter1.isBeanToArray();
        jSONWriter1.writeFloat((float) 0);
        boolean boolean24 = jSONWriter1.isWriteNulls();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3401");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        java.math.BigInteger bigInteger11 = null;
        jSONWriter1.writeBigInt(bigInteger11, (-1L));
        java.util.Map map14 = null;
        jSONWriter1.write(map14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) feature18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature18 };
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) feature25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature25 };
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray27);
        java.time.ZoneId zoneId30 = null;
        context29.setZoneId(zoneId30);
        jSONWriter22.popPath((java.lang.Object) context29);
        float[] floatArray33 = new float[] {};
        jSONWriter22.writeFloat(floatArray33);
        jSONWriter1.writeFloat(floatArray33);
        jSONWriter1.close();
        boolean boolean38 = jSONWriter1.isEnabled((long) (byte) 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3402");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        context22.setDateFormat("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        jSONWriter26.writeSymbol("");
        jSONWriter26.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter26.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter32 = null;
        context31.setPropertyPreFilter(propertyPreFilter32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) feature37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature37 };
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray39);
        context31.config(featureArray39);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter60 = context59.getPropertyFilter();
        long long61 = context59.getFeatures();
        long long62 = context59.getFeatures();
        boolean boolean63 = context59.isDateFormatHasHour();
        java.time.ZoneId zoneId64 = context59.getZoneId();
        java.time.ZoneId zoneId65 = context59.getZoneId();
        context31.setZoneId(zoneId65);
        context22.setZoneId(zoneId65);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNull(propertyFilter60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(zoneId64);
        org.junit.Assert.assertNotNull(zoneId65);
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean1 = jSONWriter0.useSingleQuote;
        jSONWriter0.writeRaw(' ');
        jSONWriter0.writeArrayNull();
        int int5 = jSONWriter0.level();
        com.alibaba.fastjson2.JSONWriter.Path path6 = null;
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path6, "");
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path8, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "hi!");
        java.lang.String str13 = path12.toString();
        com.alibaba.fastjson2.JSONWriter.Path path15 = new com.alibaba.fastjson2.JSONWriter.Path(path12, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path16 = path15.parent;
        com.alibaba.fastjson2.JSONWriter.Path path17 = path16.parent;
        boolean boolean18 = jSONWriter0.containsReference((java.lang.Object) path16);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1].hi\\!" + "'", str13, "[1].hi\\!");
        org.junit.Assert.assertNotNull(path16);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        boolean boolean14 = jSONWriter3.hasFilter();
        boolean boolean15 = jSONWriter3.utf8;
        boolean boolean16 = jSONWriter3.utf16;
        jSONWriter3.writeTypeName("[1][0]");
        jSONWriter3.startArray(8);
        int int21 = jSONWriter3.level();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeRaw(' ');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3405");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        jSONWriter16.startObject();
        jSONWriter16.close();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3406");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        boolean boolean6 = jSONWriter1.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        boolean boolean9 = jSONWriter8.isRefDetect();
        java.lang.String str12 = jSONWriter8.setPath("hi!", (java.lang.Object) 1);
        jSONWriter8.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter16);
        long long18 = jSONWriter16.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter21.writeDouble(1.0d, decimalFormat25);
        boolean boolean28 = jSONWriter21.removeReference((java.lang.Object) (short) -1);
        jSONWriter21.writeArrayNull();
        long long30 = jSONWriter21.getFeatures();
        java.lang.Class<?> wildcardClass31 = jSONWriter21.getClass();
        boolean boolean33 = jSONWriter16.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass31, (long) (short) 10);
        int[] intArray40 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter16.writeInt32(intArray40);
        double[] doubleArray46 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter16.writeDouble(doubleArray46);
        java.text.DecimalFormat decimalFormat48 = null;
        jSONWriter8.writeDouble(doubleArray46, decimalFormat48);
        jSONWriter1.writeDouble(doubleArray46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter52.writeDouble(1.0d, decimalFormat56);
        boolean boolean59 = jSONWriter52.removeReference((java.lang.Object) (short) -1);
        jSONWriter52.writeArrayNull();
        jSONWriter52.startArray((int) (short) 1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter63 = null;
        com.alibaba.fastjson2.JSONWriter.Path path64 = null;
        com.alibaba.fastjson2.JSONWriter.Path path66 = new com.alibaba.fastjson2.JSONWriter.Path(path64, "");
        com.alibaba.fastjson2.JSONWriter.Path path68 = new com.alibaba.fastjson2.JSONWriter.Path(path66, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path70 = new com.alibaba.fastjson2.JSONWriter.Path(path68, "hi!");
        java.lang.String str71 = path70.toString();
        com.alibaba.fastjson2.JSONWriter.Path path73 = new com.alibaba.fastjson2.JSONWriter.Path(path70, (int) '#');
        java.lang.Object obj74 = null;
        boolean boolean75 = path73.equals(obj74);
        java.lang.String str76 = jSONWriter52.setPath(fieldWriter63, obj74);
        boolean boolean77 = jSONWriter1.isWriteTypeInfo((java.lang.Object) fieldWriter63);
        jSONWriter1.writeTypeName("");
        double[] doubleArray83 = new double[] { (byte) 10, 7, 10 };
        jSONWriter1.writeDouble(doubleArray83);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[1].hi\\!" + "'", str71, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, 7.0, 10.0]");
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3407");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.endArray();
        java.math.BigInteger bigInteger28 = null;
        jSONWriter1.writeBigInt(bigInteger28, 0L);
        boolean boolean32 = jSONWriter1.isEnabled((long) 5);
        int int33 = jSONWriter1.level();
        int int34 = jSONWriter1.level();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3408");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.NameFilter nameFilter20 = null;
        context15.setNameFilter(nameFilter20);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = null;
        context15.setAfterFilter(afterFilter22);
        boolean boolean24 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context("[1][0]", featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray28);
        context15.config(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3409");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.util.List list3 = null;
        jSONWriter1.write(list3);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        boolean boolean9 = jSONWriter1.containsReference((java.lang.Object) boolean8);
        com.alibaba.fastjson2.JSONWriter.Path path10 = null;
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "");
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path12, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path16 = new com.alibaba.fastjson2.JSONWriter.Path(path14, "hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        jSONWriter18.writeBooleanNull();
        jSONWriter18.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        java.util.UUID uUID37 = null;
        jSONWriter27.writeUUID(uUID37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = jSONWriter27.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray44 = null;
        jSONWriter41.writeHex(byteArray44);
        boolean boolean46 = jSONWriter41.isRefDetect();
        jSONWriter41.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class54 = null;
        boolean boolean56 = jSONWriter49.isWriteTypeInfo((java.lang.Object) jSONWriter51, class54, (long) ' ');
        byte[] byteArray58 = new byte[] { (byte) -1 };
        boolean boolean60 = jSONWriter51.writeTypeName(byteArray58, 0L);
        java.util.UUID uUID61 = null;
        jSONWriter51.writeUUID(uUID61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = jSONWriter51.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter64 = context63.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        boolean boolean67 = jSONWriter66.isRefDetect();
        java.lang.String str70 = jSONWriter66.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter72);
        long long74 = jSONWriter72.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        boolean boolean79 = jSONWriter77.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat81 = null;
        jSONWriter77.writeDouble(1.0d, decimalFormat81);
        boolean boolean84 = jSONWriter77.removeReference((java.lang.Object) (short) -1);
        jSONWriter77.writeArrayNull();
        long long86 = jSONWriter77.getFeatures();
        java.lang.Class<?> wildcardClass87 = jSONWriter77.getClass();
        boolean boolean89 = jSONWriter72.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass87, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter90 = jSONWriter66.getObjectWriter((java.lang.Class) wildcardClass87);
        boolean boolean91 = jSONWriter41.isWriteTypeInfo((java.lang.Object) context63, (java.lang.reflect.Type) wildcardClass87);
        boolean boolean92 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter27, (java.lang.reflect.Type) wildcardClass87);
        boolean boolean93 = jSONWriter1.isWriteTypeInfo((java.lang.Object) path14, (java.lang.reflect.Type) wildcardClass87);
        com.alibaba.fastjson2.JSONWriter.Path path94 = path14.parent;
        com.alibaba.fastjson2.JSONWriter.Path path96 = new com.alibaba.fastjson2.JSONWriter.Path(path94, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path97 = path96.parent;
        com.alibaba.fastjson2.JSONWriter.Path path99 = new com.alibaba.fastjson2.JSONWriter.Path(path97, "[52]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(context39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(context63);
        org.junit.Assert.assertNull(propertyFilter64);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objectWriter90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(path94);
        org.junit.Assert.assertNotNull(path97);
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter28 = null;
        context15.setContextNameFilter(contextNameFilter28);
        context15.setDateFormat("[1].hi\\![35]");
        boolean boolean32 = context15.isDateFormatHasDay();
        boolean boolean33 = context15.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        java.time.LocalDate localDate12 = null;
        jSONWriter1.writeLocalDate(localDate12);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.SymbolTable symbolTable16 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable16);
        boolean[] booleanArray22 = new boolean[] { false, true, true, true };
        jSONWriter17.writeBool(booleanArray22);
        jSONWriter15.writeBool(booleanArray22);
        jSONWriter1.writeBool(booleanArray22);
        jSONWriter1.writeDouble((double) 100L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) feature30);
        jSONWriter29.writeInt16((short) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray35 = null;
        jSONWriter34.writeDouble(doubleArray35);
        boolean boolean37 = jSONWriter34.utf16;
        java.math.BigDecimal bigDecimal38 = null;
        jSONWriter34.writeDecimal(bigDecimal38, 100L);
        boolean boolean41 = jSONWriter34.hasFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        boolean boolean52 = jSONWriter43.isEnabled((long) ' ');
        boolean boolean53 = jSONWriter43.isBeanToArray();
        jSONWriter43.writeTypeName("[1]");
        byte[] byteArray57 = new byte[] { (byte) 100 };
        jSONWriter43.writeRaw(byteArray57);
        jSONWriter34.writeBinary(byteArray57);
        jSONWriter29.writeHex(byteArray57);
        jSONWriter1.writeBinary(byteArray57);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3412");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        long long10 = jSONWriter1.getFeatures();
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('4');
        boolean boolean14 = jSONWriter1.isRefDetect();
        boolean boolean15 = jSONWriter1.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4);
        java.math.BigDecimal bigDecimal6 = null;
        jSONWriter0.writeDecimal(bigDecimal6);
        java.time.LocalDate localDate8 = null;
        jSONWriter0.writeLocalDate(localDate8);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3414");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        boolean boolean11 = jSONWriter1.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context27.getPropertyFilter();
        long long29 = context27.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter30 = null;
        context27.setLabelFilter(labelFilter30);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider32 = context27.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter33 = null;
        context27.setPropertyPreFilter(propertyPreFilter33);
        com.alibaba.fastjson2.filter.NameFilter nameFilter35 = null;
        context27.setNameFilter(nameFilter35);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean38 = context27.isEnabled(feature37);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider39 = context27.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        java.util.UUID uUID53 = null;
        jSONWriter43.writeUUID(uUID53);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter43.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context55);
        java.time.format.DateTimeFormatter dateTimeFormatter57 = context55.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider58 = context55.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider58, featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider39, featureArray59);
        boolean boolean65 = jSONWriter1.isRefDetect((java.lang.Object) featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.of(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.of(featureArray59);
        java.lang.Object obj68 = null;
        jSONWriter67.writeNameAny(obj68);
        boolean boolean70 = jSONWriter67.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(propertyFilter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider32);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(objectWriterProvider58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3415");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        jSONWriter40.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = context61.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context61.getProvider();
        java.lang.String str65 = context61.getDateFormat();
        boolean boolean66 = jSONWriter40.removeReference((java.lang.Object) context61);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = context61.getLabelFilter();
        java.time.ZoneId zoneId68 = context61.getZoneId();
        context38.setZoneId(zoneId68);
        context21.setZoneId(zoneId68);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter71 = null;
        context21.setAfterFilter(afterFilter71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        jSONWriter74.writeFloat((java.lang.Float) 10.0f);
        jSONWriter74.writeInt16((short) (byte) 100);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(labelFilter67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3416");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        boolean boolean8 = jSONWriter1.isWriteNulls();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        jSONWriter0.writeReference("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        boolean boolean13 = jSONWriter11.utf16;
        jSONWriter11.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter16);
        long long18 = jSONWriter16.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter21.writeDouble(1.0d, decimalFormat25);
        boolean boolean28 = jSONWriter21.removeReference((java.lang.Object) (short) -1);
        jSONWriter21.writeArrayNull();
        long long30 = jSONWriter21.getFeatures();
        java.lang.Class<?> wildcardClass31 = jSONWriter21.getClass();
        boolean boolean33 = jSONWriter16.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass31, (long) (short) 10);
        int[] intArray40 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter16.writeInt32(intArray40);
        jSONWriter11.writeInt32(intArray40);
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        boolean[] booleanArray49 = new boolean[] { false, true, true, true };
        jSONWriter44.writeBool(booleanArray49);
        com.alibaba.fastjson2.SymbolTable symbolTable51 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class57 = null;
        boolean boolean59 = jSONWriter52.isWriteTypeInfo((java.lang.Object) jSONWriter54, class57, (long) ' ');
        byte[] byteArray61 = new byte[] { (byte) -1 };
        boolean boolean63 = jSONWriter54.writeTypeName(byteArray61, 0L);
        jSONWriter44.writeBinary(byteArray61);
        byte[] byteArray65 = jSONWriter44.getBytes();
        jSONWriter11.writeRaw(byteArray65);
        jSONWriter9.writeRaw(byteArray65);
        java.time.LocalTime localTime68 = null;
        jSONWriter9.writeLocalTime(localTime68);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter9.startObject();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-104, -80, -79, -79, -79, -111, 1, -1]");
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3418");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context11.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context11);
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter13.writeDecimal(bigDecimal14);
        jSONWriter13.writeBooleanNull();
        boolean boolean17 = jSONWriter13.utf8;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        jSONWriter7.close();
        jSONWriter7.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        boolean boolean21 = jSONWriter12.isEnabled((long) ' ');
        jSONWriter12.writeString("hi!");
        boolean boolean24 = jSONWriter12.isUTF8();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        jSONWriter12.writeString((java.util.List<java.lang.String>) strList28);
        jSONWriter7.writeString((java.util.List<java.lang.String>) strList28);
        jSONWriter1.write((java.util.List) strList28);
        boolean boolean33 = jSONWriter1.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        jSONWriter35.close();
        jSONWriter35.writeSymbol("");
        jSONWriter35.writeBooleanNull();
        boolean boolean40 = jSONWriter35.utf16;
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        java.util.UUID uUID54 = null;
        jSONWriter44.writeUUID(uUID54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = jSONWriter44.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context56);
        java.time.format.DateTimeFormatter dateTimeFormatter58 = context56.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider59 = context56.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean63 = jSONWriter61.isRefDetect((java.lang.Object) feature62);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature62 };
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider59, featureArray64);
        jSONWriter35.config(featureArray64);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        jSONWriter70.close();
        jSONWriter70.writeSymbol("");
        jSONWriter70.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context75 = jSONWriter70.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter76 = null;
        context75.setPropertyPreFilter(propertyPreFilter76);
        boolean boolean78 = context75.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter79 = context75.getBeforeFilter();
        java.lang.Class<?> wildcardClass80 = context75.getClass();
        boolean boolean82 = jSONWriter1.isWriteTypeInfo((java.lang.Object) featureArray64, (java.lang.reflect.Type) wildcardClass80, 137438953482L);
        java.math.BigInteger bigInteger83 = null;
        jSONWriter1.writeBigInt(bigInteger83);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('a', '#');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(context56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(objectWriterProvider59);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(context75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(beforeFilter79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3420");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        java.time.Instant instant32 = null;
        jSONWriter20.writeInstant(instant32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean40 = jSONWriter35.writeTypeName(byteArray38, (long) 10);
        jSONWriter20.writeRaw(byteArray38);
        jSONWriter3.writeStringLatin1(byteArray38);
        jSONWriter3.writeBooleanNull();
        jSONWriter3.writeDateTime14((int) (short) 10, 1, 6, (int) (byte) 10, 1, (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) feature54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54 };
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context58 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray56);
        jSONWriter51.config(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.of(featureArray56);
        jSONWriter61.writeNull();
        jSONWriter3.startArray((java.lang.Object) jSONWriter61, 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter61);
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context15.getProvider();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context15.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter27 = context15.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertNull(afterFilter27);
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3422");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        jSONWriter10.writeName((-1L));
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.SymbolTable symbolTable2 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable2);
        boolean[] booleanArray8 = new boolean[] { false, true, true, true };
        jSONWriter3.writeBool(booleanArray8);
        jSONWriter1.writeBool(booleanArray8);
        jSONWriter1.writeFloat((-1.0f));
        boolean boolean13 = jSONWriter1.isUTF8();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3424");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter2.writeTypeName("");
        jSONWriter2.writeBool(false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter8.writeDecimal(bigDecimal11);
        boolean boolean14 = jSONWriter8.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter8.writeArrayNull();
        jSONWriter8.writeChar('a');
        jSONWriter8.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        jSONWriter26.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter43.writeFloat((float) 10, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean54 = jSONWriter49.writeTypeName(byteArray52, (long) 10);
        boolean boolean56 = jSONWriter43.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter26.writeBinary(byteArray52);
        jSONWriter8.writeHex(byteArray52);
        jSONWriter2.writeNameRaw(byteArray52, (long) 'a');
        java.text.DecimalFormat decimalFormat62 = null;
        jSONWriter2.writeDouble((double) (byte) 0, decimalFormat62);
        java.time.LocalDateTime localDateTime64 = null;
        jSONWriter2.writeLocalDateTime(localDateTime64);
        boolean boolean66 = jSONWriter2.isRefDetect();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3425");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean1 = jSONWriter0.isUseSingleQuotes();
        java.text.DecimalFormat decimalFormat3 = null;
        jSONWriter0.writeDouble((double) 'a', decimalFormat3);
        java.math.BigDecimal bigDecimal5 = null;
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter0.writeDecimal(bigDecimal5, (long) '#', decimalFormat7);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.hasFilter((long) (byte) 0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3427");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter0.getContext();
        java.time.ZoneId zoneId10 = context9.getZoneId();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertNotNull(zoneId10);
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        long long11 = jSONWriter9.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter9.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass24, (long) (short) 10);
        int[] intArray33 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter9.writeInt32(intArray33);
        double[] doubleArray39 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter9.writeDouble(doubleArray39);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter1.writeDouble(doubleArray39, decimalFormat41);
        boolean boolean43 = jSONWriter1.hasFilter();
        boolean boolean44 = jSONWriter1.hasFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray49 = null;
        jSONWriter46.writeHex(byteArray49);
        boolean boolean51 = jSONWriter46.isRefDetect();
        jSONWriter46.writeNumberNull();
        jSONWriter46.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean56 = jSONWriter46.isEnabled(feature55);
        jSONWriter1.config(feature55, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) 1L);
        jSONWriter60.writeSymbol((-1));
        int int65 = jSONWriter60.level();
        boolean boolean66 = jSONWriter60.isUTF16();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameAny((java.lang.Object) jSONWriter60);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        java.util.List list11 = null;
        jSONWriter1.write(list11);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3430");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        char[] charArray13 = new char[] {};
        jSONWriter1.writeString(charArray13);
        boolean boolean15 = jSONWriter1.isUTF8();
        boolean boolean16 = jSONWriter1.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        jSONWriter18.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter18.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter24 = null;
        context23.setPropertyPreFilter(propertyPreFilter24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) feature29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray31);
        context23.config(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.of(featureArray31);
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) -1 };
        boolean boolean49 = jSONWriter40.writeTypeName(byteArray47, 0L);
        java.util.UUID uUID50 = null;
        jSONWriter40.writeUUID(uUID50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter40.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context52);
        java.time.LocalTime localTime54 = null;
        jSONWriter53.writeLocalTime(localTime54);
        boolean boolean56 = jSONWriter53.isBeanToArray();
        boolean boolean57 = jSONWriter53.isIgnoreNoneSerializable();
        byte[] byteArray58 = jSONWriter53.getBytes();
        jSONWriter53.writeDouble((double) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        jSONWriter62.close();
        java.text.DecimalFormat decimalFormat65 = null;
        jSONWriter62.writeFloat((float) 10, decimalFormat65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean73 = jSONWriter68.writeTypeName(byteArray71, (long) 10);
        boolean boolean75 = jSONWriter62.writeTypeName(byteArray71, (long) (byte) 100);
        jSONWriter62.writeInt16((short) (byte) 100);
        boolean boolean78 = jSONWriter62.hasFilter();
        long[] longArray82 = new long[] { 0, (byte) -1, ' ' };
        jSONWriter62.writeInt64(longArray82);
        jSONWriter53.writeInt64(longArray82);
        jSONWriter36.writeInt64(longArray82);
        jSONWriter1.writeInt64(longArray82);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-81]");
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(longArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray82), "[0, -1, 32]");
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3431");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.writeArrayNull();
        java.io.Reader reader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader3);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3432");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context22.getProvider();
        java.lang.String str25 = jSONWriter1.setPath("$", (java.lang.Object) context22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        boolean boolean29 = jSONWriter27.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat35 = null;
        jSONWriter31.writeDouble(1.0d, decimalFormat35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean43 = jSONWriter38.writeTypeName(byteArray41, (long) 10);
        jSONWriter31.writeStringLatin1(byteArray41);
        jSONWriter27.writeStringLatin1(byteArray41);
        int int46 = jSONWriter27.level();
        boolean boolean47 = jSONWriter27.isBeanToArray();
        jSONWriter27.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context64);
        com.alibaba.fastjson2.SymbolTable symbolTable66 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context64, symbolTable66);
        com.alibaba.fastjson2.SymbolTable symbolTable68 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable68);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        boolean boolean73 = jSONWriter71.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class74 = null;
        boolean boolean76 = jSONWriter69.isWriteTypeInfo((java.lang.Object) jSONWriter71, class74, (long) ' ');
        byte[] byteArray78 = new byte[] { (byte) -1 };
        boolean boolean80 = jSONWriter71.writeTypeName(byteArray78, 0L);
        java.util.UUID uUID81 = null;
        jSONWriter71.writeUUID(uUID81);
        com.alibaba.fastjson2.JSONWriter.Context context83 = jSONWriter71.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter84 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context83);
        java.time.LocalTime localTime85 = null;
        jSONWriter84.writeLocalTime(localTime85);
        boolean boolean87 = jSONWriter84.isBeanToArray();
        boolean boolean88 = jSONWriter84.isIgnoreNoneSerializable();
        byte[] byteArray89 = jSONWriter84.getBytes();
        boolean boolean91 = jSONWriter67.writeTypeName(byteArray89, (long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature feature92 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString;
        boolean boolean93 = jSONWriter67.isWriteTypeInfo((java.lang.Object) feature92);
        boolean boolean94 = jSONWriter27.isEnabled(feature92);
        context22.config(feature92, true);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(context83);
        org.junit.Assert.assertNotNull(jSONWriter84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + feature92 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString + "'", feature92.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter18 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter19 = null;
        context15.setLabelFilter(labelFilter19);
        boolean boolean21 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = null;
        context15.setContextValueFilter(contextValueFilter22);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNull(valueFilter18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 0);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        jSONWriter12.writeInt8((byte) 1);
        jSONWriter12.endArray();
        jSONWriter12.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        jSONWriter12.endObject();
        boolean boolean33 = path4.equals((java.lang.Object) jSONWriter12);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter35.isWriteTypeInfo((java.lang.Object) jSONWriter37, class40, (long) ' ');
        boolean boolean44 = jSONWriter35.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        jSONWriter48.writeInt8((byte) 1);
        jSONWriter48.close();
        boolean boolean61 = jSONWriter35.removeReference((java.lang.Object) jSONWriter48);
        com.alibaba.fastjson2.SymbolTable symbolTable62 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable62);
        boolean[] booleanArray68 = new boolean[] { false, true, true, true };
        jSONWriter63.writeBool(booleanArray68);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        boolean boolean75 = jSONWriter73.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class76 = null;
        boolean boolean78 = jSONWriter71.isWriteTypeInfo((java.lang.Object) jSONWriter73, class76, (long) ' ');
        byte[] byteArray80 = new byte[] { (byte) -1 };
        boolean boolean82 = jSONWriter73.writeTypeName(byteArray80, 0L);
        jSONWriter63.writeBinary(byteArray80);
        jSONWriter35.writeRaw(byteArray80);
        boolean boolean85 = path4.equals((java.lang.Object) byteArray80);
        java.lang.Object obj86 = null;
        boolean boolean87 = path4.equals(obj86);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray89 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter90 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray89);
        com.alibaba.fastjson2.JSONWriter jSONWriter91 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray89);
        com.alibaba.fastjson2.JSONWriter.Context context92 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray89);
        com.alibaba.fastjson2.JSONWriter.Context context93 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray89);
        com.alibaba.fastjson2.JSONWriter jSONWriter94 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray89);
        com.alibaba.fastjson2.JSONWriter jSONWriter95 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray89);
        boolean boolean96 = path4.equals((java.lang.Object) featureArray89);
        com.alibaba.fastjson2.JSONWriter jSONWriter97 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray89);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(featureArray89);
        org.junit.Assert.assertNotNull(jSONWriter90);
        org.junit.Assert.assertNotNull(jSONWriter91);
        org.junit.Assert.assertNotNull(jSONWriter94);
        org.junit.Assert.assertNotNull(jSONWriter95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(jSONWriter97);
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter7.writeRaw('4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3436");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter1.writeFloat((float) ' ', decimalFormat21);
        jSONWriter1.writeInt32(0);
        jSONWriter1.writeName("[1][0]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        jSONWriter1.writeChar('a');
        boolean boolean36 = jSONWriter1.isIgnoreNoneSerializable();
        jSONWriter1.writeInt64((long) ' ');
        jSONWriter1.writeInt64((long) (short) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3438");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        byte[] byteArray43 = null;
        jSONWriter33.writeBinary(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter33.writeHex(byteArray51);
        jSONWriter25.writeBinary(byteArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter25.containsReference(obj54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        jSONWriter57.close();
        jSONWriter57.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable61 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        boolean boolean66 = jSONWriter64.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class67 = null;
        boolean boolean69 = jSONWriter62.isWriteTypeInfo((java.lang.Object) jSONWriter64, class67, (long) ' ');
        boolean boolean71 = jSONWriter62.isEnabled((long) ' ');
        jSONWriter62.writeString("hi!");
        boolean boolean74 = jSONWriter62.isUTF8();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        jSONWriter62.writeString((java.util.List<java.lang.String>) strList78);
        jSONWriter57.writeString((java.util.List<java.lang.String>) strList78);
        jSONWriter25.write((java.util.List) strList78);
        java.math.BigDecimal bigDecimal83 = null;
        jSONWriter25.writeDecimal(bigDecimal83, (-1L));
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 1, -1, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3439");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        long long11 = jSONWriter9.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter9.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass24, (long) (short) 10);
        int[] intArray33 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter9.writeInt32(intArray33);
        double[] doubleArray39 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter9.writeDouble(doubleArray39);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter1.writeDouble(doubleArray39, decimalFormat41);
        boolean boolean43 = jSONWriter1.isWriteNulls();
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter60 = context59.getPropertyFilter();
        long long61 = context59.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter62 = null;
        context59.setLabelFilter(labelFilter62);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context59.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter65 = null;
        context59.setPropertyPreFilter(propertyPreFilter65);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter67 = null;
        context59.setPropertyPreFilter(propertyPreFilter67);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter69 = null;
        context59.setLabelFilter(labelFilter69);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider71 = context59.getProvider();
        boolean boolean72 = jSONWriter1.isRefDetect((java.lang.Object) objectWriterProvider71);
        boolean boolean73 = jSONWriter1.utf16;
        java.util.Map map74 = null;
        jSONWriter1.write(map74);
        jSONWriter1.writeSymbol("hi!");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNull(propertyFilter60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNotNull(objectWriterProvider71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        boolean boolean17 = jSONWriter1.hasFilter();
        java.nio.charset.Charset charset18 = jSONWriter1.getCharset();
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        boolean[] booleanArray25 = new boolean[] { false, true, true, true };
        jSONWriter20.writeBool(booleanArray25);
        jSONWriter1.writeBool(booleanArray25);
        jSONWriter1.writeDateTime19((int) (byte) 100, 1, 10, 0, 2, (int) ' ');
        java.math.BigInteger bigInteger35 = null;
        jSONWriter1.writeBigInt(bigInteger35, 0L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, true, true]");
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray0);
        com.alibaba.fastjson2.JSONObject jSONObject4 = null;
        jSONWriter3.write(jSONObject4);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = jSONWriter3.flushTo(outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3442");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        jSONWriter9.close();
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter9.writeFloat((float) 10, decimalFormat12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean20 = jSONWriter15.writeTypeName(byteArray18, (long) 10);
        boolean boolean22 = jSONWriter9.writeTypeName(byteArray18, (long) (byte) 100);
        jSONWriter9.writeInt16((short) (byte) 100);
        boolean boolean25 = jSONWriter9.hasFilter();
        java.nio.charset.Charset charset26 = jSONWriter9.getCharset();
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter9, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        int[] intArray33 = new int[] { (short) -1 };
        jSONWriter31.writeInt32(intArray33);
        boolean boolean35 = jSONWriter31.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context51);
        boolean boolean54 = jSONWriter52.hasFilter((long) 0);
        jSONWriter52.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        byte[] byteArray66 = new byte[] { (byte) -1 };
        boolean boolean68 = jSONWriter59.writeTypeName(byteArray66, 0L);
        jSONWriter52.writeBinary(byteArray66);
        jSONWriter31.writeNameRaw(byteArray66, (long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter9.writeBase64(byteArray66);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3443");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter8.context;
        jSONWriter8.writeNull();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(context9);
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3444");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter6.isWriteTypeInfo((java.lang.Object) jSONWriter8, class11, (long) ' ');
        boolean boolean15 = jSONWriter6.isEnabled((long) ' ');
        jSONWriter6.writeString("hi!");
        boolean boolean18 = jSONWriter6.isUTF8();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        jSONWriter6.writeString((java.util.List<java.lang.String>) strList22);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList22);
        jSONWriter1.writeDateYYYMMDD8((int) (byte) 10, (int) (short) -1, 10);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter30 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        boolean boolean41 = jSONWriter32.isEnabled((long) ' ');
        jSONWriter32.writeString("hi!");
        boolean boolean44 = jSONWriter32.isUTF8();
        java.lang.String str45 = jSONWriter1.setPath(fieldWriter30, (java.lang.Object) boolean44);
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 10 };
        jSONWriter1.writeStringLatin1(byteArray48);
        boolean boolean50 = jSONWriter1.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100, 10]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable6 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class12 = null;
        boolean boolean14 = jSONWriter7.isWriteTypeInfo((java.lang.Object) jSONWriter9, class12, (long) ' ');
        boolean boolean16 = jSONWriter7.isEnabled((long) ' ');
        jSONWriter7.writeString("hi!");
        char[] charArray19 = new char[] {};
        jSONWriter7.writeString(charArray19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter22);
        long long24 = jSONWriter22.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat31 = null;
        jSONWriter27.writeDouble(1.0d, decimalFormat31);
        boolean boolean34 = jSONWriter27.removeReference((java.lang.Object) (short) -1);
        jSONWriter27.writeArrayNull();
        long long36 = jSONWriter27.getFeatures();
        java.lang.Class<?> wildcardClass37 = jSONWriter27.getClass();
        boolean boolean39 = jSONWriter22.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass37, (long) (short) 10);
        boolean boolean40 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter7, (java.lang.reflect.Type) wildcardClass37);
        jSONWriter1.writeDateTime14(13, 10, 0, (int) (byte) 100, 10, 12);
        jSONWriter1.writeReference("[1].hi\\![35]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3446");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = context26.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context26.getProvider();
        boolean boolean30 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context26);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26, symbolTable31);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context26.provider;
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter34 = null;
        context26.setContextValueFilter(contextValueFilter34);
        com.alibaba.fastjson2.filter.NameFilter nameFilter36 = context26.getNameFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertNull(nameFilter36);
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3447");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean7 = jSONWriter1.isEnabled(10L);
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        boolean boolean13 = jSONWriter11.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter15.writeDouble(1.0d, decimalFormat19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean27 = jSONWriter22.writeTypeName(byteArray25, (long) 10);
        jSONWriter15.writeStringLatin1(byteArray25);
        jSONWriter11.writeStringLatin1(byteArray25);
        boolean boolean30 = jSONWriter11.isUTF16();
        java.lang.String str31 = jSONWriter1.setPath(5, (java.lang.Object) boolean30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray33 = null;
        jSONWriter32.writeDouble(doubleArray33);
        boolean boolean35 = jSONWriter32.utf16;
        java.math.BigDecimal bigDecimal36 = null;
        jSONWriter32.writeDecimal(bigDecimal36, 100L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        boolean boolean45 = jSONWriter40.isUTF8();
        double[] doubleArray49 = new double[] { 1L, (byte) -1, (byte) 1 };
        jSONWriter40.writeDouble(doubleArray49);
        java.text.DecimalFormat decimalFormat51 = null;
        jSONWriter32.writeDouble(doubleArray49, decimalFormat51);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter1.writeDouble(doubleArray49, decimalFormat53);
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter1.writeDouble((double) 0, decimalFormat56);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 1.0]");
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3448");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        boolean boolean19 = jSONWriter16.isBeanToArray();
        jSONWriter16.startArray(0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        jSONWriter23.writeSymbol("");
        jSONWriter23.writeBooleanNull();
        boolean boolean28 = jSONWriter23.isUTF8();
        java.time.ZonedDateTime zonedDateTime29 = null;
        jSONWriter23.writeZonedDateTime(zonedDateTime29);
        float[] floatArray33 = new float[] { 0, 8 };
        jSONWriter23.writeFloat(floatArray33);
        java.text.DecimalFormat decimalFormat35 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter16.writeFloat(floatArray33, decimalFormat35);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 8.0]");
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3449");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray46 = null;
        jSONWriter45.writeDouble(doubleArray46);
        jSONWriter45.writeArrayNull();
        short[] shortArray52 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter45.writeInt16(shortArray52);
        jSONWriter3.writeInt16(shortArray52);
        java.time.Instant instant55 = null;
        jSONWriter3.writeInstant(instant55);
        boolean[] booleanArray62 = new boolean[] { true, false, false, true, true };
        jSONWriter3.writeBool(booleanArray62);
        boolean boolean64 = jSONWriter3.isWriteNulls();
        java.text.DecimalFormat decimalFormat66 = null;
        jSONWriter3.writeDouble((double) 2L, decimalFormat66);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[true, false, false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3450");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter1.writeBinary(byteArray27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean47 = jSONWriter42.writeTypeName(byteArray45, (long) 10);
        jSONWriter35.writeStringLatin1(byteArray45);
        jSONWriter35.writeFloat((java.lang.Float) 1.0f);
        int int51 = jSONWriter35.size();
        java.lang.String str52 = jSONWriter1.setPath(0, (java.lang.Object) jSONWriter35);
        boolean boolean53 = jSONWriter1.isWriteNulls();
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter1.writeFloat((float) (short) 0, decimalFormat55);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('a', '#');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3451");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context15.setContextValueFilter(contextValueFilter17);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        boolean boolean20 = context15.isDateFormatHasDay();
        boolean boolean22 = context15.isEnabled((long) (short) 100);
        context15.setDateFormat(".\\[1\\]\\[0\\]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3452");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        jSONWriter22.writeBool(false);
        jSONWriter22.writeBooleanNull();
        java.time.LocalDate localDate26 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter22.writeLocalDate(localDate26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter6.writeDecimal(bigDecimal9);
        boolean boolean12 = jSONWriter6.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter6.writeArrayNull();
        jSONWriter6.writeChar('a');
        jSONWriter6.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter6.writeNull();
        jSONWriter6.writeInt32((int) (short) 1);
        boolean boolean26 = path2.equals((java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Path path28 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1][0]");
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path32 = new com.alibaba.fastjson2.JSONWriter.Path(path30, ".hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path33 = path30.parent;
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(path33);
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3454");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray28 = null;
        jSONWriter27.writeDouble(doubleArray28);
        boolean boolean31 = jSONWriter27.containsReference((java.lang.Object) 5);
        float[] floatArray35 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter27.writeFloat(floatArray35);
        jSONWriter26.writeFloat(floatArray35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        jSONWriter39.close();
        jSONWriter39.writeSymbol("");
        jSONWriter39.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter39.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter45 = null;
        context44.setPropertyPreFilter(propertyPreFilter45);
        boolean boolean47 = context44.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter48 = context44.getBeforeFilter();
        jSONWriter26.writeAny((java.lang.Object) beforeFilter48);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter53.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter66 = context65.getPropertyFilter();
        long long67 = context65.getFeatures();
        long long68 = context65.getFeatures();
        boolean boolean69 = context65.isDateFormatHasHour();
        java.time.ZoneId zoneId70 = context65.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter71 = context65.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter72 = context65.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable73 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context65, symbolTable73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context65);
        context65.setDateFormat("[1]");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        jSONWriter79.close();
        jSONWriter79.writeSymbol("");
        jSONWriter79.writeBooleanNull();
        boolean boolean84 = jSONWriter79.utf16;
        jSONWriter79.writeFloat(1.0f);
        java.lang.Class<?> wildcardClass87 = jSONWriter79.getClass();
        boolean boolean89 = jSONWriter26.isWriteMapTypeInfo((java.lang.Object) "[1]", (java.lang.Class) wildcardClass87, 5L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(beforeFilter48);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(context65);
        org.junit.Assert.assertNull(propertyFilter66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(zoneId70);
        org.junit.Assert.assertNull(beforeFilter71);
        org.junit.Assert.assertNull(contextValueFilter72);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3455");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context15.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter30.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider29, featureArray35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) feature44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature44 };
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider29, featureArray46);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) 100 };
        boolean boolean62 = jSONWriter51.writeTypeName(byteArray60, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        int[] intArray68 = new int[] { (short) -1 };
        jSONWriter66.writeInt32(intArray68);
        java.lang.String str70 = jSONWriter51.setPath("hi!", (java.lang.Object) intArray68);
        jSONWriter51.writeSymbol((int) (short) 1);
        java.text.DecimalFormat decimalFormat74 = null;
        jSONWriter51.writeDouble((double) 10.0f, decimalFormat74);
        java.text.DecimalFormat decimalFormat77 = null;
        jSONWriter51.writeFloat((float) '#', decimalFormat77);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray82 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray82);
        com.alibaba.fastjson2.JSONWriter jSONWriter84 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context85 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context86 = new com.alibaba.fastjson2.JSONWriter.Context("[1][0]", featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context87 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray82);
        jSONWriter51.config(featureArray82);
        com.alibaba.fastjson2.JSONWriter jSONWriter89 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider29, featureArray82);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(featureArray82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(jSONWriter84);
        org.junit.Assert.assertNotNull(jSONWriter89);
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3456");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3457");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        int int9 = jSONWriter0.level();
        jSONWriter0.writeChar('#');
        boolean boolean12 = jSONWriter0.isBeanToArray();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3458");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        java.time.LocalDateTime localDateTime4 = null;
        jSONWriter1.writeLocalDateTime(localDateTime4);
        boolean boolean6 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.config(featureArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        jSONWriter0.writeSymbol((int) (byte) 10);
        jSONWriter0.close();
        jSONWriter0.writeTypeName("$");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) feature11);
        com.alibaba.fastjson2.SymbolTable symbolTable13 = jSONWriter10.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray18 = null;
        jSONWriter15.writeHex(byteArray18);
        boolean boolean20 = jSONWriter15.isRefDetect();
        jSONWriter15.writeNumberNull();
        jSONWriter15.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean25 = jSONWriter15.isEnabled(feature24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        long long29 = jSONWriter27.getFeatures();
        java.time.LocalDateTime localDateTime30 = null;
        jSONWriter27.writeLocalDateTime(localDateTime30);
        byte[] byteArray32 = jSONWriter27.getBytes();
        jSONWriter15.writeStringLatin1(byteArray32);
        jSONWriter10.writeNameRaw(byteArray32, (long) (byte) 100);
        jSONWriter0.writeBinary(byteArray32);
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) 100 };
        boolean boolean49 = jSONWriter38.writeTypeName(byteArray47, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        int[] intArray55 = new int[] { (short) -1 };
        jSONWriter53.writeInt32(intArray55);
        java.lang.String str57 = jSONWriter38.setPath("hi!", (java.lang.Object) intArray55);
        jSONWriter0.writeInt32(intArray55);
        jSONWriter0.writeTypeName(".\\[52\\]");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(symbolTable13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        boolean boolean7 = jSONWriter1.isEnabled((long) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        jSONWriter11.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        java.util.UUID uUID38 = null;
        jSONWriter28.writeUUID(uUID38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter28.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context40.config(feature41, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) feature46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46 };
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray48);
        context40.config(featureArray48);
        jSONWriter11.config(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.of(featureArray48);
        jSONWriter53.writeDoubleArray(1.0d, (double) (short) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable57 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class63 = null;
        boolean boolean65 = jSONWriter58.isWriteTypeInfo((java.lang.Object) jSONWriter60, class63, (long) ' ');
        byte[] byteArray67 = new byte[] { (byte) -1 };
        boolean boolean69 = jSONWriter60.writeTypeName(byteArray67, 0L);
        java.util.UUID uUID70 = null;
        jSONWriter60.writeUUID(uUID70);
        com.alibaba.fastjson2.JSONWriter.Context context72 = jSONWriter60.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context72);
        java.time.LocalTime localTime74 = null;
        jSONWriter73.writeLocalTime(localTime74);
        boolean boolean76 = jSONWriter73.isBeanToArray();
        boolean boolean77 = jSONWriter73.isIgnoreNoneSerializable();
        byte[] byteArray78 = jSONWriter73.getBytes();
        jSONWriter53.writeStringLatin1(byteArray78);
        jSONWriter1.writeNameRaw(byteArray78);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(context72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-81]");
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3461");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.SymbolTable symbolTable47 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable47);
        boolean[] booleanArray53 = new boolean[] { false, true, true, true };
        jSONWriter48.writeBool(booleanArray53);
        jSONWriter46.writeBool(booleanArray53);
        jSONWriter3.writeBool(booleanArray53);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter58);
        long long60 = jSONWriter58.getFeatures();
        java.time.LocalDateTime localDateTime61 = null;
        jSONWriter58.writeLocalDateTime(localDateTime61);
        boolean boolean63 = jSONWriter3.removeReference((java.lang.Object) localDateTime61);
        jSONWriter3.endObject();
        jSONWriter3.writeRaw((byte) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3462");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        jSONWriter1.writeMillis((long) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        long long29 = context26.getFeatures();
        boolean boolean30 = context26.isDateFormatHasHour();
        java.time.ZoneId zoneId31 = context26.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter32 = context26.getBeforeFilter();
        boolean boolean33 = context26.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context26);
        java.lang.String str35 = jSONWriter1.setPath("[1][0]", (java.lang.Object) context26);
        java.lang.String str36 = context26.getDateFormat();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter37 = context26.getContextValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertNull(beforeFilter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(contextValueFilter37);
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3463");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context34);
        java.time.LocalTime localTime36 = null;
        jSONWriter35.writeLocalTime(localTime36);
        boolean boolean38 = jSONWriter35.isBeanToArray();
        boolean boolean39 = jSONWriter35.isIgnoreNoneSerializable();
        byte[] byteArray40 = jSONWriter35.getBytes();
        boolean boolean42 = jSONWriter18.writeTypeName(byteArray40, (long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString;
        boolean boolean44 = jSONWriter18.isWriteTypeInfo((java.lang.Object) feature43);
        jSONWriter18.writeDateTime19(7, 6, (int) '4', 12, 12, 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3464");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22, symbolTable28);
        jSONWriter29.writeFloat((java.lang.Float) 100.0f);
        java.lang.Object obj32 = null;
        boolean boolean34 = jSONWriter29.isWriteTypeInfo(obj32, (long) '4');
        jSONWriter29.writeBool(false);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3465");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter19 = null;
        context15.setNameFilter(nameFilter19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context15.getAfterFilter();
        boolean boolean23 = context15.isDateFormatHasDay();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.util.Map map15 = null;
        jSONWriter3.write(map15);
        jSONWriter3.writeDateTime19((-1), 1, (int) ' ', (-1), (int) '#', (int) 'a');
        boolean boolean24 = jSONWriter3.isUseSingleQuotes();
        byte[] byteArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeRaw(byteArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3467");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        java.lang.String str20 = context15.getDateFormat();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter21 = null;
        context15.setAfterFilter(afterFilter21);
        java.time.ZoneId zoneId23 = null;
        context15.setZoneId(zoneId23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context15.setContextValueFilter(contextValueFilter17);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter20 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter21 = context15.getValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertNull(propertyFilter20);
        org.junit.Assert.assertNull(valueFilter21);
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        boolean boolean20 = jSONWriter11.isEnabled((long) ' ');
        jSONWriter11.writeString("hi!");
        boolean boolean23 = jSONWriter11.isUTF8();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        jSONWriter11.writeString((java.util.List<java.lang.String>) strList27);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter1.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3470");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        boolean boolean28 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter29 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.of(context15);
        java.lang.Object obj31 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter30.startArray(obj31, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(contextNameFilter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3471");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 0);
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path8, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path11 = path8.parent;
        com.alibaba.fastjson2.JSONWriter.Path path13 = new com.alibaba.fastjson2.JSONWriter.Path(path11, "[1]");
        org.junit.Assert.assertNotNull(path11);
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3472");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean4 = jSONWriter0.containsReference((java.lang.Object) 5);
        float[] floatArray8 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter0.writeFloat(floatArray8);
        java.time.ZonedDateTime zonedDateTime10 = null;
        jSONWriter0.writeZonedDateTime(zonedDateTime10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        jSONWriter14.writeTypeName("");
        boolean boolean17 = jSONWriter14.isUseSingleQuotes();
        boolean boolean18 = jSONWriter14.isRefDetect();
        java.time.LocalTime localTime19 = null;
        jSONWriter14.writeLocalTime(localTime19);
        jSONWriter0.setRootObject((java.lang.Object) localTime19);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw('4', 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.lang.reflect.Type type3 = null;
        boolean boolean5 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (byte) 1, type3, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        jSONWriter7.close();
        jSONWriter7.writeSymbol("");
        jSONWriter7.writeBooleanNull();
        boolean boolean12 = jSONWriter7.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter14);
        long long16 = jSONWriter14.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat23 = null;
        jSONWriter19.writeDouble(1.0d, decimalFormat23);
        boolean boolean26 = jSONWriter19.removeReference((java.lang.Object) (short) -1);
        jSONWriter19.writeArrayNull();
        long long28 = jSONWriter19.getFeatures();
        java.lang.Class<?> wildcardClass29 = jSONWriter19.getClass();
        boolean boolean31 = jSONWriter14.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass29, (long) (short) 10);
        jSONWriter1.checkAndWriteTypeName((java.lang.Object) jSONWriter7, (java.lang.Class) wildcardClass29);
        jSONWriter7.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        jSONWriter36.close();
        jSONWriter36.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray41 = null;
        jSONWriter40.writeDouble(doubleArray41);
        jSONWriter40.writeArrayNull();
        short[] shortArray47 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter40.writeInt16(shortArray47);
        jSONWriter36.writeInt16(shortArray47);
        jSONWriter7.writeInt16(shortArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean52 = jSONWriter51.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean59 = jSONWriter54.writeTypeName(byteArray57, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter61);
        long long63 = jSONWriter61.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter61.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass76, (long) (short) 10);
        int[] intArray85 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter61.writeInt32(intArray85);
        jSONWriter54.writeInt32(intArray85);
        jSONWriter51.writeInt32(intArray85);
        jSONWriter7.writeInt32(intArray85);
        jSONWriter7.writeDateTime14((int) (byte) 0, (int) 'a', (int) (byte) 1, (int) (byte) 10, 10, 13);
        java.math.BigDecimal bigDecimal97 = null;
        jSONWriter7.writeDecimal(bigDecimal97, (long) 100);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3474");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) '#');
        jSONWriter1.startArray(0);
        jSONWriter1.writeInt32((int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter1.context;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context29.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider30, featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3475");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        long long20 = context15.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString;
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        java.util.UUID uUID35 = null;
        jSONWriter25.writeUUID(uUID35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter25.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context37);
        boolean boolean40 = jSONWriter38.hasFilter((long) 0);
        jSONWriter38.endArray();
        jSONWriter38.writeString("");
        boolean boolean44 = jSONWriter38.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) feature47);
        jSONWriter38.writeEnum((java.lang.Enum) feature47);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter53.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter66 = context65.getPropertyFilter();
        long long67 = context65.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter68 = null;
        context65.setLabelFilter(labelFilter68);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context65, symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Context context72 = jSONWriter71.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter73 = null;
        context72.setPropertyFilter(propertyFilter73);
        boolean boolean75 = context72.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean77 = jSONWriter76.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean79 = jSONWriter76.isEnabled(feature78);
        boolean boolean80 = context72.isEnabled(feature78);
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature82 = com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray83 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature47, feature78, feature81, feature82 };
        context15.config(featureArray83);
        com.alibaba.fastjson2.JSONWriter.Context context85 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray83);
        com.alibaba.fastjson2.JSONWriter jSONWriter86 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context85);
        com.alibaba.fastjson2.filter.NameFilter nameFilter87 = context85.getNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString));
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(context65);
        org.junit.Assert.assertNull(propertyFilter66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(context72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature82 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii + "'", feature82.equals(com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii));
        org.junit.Assert.assertNotNull(featureArray83);
        org.junit.Assert.assertNotNull(jSONWriter86);
        org.junit.Assert.assertNull(nameFilter87);
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter6.writeDecimal(bigDecimal9);
        boolean boolean12 = jSONWriter6.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter6.writeArrayNull();
        jSONWriter6.writeChar('a');
        jSONWriter6.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter6.writeNull();
        jSONWriter6.writeInt32((int) (short) 1);
        boolean boolean26 = path2.equals((java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Path path28 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1][0]");
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path28, (int) '4');
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3477");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path4.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        boolean boolean29 = path4.equals((java.lang.Object) context23);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter30 = context23.getValueFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter31 = context23.getBeforeFilter();
        context23.setDateFormat("[1][0]");
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter34 = context23.getContextNameFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter35 = context23.getContextNameFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter36 = null;
        context23.setLabelFilter(labelFilter36);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter38 = context23.getAfterFilter();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1]" + "'", str7, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(valueFilter30);
        org.junit.Assert.assertNull(beforeFilter31);
        org.junit.Assert.assertNull(contextNameFilter34);
        org.junit.Assert.assertNull(contextNameFilter35);
        org.junit.Assert.assertNull(afterFilter38);
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3478");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        java.lang.String str20 = context15.getDateFormat();
        com.alibaba.fastjson2.filter.NameFilter nameFilter21 = null;
        context15.setNameFilter(nameFilter21);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        boolean boolean14 = jSONWriter3.hasFilter();
        boolean boolean15 = jSONWriter3.utf8;
        boolean boolean16 = jSONWriter3.utf16;
        jSONWriter3.writeTypeName("[1][0]");
        jSONWriter3.startArray(8);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        boolean boolean22 = jSONWriter21.utf16;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3480");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        jSONWriter1.writeString("");
        jSONWriter1.endObject();
        boolean boolean16 = jSONWriter1.hasFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.util.Map map15 = null;
        jSONWriter3.write(map15);
        jSONWriter3.writeDateTime19((-1), 1, (int) ' ', (-1), (int) '#', (int) 'a');
        jSONWriter3.writeFloat(0.0f);
        jSONWriter3.endArray();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context15.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context15.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        long long31 = jSONWriter29.getFeatures();
        java.time.LocalDateTime localDateTime32 = null;
        jSONWriter29.writeLocalDateTime(localDateTime32);
        byte[] byteArray34 = jSONWriter29.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter29.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27, featureArray35);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter42 = context41.getBeforeFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-81]");
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNull(beforeFilter42);
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        jSONWriter27.writeName((long) (byte) 100);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3484");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        long long11 = jSONWriter9.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter9.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass24, (long) (short) 10);
        int[] intArray33 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter9.writeInt32(intArray33);
        double[] doubleArray39 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter9.writeDouble(doubleArray39);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter1.writeDouble(doubleArray39, decimalFormat41);
        jSONWriter1.writeName("[1].hi\\![35]");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal49 = null;
        jSONWriter46.writeDecimal(bigDecimal49);
        java.time.LocalDate localDate51 = null;
        jSONWriter46.writeLocalDate(localDate51);
        jSONWriter46.writeName("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter56);
        boolean boolean58 = jSONWriter56.utf16;
        jSONWriter56.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter61);
        long long63 = jSONWriter61.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter61.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass76, (long) (short) 10);
        int[] intArray85 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter61.writeInt32(intArray85);
        jSONWriter56.writeInt32(intArray85);
        jSONWriter46.writeInt32(intArray85);
        jSONWriter1.writeInt32(intArray85);
        boolean boolean90 = jSONWriter1.isUTF8();
        jSONWriter1.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3485");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class16 = null;
        jSONWriter3.checkAndWriteTypeName((java.lang.Object) feature15, class16);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter3.writeDecimal(bigDecimal18);
        jSONWriter3.writeTypeName("hi!");
        jSONWriter3.writeSymbol(4);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3486");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        jSONWriter4.writeSymbol((-1));
        java.lang.String str9 = jSONWriter1.setPath("", (java.lang.Object) jSONWriter4);
        java.time.LocalDateTime localDateTime10 = null;
        jSONWriter4.writeLocalDateTime(localDateTime10);
        java.math.BigDecimal bigDecimal12 = null;
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter4.writeDecimal(bigDecimal12, (long) 13, decimalFormat14);
        boolean boolean16 = jSONWriter4.hasFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3487");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        char[] charArray13 = new char[] {};
        jSONWriter1.writeString(charArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray16 = null;
        jSONWriter15.writeDouble(doubleArray16);
        boolean boolean18 = jSONWriter15.utf16;
        java.math.BigDecimal bigDecimal19 = null;
        jSONWriter15.writeDecimal(bigDecimal19, 100L);
        jSONWriter15.writeReference("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        jSONWriter26.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter43.writeFloat((float) 10, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean54 = jSONWriter49.writeTypeName(byteArray52, (long) 10);
        boolean boolean56 = jSONWriter43.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter43.writeInt16((short) (byte) 100);
        boolean boolean59 = jSONWriter43.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter61);
        long long63 = jSONWriter61.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter61.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass76, (long) (short) 10);
        boolean boolean80 = jSONWriter26.isWriteTypeInfo((java.lang.Object) boolean59, (java.lang.reflect.Type) wildcardClass76, (long) (byte) -1);
        boolean boolean82 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter15, (java.lang.reflect.Type) wildcardClass76, (long) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        java.time.LocalDate localDate84 = null;
        jSONWriter1.writeLocalDate(localDate84);
        java.text.DecimalFormat decimalFormat87 = null;
        jSONWriter1.writeDouble((double) 0.0f, decimalFormat87);
        int int89 = jSONWriter1.level();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3488");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter18 = context15.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean20 = jSONWriter19.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        jSONWriter19.writeAny((java.lang.Object) featureArray21);
        java.nio.charset.Charset charset25 = jSONWriter19.getCharset();
        java.math.BigInteger bigInteger26 = null;
        jSONWriter19.writeBigInt(bigInteger26);
        java.math.BigDecimal bigDecimal28 = null;
        jSONWriter19.writeDecimal(bigDecimal28);
        boolean boolean30 = jSONWriter19.isBeanToArray();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(nameFilter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3489");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean4 = jSONWriter0.containsReference((java.lang.Object) 5);
        float[] floatArray8 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter0.writeFloat(floatArray8);
        java.time.ZonedDateTime zonedDateTime10 = null;
        jSONWriter0.writeZonedDateTime(zonedDateTime10);
        java.util.Map map12 = null;
        jSONWriter0.write(map12);
        jSONWriter0.writeMillis(97L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0, 10.0]");
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3490");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        java.util.Map map4 = null;
        jSONWriter1.write(map4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter8.writeDouble(1.0d, decimalFormat12);
        java.time.ZonedDateTime zonedDateTime14 = null;
        jSONWriter8.writeZonedDateTime(zonedDateTime14);
        long long17 = jSONWriter8.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context33);
        java.time.format.DateTimeFormatter dateTimeFormatter35 = context33.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider36 = context33.getProvider();
        boolean boolean37 = jSONWriter8.isWriteTypeInfo((java.lang.Object) context33);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context33, symbolTable38);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider40 = context33.provider;
        java.lang.String str41 = jSONWriter1.setPath("[1].hi\\![35]", (java.lang.Object) objectWriterProvider40);
        jSONWriter1.writeDouble((double) 100);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(objectWriterProvider36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(objectWriterProvider40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3491");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        jSONWriter29.writeInt8((byte) 1);
        jSONWriter29.endArray();
        jSONWriter29.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context64.config(feature65, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) feature70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70 };
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        context64.config(featureArray72);
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray72);
        jSONWriter29.config(featureArray72);
        boolean boolean78 = jSONWriter25.isIgnoreNoneSerializable((java.lang.Object) featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        java.math.BigDecimal bigDecimal80 = null;
        java.text.DecimalFormat decimalFormat82 = null;
        jSONWriter79.writeDecimal(bigDecimal80, 1L, decimalFormat82);
        java.math.BigInteger bigInteger84 = null;
        jSONWriter79.writeBigInt(bigInteger84, 65536L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSONWriter79);
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3492");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        java.util.UUID uUID35 = null;
        jSONWriter25.writeUUID(uUID35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter25.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter38 = context37.getPropertyFilter();
        long long39 = context37.getFeatures();
        long long40 = context37.getFeatures();
        boolean boolean41 = context37.isDateFormatHasHour();
        java.time.ZoneId zoneId42 = context37.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter43 = context37.getBeforeFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider44 = context37.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        jSONWriter46.close();
        jSONWriter46.writeSymbol("");
        jSONWriter46.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter46.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter52 = null;
        context51.setPropertyPreFilter(propertyPreFilter52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean58 = jSONWriter56.isRefDetect((java.lang.Object) feature57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature57 };
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray59);
        context51.config(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.of(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider44, featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context67 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18, featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context68 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertNull(propertyFilter38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneId42);
        org.junit.Assert.assertNull(beforeFilter43);
        org.junit.Assert.assertNotNull(objectWriterProvider44);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter66);
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3493");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        boolean boolean27 = jSONWriter26.isRefDetect();
        java.lang.String str30 = jSONWriter26.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        long long34 = jSONWriter32.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        long long46 = jSONWriter37.getFeatures();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean49 = jSONWriter32.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass47, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter50 = jSONWriter26.getObjectWriter((java.lang.Class) wildcardClass47);
        boolean boolean51 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context23, (java.lang.reflect.Type) wildcardClass47);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter52 = context23.getValueFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter53 = null;
        context23.setBeforeFilter(beforeFilter53);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter55 = context23.getLabelFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objectWriter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(valueFilter52);
        org.junit.Assert.assertNull(labelFilter55);
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean boolean13 = jSONWriter12.isRefDetect();
        jSONWriter12.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        jSONWriter12.writeFloat((java.lang.Float) (-1.0f));
        java.lang.String str23 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        jSONWriter12.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        java.util.UUID uUID38 = null;
        jSONWriter28.writeUUID(uUID38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter28.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter41 = context40.getPropertyFilter();
        long long42 = context40.getFeatures();
        long long43 = context40.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter44 = context40.getContextNameFilter();
        boolean boolean45 = context40.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter46 = null;
        context40.setValueFilter(valueFilter46);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter48 = context40.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.of(context40);
        jSONWriter12.startArray((java.lang.Object) context40, (int) (short) 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertNull(propertyFilter41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNull(contextNameFilter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(contextNameFilter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context15.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        java.util.UUID uUID38 = null;
        jSONWriter28.writeUUID(uUID38);
        jSONWriter28.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        byte[] byteArray52 = new byte[] { (byte) -1 };
        boolean boolean54 = jSONWriter45.writeTypeName(byteArray52, 0L);
        java.util.UUID uUID55 = null;
        jSONWriter45.writeUUID(uUID55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = jSONWriter45.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context57.config(feature58, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) feature63);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature63 };
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray65);
        context57.config(featureArray65);
        jSONWriter28.config(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.of(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.of(featureArray65);
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider24, featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(context57);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(jSONWriter72);
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3497");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4);
        java.math.BigDecimal bigDecimal6 = null;
        jSONWriter0.writeDecimal(bigDecimal6);
        com.alibaba.fastjson2.JSONWriter.Path path8 = null;
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path8, "");
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path15 = path10.parent;
        com.alibaba.fastjson2.JSONWriter.Path path16 = path10.parent;
        jSONWriter0.writeAny((java.lang.Object) path16);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(path15);
        org.junit.Assert.assertNull(path16);
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.startObject();
        boolean boolean6 = jSONWriter1.isIgnoreErrorGetter();
        boolean boolean7 = jSONWriter1.isUTF8();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        jSONWriter13.close();
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter13.writeFloat((float) 10, decimalFormat16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean24 = jSONWriter19.writeTypeName(byteArray22, (long) 10);
        boolean boolean26 = jSONWriter13.writeTypeName(byteArray22, (long) (byte) 100);
        jSONWriter13.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        jSONWriter30.close();
        java.text.DecimalFormat decimalFormat33 = null;
        jSONWriter30.writeFloat((float) 10, decimalFormat33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean41 = jSONWriter36.writeTypeName(byteArray39, (long) 10);
        boolean boolean43 = jSONWriter30.writeTypeName(byteArray39, (long) (byte) 100);
        jSONWriter30.writeInt16((short) (byte) 100);
        boolean boolean46 = jSONWriter30.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter48);
        long long50 = jSONWriter48.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat57 = null;
        jSONWriter53.writeDouble(1.0d, decimalFormat57);
        boolean boolean60 = jSONWriter53.removeReference((java.lang.Object) (short) -1);
        jSONWriter53.writeArrayNull();
        long long62 = jSONWriter53.getFeatures();
        java.lang.Class<?> wildcardClass63 = jSONWriter53.getClass();
        boolean boolean65 = jSONWriter48.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass63, (long) (short) 10);
        boolean boolean67 = jSONWriter13.isWriteTypeInfo((java.lang.Object) boolean46, (java.lang.reflect.Type) wildcardClass63, (long) (byte) -1);
        boolean[] booleanArray74 = new boolean[] { false, false, false, true, true, true };
        jSONWriter13.writeBool(booleanArray74);
        jSONWriter11.writeBool(booleanArray74);
        jSONWriter1.writeBool(booleanArray74);
        com.alibaba.fastjson2.JSONWriter.Path path78 = null;
        com.alibaba.fastjson2.JSONWriter.Path path80 = new com.alibaba.fastjson2.JSONWriter.Path(path78, "");
        com.alibaba.fastjson2.JSONWriter.Path path82 = new com.alibaba.fastjson2.JSONWriter.Path(path80, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path84 = new com.alibaba.fastjson2.JSONWriter.Path(path82, "hi!");
        boolean boolean85 = jSONWriter1.containsReference((java.lang.Object) path82);
        com.alibaba.fastjson2.JSONWriter.Path path87 = new com.alibaba.fastjson2.JSONWriter.Path(path82, "[1]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[false, false, false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3499");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context21.getContextValueFilter();
        boolean boolean23 = context21.isDateFormatISO8601();
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context21.getDateFormatter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter25 = null;
        context21.setContextValueFilter(contextValueFilter25);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter24);
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3500");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.isBeanToArray();
        jSONWriter0.writeName("[1]");
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        long long24 = context22.getFeatures();
        long long25 = context22.getFeatures();
        boolean boolean26 = context22.isDateFormatHasHour();
        java.time.ZoneId zoneId27 = context22.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter28 = context22.getBeforeFilter();
        boolean boolean29 = context22.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context22.getProvider();
        java.lang.String str31 = jSONWriter0.setPath("[1].hi\\![35]", (java.lang.Object) objectWriterProvider30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider30, featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context36);
        boolean boolean38 = jSONWriter37.utf16;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNull(beforeFilter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }
}
