import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context15.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context15.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        long long31 = jSONWriter29.getFeatures();
        java.time.LocalDateTime localDateTime32 = null;
        jSONWriter29.writeLocalDateTime(localDateTime32);
        byte[] byteArray34 = jSONWriter29.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter29.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27, featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter44);
        boolean boolean46 = jSONWriter44.utf16;
        jSONWriter44.endObject();
        jSONWriter44.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = jSONWriter44.symbolTable;
        double[] doubleArray61 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter44.writeDouble(doubleArray61);
        java.text.DecimalFormat decimalFormat63 = null;
        jSONWriter42.writeDouble(doubleArray61, decimalFormat63);
        jSONWriter42.writeChar('a');
        jSONWriter42.close();
        boolean boolean68 = jSONWriter42.utf8;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-81]");
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(symbolTable55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context22.setPropertyFilter(propertyFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context22.setLabelFilter(labelFilter25);
        long long27 = context22.getFeatures();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter28);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = null;
        context15.setValueFilter(valueFilter28);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider30);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter32 = null;
        context31.setValueFilter(valueFilter32);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalDate localDate2 = null;
        jSONWriter1.writeLocalDate(localDate2);
        boolean boolean4 = jSONWriter1.utf8;
        java.util.UUID uUID5 = null;
        jSONWriter1.writeUUID(uUID5);
        jSONWriter1.endObject();
        boolean boolean8 = jSONWriter1.isWriteNulls();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        boolean[] booleanArray6 = new boolean[] { true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        jSONWriter11.close();
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter11.writeFloat((float) 10, decimalFormat14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean22 = jSONWriter17.writeTypeName(byteArray20, (long) 10);
        boolean boolean24 = jSONWriter11.writeTypeName(byteArray20, (long) (byte) 100);
        jSONWriter9.writeNameRaw(byteArray20, 0L);
        jSONWriter1.writeHex(byteArray20);
        jSONWriter1.writeChar(' ');
        jSONWriter1.writeDateTime19(100, (int) (short) 10, 0, (int) (short) 10, (int) 'a', (int) (byte) 0);
        java.time.ZonedDateTime zonedDateTime37 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime37);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean7 = jSONWriter1.isEnabled(10L);
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        boolean boolean13 = jSONWriter11.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter15.writeDouble(1.0d, decimalFormat19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean27 = jSONWriter22.writeTypeName(byteArray25, (long) 10);
        jSONWriter15.writeStringLatin1(byteArray25);
        jSONWriter11.writeStringLatin1(byteArray25);
        boolean boolean30 = jSONWriter11.isUTF16();
        java.lang.String str31 = jSONWriter1.setPath(5, (java.lang.Object) boolean30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray33 = null;
        jSONWriter32.writeDouble(doubleArray33);
        boolean boolean35 = jSONWriter32.utf16;
        java.math.BigDecimal bigDecimal36 = null;
        jSONWriter32.writeDecimal(bigDecimal36, 100L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        boolean boolean45 = jSONWriter40.isUTF8();
        double[] doubleArray49 = new double[] { 1L, (byte) -1, (byte) 1 };
        jSONWriter40.writeDouble(doubleArray49);
        java.text.DecimalFormat decimalFormat51 = null;
        jSONWriter32.writeDouble(doubleArray49, decimalFormat51);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter1.writeDouble(doubleArray49, decimalFormat53);
        java.io.Writer writer55 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.flushTo(writer55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 1.0]");
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter6.writeDecimal(bigDecimal9);
        boolean boolean12 = jSONWriter6.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter6.writeArrayNull();
        jSONWriter6.writeChar('a');
        jSONWriter6.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter6.writeNull();
        jSONWriter6.writeInt32((int) (short) 1);
        boolean boolean26 = path2.equals((java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean29 = path2.equals((java.lang.Object) featureArray27);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.util.List list3 = null;
        jSONWriter1.write(list3);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        boolean boolean9 = jSONWriter1.containsReference((java.lang.Object) boolean8);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        java.util.UUID uUID23 = null;
        jSONWriter13.writeUUID(uUID23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter13.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context25);
        java.time.LocalTime localTime27 = null;
        jSONWriter26.writeLocalTime(localTime27);
        boolean boolean29 = jSONWriter26.isBeanToArray();
        boolean boolean30 = jSONWriter26.isIgnoreNoneSerializable();
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) boolean30, class31, 4L);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter35.isWriteTypeInfo((java.lang.Object) jSONWriter37, class40, (long) ' ');
        char[] charArray43 = new char[] {};
        jSONWriter37.writeString(charArray43);
        jSONWriter1.writeString(charArray43, (int) (short) 10, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        jSONWriter49.close();
        jSONWriter49.writeSymbol("");
        jSONWriter49.writeBooleanNull();
        jSONWriter49.endArray();
        boolean boolean55 = jSONWriter49.isRefDetect();
        boolean boolean56 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter49);
        jSONWriter1.writeInt8((byte) 10);
        jSONWriter1.writeTypeName("[1]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[]");
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context15.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter30.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider29, featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        boolean boolean25 = context15.isDateFormatHasDay();
        boolean boolean26 = context15.isDateFormatMillis();
        boolean boolean27 = context15.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = null;
        context15.setPropertyFilter(propertyFilter28);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = null;
        context15.setAfterFilter(afterFilter30);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        long long8 = jSONWriter6.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter11.writeDouble(1.0d, decimalFormat15);
        boolean boolean18 = jSONWriter11.removeReference((java.lang.Object) (short) -1);
        jSONWriter11.writeArrayNull();
        long long20 = jSONWriter11.getFeatures();
        java.lang.Class<?> wildcardClass21 = jSONWriter11.getClass();
        boolean boolean23 = jSONWriter6.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass21, (long) (short) 10);
        int[] intArray30 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter6.writeInt32(intArray30);
        jSONWriter1.writeInt32(intArray30);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        boolean[] booleanArray39 = new boolean[] { false, true, true, true };
        jSONWriter34.writeBool(booleanArray39);
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        jSONWriter34.writeBinary(byteArray51);
        byte[] byteArray55 = jSONWriter34.getBytes();
        jSONWriter1.writeRaw(byteArray55);
        jSONWriter1.writeReference("[1][10]");
        boolean boolean59 = jSONWriter1.isBeanToArray();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-104, -80, -79, -79, -79, -111, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        byte[] byteArray43 = null;
        jSONWriter33.writeBinary(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter33.writeHex(byteArray51);
        jSONWriter25.writeBinary(byteArray51);
        jSONWriter25.writeName((int) (short) 0);
        java.time.ZonedDateTime zonedDateTime56 = null;
        jSONWriter25.writeZonedDateTime(zonedDateTime56);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 1, -1, 1, -1]");
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context5, symbolTable6);
        jSONWriter7.writeSymbol(".\\[1\\]\\[0\\]");
        java.time.ZonedDateTime zonedDateTime10 = null;
        jSONWriter7.writeZonedDateTime(zonedDateTime10);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        jSONWriter25.writeInt16((short) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        java.time.LocalDateTime localDateTime4 = null;
        jSONWriter1.writeLocalDateTime(localDateTime4);
        byte[] byteArray6 = jSONWriter1.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        jSONWriter1.config(featureArray7);
        jSONWriter1.close();
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter16.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter29 = context28.getPropertyFilter();
        long long30 = context28.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter31 = null;
        context28.setLabelFilter(labelFilter31);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context28.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter34 = null;
        context28.setPropertyPreFilter(propertyPreFilter34);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter36 = null;
        context28.setPropertyPreFilter(propertyPreFilter36);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context28.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider40 = context28.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter42);
        long long44 = jSONWriter42.getFeatures();
        java.time.LocalDateTime localDateTime45 = null;
        jSONWriter42.writeLocalDateTime(localDateTime45);
        byte[] byteArray47 = jSONWriter42.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray48);
        jSONWriter42.config(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.of(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Context context54 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider40, featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.of(featureArray48);
        jSONWriter1.config(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        java.time.LocalTime localTime59 = null;
        jSONWriter58.writeLocalTime(localTime59);
        com.alibaba.fastjson2.SymbolTable symbolTable61 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        boolean boolean66 = jSONWriter64.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class67 = null;
        boolean boolean69 = jSONWriter62.isWriteTypeInfo((java.lang.Object) jSONWriter64, class67, (long) ' ');
        byte[] byteArray71 = new byte[] { (byte) -1 };
        boolean boolean73 = jSONWriter64.writeTypeName(byteArray71, 0L);
        jSONWriter58.writeBinary(byteArray71);
        jSONWriter1.writeStringLatin1(byteArray71);
        java.time.Instant instant76 = null;
        jSONWriter1.writeInstant(instant76);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-81]");
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNull(propertyFilter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertNotNull(objectWriterProvider40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-81]");
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        int[] intArray4 = new int[] { (short) -1 };
        jSONWriter2.writeInt32(intArray4);
        jSONWriter2.writeDateYYYMMDD8((int) (short) -1, (int) (byte) -1, (int) '4');
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        java.util.UUID uUID23 = null;
        jSONWriter13.writeUUID(uUID23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter13.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter26 = context25.getPropertyFilter();
        long long27 = context25.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter28 = null;
        context25.setLabelFilter(labelFilter28);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context25.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter31 = null;
        context25.setPropertyPreFilter(propertyPreFilter31);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter33 = null;
        context25.setPropertyPreFilter(propertyPreFilter33);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter35 = null;
        context25.setLabelFilter(labelFilter35);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider37 = context25.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter39);
        long long41 = jSONWriter39.getFeatures();
        java.time.LocalDateTime localDateTime42 = null;
        jSONWriter39.writeLocalDateTime(localDateTime42);
        byte[] byteArray44 = jSONWriter39.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Context context47 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray45);
        jSONWriter39.config(featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.of(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider37, featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.of(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter54);
        boolean boolean56 = jSONWriter54.utf16;
        jSONWriter54.endObject();
        jSONWriter54.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable65 = jSONWriter54.symbolTable;
        double[] doubleArray71 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter54.writeDouble(doubleArray71);
        java.text.DecimalFormat decimalFormat73 = null;
        jSONWriter52.writeDouble(doubleArray71, decimalFormat73);
        java.text.DecimalFormat decimalFormat75 = null;
        jSONWriter2.writeDouble(doubleArray71, decimalFormat75);
        com.alibaba.fastjson2.SymbolTable symbolTable77 = jSONWriter2.symbolTable;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1]");
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertNull(propertyFilter26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNotNull(objectWriterProvider37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-81]");
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(symbolTable65);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertNull(symbolTable77);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = null;
        context6.setPropertyPreFilter(propertyPreFilter7);
        boolean boolean9 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter10 = context6.getLabelFilter();
        context6.setDateFormat("[1].hi\\!");
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter13 = null;
        context6.setPropertyFilter(propertyFilter13);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(labelFilter10);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        jSONWriter22.writeBool(false);
        jSONWriter22.endObject();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.of(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) feature13);
        jSONWriter12.writeInt16((short) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = jSONWriter12.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean24 = jSONWriter19.writeTypeName(byteArray22, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter26);
        long long28 = jSONWriter26.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat35 = null;
        jSONWriter31.writeDouble(1.0d, decimalFormat35);
        boolean boolean38 = jSONWriter31.removeReference((java.lang.Object) (short) -1);
        jSONWriter31.writeArrayNull();
        long long40 = jSONWriter31.getFeatures();
        java.lang.Class<?> wildcardClass41 = jSONWriter31.getClass();
        boolean boolean43 = jSONWriter26.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass41, (long) (short) 10);
        int[] intArray50 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter26.writeInt32(intArray50);
        jSONWriter19.writeInt32(intArray50);
        jSONWriter12.writeInt32(intArray50);
        jSONWriter10.writeInt32(intArray50);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(symbolTable17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter18 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = null;
        context15.setContextNameFilter(contextNameFilter19);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter21 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter22 = null;
        context15.setNameFilter(nameFilter22);
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = null;
        context15.setNameFilter(nameFilter24);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context15.setLabelFilter(labelFilter26);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNull(valueFilter18);
        org.junit.Assert.assertNull(contextValueFilter21);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        com.alibaba.fastjson2.SymbolTable symbolTable2 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class8 = null;
        boolean boolean10 = jSONWriter3.isWriteTypeInfo((java.lang.Object) jSONWriter5, class8, (long) ' ');
        byte[] byteArray12 = new byte[] { (byte) -1 };
        boolean boolean14 = jSONWriter5.writeTypeName(byteArray12, 0L);
        java.util.UUID uUID15 = null;
        jSONWriter5.writeUUID(uUID15);
        com.alibaba.fastjson2.JSONWriter.Context context17 = jSONWriter5.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context17, symbolTable19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter24.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context36);
        java.time.format.DateTimeFormatter dateTimeFormatter38 = context36.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider39 = context36.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) feature42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature42 };
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray44);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider39, featureArray44);
        context17.config(featureArray44);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray44);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context(".\\[1\\]\\[0\\]", featureArray44);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter50 = context49.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(context17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(objectWriterProvider39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNull(afterFilter50);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        boolean boolean25 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context15.provider;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.endArray();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray25 = null;
        jSONWriter22.writeHex(byteArray25);
        boolean boolean27 = jSONWriter22.isRefDetect();
        jSONWriter22.writeNumberNull();
        jSONWriter22.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        jSONWriter32.close();
        jSONWriter32.writeSymbol("");
        jSONWriter32.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) -1 };
        boolean boolean49 = jSONWriter40.writeTypeName(byteArray47, 0L);
        java.util.UUID uUID50 = null;
        jSONWriter40.writeUUID(uUID50);
        java.util.Map map52 = null;
        jSONWriter40.write(map52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        java.time.LocalTime localTime56 = null;
        jSONWriter55.writeLocalTime(localTime56);
        com.alibaba.fastjson2.SymbolTable symbolTable58 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        boolean boolean63 = jSONWriter61.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class64 = null;
        boolean boolean66 = jSONWriter59.isWriteTypeInfo((java.lang.Object) jSONWriter61, class64, (long) ' ');
        byte[] byteArray68 = new byte[] { (byte) -1 };
        boolean boolean70 = jSONWriter61.writeTypeName(byteArray68, 0L);
        jSONWriter55.writeBinary(byteArray68);
        jSONWriter40.writeBinary(byteArray68);
        jSONWriter32.writeStringLatin1(byteArray68);
        jSONWriter22.writeNameRaw(byteArray68);
        jSONWriter1.writeHex(byteArray68);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        int int6 = jSONWriter1.level();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        byte[] byteArray20 = null;
        jSONWriter10.writeBinary(byteArray20);
        jSONWriter10.endObject();
        boolean boolean24 = jSONWriter10.isEnabled((long) (short) 0);
        boolean boolean25 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (short) 0);
        jSONWriter1.writeReference(".\\[1\\]\\.hi\\\\\\!");
        boolean boolean28 = jSONWriter1.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        jSONWriter8.writeBool(false);
        jSONWriter8.writeDateTime14(4, (int) (short) 10, (int) (short) 100, (int) (byte) 10, (int) (short) 10, (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context33);
        jSONWriter34.startObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        jSONWriter37.close();
        jSONWriter37.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        boolean boolean51 = jSONWriter42.isEnabled((long) ' ');
        jSONWriter42.writeString("hi!");
        boolean boolean54 = jSONWriter42.isUTF8();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        jSONWriter42.writeString((java.util.List<java.lang.String>) strList58);
        jSONWriter37.writeString((java.util.List<java.lang.String>) strList58);
        jSONWriter34.writeString((java.util.List<java.lang.String>) strList58);
        jSONWriter8.write((java.util.List) strList58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter65);
        boolean boolean67 = jSONWriter65.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat73 = null;
        jSONWriter69.writeDouble(1.0d, decimalFormat73);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean81 = jSONWriter76.writeTypeName(byteArray79, (long) 10);
        jSONWriter69.writeStringLatin1(byteArray79);
        jSONWriter65.writeStringLatin1(byteArray79);
        int int84 = jSONWriter65.level();
        boolean boolean85 = jSONWriter65.isBeanToArray();
        jSONWriter65.writeArrayNull();
        jSONWriter8.setRootObject((java.lang.Object) jSONWriter65);
        jSONWriter8.writeMillis((-1L));
        com.alibaba.fastjson2.SymbolTable symbolTable90 = jSONWriter8.getSymbolTable();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(symbolTable90);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        boolean boolean27 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean29 = context15.isDateFormatMillis();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter30 = context15.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(contextNameFilter30);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter28 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context15.setBeforeFilter(beforeFilter29);
        boolean boolean31 = context15.isDateFormatHasDay();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(valueFilter28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        java.math.BigDecimal bigDecimal5 = null;
        jSONWriter4.writeDecimal(bigDecimal5);
        jSONWriter4.writeName(".\\[1\\]\\[0\\]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        jSONWriter0.writeBooleanNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter22 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        byte[] byteArray37 = null;
        jSONWriter27.writeBinary(byteArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class40 = null;
        jSONWriter27.checkAndWriteTypeName((java.lang.Object) feature39, class40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature39 };
        context15.config(featureArray42);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter44 = null;
        context15.setPropertyPreFilter(propertyPreFilter44);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter46 = context15.getPropertyFilter();
        context15.setDateFormat("[1].hi\\![35][100]");
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter49 = null;
        context15.setPropertyPreFilter(propertyPreFilter49);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextNameFilter22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNull(propertyFilter46);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context15);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean26 = jSONWriter25.isUseSingleQuotes();
        boolean boolean27 = jSONWriter25.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal32 = null;
        jSONWriter29.writeDecimal(bigDecimal32);
        boolean boolean35 = jSONWriter29.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter29.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        char[] charArray44 = new char[] { '#', ' ' };
        jSONWriter41.writeString(charArray44, (int) (byte) 0, (int) (short) 1);
        jSONWriter29.writeString(charArray44);
        jSONWriter25.writeString(charArray44, 1, (int) (short) 0, true);
        jSONWriter24.writeRaw(charArray44);
        jSONWriter24.writeSymbol("[1].hi\\![35]");
        boolean boolean56 = jSONWriter24.isUseSingleQuotes();
        com.alibaba.fastjson2.SymbolTable symbolTable57 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class63 = null;
        boolean boolean65 = jSONWriter58.isWriteTypeInfo((java.lang.Object) jSONWriter60, class63, (long) ' ');
        byte[] byteArray67 = new byte[] { (byte) -1 };
        boolean boolean69 = jSONWriter60.writeTypeName(byteArray67, 0L);
        java.util.UUID uUID70 = null;
        jSONWriter60.writeUUID(uUID70);
        com.alibaba.fastjson2.JSONWriter.Context context72 = jSONWriter60.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context72);
        java.time.LocalTime localTime74 = null;
        jSONWriter73.writeLocalTime(localTime74);
        boolean boolean76 = jSONWriter73.isBeanToArray();
        boolean boolean77 = jSONWriter73.isIgnoreNoneSerializable();
        jSONWriter73.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray79);
        com.alibaba.fastjson2.JSONObject jSONObject83 = null;
        jSONWriter82.write(jSONObject83);
        java.lang.Class<?> wildcardClass85 = jSONWriter82.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter86 = jSONWriter73.getObjectWriter((java.lang.Class) wildcardClass85);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter87 = jSONWriter24.getObjectWriter((java.lang.Class) wildcardClass85);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#,  ]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(context72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(objectWriter86);
        org.junit.Assert.assertNotNull(objectWriter87);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context15.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = context15.getLabelFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(labelFilter25);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        boolean boolean7 = jSONWriter1.isUTF16();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        jSONWriter11.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        jSONWriter26.writeSymbol("");
        boolean[] booleanArray31 = new boolean[] { true };
        jSONWriter26.writeBool(booleanArray31);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        boolean boolean43 = jSONWriter34.isEnabled((long) ' ');
        jSONWriter34.writeString("hi!");
        char[] charArray46 = new char[] {};
        jSONWriter34.writeString(charArray46);
        jSONWriter26.writeString(charArray46, 10, (int) (short) 0);
        jSONWriter11.writeString(charArray46, (int) (short) 100, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(charArray46, (int) (byte) 100, 1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[]");
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.of(context4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        boolean boolean14 = jSONWriter7.removeReference((java.lang.Object) (short) -1);
        jSONWriter7.writeArrayNull();
        jSONWriter7.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = null;
        jSONWriter18.writeDouble(doubleArray19);
        jSONWriter18.writeArrayNull();
        short[] shortArray25 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter18.writeInt16(shortArray25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal31 = null;
        jSONWriter28.writeDecimal(bigDecimal31);
        boolean boolean34 = jSONWriter28.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter28.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        char[] charArray43 = new char[] { '#', ' ' };
        jSONWriter40.writeString(charArray43, (int) (byte) 0, (int) (short) 1);
        jSONWriter28.writeString(charArray43);
        jSONWriter18.writeString(charArray43);
        jSONWriter7.writeString(charArray43);
        jSONWriter5.writeString(charArray43);
        jSONWriter5.writeRaw('#');
        jSONWriter5.writeFloat((float) 5L);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#,  ]");
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean1 = jSONWriter0.isUseSingleQuotes();
        java.math.BigInteger bigInteger2 = null;
        jSONWriter0.writeBigInt(bigInteger2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        byte[] byteArray14 = new byte[] { (byte) -1 };
        boolean boolean16 = jSONWriter7.writeTypeName(byteArray14, 0L);
        java.util.UUID uUID17 = null;
        jSONWriter7.writeUUID(uUID17);
        com.alibaba.fastjson2.JSONWriter.Context context19 = jSONWriter7.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter20 = context19.getPropertyFilter();
        long long21 = context19.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter22 = null;
        context19.setLabelFilter(labelFilter22);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context19.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter25 = null;
        context19.setPropertyPreFilter(propertyPreFilter25);
        com.alibaba.fastjson2.filter.NameFilter nameFilter27 = null;
        context19.setNameFilter(nameFilter27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean30 = context19.isEnabled(feature29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context19.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        byte[] byteArray42 = new byte[] { (byte) -1 };
        boolean boolean44 = jSONWriter35.writeTypeName(byteArray42, 0L);
        java.util.UUID uUID45 = null;
        jSONWriter35.writeUUID(uUID45);
        com.alibaba.fastjson2.JSONWriter.Context context47 = jSONWriter35.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context47);
        java.time.format.DateTimeFormatter dateTimeFormatter49 = context47.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider50 = context47.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider50, featureArray51);
        com.alibaba.fastjson2.JSONWriter.Context context56 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider31, featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter58 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) feature61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature61 };
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray63);
        java.time.ZoneId zoneId66 = null;
        context65.setZoneId(zoneId66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context65);
        jSONWriter68.writeTypeName("[1].hi\\!");
        java.lang.String str71 = jSONWriter57.setPath(fieldWriter58, (java.lang.Object) jSONWriter68);
        boolean boolean72 = jSONWriter68.isIgnoreErrorGetter();
        java.lang.Class class73 = null;
        boolean boolean74 = jSONWriter0.isWriteTypeInfo((java.lang.Object) boolean72, class73);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(context19);
        org.junit.Assert.assertNull(propertyFilter20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(context47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(objectWriterProvider50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        java.lang.reflect.Type type19 = null;
        boolean boolean21 = jSONWriter17.isWriteTypeInfo((java.lang.Object) (byte) 1, type19, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        jSONWriter23.writeSymbol("");
        jSONWriter23.writeBooleanNull();
        boolean boolean28 = jSONWriter23.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter30);
        long long32 = jSONWriter30.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        boolean boolean42 = jSONWriter35.removeReference((java.lang.Object) (short) -1);
        jSONWriter35.writeArrayNull();
        long long44 = jSONWriter35.getFeatures();
        java.lang.Class<?> wildcardClass45 = jSONWriter35.getClass();
        boolean boolean47 = jSONWriter30.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass45, (long) (short) 10);
        jSONWriter17.checkAndWriteTypeName((java.lang.Object) jSONWriter23, (java.lang.Class) wildcardClass45);
        jSONWriter23.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        jSONWriter52.close();
        jSONWriter52.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray57 = null;
        jSONWriter56.writeDouble(doubleArray57);
        jSONWriter56.writeArrayNull();
        short[] shortArray63 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter56.writeInt16(shortArray63);
        jSONWriter52.writeInt16(shortArray63);
        jSONWriter23.writeInt16(shortArray63);
        jSONWriter6.writeInt16(shortArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        boolean boolean69 = jSONWriter6.isWriteNulls();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class16 = null;
        jSONWriter3.checkAndWriteTypeName((java.lang.Object) feature15, class16);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter3.writeDecimal(bigDecimal18);
        jSONWriter3.writeTypeName("hi!");
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter3.writeDecimal(bigDecimal22, (long) (short) -1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        boolean boolean14 = jSONWriter3.hasFilter();
        boolean boolean15 = jSONWriter3.utf8;
        boolean boolean16 = jSONWriter3.utf16;
        jSONWriter3.writeTypeName("[1][0]");
        jSONWriter3.startArray(8);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter21.writeTypeName(".hi\\!");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        jSONWriter1.writeStringNull();
        jSONWriter1.writeStringNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty;
        boolean boolean12 = jSONWriter1.isEnabled(feature11);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter21);
        long long23 = jSONWriter22.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        double[] doubleArray3 = null;
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeDouble(doubleArray3, decimalFormat4);
        boolean boolean6 = jSONWriter1.isIgnoreNoneSerializable();
        jSONWriter1.writeSymbol(3);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        int int6 = jSONWriter1.level();
        jSONWriter1.writeString("hi!");
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter1.writeDecimal(bigDecimal9, (long) (byte) 0);
        com.alibaba.fastjson2.JSONWriter.Context context12 = jSONWriter1.getContext();
        java.time.ZoneId zoneId13 = context12.getZoneId();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(context12);
        org.junit.Assert.assertNotNull(zoneId13);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONObject jSONObject7 = null;
        jSONWriter1.write(jSONObject7);
        jSONWriter1.startObject();
        com.alibaba.fastjson2.JSONWriter.Context context10 = jSONWriter1.context;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        int int26 = jSONWriter14.level();
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) -1 };
        boolean boolean39 = jSONWriter30.writeTypeName(byteArray37, 0L);
        java.util.UUID uUID40 = null;
        jSONWriter30.writeUUID(uUID40);
        com.alibaba.fastjson2.JSONWriter.Context context42 = jSONWriter30.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter43 = context42.getPropertyFilter();
        long long44 = context42.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter45 = context42.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter48);
        long long50 = jSONWriter48.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat57 = null;
        jSONWriter53.writeDouble(1.0d, decimalFormat57);
        boolean boolean60 = jSONWriter53.removeReference((java.lang.Object) (short) -1);
        jSONWriter53.writeArrayNull();
        long long62 = jSONWriter53.getFeatures();
        java.lang.Class<?> wildcardClass63 = jSONWriter53.getClass();
        boolean boolean65 = jSONWriter48.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass63, (long) (short) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray67 = null;
        jSONWriter66.writeDouble(doubleArray67);
        boolean boolean69 = jSONWriter66.utf16;
        java.math.BigDecimal bigDecimal70 = null;
        jSONWriter66.writeDecimal(bigDecimal70, 100L);
        boolean boolean73 = jSONWriter66.utf16;
        java.lang.Object obj74 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        boolean boolean78 = jSONWriter76.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat80 = null;
        jSONWriter76.writeDouble(1.0d, decimalFormat80);
        boolean boolean83 = jSONWriter76.removeReference((java.lang.Object) (short) -1);
        jSONWriter76.writeArrayNull();
        long long85 = jSONWriter76.getFeatures();
        java.lang.Class<?> wildcardClass86 = jSONWriter76.getClass();
        boolean boolean88 = jSONWriter66.isWriteTypeInfo(obj74, (java.lang.Class) wildcardClass86, (long) (short) 0);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter89 = jSONWriter46.getObjectWriter((java.lang.reflect.Type) wildcardClass63, (java.lang.Class) wildcardClass86);
        boolean boolean91 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter14, (java.lang.Class) wildcardClass63, 10L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(context10);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(context42);
        org.junit.Assert.assertNull(propertyFilter43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNull(nameFilter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objectWriter89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter28 = context23.getContextValueFilter();
        boolean boolean29 = context23.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter30 = null;
        context23.setValueFilter(valueFilter30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(context23);
        java.lang.String str33 = jSONWriter1.setPath((int) (short) 10, (java.lang.Object) jSONWriter32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        jSONWriter35.close();
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter35.writeFloat((float) 10, decimalFormat38);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        boolean boolean50 = jSONWriter41.isEnabled((long) ' ');
        jSONWriter41.writeString("hi!");
        boolean boolean53 = jSONWriter41.isUTF8();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        jSONWriter41.writeString((java.util.List<java.lang.String>) strList57);
        jSONWriter41.writeRaw((byte) -1);
        java.math.BigInteger bigInteger62 = null;
        jSONWriter41.writeBigInt(bigInteger62, (long) '#');
        byte[] byteArray65 = jSONWriter41.getBytes();
        jSONWriter35.writeHex(byteArray65);
        jSONWriter1.writeRaw(byteArray65);
        java.lang.Class<?> wildcardClass68 = jSONWriter1.getClass();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(contextValueFilter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[76, 104, 105, 33, -106, 76, 104, 105, 33, 73, -1, -81]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        boolean boolean19 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        byte[] byteArray21 = jSONWriter20.getBytes();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.isBeanToArray();
        jSONWriter0.writeName("[1]");
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        long long24 = context22.getFeatures();
        long long25 = context22.getFeatures();
        boolean boolean26 = context22.isDateFormatHasHour();
        java.time.ZoneId zoneId27 = context22.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter28 = context22.getBeforeFilter();
        boolean boolean29 = context22.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context22.getProvider();
        java.lang.String str31 = jSONWriter0.setPath("[1].hi\\![35]", (java.lang.Object) objectWriterProvider30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider30, featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider30);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNull(beforeFilter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter35);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter25 = null;
        context15.setPropertyPreFilter(propertyPreFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter28 = context15.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNull(afterFilter28);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        java.util.Map map4 = null;
        jSONWriter1.write(map4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter8.writeDouble(1.0d, decimalFormat12);
        java.time.ZonedDateTime zonedDateTime14 = null;
        jSONWriter8.writeZonedDateTime(zonedDateTime14);
        long long17 = jSONWriter8.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context33);
        java.time.format.DateTimeFormatter dateTimeFormatter35 = context33.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider36 = context33.getProvider();
        boolean boolean37 = jSONWriter8.isWriteTypeInfo((java.lang.Object) context33);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context33, symbolTable38);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider40 = context33.provider;
        java.lang.String str41 = jSONWriter1.setPath("[1].hi\\![35]", (java.lang.Object) objectWriterProvider40);
        boolean boolean42 = jSONWriter1.utf8;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(objectWriterProvider36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(objectWriterProvider40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        context15.setDateFormat("");
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.NameFilter nameFilter22 = context15.getNameFilter();
        boolean boolean23 = context15.isDateFormatISO8601();
        boolean boolean24 = context15.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(nameFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        char[] charArray13 = new char[] {};
        jSONWriter1.writeString(charArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray16 = null;
        jSONWriter15.writeDouble(doubleArray16);
        boolean boolean18 = jSONWriter15.utf16;
        java.math.BigDecimal bigDecimal19 = null;
        jSONWriter15.writeDecimal(bigDecimal19, 100L);
        jSONWriter15.writeReference("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        jSONWriter26.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter43.writeFloat((float) 10, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean54 = jSONWriter49.writeTypeName(byteArray52, (long) 10);
        boolean boolean56 = jSONWriter43.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter43.writeInt16((short) (byte) 100);
        boolean boolean59 = jSONWriter43.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter61);
        long long63 = jSONWriter61.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter61.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass76, (long) (short) 10);
        boolean boolean80 = jSONWriter26.isWriteTypeInfo((java.lang.Object) boolean59, (java.lang.reflect.Type) wildcardClass76, (long) (byte) -1);
        boolean boolean82 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter15, (java.lang.reflect.Type) wildcardClass76, (long) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter83.writeBooleanNull();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSONWriter83);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = null;
        context6.setPropertyPreFilter(propertyPreFilter7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) feature12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray14);
        context6.config(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.of(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray14);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        jSONWriter1.writeBinary(byteArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = jSONWriter22.getSymbolTable();
        boolean boolean24 = jSONWriter22.hasFilter();
        java.nio.charset.Charset charset25 = jSONWriter22.getCharset();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNull(symbolTable23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charset25);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        boolean boolean14 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter4);
        jSONWriter0.writeRaw(".\\[1\\]\\[0\\]");
        java.math.BigDecimal bigDecimal17 = null;
        jSONWriter0.writeDecimal(bigDecimal17, 65536L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        java.time.ZonedDateTime zonedDateTime8 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime8);
        int int10 = jSONWriter1.size();
        java.time.LocalDateTime localDateTime11 = null;
        jSONWriter1.writeLocalDateTime(localDateTime11);
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter16.getContext();
        jSONWriter16.writeInt64((long) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        jSONWriter34.close();
        java.text.DecimalFormat decimalFormat37 = null;
        jSONWriter34.writeFloat((float) 10, decimalFormat37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean45 = jSONWriter40.writeTypeName(byteArray43, (long) 10);
        boolean boolean47 = jSONWriter34.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter32.writeNameRaw(byteArray43, 0L);
        jSONWriter16.writeBinary(byteArray43);
        jSONWriter1.writeNameRaw(byteArray43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        jSONWriter53.close();
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter53.writeFloat((float) 10, decimalFormat56);
        com.alibaba.fastjson2.SymbolTable symbolTable58 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        boolean boolean63 = jSONWriter61.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class64 = null;
        boolean boolean66 = jSONWriter59.isWriteTypeInfo((java.lang.Object) jSONWriter61, class64, (long) ' ');
        boolean boolean68 = jSONWriter59.isEnabled((long) ' ');
        jSONWriter59.writeString("hi!");
        boolean boolean71 = jSONWriter59.isUTF8();
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        jSONWriter59.writeString((java.util.List<java.lang.String>) strList75);
        jSONWriter59.writeRaw((byte) -1);
        java.math.BigInteger bigInteger80 = null;
        jSONWriter59.writeBigInt(bigInteger80, (long) '#');
        byte[] byteArray83 = jSONWriter59.getBytes();
        jSONWriter53.writeHex(byteArray83);
        boolean boolean86 = jSONWriter1.writeTypeName(byteArray83, (long) 6);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[76, 104, 105, 33, -106, 76, 104, 105, 33, 73, -1, -81]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalDate localDate2 = null;
        jSONWriter1.writeLocalDate(localDate2);
        boolean boolean4 = jSONWriter1.utf8;
        java.util.UUID uUID5 = null;
        jSONWriter1.writeUUID(uUID5);
        com.alibaba.fastjson2.SymbolTable symbolTable7 = jSONWriter1.getSymbolTable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(symbolTable7);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter27 = null;
        context26.setContextNameFilter(contextNameFilter27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal34 = null;
        jSONWriter31.writeDecimal(bigDecimal34);
        long long37 = jSONWriter31.getFeatures((long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        jSONWriter39.close();
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter39.writeFloat((float) 10, decimalFormat42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean50 = jSONWriter45.writeTypeName(byteArray48, (long) 10);
        boolean boolean52 = jSONWriter39.writeTypeName(byteArray48, (long) (byte) 100);
        jSONWriter39.writeInt16((short) (byte) 100);
        boolean boolean55 = jSONWriter39.hasFilter();
        java.nio.charset.Charset charset56 = jSONWriter39.getCharset();
        boolean boolean58 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter39, (long) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable59 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class65 = null;
        boolean boolean67 = jSONWriter60.isWriteTypeInfo((java.lang.Object) jSONWriter62, class65, (long) ' ');
        boolean boolean69 = jSONWriter60.isEnabled((long) ' ');
        jSONWriter60.writeString("hi!");
        boolean boolean72 = jSONWriter60.isUTF8();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        jSONWriter60.writeString((java.util.List<java.lang.String>) strList76);
        jSONWriter39.write((java.util.List) strList76);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter39);
        jSONWriter29.popPath((java.lang.Object) jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(jSONWriter80);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context15.provider;
        boolean boolean29 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter30 = context15.getNameFilter();
        boolean boolean31 = context15.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(nameFilter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue;
        boolean boolean21 = jSONWriter1.isEnabled(feature20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean23 = jSONWriter22.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean30 = jSONWriter25.writeTypeName(byteArray28, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        long long34 = jSONWriter32.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        long long46 = jSONWriter37.getFeatures();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean49 = jSONWriter32.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass47, (long) (short) 10);
        int[] intArray56 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter32.writeInt32(intArray56);
        jSONWriter25.writeInt32(intArray56);
        jSONWriter22.writeInt32(intArray56);
        jSONWriter22.writeInt8((byte) 10);
        boolean boolean62 = jSONWriter1.removeReference((java.lang.Object) jSONWriter22);
        java.time.ZonedDateTime zonedDateTime63 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean66 = jSONWriter65.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat72 = null;
        jSONWriter68.writeDouble(1.0d, decimalFormat72);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean80 = jSONWriter75.writeTypeName(byteArray78, (long) 10);
        jSONWriter68.writeStringLatin1(byteArray78);
        jSONWriter65.writeBase64(byteArray78);
        jSONWriter1.writeStringLatin1(byteArray78);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        java.math.BigDecimal bigDecimal1 = null;
        java.text.DecimalFormat decimalFormat3 = null;
        jSONWriter0.writeDecimal(bigDecimal1, (-1L), decimalFormat3);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter.Path path6 = null;
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path6, "");
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path8, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path8, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path12, 3);
        java.lang.String str15 = jSONWriter0.setPath(fieldWriter5, (java.lang.Object) path14);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        boolean[] booleanArray20 = new boolean[] { false, true, true, true };
        jSONWriter15.writeBool(booleanArray20);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        jSONWriter15.writeBinary(byteArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter15);
        jSONWriter3.setRootObject((java.lang.Object) jSONWriter36);
        long long39 = jSONWriter3.getFeatures((long) (short) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        jSONWriter4.writeSymbol((-1));
        java.lang.String str9 = jSONWriter1.setPath("", (java.lang.Object) jSONWriter4);
        boolean boolean10 = jSONWriter4.hasFilter();
        jSONWriter4.writeFloat((java.lang.Float) 100.0f);
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter16.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter29 = context28.getPropertyFilter();
        long long30 = context28.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter31 = null;
        context28.setLabelFilter(labelFilter31);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context28, symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter34.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter36 = null;
        context35.setPropertyFilter(propertyFilter36);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context35.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider40 = context35.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        java.util.UUID uUID54 = null;
        jSONWriter44.writeUUID(uUID54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = jSONWriter44.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter57 = context56.getPropertyFilter();
        long long58 = context56.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter59 = null;
        context56.setLabelFilter(labelFilter59);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider61 = context56.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter62 = null;
        context56.setPropertyPreFilter(propertyPreFilter62);
        com.alibaba.fastjson2.filter.NameFilter nameFilter64 = null;
        context56.setNameFilter(nameFilter64);
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean67 = context56.isEnabled(feature66);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider68 = context56.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable69 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable69);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        boolean boolean74 = jSONWriter72.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class75 = null;
        boolean boolean77 = jSONWriter70.isWriteTypeInfo((java.lang.Object) jSONWriter72, class75, (long) ' ');
        byte[] byteArray79 = new byte[] { (byte) -1 };
        boolean boolean81 = jSONWriter72.writeTypeName(byteArray79, 0L);
        java.util.UUID uUID82 = null;
        jSONWriter72.writeUUID(uUID82);
        com.alibaba.fastjson2.JSONWriter.Context context84 = jSONWriter72.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context84);
        java.time.format.DateTimeFormatter dateTimeFormatter86 = context84.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider87 = context84.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray88 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter89 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray88);
        com.alibaba.fastjson2.JSONWriter.Context context90 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray88);
        com.alibaba.fastjson2.JSONWriter jSONWriter91 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray88);
        com.alibaba.fastjson2.JSONWriter jSONWriter92 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider87, featureArray88);
        com.alibaba.fastjson2.JSONWriter.Context context93 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider68, featureArray88);
        com.alibaba.fastjson2.JSONWriter jSONWriter94 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray88);
        com.alibaba.fastjson2.JSONWriter jSONWriter95 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider40, featureArray88);
        jSONWriter4.config(featureArray88);
        boolean boolean97 = jSONWriter4.useSingleQuote;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNull(propertyFilter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNotNull(objectWriterProvider40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(context56);
        org.junit.Assert.assertNull(propertyFilter57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider61);
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider68);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(context84);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNull(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(objectWriterProvider87);
        org.junit.Assert.assertNotNull(featureArray88);
        org.junit.Assert.assertNotNull(jSONWriter89);
        org.junit.Assert.assertNotNull(jSONWriter91);
        org.junit.Assert.assertNotNull(jSONWriter92);
        org.junit.Assert.assertNotNull(jSONWriter94);
        org.junit.Assert.assertNotNull(jSONWriter95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28);
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter31 = context30.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNull(contextNameFilter31);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray35 = null;
        jSONWriter34.writeDouble(doubleArray35);
        boolean boolean37 = jSONWriter34.utf16;
        java.math.BigDecimal bigDecimal38 = null;
        jSONWriter34.writeDecimal(bigDecimal38, 100L);
        boolean boolean41 = jSONWriter34.utf16;
        boolean boolean43 = jSONWriter34.isEnabled((long) '4');
        boolean boolean44 = jSONWriter34.isUTF16();
        boolean boolean45 = jSONWriter12.removeReference((java.lang.Object) boolean44);
        java.time.LocalTime localTime46 = null;
        jSONWriter12.writeLocalTime(localTime46);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.filter.NameFilter nameFilter22 = null;
        context15.setNameFilter(nameFilter22);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter24 = context15.getContextValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(contextValueFilter24);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context15.setPropertyFilter(propertyFilter23);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter25 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context15.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter27.context;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertNull(propertyFilter25);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(context28);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        java.lang.String str14 = jSONWriter1.setPath("hi!", (java.lang.Object) feature13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter16.writeDouble(1.0d, decimalFormat20);
        boolean boolean23 = jSONWriter16.removeReference((java.lang.Object) (short) -1);
        jSONWriter16.writeArrayNull();
        jSONWriter16.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray28 = null;
        jSONWriter27.writeDouble(doubleArray28);
        jSONWriter27.writeArrayNull();
        short[] shortArray34 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter27.writeInt16(shortArray34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal40 = null;
        jSONWriter37.writeDecimal(bigDecimal40);
        boolean boolean43 = jSONWriter37.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter37.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        char[] charArray52 = new char[] { '#', ' ' };
        jSONWriter49.writeString(charArray52, (int) (byte) 0, (int) (short) 1);
        jSONWriter37.writeString(charArray52);
        jSONWriter27.writeString(charArray52);
        jSONWriter16.writeString(charArray52);
        com.alibaba.fastjson2.SymbolTable symbolTable59 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class65 = null;
        boolean boolean67 = jSONWriter60.isWriteTypeInfo((java.lang.Object) jSONWriter62, class65, (long) ' ');
        byte[] byteArray69 = new byte[] { (byte) -1 };
        boolean boolean71 = jSONWriter62.writeTypeName(byteArray69, 0L);
        jSONWriter62.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean80 = jSONWriter75.writeTypeName(byteArray78, (long) 10);
        jSONWriter62.writeNameRaw(byteArray78);
        jSONWriter16.writeStringLatin1(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(byteArray78, (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[#,  ]");
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter18 = context15.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(nameFilter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter6.writeDouble(1.0d, decimalFormat10);
        boolean boolean13 = jSONWriter6.removeReference((java.lang.Object) (short) -1);
        jSONWriter6.writeArrayNull();
        long long15 = jSONWriter6.getFeatures();
        java.lang.Class<?> wildcardClass16 = jSONWriter6.getClass();
        boolean boolean18 = jSONWriter1.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass16, (long) (short) 10);
        int[] intArray25 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter1.writeInt32(intArray25);
        jSONWriter1.writeRaw((byte) 0);
        jSONWriter1.endArray();
        boolean boolean31 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeFloat((java.lang.Float) 10.0f);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        boolean boolean28 = context26.isEnabled(feature27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        boolean boolean30 = jSONWriter29.jsonb;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.util.Map map15 = null;
        jSONWriter3.write(map15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        java.time.LocalTime localTime19 = null;
        jSONWriter18.writeLocalTime(localTime19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        jSONWriter18.writeBinary(byteArray31);
        jSONWriter3.writeBinary(byteArray31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray40 = null;
        jSONWriter37.writeHex(byteArray40);
        boolean boolean42 = jSONWriter37.isRefDetect();
        jSONWriter37.writeNumberNull();
        jSONWriter37.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean47 = jSONWriter37.isEnabled(feature46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter49);
        long long51 = jSONWriter49.getFeatures();
        java.time.LocalDateTime localDateTime52 = null;
        jSONWriter49.writeLocalDateTime(localDateTime52);
        byte[] byteArray54 = jSONWriter49.getBytes();
        jSONWriter37.writeStringLatin1(byteArray54);
        jSONWriter3.writeBinary(byteArray54);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter3.writeFloat((float) (byte) 0, decimalFormat58);
        java.text.DecimalFormat decimalFormat61 = null;
        jSONWriter3.writeFloat((float) (byte) 1, decimalFormat61);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-81]");
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        jSONWriter4.writeSymbol((-1));
        java.lang.String str9 = jSONWriter1.setPath("", (java.lang.Object) jSONWriter4);
        jSONWriter4.close();
        boolean boolean12 = jSONWriter4.hasFilter((long) 3);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        boolean boolean15 = jSONWriter3.hasFilter((long) 100);
        java.util.Map map16 = null;
        jSONWriter3.write(map16);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        jSONWriter1.writeInt8((byte) 10);
        java.math.BigInteger bigInteger7 = null;
        jSONWriter1.writeBigInt(bigInteger7, 100L);
        boolean boolean10 = jSONWriter1.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        jSONWriter29.writeInt8((byte) 1);
        jSONWriter29.endArray();
        jSONWriter29.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context64.config(feature65, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) feature70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70 };
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        context64.config(featureArray72);
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray72);
        jSONWriter29.config(featureArray72);
        boolean boolean78 = jSONWriter25.isIgnoreNoneSerializable((java.lang.Object) featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        java.math.BigDecimal bigDecimal80 = null;
        java.text.DecimalFormat decimalFormat82 = null;
        jSONWriter79.writeDecimal(bigDecimal80, 1L, decimalFormat82);
        jSONWriter79.writeSymbol("[1]");
        jSONWriter79.endObject();
        com.alibaba.fastjson2.JSONWriter jSONWriter87 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter79);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(jSONWriter87);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.util.UUID uUID6 = null;
        jSONWriter1.writeUUID(uUID6);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDoubleArray((double) (byte) 0, (double) 6);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        jSONWriter40.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = context61.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context61.getProvider();
        java.lang.String str65 = context61.getDateFormat();
        boolean boolean66 = jSONWriter40.removeReference((java.lang.Object) context61);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = context61.getLabelFilter();
        java.time.ZoneId zoneId68 = context61.getZoneId();
        context38.setZoneId(zoneId68);
        context21.setZoneId(zoneId68);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context21);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter72 = null;
        context21.setPropertyFilter(propertyFilter72);
        java.lang.String str74 = context21.getDateFormat();
        boolean boolean75 = context21.isDateFormatMillis();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter76 = null;
        context21.setLabelFilter(labelFilter76);
        boolean boolean78 = context21.isDateFormatHasDay();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(labelFilter67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        java.util.UUID uUID23 = null;
        jSONWriter13.writeUUID(uUID23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter13.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter26 = context25.getPropertyFilter();
        long long27 = context25.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter28 = null;
        context25.setLabelFilter(labelFilter28);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter30 = context25.getContextValueFilter();
        boolean boolean31 = context25.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter32 = context25.getAfterFilter();
        java.lang.String str33 = jSONWriter1.setPath(13, (java.lang.Object) afterFilter32);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertNull(propertyFilter26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNull(contextValueFilter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(afterFilter32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        long long24 = context22.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context22.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context22.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter28 = null;
        context22.setPropertyPreFilter(propertyPreFilter28);
        com.alibaba.fastjson2.filter.NameFilter nameFilter30 = null;
        context22.setNameFilter(nameFilter30);
        java.time.format.DateTimeFormatter dateTimeFormatter32 = context22.getDateFormatter();
        jSONWriter6.setRootObject((java.lang.Object) context22);
        java.time.Instant instant34 = null;
        jSONWriter6.writeInstant(instant34);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNull(dateTimeFormatter32);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean13 = jSONWriter8.writeTypeName(byteArray11, (long) 10);
        jSONWriter1.writeStringLatin1(byteArray11);
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        int int17 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter.Path path18 = null;
        com.alibaba.fastjson2.JSONWriter.Path path20 = new com.alibaba.fastjson2.JSONWriter.Path(path18, "");
        com.alibaba.fastjson2.JSONWriter.Path path22 = new com.alibaba.fastjson2.JSONWriter.Path(path20, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path24 = new com.alibaba.fastjson2.JSONWriter.Path(path22, "hi!");
        java.lang.String str25 = path22.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter42 = context41.getPropertyFilter();
        long long43 = context41.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter44 = null;
        context41.setLabelFilter(labelFilter44);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider46 = context41.provider;
        boolean boolean47 = path22.equals((java.lang.Object) context41);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter48 = context41.getValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter65 = context64.getPropertyFilter();
        long long66 = context64.getFeatures();
        long long67 = context64.getFeatures();
        boolean boolean68 = context64.isDateFormatHasHour();
        java.time.ZoneId zoneId69 = context64.getZoneId();
        java.time.ZoneId zoneId70 = context64.getZoneId();
        context41.setZoneId(zoneId70);
        jSONWriter1.startArray((java.lang.Object) context41, 3);
        java.lang.String str74 = context41.getDateFormat();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1]" + "'", str25, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNull(propertyFilter42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(valueFilter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertNull(propertyFilter65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(zoneId69);
        org.junit.Assert.assertNotNull(zoneId70);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray20);
        context15.config(featureArray20);
        boolean boolean25 = context15.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter24.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter37 = context36.getPropertyFilter();
        long long38 = context36.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter39 = null;
        context36.setLabelFilter(labelFilter39);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider41 = context36.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter42 = null;
        context36.setPropertyPreFilter(propertyPreFilter42);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter44 = null;
        context36.setPropertyPreFilter(propertyPreFilter44);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter46 = null;
        context36.setLabelFilter(labelFilter46);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider48 = context36.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter50);
        long long52 = jSONWriter50.getFeatures();
        java.time.LocalDateTime localDateTime53 = null;
        jSONWriter50.writeLocalDateTime(localDateTime53);
        byte[] byteArray55 = jSONWriter50.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context58 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context59 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray56);
        jSONWriter50.config(featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.of(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider48, featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray56);
        boolean boolean64 = jSONWriter63.useSingleQuote;
        com.alibaba.fastjson2.JSONObject jSONObject65 = null;
        jSONWriter63.write(jSONObject65);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertNull(propertyFilter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider41);
        org.junit.Assert.assertNotNull(objectWriterProvider48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-81]");
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal16 = null;
        jSONWriter13.writeDecimal(bigDecimal16);
        boolean boolean19 = jSONWriter13.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter21.writeDouble(1.0d, decimalFormat25);
        boolean boolean28 = jSONWriter21.removeReference((java.lang.Object) (short) -1);
        jSONWriter21.writeArrayNull();
        boolean boolean30 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter21);
        boolean boolean31 = jSONWriter21.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        jSONWriter34.writeTypeName("");
        boolean boolean37 = jSONWriter34.isUseSingleQuotes();
        jSONWriter34.startObject();
        boolean boolean39 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter34);
        boolean boolean40 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter21);
        jSONWriter1.writeMillis((long) 13);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj12 = null;
        jSONWriter1.startArray(obj12, (-1));
        jSONWriter1.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context34);
        java.time.format.DateTimeFormatter dateTimeFormatter36 = context34.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider37 = context34.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) feature40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature40 };
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider37, featureArray42);
        jSONWriter44.writeRaw(' ');
        jSONWriter44.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        byte[] byteArray62 = null;
        jSONWriter52.writeBinary(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter52.writeHex(byteArray70);
        jSONWriter44.writeBinary(byteArray70);
        jSONWriter1.writeHex(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDateTimeISO8601((int) (short) -1, (int) 'a', (int) (short) 10, (int) (short) 0, (int) (short) 10, 0, (int) ' ', (int) (short) -1, false);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(objectWriterProvider37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 100, 1, -1, 1, -1]");
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean26 = jSONWriter25.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        boolean boolean27 = jSONWriter26.isRefDetect();
        java.lang.String str30 = jSONWriter26.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        long long34 = jSONWriter32.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        long long46 = jSONWriter37.getFeatures();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean49 = jSONWriter32.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass47, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter50 = jSONWriter26.getObjectWriter((java.lang.Class) wildcardClass47);
        boolean boolean51 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context23, (java.lang.reflect.Type) wildcardClass47);
        boolean boolean52 = jSONWriter1.isUTF16();
        java.util.UUID uUID53 = null;
        jSONWriter1.writeUUID(uUID53);
        jSONWriter1.writeDateYYYMMDD8(0, (int) (short) 10, (int) (short) 100);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objectWriter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        int int28 = jSONWriter1.level();
        jSONWriter1.writeStringNull();
        jSONWriter1.writeInt8((byte) 100);
        java.math.BigDecimal bigDecimal32 = null;
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter1.writeDecimal(bigDecimal32, (long) (short) 10, decimalFormat34);
        java.time.LocalDateTime localDateTime36 = null;
        jSONWriter1.writeLocalDateTime(localDateTime36);
        boolean boolean38 = jSONWriter1.useSingleQuote;
        jSONWriter1.writeBooleanNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray19);
        java.math.BigInteger bigInteger24 = null;
        jSONWriter23.writeBigInt(bigInteger24, (long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        java.time.LocalTime localTime29 = null;
        jSONWriter28.writeLocalTime(localTime29);
        java.time.LocalDateTime localDateTime31 = null;
        jSONWriter28.writeLocalDateTime(localDateTime31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        boolean boolean36 = jSONWriter34.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter38.writeDouble(1.0d, decimalFormat42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean50 = jSONWriter45.writeTypeName(byteArray48, (long) 10);
        jSONWriter38.writeStringLatin1(byteArray48);
        jSONWriter34.writeStringLatin1(byteArray48);
        jSONWriter28.writeBinary(byteArray48);
        jSONWriter23.writeBinary(byteArray48);
        long long56 = jSONWriter23.getFeatures((long) (short) 0);
        jSONWriter23.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        jSONWriter24.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context53.config(feature54, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) feature59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature59 };
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray61);
        context53.config(featureArray61);
        jSONWriter24.config(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context66 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context71 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context72 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.of(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.of(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.of(featureArray68);
        jSONWriter75.writeDateYYYMMDD10(0, (int) (short) 0, 100);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter75);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter20 = null;
        context19.setAfterFilter(afterFilter20);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter22 = context19.getBeforeFilter();
        long long23 = context19.getFeatures();
        long long24 = context19.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(beforeFilter22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context26.setLabelFilter(labelFilter29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context26.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        jSONWriter32.config(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray37);
        boolean boolean42 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter41);
        jSONWriter41.writeRaw('#');
        jSONWriter41.writeFloat((java.lang.Float) 100.0f);
        java.time.LocalDate localDate47 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter41.writeLocalDate(localDate47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean9 = jSONWriter3.isBeanToArray();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter12.writeDecimal(bigDecimal15);
        boolean boolean18 = jSONWriter12.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter12.writeArrayNull();
        jSONWriter12.writeChar('a');
        jSONWriter12.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter12.getContext();
        boolean boolean31 = context29.isEnabled((long) (short) 100);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter32 = null;
        context29.setAfterFilter(afterFilter32);
        java.lang.String str34 = jSONWriter3.setPath(fieldWriter10, (java.lang.Object) afterFilter32);
        java.math.BigInteger bigInteger35 = null;
        jSONWriter3.writeBigInt(bigInteger35, 0L);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        boolean boolean39 = jSONWriter3.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        java.util.Map map23 = null;
        jSONWriter0.write(map23);
        jSONWriter0.writeRaw((byte) 100);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter0.context;
        com.alibaba.fastjson2.filter.NameFilter nameFilter28 = context27.getNameFilter();
        context27.setDateFormat("");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(nameFilter28);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        jSONWriter1.writeInt8((byte) 0);
        java.util.Map map10 = null;
        jSONWriter1.write(map10);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        jSONWriter0.writeReference("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        boolean boolean13 = jSONWriter11.utf16;
        jSONWriter11.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter16);
        long long18 = jSONWriter16.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter21.writeDouble(1.0d, decimalFormat25);
        boolean boolean28 = jSONWriter21.removeReference((java.lang.Object) (short) -1);
        jSONWriter21.writeArrayNull();
        long long30 = jSONWriter21.getFeatures();
        java.lang.Class<?> wildcardClass31 = jSONWriter21.getClass();
        boolean boolean33 = jSONWriter16.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass31, (long) (short) 10);
        int[] intArray40 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter16.writeInt32(intArray40);
        jSONWriter11.writeInt32(intArray40);
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        boolean[] booleanArray49 = new boolean[] { false, true, true, true };
        jSONWriter44.writeBool(booleanArray49);
        com.alibaba.fastjson2.SymbolTable symbolTable51 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class57 = null;
        boolean boolean59 = jSONWriter52.isWriteTypeInfo((java.lang.Object) jSONWriter54, class57, (long) ' ');
        byte[] byteArray61 = new byte[] { (byte) -1 };
        boolean boolean63 = jSONWriter54.writeTypeName(byteArray61, 0L);
        jSONWriter44.writeBinary(byteArray61);
        byte[] byteArray65 = jSONWriter44.getBytes();
        jSONWriter11.writeRaw(byteArray65);
        jSONWriter9.writeRaw(byteArray65);
        com.alibaba.fastjson2.SymbolTable symbolTable69 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable69);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        boolean boolean74 = jSONWriter72.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class75 = null;
        boolean boolean77 = jSONWriter70.isWriteTypeInfo((java.lang.Object) jSONWriter72, class75, (long) ' ');
        byte[] byteArray79 = new byte[] { (byte) -1 };
        boolean boolean81 = jSONWriter72.writeTypeName(byteArray79, 0L);
        java.util.UUID uUID82 = null;
        jSONWriter72.writeUUID(uUID82);
        com.alibaba.fastjson2.JSONWriter.Context context84 = jSONWriter72.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter85 = context84.getPropertyFilter();
        long long86 = context84.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter87 = null;
        context84.setLabelFilter(labelFilter87);
        com.alibaba.fastjson2.SymbolTable symbolTable89 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter90 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context84, symbolTable89);
        boolean boolean92 = context84.isEnabled((long) 10);
        java.lang.String str93 = jSONWriter9.setPath(3, (java.lang.Object) 10);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-104, -80, -79, -79, -79, -111, 1, -1]");
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(context84);
        org.junit.Assert.assertNull(propertyFilter85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        jSONWriter1.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = jSONWriter1.symbolTable;
        double[] doubleArray18 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter1.writeDouble(doubleArray18);
        boolean boolean20 = jSONWriter1.isUTF16();
        java.io.OutputStream outputStream21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context38);
        java.time.format.DateTimeFormatter dateTimeFormatter40 = context38.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider41 = context38.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider41, featureArray42);
        java.math.BigInteger bigInteger47 = null;
        jSONWriter46.writeBigInt(bigInteger47, (long) 1);
        java.nio.charset.Charset charset50 = jSONWriter46.getCharset();
        byte[] byteArray51 = jSONWriter22.getBytes(charset50);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = jSONWriter1.flushTo(outputStream21, charset50);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(objectWriterProvider41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.lang.reflect.Type type3 = null;
        boolean boolean5 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (byte) 1, type3, (long) '#');
        jSONWriter1.writeMillis((long) 7);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.isUTF8();
        jSONWriter1.writeInt8((byte) 100);
        jSONWriter1.endObject();
        java.lang.Class<?> wildcardClass10 = jSONWriter1.getClass();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        boolean boolean7 = context6.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        jSONWriter6.writeName((int) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = context34.getPropertyFilter();
        long long36 = context34.getFeatures();
        long long37 = context34.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter38 = context34.getContextNameFilter();
        long long39 = context34.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        byte[] byteArray50 = new byte[] { (byte) -1 };
        boolean boolean52 = jSONWriter43.writeTypeName(byteArray50, 0L);
        java.util.UUID uUID53 = null;
        jSONWriter43.writeUUID(uUID53);
        com.alibaba.fastjson2.JSONWriter.Context context55 = jSONWriter43.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context55.config(feature56, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) feature61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature61 };
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray63);
        context55.config(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Context context67 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        context67.config(feature68, false);
        boolean boolean71 = context34.isEnabled(feature68);
        jSONWriter6.setRootObject((java.lang.Object) context34);
        jSONWriter6.writeDateTimeISO8601(10, (int) (byte) 100, 13, (int) (short) 1, (int) (byte) -1, (int) (short) 1, 10, 1, false);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNull(propertyFilter35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNull(contextNameFilter38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(context55);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        jSONWriter16.endArray();
        java.time.Instant instant20 = null;
        jSONWriter16.writeInstant(instant20);
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter16.writeDecimal(bigDecimal22);
        jSONWriter16.close();
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter16.context;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertNotNull(jSONWriter26);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeMillis((long) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal23 = null;
        jSONWriter20.writeDecimal(bigDecimal23);
        java.lang.Object obj25 = null;
        java.lang.Class class26 = null;
        jSONWriter20.checkAndWriteTypeName(obj25, class26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean29 = jSONWriter20.isEnabled(feature28);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        boolean boolean40 = jSONWriter31.isEnabled((long) ' ');
        jSONWriter31.writeString("hi!");
        char[] charArray43 = new char[] {};
        jSONWriter31.writeString(charArray43);
        jSONWriter20.writeString(charArray43);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter18.writeNameRaw(charArray43);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[]");
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateTime14((int) (short) 10, (int) (byte) -1, 0, (int) (byte) 100, (int) (short) -1, 5);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter1.writeBigInt(bigInteger14);
        boolean boolean16 = jSONWriter1.utf16;
        java.math.BigInteger bigInteger17 = null;
        jSONWriter1.writeBigInt(bigInteger17, (long) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter21.writeDecimal(bigDecimal24);
        java.lang.Object obj26 = null;
        java.lang.Class class27 = null;
        jSONWriter21.checkAndWriteTypeName(obj26, class27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean30 = jSONWriter21.isEnabled(feature29);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = jSONWriter21.symbolTable;
        jSONWriter21.writeInt16((short) (byte) 1);
        jSONWriter21.writeMillis((long) 5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        jSONWriter37.close();
        jSONWriter37.writeSymbol("");
        jSONWriter37.writeBooleanNull();
        jSONWriter37.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class49 = null;
        boolean boolean51 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter46, class49, (long) ' ');
        byte[] byteArray53 = new byte[] { (byte) -1 };
        boolean boolean55 = jSONWriter46.writeTypeName(byteArray53, 0L);
        java.util.UUID uUID56 = null;
        jSONWriter46.writeUUID(uUID56);
        com.alibaba.fastjson2.JSONWriter.Context context58 = jSONWriter46.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context58);
        java.time.format.DateTimeFormatter dateTimeFormatter60 = context58.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider61 = context58.getProvider();
        java.lang.String str62 = context58.getDateFormat();
        boolean boolean63 = jSONWriter37.removeReference((java.lang.Object) context58);
        short[] shortArray70 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter37.writeInt16(shortArray70);
        jSONWriter21.writeInt16(shortArray70);
        jSONWriter1.writeInt16(shortArray70);
        java.math.BigInteger bigInteger74 = null;
        jSONWriter1.writeBigInt(bigInteger74);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(symbolTable31);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(context58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(objectWriterProvider61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[1, 100, 10, 10, 0, 1]");
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeMillis((long) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        jSONWriter18.writeString("hi!");
        int int21 = jSONWriter18.level();
        boolean boolean23 = jSONWriter18.hasFilter(137439019008L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) feature4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature4 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        jSONWriter1.config(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context12 = new com.alibaba.fastjson2.JSONWriter.Context("[1][0]", featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        boolean boolean18 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter19 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter20 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter21 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter22 = null;
        context15.setPropertyFilter(propertyFilter22);
        boolean boolean25 = context15.isEnabled(97L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(afterFilter19);
        org.junit.Assert.assertNull(afterFilter20);
        org.junit.Assert.assertNull(nameFilter21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter19 = null;
        context15.setNameFilter(nameFilter19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter23 = context15.getValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertNull(valueFilter23);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        jSONWriter1.writeName("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        boolean boolean13 = jSONWriter11.utf16;
        jSONWriter11.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter16);
        long long18 = jSONWriter16.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter21.writeDouble(1.0d, decimalFormat25);
        boolean boolean28 = jSONWriter21.removeReference((java.lang.Object) (short) -1);
        jSONWriter21.writeArrayNull();
        long long30 = jSONWriter21.getFeatures();
        java.lang.Class<?> wildcardClass31 = jSONWriter21.getClass();
        boolean boolean33 = jSONWriter16.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass31, (long) (short) 10);
        int[] intArray40 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter16.writeInt32(intArray40);
        jSONWriter11.writeInt32(intArray40);
        jSONWriter1.writeInt32(intArray40);
        jSONWriter1.startObject();
        boolean boolean45 = jSONWriter1.utf8;
        jSONWriter1.writeString("");
        jSONWriter1.endArray();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.SymbolTable symbolTable2 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable2);
        boolean[] booleanArray8 = new boolean[] { false, true, true, true };
        jSONWriter3.writeBool(booleanArray8);
        jSONWriter1.writeBool(booleanArray8);
        jSONWriter1.writeFloat((-1.0f));
        java.math.BigDecimal bigDecimal13 = null;
        jSONWriter1.writeDecimal(bigDecimal13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter1.context;
        java.io.OutputStream outputStream16 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        jSONWriter18.writeSymbol("");
        jSONWriter18.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        java.util.UUID uUID37 = null;
        jSONWriter27.writeUUID(uUID37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = jSONWriter27.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter40 = context39.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider41 = context39.getProvider();
        java.lang.String str42 = jSONWriter18.setPath("$", (java.lang.Object) context39);
        java.nio.charset.Charset charset43 = jSONWriter18.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = jSONWriter1.flushTo(outputStream16, charset43);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(context39);
        org.junit.Assert.assertNull(propertyFilter40);
        org.junit.Assert.assertNotNull(objectWriterProvider41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(charset43);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray28);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context32.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider33);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter36 = context35.getValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertNull(valueFilter36);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        boolean boolean9 = jSONWriter1.isIgnoreNoneSerializable();
        jSONWriter1.writeSymbol(4);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.startObject();
        jSONWriter1.writeSymbol("[1]");
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal13 = null;
        jSONWriter10.writeDecimal(bigDecimal13);
        boolean boolean16 = jSONWriter10.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        int[] intArray20 = new int[] { (short) 0, (byte) 0, (byte) 1 };
        jSONWriter10.writeInt32(intArray20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.context;
        boolean boolean23 = context22.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.lang.String str25 = jSONWriter1.setPath(fieldWriter8, (java.lang.Object) context22);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        context15.setDateFormat("[1][0]");
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter31 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        byte[] byteArray42 = new byte[] { (byte) -1 };
        boolean boolean44 = jSONWriter35.writeTypeName(byteArray42, 0L);
        java.util.UUID uUID45 = null;
        jSONWriter35.writeUUID(uUID45);
        com.alibaba.fastjson2.JSONWriter.Context context47 = jSONWriter35.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        jSONWriter49.close();
        jSONWriter49.writeSymbol("");
        jSONWriter49.writeBooleanNull();
        jSONWriter49.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable55 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class61 = null;
        boolean boolean63 = jSONWriter56.isWriteTypeInfo((java.lang.Object) jSONWriter58, class61, (long) ' ');
        byte[] byteArray65 = new byte[] { (byte) -1 };
        boolean boolean67 = jSONWriter58.writeTypeName(byteArray65, 0L);
        java.util.UUID uUID68 = null;
        jSONWriter58.writeUUID(uUID68);
        com.alibaba.fastjson2.JSONWriter.Context context70 = jSONWriter58.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context70);
        java.time.format.DateTimeFormatter dateTimeFormatter72 = context70.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider73 = context70.getProvider();
        java.lang.String str74 = context70.getDateFormat();
        boolean boolean75 = jSONWriter49.removeReference((java.lang.Object) context70);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter76 = context70.getLabelFilter();
        java.time.ZoneId zoneId77 = context70.getZoneId();
        context47.setZoneId(zoneId77);
        context15.setZoneId(zoneId77);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter80 = null;
        context15.setBeforeFilter(beforeFilter80);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNull(afterFilter30);
        org.junit.Assert.assertNull(contextValueFilter31);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(context47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(context70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(objectWriterProvider73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(labelFilter76);
        org.junit.Assert.assertNotNull(zoneId77);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        jSONWriter1.writeReference("$");
        jSONWriter1.writeBooleanNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean10 = jSONWriter1.isEnabled(feature9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        boolean boolean21 = jSONWriter12.isEnabled((long) ' ');
        jSONWriter12.writeString("hi!");
        char[] charArray24 = new char[] {};
        jSONWriter12.writeString(charArray24);
        jSONWriter1.writeString(charArray24);
        jSONWriter1.writeDateTime14((int) (byte) -1, (int) (byte) 0, 6, 12, (int) (byte) 10, 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.math.BigDecimal bigDecimal16 = null;
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter3.writeDecimal(bigDecimal16, (long) (byte) -1, decimalFormat18);
        java.math.BigDecimal bigDecimal20 = null;
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter3.writeDecimal(bigDecimal20, (long) (-1), decimalFormat22);
        com.alibaba.fastjson2.JSONWriter.Path path24 = null;
        com.alibaba.fastjson2.JSONWriter.Path path26 = new com.alibaba.fastjson2.JSONWriter.Path(path24, "");
        com.alibaba.fastjson2.JSONWriter.Path path28 = new com.alibaba.fastjson2.JSONWriter.Path(path26, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path28, "hi!");
        java.lang.String str31 = path30.toString();
        com.alibaba.fastjson2.JSONWriter.Path path33 = new com.alibaba.fastjson2.JSONWriter.Path(path30, (int) '#');
        java.lang.Object obj34 = null;
        boolean boolean35 = path33.equals(obj34);
        jSONWriter3.writeAny(obj34);
        boolean boolean37 = jSONWriter3.isUseSingleQuotes();
        jSONWriter3.writeFloat((float) 'a');
        double[] doubleArray43 = new double[] { 6L, (-1.0d), (byte) 10 };
        jSONWriter3.writeDouble(doubleArray43);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1].hi\\!" + "'", str31, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[6.0, -1.0, 10.0]");
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        boolean boolean19 = jSONWriter16.isBeanToArray();
        boolean boolean20 = jSONWriter16.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter24.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter37 = context36.getPropertyFilter();
        long long38 = context36.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter39 = null;
        context36.setLabelFilter(labelFilter39);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider41 = context36.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter42 = null;
        context36.setPropertyPreFilter(propertyPreFilter42);
        com.alibaba.fastjson2.filter.NameFilter nameFilter44 = null;
        context36.setNameFilter(nameFilter44);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean47 = context36.isEnabled(feature46);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider48 = context36.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context64);
        java.time.format.DateTimeFormatter dateTimeFormatter66 = context64.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider67 = context64.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context70 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider67, featureArray68);
        com.alibaba.fastjson2.JSONWriter.Context context73 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider48, featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.of(featureArray68);
        jSONWriter16.config(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertNull(propertyFilter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider41);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(objectWriterProvider67);
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(jSONWriter74);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        boolean boolean14 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter4);
        java.math.BigInteger bigInteger15 = null;
        jSONWriter4.writeBigInt(bigInteger15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter4.writeRaw(byteArray27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        boolean boolean36 = jSONWriter34.utf16;
        java.nio.charset.Charset charset37 = jSONWriter34.getCharset();
        com.alibaba.fastjson2.SymbolTable symbolTable38 = jSONWriter34.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable39 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class45 = null;
        boolean boolean47 = jSONWriter40.isWriteTypeInfo((java.lang.Object) jSONWriter42, class45, (long) ' ');
        char[] charArray48 = new char[] {};
        jSONWriter42.writeString(charArray48);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue;
        boolean boolean51 = jSONWriter42.isEnabled(feature50);
        jSONWriter34.writeEnum((java.lang.Enum) feature50);
        com.alibaba.fastjson2.SymbolTable symbolTable53 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable53);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        boolean boolean58 = jSONWriter56.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class59 = null;
        boolean boolean61 = jSONWriter54.isWriteTypeInfo((java.lang.Object) jSONWriter56, class59, (long) ' ');
        byte[] byteArray63 = new byte[] { (byte) -1 };
        boolean boolean65 = jSONWriter56.writeTypeName(byteArray63, 0L);
        java.util.UUID uUID66 = null;
        jSONWriter56.writeUUID(uUID66);
        com.alibaba.fastjson2.JSONWriter.Context context68 = jSONWriter56.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter69 = context68.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider70 = context68.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter71 = null;
        context68.setAfterFilter(afterFilter71);
        java.lang.Class<?> wildcardClass73 = context68.getClass();
        boolean boolean75 = jSONWriter4.isWriteTypeInfo((java.lang.Object) jSONWriter34, (java.lang.reflect.Type) wildcardClass73, (long) 6);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNull(symbolTable38);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[]");
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(context68);
        org.junit.Assert.assertNull(propertyFilter69);
        org.junit.Assert.assertNotNull(objectWriterProvider70);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter2.writeTypeName("");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter20.writeDouble(1.0d, decimalFormat24);
        boolean boolean27 = jSONWriter20.removeReference((java.lang.Object) (short) -1);
        jSONWriter20.writeArrayNull();
        long long29 = jSONWriter20.getFeatures();
        java.lang.Class<?> wildcardClass30 = jSONWriter20.getClass();
        boolean boolean32 = jSONWriter7.isWriteTypeInfo((java.lang.Object) boolean18, (java.lang.reflect.Type) wildcardClass30, 0L);
        jSONWriter7.endArray();
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter7.getContext();
        java.lang.String str35 = jSONWriter2.setPath((int) '4', (java.lang.Object) jSONWriter7);
        com.alibaba.fastjson2.JSONWriter.Path path36 = null;
        com.alibaba.fastjson2.JSONWriter.Path path38 = new com.alibaba.fastjson2.JSONWriter.Path(path36, "");
        com.alibaba.fastjson2.JSONWriter.Path path40 = new com.alibaba.fastjson2.JSONWriter.Path(path38, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path42 = new com.alibaba.fastjson2.JSONWriter.Path(path40, "hi!");
        java.lang.String str43 = path40.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter60 = context59.getPropertyFilter();
        long long61 = context59.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter62 = null;
        context59.setLabelFilter(labelFilter62);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context59.provider;
        boolean boolean65 = path40.equals((java.lang.Object) context59);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter66 = context59.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter67 = null;
        context59.setNameFilter(nameFilter67);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context59);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        boolean boolean75 = jSONWriter73.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class76 = null;
        boolean boolean78 = jSONWriter71.isWriteTypeInfo((java.lang.Object) jSONWriter73, class76, (long) ' ');
        byte[] byteArray80 = new byte[] { (byte) -1 };
        boolean boolean82 = jSONWriter73.writeTypeName(byteArray80, 0L);
        jSONWriter73.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray85 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter86 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray85);
        byte[] byteArray89 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean91 = jSONWriter86.writeTypeName(byteArray89, (long) 10);
        jSONWriter73.writeNameRaw(byteArray89);
        jSONWriter69.writeNameRaw(byteArray89, 97L);
        jSONWriter2.writeBinary(byteArray89);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1]" + "'", str43, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNull(propertyFilter60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(afterFilter66);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(featureArray85);
        org.junit.Assert.assertNotNull(jSONWriter86);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        com.alibaba.fastjson2.SymbolTable symbolTable13 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class19 = null;
        boolean boolean21 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter16, class19, (long) ' ');
        byte[] byteArray23 = new byte[] { (byte) -1 };
        boolean boolean25 = jSONWriter16.writeTypeName(byteArray23, 0L);
        java.util.UUID uUID26 = null;
        jSONWriter16.writeUUID(uUID26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter16.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter29 = context28.getPropertyFilter();
        long long30 = context28.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter31 = null;
        context28.setLabelFilter(labelFilter31);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context28.provider;
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider33);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter35 = context34.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        jSONWriter53.close();
        jSONWriter53.writeSymbol("");
        jSONWriter53.writeBooleanNull();
        jSONWriter53.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable59 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class65 = null;
        boolean boolean67 = jSONWriter60.isWriteTypeInfo((java.lang.Object) jSONWriter62, class65, (long) ' ');
        byte[] byteArray69 = new byte[] { (byte) -1 };
        boolean boolean71 = jSONWriter62.writeTypeName(byteArray69, 0L);
        java.util.UUID uUID72 = null;
        jSONWriter62.writeUUID(uUID72);
        com.alibaba.fastjson2.JSONWriter.Context context74 = jSONWriter62.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context74);
        java.time.format.DateTimeFormatter dateTimeFormatter76 = context74.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider77 = context74.getProvider();
        java.lang.String str78 = context74.getDateFormat();
        boolean boolean79 = jSONWriter53.removeReference((java.lang.Object) context74);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter80 = context74.getLabelFilter();
        java.time.ZoneId zoneId81 = context74.getZoneId();
        context51.setZoneId(zoneId81);
        context34.setZoneId(zoneId81);
        com.alibaba.fastjson2.JSONWriter jSONWriter84 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context34);
        java.lang.String str85 = jSONWriter1.setPath((int) '4', (java.lang.Object) jSONWriter84);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNull(propertyFilter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertNull(propertyPreFilter35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(context74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(objectWriterProvider77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(labelFilter80);
        org.junit.Assert.assertNotNull(zoneId81);
        org.junit.Assert.assertNotNull(jSONWriter84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        jSONWriter1.writeChar('a');
        boolean boolean36 = jSONWriter1.isIgnoreNoneSerializable();
        boolean boolean37 = jSONWriter1.utf8;
        jSONWriter1.writeMillis((long) 8);
        jSONWriter1.writeString(".\\[52\\]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context22.setPropertyFilter(propertyFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context22.setLabelFilter(labelFilter25);
        long long27 = context22.getFeatures();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context22.getPropertyFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNull(propertyFilter28);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        char[] charArray21 = new char[] {};
        jSONWriter15.writeString(charArray21);
        jSONWriter1.writeString(charArray21, (int) (byte) -1, 0, true);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter1.getContext();
        com.alibaba.fastjson2.filter.NameFilter nameFilter28 = context27.getNameFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context27.setLabelFilter(labelFilter29);
        boolean boolean31 = context27.isDateFormatHasHour();
        boolean boolean33 = context27.isEnabled((long) 4);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(nameFilter28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter7 = null;
        context6.setPropertyPreFilter(propertyPreFilter7);
        boolean boolean9 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter10 = context6.getLabelFilter();
        context6.setDateFormat("[1].hi\\!");
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter13 = null;
        context6.setBeforeFilter(beforeFilter13);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter15 = context6.getContextNameFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(labelFilter10);
        org.junit.Assert.assertNull(contextNameFilter15);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.LargeObject;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5 };
        jSONWriter1.config(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        boolean boolean20 = jSONWriter11.isEnabled((long) ' ');
        jSONWriter11.writeString("hi!");
        boolean boolean23 = jSONWriter11.isUTF8();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        jSONWriter11.writeString((java.util.List<java.lang.String>) strList27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal34 = null;
        jSONWriter31.writeDecimal(bigDecimal34);
        boolean boolean37 = jSONWriter31.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter31.writeArrayNull();
        jSONWriter31.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter43, class46, (long) ' ');
        boolean boolean50 = jSONWriter41.isEnabled((long) ' ');
        jSONWriter41.writeString("hi!");
        boolean boolean53 = jSONWriter41.isUTF8();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        jSONWriter41.writeString((java.util.List<java.lang.String>) strList57);
        jSONWriter31.writeString((java.util.List<java.lang.String>) strList57);
        jSONWriter11.writeString((java.util.List<java.lang.String>) strList57);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        char[] charArray63 = null;
        jSONWriter62.writeString(charArray63, (int) (byte) 0, 100, true);
        com.alibaba.fastjson2.SymbolTable symbolTable68 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable68);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        boolean boolean73 = jSONWriter71.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class74 = null;
        boolean boolean76 = jSONWriter69.isWriteTypeInfo((java.lang.Object) jSONWriter71, class74, (long) ' ');
        boolean boolean78 = jSONWriter69.isEnabled((long) ' ');
        jSONWriter69.writeString("hi!");
        boolean boolean81 = jSONWriter69.isUTF8();
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        jSONWriter69.writeString((java.util.List<java.lang.String>) strList85);
        jSONWriter69.writeRaw((byte) -1);
        java.math.BigInteger bigInteger90 = null;
        jSONWriter69.writeBigInt(bigInteger90, (long) '#');
        java.lang.Class<?> wildcardClass93 = jSONWriter69.getClass();
        boolean boolean95 = jSONWriter9.isWriteMapTypeInfo((java.lang.Object) 100, (java.lang.Class) wildcardClass93, 100L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.LargeObject + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.LargeObject));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider23 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        char[] charArray25 = null;
        jSONWriter24.writeString(charArray25);
        java.math.BigDecimal bigDecimal27 = null;
        jSONWriter24.writeDecimal(bigDecimal27);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider23);
        org.junit.Assert.assertNotNull(jSONWriter24);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter18.writeInt16((short) (byte) 100);
        boolean boolean34 = jSONWriter18.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        boolean boolean55 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean34, (java.lang.reflect.Type) wildcardClass51, (long) (byte) -1);
        jSONWriter1.writeSymbol("[1].hi\\!");
        jSONWriter1.writeInt8((byte) 100);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter23 = null;
        context15.setContextValueFilter(contextValueFilter23);
        long long25 = context15.getFeatures();
        boolean boolean26 = context15.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path6, "[1]");
        com.alibaba.fastjson2.JSONWriter.Path path13 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Path path15 = new com.alibaba.fastjson2.JSONWriter.Path(path6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.close();
        jSONWriter3.writeSymbol("[1].hi\\!");
        boolean boolean18 = jSONWriter3.isIgnoreNoneSerializable();
        jSONWriter3.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        jSONWriter21.close();
        jSONWriter21.writeSymbol("");
        jSONWriter21.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter21.context;
        jSONWriter21.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = jSONWriter21.symbolTable;
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        byte[] byteArray42 = new byte[] { (byte) 100 };
        boolean boolean44 = jSONWriter33.writeTypeName(byteArray42, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        int[] intArray50 = new int[] { (short) -1 };
        jSONWriter48.writeInt32(intArray50);
        java.lang.String str52 = jSONWriter33.setPath("hi!", (java.lang.Object) intArray50);
        jSONWriter21.writeInt32(intArray50);
        com.alibaba.fastjson2.SymbolTable symbolTable54 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        boolean boolean59 = jSONWriter57.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class60 = null;
        boolean boolean62 = jSONWriter55.isWriteTypeInfo((java.lang.Object) jSONWriter57, class60, (long) ' ');
        byte[] byteArray64 = new byte[] { (byte) -1 };
        boolean boolean66 = jSONWriter57.writeTypeName(byteArray64, 0L);
        java.util.UUID uUID67 = null;
        jSONWriter57.writeUUID(uUID67);
        com.alibaba.fastjson2.JSONWriter.Context context69 = jSONWriter57.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context69);
        java.time.LocalTime localTime71 = null;
        jSONWriter70.writeLocalTime(localTime71);
        boolean boolean73 = jSONWriter70.isBeanToArray();
        boolean boolean74 = jSONWriter70.isIgnoreNoneSerializable();
        byte[] byteArray75 = jSONWriter70.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty;
        jSONWriter70.config(feature76, false);
        jSONWriter21.writeEnum((java.lang.Enum) feature76);
        jSONWriter3.writeEnum((java.lang.Enum) feature76);
        jSONWriter3.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(symbolTable31);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1]");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(context69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-81]");
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty));
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter27 = null;
        context15.setAfterFilter(afterFilter27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        context15.config(featureArray29);
        com.alibaba.fastjson2.filter.NameFilter nameFilter32 = null;
        context15.setNameFilter(nameFilter32);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        java.time.ZoneId zoneId18 = context15.getZoneId();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNotNull(zoneId18);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        boolean boolean24 = context15.isEnabled(feature23);
        java.lang.String str25 = context15.getDateFormat();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        boolean boolean4 = jSONWriter1.useSingleQuote;
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter1.writeDouble((double) 10, decimalFormat6);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeChar('#');
        short[] shortArray18 = new short[] { (byte) 1, (short) 10, (short) 1 };
        jSONWriter3.writeInt16(shortArray18);
        java.math.BigDecimal bigDecimal20 = null;
        jSONWriter3.writeDecimal(bigDecimal20, 0L);
        long long23 = jSONWriter3.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        jSONWriter25.close();
        jSONWriter25.writeSymbol("");
        jSONWriter25.writeBooleanNull();
        jSONWriter25.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        java.util.UUID uUID44 = null;
        jSONWriter34.writeUUID(uUID44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = jSONWriter34.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context46);
        java.time.format.DateTimeFormatter dateTimeFormatter48 = context46.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider49 = context46.getProvider();
        java.lang.String str50 = context46.getDateFormat();
        boolean boolean51 = jSONWriter25.removeReference((java.lang.Object) context46);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.of(context46);
        jSONWriter52.writeName(97L);
        jSONWriter52.writeReference("[1].hi\\![35]");
        boolean boolean57 = jSONWriter3.isIgnoreNoneSerializable((java.lang.Object) "[1].hi\\![35]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1, 10, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(context46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(objectWriterProvider49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8();
        com.alibaba.fastjson2.JSONWriter.Context context10 = jSONWriter9.context;
        boolean boolean11 = jSONWriter8.removeReference((java.lang.Object) context10);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter12 = null;
        context10.setBeforeFilter(beforeFilter12);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(context10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.writeReference("[1].hi\\!");
        jSONWriter1.writeInt8((byte) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNull(symbolTable6);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.writeSymbol((int) (short) 1);
        jSONWriter1.writeReference("[1][0]");
        int int25 = jSONWriter1.size();
        com.alibaba.fastjson2.SymbolTable symbolTable26 = jSONWriter1.symbolTable;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 13 + "'", int25 == 13);
        org.junit.Assert.assertNull(symbolTable26);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        boolean boolean19 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.of(context15);
        java.time.ZonedDateTime zonedDateTime21 = null;
        jSONWriter20.writeZonedDateTime(zonedDateTime21);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter20);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) '4');
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        java.util.UUID uUID22 = null;
        jSONWriter12.writeUUID(uUID22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter12.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter25 = context24.getPropertyFilter();
        long long26 = context24.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter27 = null;
        context24.setLabelFilter(labelFilter27);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context24.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter30 = null;
        context24.setPropertyPreFilter(propertyPreFilter30);
        com.alibaba.fastjson2.filter.NameFilter nameFilter32 = null;
        context24.setNameFilter(nameFilter32);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean35 = context24.isEnabled(feature34);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider36 = context24.getProvider();
        boolean boolean37 = context24.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter38 = context24.getContextNameFilter();
        boolean boolean39 = path8.equals((java.lang.Object) contextNameFilter38);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertNull(propertyFilter25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(contextNameFilter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        java.lang.Object obj8 = null;
        boolean boolean10 = jSONWriter7.isWriteTypeInfo(obj8, (long) (short) -1);
        java.io.Reader reader11 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter7.writeString(reader11);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: read string from reader error");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context15.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        boolean boolean26 = context15.isEnabled(feature25);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context15.getContextValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(contextValueFilter27);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        java.math.BigDecimal bigDecimal28 = null;
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter14.writeDecimal(bigDecimal28, (long) '#', decimalFormat30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter14.getContext();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter14.writeDateTimeISO8601((int) ' ', 0, (int) (byte) 0, 0, (int) '#', 6, (int) (short) 100, (int) (byte) 0, false);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(context32);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider23 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        boolean boolean25 = jSONWriter24.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean32 = jSONWriter27.writeTypeName(byteArray30, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        long long36 = jSONWriter34.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter39.writeDouble(1.0d, decimalFormat43);
        boolean boolean46 = jSONWriter39.removeReference((java.lang.Object) (short) -1);
        jSONWriter39.writeArrayNull();
        long long48 = jSONWriter39.getFeatures();
        java.lang.Class<?> wildcardClass49 = jSONWriter39.getClass();
        boolean boolean51 = jSONWriter34.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass49, (long) (short) 10);
        int[] intArray58 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter34.writeInt32(intArray58);
        jSONWriter27.writeInt32(intArray58);
        java.math.BigDecimal bigDecimal61 = null;
        jSONWriter27.writeDecimal(bigDecimal61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        boolean boolean66 = jSONWriter64.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat68 = null;
        jSONWriter64.writeDouble(1.0d, decimalFormat68);
        boolean boolean71 = jSONWriter64.removeReference((java.lang.Object) (short) -1);
        jSONWriter64.writeArrayNull();
        jSONWriter64.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable75 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable75);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray77 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray77);
        boolean boolean80 = jSONWriter78.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class81 = null;
        boolean boolean83 = jSONWriter76.isWriteTypeInfo((java.lang.Object) jSONWriter78, class81, (long) ' ');
        char[] charArray84 = new char[] {};
        jSONWriter78.writeString(charArray84);
        jSONWriter64.writeString(charArray84, (int) (byte) -1, 0, true);
        jSONWriter27.writeString(charArray84);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter24.writeString(charArray84, 6, 12, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(featureArray77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[]");
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter25 = null;
        context23.setContextValueFilter(contextValueFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = null;
        context23.setPropertyPreFilter(propertyPreFilter27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context23);
        jSONWriter1.setRootObject((java.lang.Object) jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertNotNull(jSONWriter29);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        jSONWriter1.writeString("");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter16.writeDouble(1.0d, decimalFormat20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean28 = jSONWriter23.writeTypeName(byteArray26, (long) 10);
        jSONWriter16.writeStringLatin1(byteArray26);
        jSONWriter1.writeNameRaw(byteArray26, (long) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        double[] doubleArray3 = null;
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeDouble(doubleArray3, decimalFormat4);
        jSONWriter1.writeReference("$");
        jSONWriter1.writeInt32(3);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        boolean[] booleanArray16 = new boolean[] { false, true, true, true };
        jSONWriter11.writeBool(booleanArray16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter19);
        boolean boolean21 = jSONWriter19.utf16;
        long long23 = jSONWriter19.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable24 = jSONWriter19.getSymbolTable();
        boolean boolean25 = jSONWriter11.isIgnoreNoneSerializable((java.lang.Object) jSONWriter19);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        jSONWriter19.writeEnum((java.lang.Enum) feature26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray35 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter28.writeRaw(charArray35);
        jSONWriter19.writeString(charArray35, (int) (short) 10, (int) (short) -1, true);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray35);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertNull(symbolTable24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context21.getContextValueFilter();
        boolean boolean23 = context21.isDateFormatISO8601();
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context21.getDateFormatter();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context21);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.writeInt8((byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = null;
        jSONWriter4.writeDouble(doubleArray5);
        boolean boolean7 = jSONWriter4.utf16;
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter4.writeDecimal(bigDecimal8, 100L);
        boolean boolean11 = jSONWriter4.utf16;
        java.lang.Object obj12 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter4.isWriteTypeInfo(obj12, (java.lang.Class) wildcardClass24, (long) (short) 0);
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter4, (long) (byte) 1);
        java.util.Map map29 = null;
        jSONWriter4.write(map29);
        jSONWriter4.writeInt16((short) 0);
        jSONWriter4.writeFloat((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        long long6 = jSONWriter1.getFeatures();
        jSONWriter1.writeRaw((byte) -1);
        java.math.BigInteger bigInteger9 = null;
        jSONWriter1.writeBigInt(bigInteger9, (long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        java.lang.String str7 = path2.toString();
        com.alibaba.fastjson2.JSONWriter.Path path8 = path2.parent;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(path8);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter1.writeBinary(byteArray27);
        boolean boolean34 = jSONWriter1.hasFilter((long) 100);
        com.alibaba.fastjson2.JSONObject jSONObject35 = null;
        jSONWriter1.write(jSONObject35);
        jSONWriter1.writeMillis((long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal43 = null;
        jSONWriter40.writeDecimal(bigDecimal43);
        boolean boolean46 = jSONWriter40.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter40.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj51 = null;
        jSONWriter40.startArray(obj51, (-1));
        jSONWriter40.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray63 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        jSONWriter40.writeString((java.util.List<java.lang.String>) strList64);
        jSONWriter1.write((java.util.List) strList64);
        jSONWriter1.writeDouble((double) (-1L));
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path10 = path9.parent;
        java.lang.Object obj11 = null;
        boolean boolean12 = path9.equals(obj11);
        com.alibaba.fastjson2.JSONWriter.Path path13 = path9.parent;
        com.alibaba.fastjson2.JSONWriter.Path path14 = path13.parent;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(path14);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofUTF8();
        com.alibaba.fastjson2.JSONWriter.Context context1 = jSONWriter0.context;
        int int2 = jSONWriter0.level();
        java.math.BigDecimal bigDecimal3 = null;
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter0.writeDecimal(bigDecimal3, (long) 12, decimalFormat5);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(context1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter21.writeDouble((double) 65536L, decimalFormat24);
        byte[] byteArray26 = jSONWriter21.getBytes();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-76, -59, 0, 0]");
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter39 = context38.getPropertyFilter();
        long long40 = context38.getFeatures();
        long long41 = context38.getFeatures();
        boolean boolean42 = context38.isDateFormatHasHour();
        java.time.ZoneId zoneId43 = context38.getZoneId();
        context15.setZoneId(zoneId43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.NameFilter nameFilter46 = context15.getNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNull(propertyFilter39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneId43);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNull(nameFilter46);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        jSONWriter1.writeReference("$");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable9 = jSONWriter1.symbolTable;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable9);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        java.time.Instant instant32 = null;
        jSONWriter20.writeInstant(instant32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean40 = jSONWriter35.writeTypeName(byteArray38, (long) 10);
        jSONWriter20.writeRaw(byteArray38);
        jSONWriter3.writeStringLatin1(byteArray38);
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        boolean boolean44 = jSONWriter3.isEnabled(feature43);
        jSONWriter3.writeName(".\\[1\\]\\[0\\]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.of(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter6.writeRaw((byte) 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        jSONWriter16.endArray();
        jSONWriter16.writeString("");
        boolean boolean22 = jSONWriter16.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) feature25);
        jSONWriter16.writeEnum((java.lang.Enum) feature25);
        jSONWriter16.writeInt16((short) 10);
        byte[] byteArray30 = jSONWriter16.getBytes();
        java.math.BigDecimal bigDecimal31 = null;
        java.text.DecimalFormat decimalFormat33 = null;
        jSONWriter16.writeDecimal(bigDecimal31, 0L, decimalFormat33);
        jSONWriter16.writeChar(' ');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[73, 38, -68, 0, 10]");
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONObject jSONObject7 = null;
        jSONWriter1.write(jSONObject7);
        java.time.LocalDate localDate9 = null;
        jSONWriter1.writeLocalDate(localDate9);
        java.time.ZonedDateTime zonedDateTime11 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime11);
        boolean boolean13 = jSONWriter1.isUTF16();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter15);
        boolean boolean17 = jSONWriter15.utf16;
        long long19 = jSONWriter15.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = jSONWriter15.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Path path21 = null;
        com.alibaba.fastjson2.JSONWriter.Path path23 = new com.alibaba.fastjson2.JSONWriter.Path(path21, "");
        com.alibaba.fastjson2.JSONWriter.Path path25 = new com.alibaba.fastjson2.JSONWriter.Path(path23, (int) (byte) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        jSONWriter29.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class49 = null;
        boolean boolean51 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter46, class49, (long) ' ');
        byte[] byteArray53 = new byte[] { (byte) -1 };
        boolean boolean55 = jSONWriter46.writeTypeName(byteArray53, 0L);
        java.util.UUID uUID56 = null;
        jSONWriter46.writeUUID(uUID56);
        com.alibaba.fastjson2.JSONWriter.Context context58 = jSONWriter46.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context58.config(feature59, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean65 = jSONWriter63.isRefDetect((java.lang.Object) feature64);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature64 };
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray66);
        context58.config(featureArray66);
        jSONWriter29.config(featureArray66);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.of(featureArray66);
        byte[] byteArray72 = jSONWriter71.getBytes();
        boolean boolean73 = path25.equals((java.lang.Object) byteArray72);
        boolean boolean75 = jSONWriter15.writeTypeName(byteArray72, 97L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        jSONWriter77.close();
        java.text.DecimalFormat decimalFormat80 = null;
        jSONWriter77.writeFloat((float) 10, decimalFormat80);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray82 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray82);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean88 = jSONWriter83.writeTypeName(byteArray86, (long) 10);
        boolean boolean90 = jSONWriter77.writeTypeName(byteArray86, (long) (byte) 100);
        jSONWriter15.writeNameRaw(byteArray86, 10L);
        jSONWriter1.writeNameRaw(byteArray86, (long) 5);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNull(symbolTable20);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(context58);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(featureArray82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context26.setLabelFilter(labelFilter29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context26.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        jSONWriter32.config(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray37);
        boolean boolean42 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter41);
        jSONWriter41.writeTimeHHMMSS8((int) (byte) -1, (-1), (int) (short) 10);
        boolean boolean47 = jSONWriter41.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        long long20 = context15.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable21);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        java.util.UUID uUID14 = null;
        jSONWriter4.writeUUID(uUID14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter4.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter17 = context16.getPropertyFilter();
        long long18 = context16.getFeatures();
        long long19 = context16.getFeatures();
        boolean boolean20 = context16.isDateFormatHasHour();
        java.time.ZoneId zoneId21 = context16.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter22 = context16.getBeforeFilter();
        boolean boolean23 = context16.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context16);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context16.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context16.getPropertyPreFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal32 = null;
        jSONWriter29.writeDecimal(bigDecimal32);
        boolean boolean35 = jSONWriter29.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        boolean boolean46 = jSONWriter29.isRefDetect((java.lang.Object) jSONWriter37);
        java.util.UUID uUID47 = null;
        jSONWriter37.writeUUID(uUID47);
        jSONWriter37.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter37.getContext();
        long long52 = context51.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        context51.config(featureArray53);
        context16.config(featureArray53);
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context("$[10]", featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(propertyFilter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNull(beforeFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray28);
        java.time.format.DateTimeFormatter dateTimeFormatter33 = context32.getDateFormatter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter34 = context32.getAfterFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter36.isWriteTypeInfo((java.lang.Object) jSONWriter38, class41, (long) ' ');
        byte[] byteArray45 = new byte[] { (byte) -1 };
        boolean boolean47 = jSONWriter38.writeTypeName(byteArray45, 0L);
        java.util.UUID uUID48 = null;
        jSONWriter38.writeUUID(uUID48);
        com.alibaba.fastjson2.JSONWriter.Context context50 = jSONWriter38.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter51 = context50.getPropertyFilter();
        long long52 = context50.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter53 = null;
        context50.setLabelFilter(labelFilter53);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context50, symbolTable55);
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context50.config(feature57, true);
        context32.config(feature57, true);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(afterFilter34);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(context50);
        org.junit.Assert.assertNull(propertyFilter51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        char[] charArray21 = new char[] {};
        jSONWriter15.writeString(charArray21);
        jSONWriter1.writeString(charArray21, (int) (byte) -1, 0, true);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter1.getContext();
        com.alibaba.fastjson2.filter.NameFilter nameFilter28 = context27.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat35 = null;
        jSONWriter31.writeDouble(1.0d, decimalFormat35);
        java.time.ZonedDateTime zonedDateTime37 = null;
        jSONWriter31.writeZonedDateTime(zonedDateTime37);
        long long40 = jSONWriter31.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        java.util.UUID uUID54 = null;
        jSONWriter44.writeUUID(uUID54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = jSONWriter44.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context56);
        java.time.format.DateTimeFormatter dateTimeFormatter58 = context56.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider59 = context56.getProvider();
        boolean boolean60 = jSONWriter31.isWriteTypeInfo((java.lang.Object) context56);
        com.alibaba.fastjson2.SymbolTable symbolTable61 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context56, symbolTable61);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider63 = context56.provider;
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider63);
        boolean boolean65 = jSONWriter29.isRefDetect((java.lang.Object) context64);
        jSONWriter29.writeDateTimeISO8601((int) (short) 10, 0, 3, (int) '4', (int) (byte) -1, 12, 0, (int) ' ', false);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(nameFilter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(context56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(objectWriterProvider59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(objectWriterProvider63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        jSONWriter1.writeMillis((long) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable16 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class22 = null;
        boolean boolean24 = jSONWriter17.isWriteTypeInfo((java.lang.Object) jSONWriter19, class22, (long) ' ');
        byte[] byteArray26 = new byte[] { (byte) -1 };
        boolean boolean28 = jSONWriter19.writeTypeName(byteArray26, 0L);
        java.util.UUID uUID29 = null;
        jSONWriter19.writeUUID(uUID29);
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter19.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter32 = context31.getPropertyFilter();
        long long33 = context31.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter34 = null;
        context31.setLabelFilter(labelFilter34);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter36 = context31.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter37 = null;
        context31.setPropertyFilter(propertyFilter37);
        boolean boolean39 = context31.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter40 = context31.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter41 = null;
        context31.setBeforeFilter(beforeFilter41);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter43 = context31.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter44 = context31.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal50 = null;
        jSONWriter47.writeDecimal(bigDecimal50);
        boolean boolean53 = jSONWriter47.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter47.writeArrayNull();
        jSONWriter47.writeChar('a');
        jSONWriter47.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        jSONWriter65.close();
        java.text.DecimalFormat decimalFormat68 = null;
        jSONWriter65.writeFloat((float) 10, decimalFormat68);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean76 = jSONWriter71.writeTypeName(byteArray74, (long) 10);
        boolean boolean78 = jSONWriter65.writeTypeName(byteArray74, (long) (byte) 100);
        jSONWriter65.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray81 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray81);
        jSONWriter82.close();
        java.text.DecimalFormat decimalFormat85 = null;
        jSONWriter82.writeFloat((float) 10, decimalFormat85);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray87 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter88 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray87);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean93 = jSONWriter88.writeTypeName(byteArray91, (long) 10);
        boolean boolean95 = jSONWriter82.writeTypeName(byteArray91, (long) (byte) 100);
        jSONWriter65.writeBinary(byteArray91);
        jSONWriter47.writeHex(byteArray91);
        jSONWriter45.writeRaw(byteArray91);
        jSONWriter1.writeHex(byteArray91);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNull(propertyFilter32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNull(contextValueFilter36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(nameFilter40);
        org.junit.Assert.assertNull(propertyPreFilter43);
        org.junit.Assert.assertNull(valueFilter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(featureArray81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertNotNull(featureArray87);
        org.junit.Assert.assertNotNull(jSONWriter88);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path10 = path9.parent;
        com.alibaba.fastjson2.JSONWriter.Path path11 = path10.parent;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) feature15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15 };
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray17);
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray17);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context20.config(feature21, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context20);
        boolean boolean25 = path11.equals((java.lang.Object) jSONWriter24);
        com.alibaba.fastjson2.JSONWriter.Path path27 = new com.alibaba.fastjson2.JSONWriter.Path(path11, (int) (short) 1);
        java.lang.String str28 = path11.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1]" + "'", str28, "[1]");
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        long long10 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter1.writeNameRaw(byteArray21);
        java.time.ZonedDateTime zonedDateTime25 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean28 = jSONWriter1.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        boolean boolean12 = jSONWriter1.utf8;
        java.time.LocalTime localTime13 = null;
        jSONWriter1.writeLocalTime(localTime13);
        com.alibaba.fastjson2.SymbolTable symbolTable15 = jSONWriter1.getSymbolTable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(symbolTable15);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        double[] doubleArray3 = null;
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeDouble(doubleArray3, decimalFormat4);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class12 = null;
        boolean boolean14 = jSONWriter7.isWriteTypeInfo((java.lang.Object) jSONWriter9, class12, (long) ' ');
        byte[] byteArray16 = new byte[] { (byte) -1 };
        boolean boolean18 = jSONWriter9.writeTypeName(byteArray16, 0L);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = jSONWriter9.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter22 = context21.getPropertyFilter();
        long long23 = context21.getFeatures();
        long long24 = context21.getFeatures();
        boolean boolean25 = context21.isDateFormatHasHour();
        boolean boolean26 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) context21);
        boolean boolean27 = context21.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context21);
        org.junit.Assert.assertNull(propertyFilter22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter1.context;
        com.alibaba.fastjson2.JSONObject jSONObject10 = null;
        jSONWriter1.write(jSONObject10);
        int int12 = jSONWriter1.size();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        long long11 = jSONWriter9.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter9.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass24, (long) (short) 10);
        int[] intArray33 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter9.writeInt32(intArray33);
        double[] doubleArray39 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter9.writeDouble(doubleArray39);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter1.writeDouble(doubleArray39, decimalFormat41);
        jSONWriter1.writeName("[1].hi\\![35]");
        boolean boolean45 = jSONWriter1.hasFilter();
        jSONWriter1.writeInt64((long) 5);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.NameFilter nameFilter20 = null;
        context15.setNameFilter(nameFilter20);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = null;
        context15.setAfterFilter(afterFilter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context15);
        boolean boolean26 = jSONWriter24.isEnabled((-1L));
        jSONWriter24.writeString(".\\[52\\]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        jSONWriter1.writeInt32((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal25 = null;
        jSONWriter22.writeDecimal(bigDecimal25);
        java.lang.Object obj27 = null;
        java.lang.Class class28 = null;
        jSONWriter22.checkAndWriteTypeName(obj27, class28);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean31 = jSONWriter22.isEnabled(feature30);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = jSONWriter22.symbolTable;
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        byte[] byteArray43 = new byte[] { (byte) -1 };
        boolean boolean45 = jSONWriter36.writeTypeName(byteArray43, 0L);
        java.util.UUID uUID46 = null;
        jSONWriter36.writeUUID(uUID46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = jSONWriter36.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter49 = context48.getPropertyFilter();
        long long50 = context48.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter51 = null;
        context48.setLabelFilter(labelFilter51);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider53 = context48.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter54 = null;
        context48.setPropertyPreFilter(propertyPreFilter54);
        com.alibaba.fastjson2.filter.NameFilter nameFilter56 = null;
        context48.setNameFilter(nameFilter56);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context48);
        com.alibaba.fastjson2.SymbolTable symbolTable59 = jSONWriter58.getSymbolTable();
        java.math.BigDecimal bigDecimal60 = null;
        jSONWriter58.writeDecimal(bigDecimal60, (long) 'a');
        boolean boolean63 = jSONWriter22.containsReference((java.lang.Object) jSONWriter58);
        jSONWriter22.writeNull();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        boolean[] booleanArray71 = new boolean[] { false, true, true, true };
        jSONWriter66.writeBool(booleanArray71);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter74);
        boolean boolean76 = jSONWriter74.utf16;
        long long78 = jSONWriter74.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable79 = jSONWriter74.getSymbolTable();
        boolean boolean80 = jSONWriter66.isIgnoreNoneSerializable((java.lang.Object) jSONWriter74);
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        jSONWriter74.writeEnum((java.lang.Enum) feature81);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray90 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter83.writeRaw(charArray90);
        jSONWriter74.writeString(charArray90, (int) (short) 10, (int) (short) -1, true);
        jSONWriter22.writeString(charArray90);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray90);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(symbolTable32);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(context48);
        org.junit.Assert.assertNull(propertyFilter49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider53);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNull(symbolTable59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L + "'", long78 == 100L);
        org.junit.Assert.assertNull(symbolTable79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context15.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context15.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        long long31 = jSONWriter29.getFeatures();
        java.time.LocalDateTime localDateTime32 = null;
        jSONWriter29.writeLocalDateTime(localDateTime32);
        byte[] byteArray34 = jSONWriter29.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        jSONWriter29.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27, featureArray35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        jSONWriter43.writeSymbol("");
        jSONWriter43.writeBooleanNull();
        jSONWriter43.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context64);
        java.time.format.DateTimeFormatter dateTimeFormatter66 = context64.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider67 = context64.getProvider();
        java.lang.String str68 = context64.getDateFormat();
        boolean boolean69 = jSONWriter43.removeReference((java.lang.Object) context64);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter70 = context64.getLabelFilter();
        java.time.ZoneId zoneId71 = context64.getZoneId();
        context41.setZoneId(zoneId71);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-81]");
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(objectWriterProvider67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(labelFilter70);
        org.junit.Assert.assertNotNull(zoneId71);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean13 = jSONWriter8.writeTypeName(byteArray11, (long) 10);
        jSONWriter1.writeStringLatin1(byteArray11);
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        int int17 = jSONWriter1.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = null;
        jSONWriter18.writeDouble(doubleArray19);
        boolean boolean21 = jSONWriter18.utf16;
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter18.writeDecimal(bigDecimal22, 100L);
        boolean boolean25 = jSONWriter18.utf16;
        boolean boolean27 = jSONWriter18.isEnabled((long) '4');
        boolean boolean28 = jSONWriter1.containsReference((java.lang.Object) jSONWriter18);
        java.time.LocalDate localDate29 = null;
        jSONWriter1.writeLocalDate(localDate29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter32.writeDouble(1.0d, decimalFormat36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean44 = jSONWriter39.writeTypeName(byteArray42, (long) 10);
        jSONWriter32.writeStringLatin1(byteArray42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        java.time.LocalTime localTime48 = null;
        jSONWriter47.writeLocalTime(localTime48);
        java.time.LocalDateTime localDateTime50 = null;
        jSONWriter47.writeLocalDateTime(localDateTime50);
        byte[] byteArray52 = jSONWriter47.getBytes();
        jSONWriter32.writeNameRaw(byteArray52);
        jSONWriter1.writeHex(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('4', '#');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-81, -81]");
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        jSONWriter1.writeReference("$");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter9.writeDecimal(bigDecimal12);
        boolean boolean15 = jSONWriter9.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter9.writeArrayNull();
        jSONWriter9.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        byte[] byteArray31 = null;
        jSONWriter21.writeBinary(byteArray31);
        jSONWriter21.endObject();
        java.time.ZonedDateTime zonedDateTime34 = null;
        jSONWriter21.writeZonedDateTime(zonedDateTime34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray40 = null;
        jSONWriter37.writeHex(byteArray40);
        boolean boolean42 = jSONWriter37.isRefDetect();
        jSONWriter37.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        java.util.UUID uUID57 = null;
        jSONWriter47.writeUUID(uUID57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter47.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter60 = context59.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable61 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable61);
        boolean boolean63 = jSONWriter62.isRefDetect();
        java.lang.String str66 = jSONWriter62.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter68);
        long long70 = jSONWriter68.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        boolean boolean75 = jSONWriter73.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat77 = null;
        jSONWriter73.writeDouble(1.0d, decimalFormat77);
        boolean boolean80 = jSONWriter73.removeReference((java.lang.Object) (short) -1);
        jSONWriter73.writeArrayNull();
        long long82 = jSONWriter73.getFeatures();
        java.lang.Class<?> wildcardClass83 = jSONWriter73.getClass();
        boolean boolean85 = jSONWriter68.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass83, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter86 = jSONWriter62.getObjectWriter((java.lang.Class) wildcardClass83);
        boolean boolean87 = jSONWriter37.isWriteTypeInfo((java.lang.Object) context59, (java.lang.reflect.Type) wildcardClass83);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter88 = jSONWriter21.getObjectWriter((java.lang.Class) wildcardClass83);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter89 = jSONWriter9.getObjectWriter((java.lang.Class) wildcardClass83);
        java.lang.Class class90 = null;
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter91 = jSONWriter1.getObjectWriter((java.lang.reflect.Type) wildcardClass83, class90);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertNull(propertyFilter60);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objectWriter86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objectWriter88);
        org.junit.Assert.assertNotNull(objectWriter89);
        org.junit.Assert.assertNotNull(objectWriter91);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray40);
        context45.setDateFormat("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal52 = null;
        jSONWriter49.writeDecimal(bigDecimal52);
        boolean boolean55 = jSONWriter49.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter49.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj60 = null;
        jSONWriter49.startArray(obj60, (-1));
        jSONWriter49.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray72 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        jSONWriter49.writeString((java.util.List<java.lang.String>) strList73);
        jSONWriter49.writeDateYYYMMDD8((int) (short) 1, (int) (byte) 0, (int) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature80 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter49.writeAny((java.lang.Object) feature80);
        boolean boolean82 = context45.isEnabled(feature80);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter83 = context45.getBeforeFilter();
        context45.setDateFormat(".\\[1\\]\\.hi\\\\\\!");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature80.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(beforeFilter83);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        java.time.ZonedDateTime zonedDateTime17 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime17);
        java.math.BigInteger bigInteger19 = null;
        jSONWriter3.writeBigInt(bigInteger19, (long) (byte) 10);
        jSONWriter3.writeRaw((byte) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray25 = null;
        jSONWriter24.writeDouble(doubleArray25);
        boolean boolean27 = jSONWriter24.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        byte[] byteArray38 = new byte[] { (byte) -1 };
        boolean boolean40 = jSONWriter31.writeTypeName(byteArray38, 0L);
        byte[] byteArray41 = null;
        jSONWriter31.writeBinary(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter31.writeHex(byteArray49);
        jSONWriter24.writeNameRaw(byteArray49);
        jSONWriter3.writeHex(byteArray49);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 1, -1, 1, -1]");
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        boolean boolean17 = jSONWriter1.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter34 = context33.getPropertyFilter();
        long long35 = context33.getFeatures();
        long long36 = context33.getFeatures();
        jSONWriter1.startArray((java.lang.Object) long36, (int) (short) 100);
        boolean boolean39 = jSONWriter1.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        jSONWriter41.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray53 = null;
        jSONWriter52.writeDouble(doubleArray53);
        jSONWriter52.writeArrayNull();
        short[] shortArray59 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter52.writeInt16(shortArray59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal65 = null;
        jSONWriter62.writeDecimal(bigDecimal65);
        boolean boolean68 = jSONWriter62.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter62.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        char[] charArray77 = new char[] { '#', ' ' };
        jSONWriter74.writeString(charArray77, (int) (byte) 0, (int) (short) 1);
        jSONWriter62.writeString(charArray77);
        jSONWriter52.writeString(charArray77);
        jSONWriter41.writeString(charArray77);
        boolean boolean84 = jSONWriter1.containsReference((java.lang.Object) jSONWriter41);
        boolean boolean85 = jSONWriter41.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNull(propertyFilter34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[#,  ]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        byte[] byteArray14 = new byte[] { (byte) -1 };
        boolean boolean16 = jSONWriter7.writeTypeName(byteArray14, 0L);
        jSONWriter1.writeBinary(byteArray14);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeTypeName("[1].hi\\!.\\[1\\].\\[1\\]\\.hi\\\\\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) feature28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider25, featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        jSONWriter1.setRootObject((java.lang.Object) jSONWriter33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter33.context;
        java.time.LocalDateTime localDateTime36 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter33.writeLocalDateTime(localDateTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(context35);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        boolean[] booleanArray6 = new boolean[] { true };
        jSONWriter1.writeBool(booleanArray6);
        int int8 = jSONWriter1.size();
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter1.writeDecimal(bigDecimal9, (long) 5);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        int[] intArray20 = new int[] { (short) -1 };
        jSONWriter18.writeInt32(intArray20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal26 = null;
        jSONWriter23.writeDecimal(bigDecimal26);
        boolean boolean29 = jSONWriter23.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter23.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        jSONWriter35.close();
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter35.writeFloat((float) 10, decimalFormat38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean46 = jSONWriter41.writeTypeName(byteArray44, (long) 10);
        boolean boolean48 = jSONWriter35.writeTypeName(byteArray44, (long) (byte) 100);
        jSONWriter35.writeInt16((short) (byte) 100);
        boolean boolean51 = jSONWriter35.hasFilter();
        long[] longArray55 = new long[] { 0, (byte) -1, ' ' };
        jSONWriter35.writeInt64(longArray55);
        jSONWriter23.writeInt64(longArray55);
        jSONWriter18.writeInt64(longArray55);
        jSONWriter1.writeInt64(longArray55);
        java.math.BigDecimal bigDecimal60 = null;
        jSONWriter1.writeDecimal(bigDecimal60);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1]");
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[0, -1, 32]");
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean4 = jSONWriter0.containsReference((java.lang.Object) 5);
        float[] floatArray8 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter0.writeFloat(floatArray8);
        jSONWriter0.writeTypeName("[1][0]");
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context27.getPropertyFilter();
        long long29 = context27.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter30 = null;
        context27.setLabelFilter(labelFilter30);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider32 = context27.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.of(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider32, featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter40);
        long long42 = jSONWriter40.getFeatures();
        java.time.LocalDateTime localDateTime43 = null;
        jSONWriter40.writeLocalDateTime(localDateTime43);
        byte[] byteArray45 = jSONWriter40.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        jSONWriter40.config(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.of(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider32, featureArray46);
        jSONWriter0.config(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(propertyFilter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-81]");
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(jSONWriter54);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        jSONWriter3.writeDouble((double) '4');
        boolean boolean19 = jSONWriter3.isWriteNulls();
        jSONWriter3.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        java.time.LocalDate localDate24 = null;
        jSONWriter23.writeLocalDate(localDate24);
        boolean boolean26 = jSONWriter23.utf8;
        java.util.UUID uUID27 = null;
        jSONWriter23.writeUUID(uUID27);
        java.lang.String str29 = jSONWriter3.setPath(0, (java.lang.Object) uUID27);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        jSONWriter33.writeNull();
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter33.writeFloat((float) 0, decimalFormat45);
        boolean boolean47 = jSONWriter33.utf16;
        jSONWriter33.writeTypeName("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) feature52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature52 };
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) feature59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature59 };
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray61);
        java.time.ZoneId zoneId64 = null;
        context63.setZoneId(zoneId64);
        jSONWriter56.popPath((java.lang.Object) context63);
        float[] floatArray67 = new float[] {};
        jSONWriter56.writeFloat(floatArray67);
        jSONWriter33.writeFloat(floatArray67);
        jSONWriter3.writeFloat(floatArray67);
        com.alibaba.fastjson2.JSONWriter.Context context71 = jSONWriter3.getContext();
        jSONWriter3.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[]");
        org.junit.Assert.assertNotNull(context71);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        boolean boolean18 = jSONWriter16.hasFilter((long) 0);
        long long19 = jSONWriter16.getFeatures();
        jSONWriter16.writeMillis((long) 'a');
        jSONWriter16.writeTypeName("[1]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        boolean boolean19 = jSONWriter9.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        jSONWriter22.writeTypeName("");
        boolean boolean25 = jSONWriter22.isUseSingleQuotes();
        jSONWriter22.startObject();
        boolean boolean27 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        java.lang.reflect.Type type31 = null;
        boolean boolean33 = jSONWriter29.isWriteTypeInfo((java.lang.Object) (byte) 1, type31, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean47 = jSONWriter42.writeTypeName(byteArray45, (long) 10);
        jSONWriter35.writeStringLatin1(byteArray45);
        jSONWriter29.writeNameRaw(byteArray45);
        jSONWriter9.writeNameRaw(byteArray45);
        boolean boolean51 = jSONWriter9.isUTF16();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        java.lang.String str20 = context15.getDateFormat();
        boolean boolean22 = context15.isEnabled(0L);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        boolean boolean33 = jSONWriter24.isEnabled((long) ' ');
        jSONWriter24.writeString("hi!");
        boolean boolean36 = jSONWriter24.isUTF8();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        jSONWriter24.writeString((java.util.List<java.lang.String>) strList40);
        jSONWriter24.writeRaw((byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = jSONWriter24.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        jSONWriter24.writeAny((java.lang.Object) featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray46);
        context15.config(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(symbolTable45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter51);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        java.math.BigDecimal bigDecimal1 = null;
        java.text.DecimalFormat decimalFormat3 = null;
        jSONWriter0.writeDecimal(bigDecimal1, (-1L), decimalFormat3);
        jSONWriter0.writeRaw(' ');
        boolean boolean7 = jSONWriter0.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter9.writeDecimal(bigDecimal12);
        java.lang.Object obj14 = null;
        java.lang.Class class15 = null;
        jSONWriter9.checkAndWriteTypeName(obj14, class15);
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean18 = jSONWriter9.isEnabled(feature17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = jSONWriter9.symbolTable;
        jSONWriter9.writeInt16((short) (byte) 1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter22 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter39 = context38.getPropertyFilter();
        long long40 = context38.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter41 = null;
        context38.setLabelFilter(labelFilter41);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter43 = context38.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter44 = null;
        context38.setPropertyFilter(propertyFilter44);
        boolean boolean46 = context38.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter47 = context38.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter48 = null;
        context38.setBeforeFilter(beforeFilter48);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter50 = context38.getPropertyPreFilter();
        java.lang.String str51 = jSONWriter9.setPath(fieldWriter22, (java.lang.Object) propertyPreFilter50);
        java.time.ZonedDateTime zonedDateTime52 = null;
        jSONWriter9.writeZonedDateTime(zonedDateTime52);
        boolean boolean54 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter9);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeTypeName("[1][10]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(symbolTable19);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNull(propertyFilter39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNull(contextValueFilter43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(nameFilter47);
        org.junit.Assert.assertNull(propertyPreFilter50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        jSONWriter1.writeInt8((byte) 0);
        jSONWriter1.writeChar('4');
        jSONWriter1.writeSymbol("[1].hi\\![35]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        context15.setDateFormat("hi!");
        java.time.ZoneId zoneId19 = null;
        context15.setZoneId(zoneId19);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        boolean boolean23 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        jSONWriter25.close();
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter25.writeFloat((float) 10, decimalFormat28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean36 = jSONWriter31.writeTypeName(byteArray34, (long) 10);
        boolean boolean38 = jSONWriter25.writeTypeName(byteArray34, (long) (byte) 100);
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        jSONWriter42.close();
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter42.writeFloat((float) 10, decimalFormat45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean53 = jSONWriter48.writeTypeName(byteArray51, (long) 10);
        boolean boolean55 = jSONWriter42.writeTypeName(byteArray51, (long) (byte) 100);
        jSONWriter25.writeBinary(byteArray51);
        boolean boolean58 = jSONWriter25.hasFilter((long) 100);
        com.alibaba.fastjson2.JSONObject jSONObject59 = null;
        jSONWriter25.write(jSONObject59);
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNonFieldGetter;
        jSONWriter25.config(feature61, true);
        boolean boolean64 = context15.isEnabled(feature61);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNonFieldGetter + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNonFieldGetter));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        char[] charArray21 = new char[] {};
        jSONWriter15.writeString(charArray21);
        jSONWriter1.writeString(charArray21, (int) (byte) -1, 0, true);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter1.getContext();
        boolean boolean28 = jSONWriter1.hasFilter();
        jSONWriter1.writeFloat((java.lang.Float) 10.0f);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter1.context;
        java.time.ZonedDateTime zonedDateTime10 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime10);
        boolean boolean12 = jSONWriter1.isUseSingleQuotes();
        jSONWriter1.writeNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        com.alibaba.fastjson2.JSONWriter.Context context19 = jSONWriter16.context;
        jSONWriter16.writeMillis(32L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(context19);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        boolean boolean19 = jSONWriter16.isBeanToArray();
        boolean boolean20 = jSONWriter16.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter.Path path21 = null;
        com.alibaba.fastjson2.JSONWriter.Path path23 = new com.alibaba.fastjson2.JSONWriter.Path(path21, "");
        com.alibaba.fastjson2.JSONWriter.Path path25 = new com.alibaba.fastjson2.JSONWriter.Path(path23, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path27 = new com.alibaba.fastjson2.JSONWriter.Path(path25, "hi!");
        java.lang.String str28 = path27.toString();
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path27, (int) '#');
        boolean boolean31 = jSONWriter16.isRefDetect((java.lang.Object) path30);
        java.math.BigDecimal bigDecimal32 = null;
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter16.writeDecimal(bigDecimal32, 0L, decimalFormat34);
        jSONWriter16.writeInt8((byte) 0);
        jSONWriter16.endArray();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1].hi\\!" + "'", str28, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        char[] charArray21 = new char[] {};
        jSONWriter15.writeString(charArray21);
        jSONWriter1.writeString(charArray21, (int) (byte) -1, 0, true);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter1.getContext();
        com.alibaba.fastjson2.filter.NameFilter nameFilter28 = context27.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context27);
        long long30 = context27.getFeatures();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(nameFilter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        char[] charArray9 = new char[] {};
        jSONWriter3.writeString(charArray9);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue;
        boolean boolean12 = jSONWriter3.isEnabled(feature11);
        jSONWriter3.writeInt32(0);
        jSONWriter3.writeInt16((short) (byte) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter18.writeDouble(1.0d, decimalFormat22);
        boolean boolean25 = jSONWriter18.removeReference((java.lang.Object) (short) -1);
        jSONWriter18.writeArrayNull();
        jSONWriter18.startArray((int) (short) 1);
        java.time.Instant instant29 = null;
        jSONWriter18.writeInstant(instant29);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        java.util.UUID uUID44 = null;
        jSONWriter34.writeUUID(uUID44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = jSONWriter34.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter47 = context46.getPropertyFilter();
        long long48 = context46.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter49 = null;
        context46.setLabelFilter(labelFilter49);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider51 = context46.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter52 = null;
        context46.setPropertyPreFilter(propertyPreFilter52);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        boolean boolean55 = context46.isEnabled(feature54);
        boolean boolean56 = jSONWriter18.isEnabled(feature54);
        context13.config(feature54, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.of(context13);
        java.text.DecimalFormat decimalFormat61 = null;
        jSONWriter59.writeDouble((double) 2, decimalFormat61);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(context46);
        org.junit.Assert.assertNull(propertyFilter47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider51);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter59);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        jSONWriter5.writeDateTime19(4, (int) (short) 0, (int) (short) -1, (int) 'a', (int) '#', (int) (byte) 100);
        boolean[] booleanArray17 = new boolean[] { true, false, true, true };
        jSONWriter5.writeBool(booleanArray17);
        jSONWriter5.writeArrayNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, false, true, true]");
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray19);
        java.math.BigInteger bigInteger24 = null;
        jSONWriter23.writeBigInt(bigInteger24, (long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        java.time.LocalTime localTime29 = null;
        jSONWriter28.writeLocalTime(localTime29);
        java.time.LocalDateTime localDateTime31 = null;
        jSONWriter28.writeLocalDateTime(localDateTime31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        boolean boolean36 = jSONWriter34.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter38.writeDouble(1.0d, decimalFormat42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean50 = jSONWriter45.writeTypeName(byteArray48, (long) 10);
        jSONWriter38.writeStringLatin1(byteArray48);
        jSONWriter34.writeStringLatin1(byteArray48);
        jSONWriter28.writeBinary(byteArray48);
        jSONWriter23.writeBinary(byteArray48);
        jSONWriter23.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = jSONWriter23.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal61 = null;
        jSONWriter58.writeDecimal(bigDecimal61);
        boolean boolean64 = jSONWriter58.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter58.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj69 = null;
        jSONWriter58.startArray(obj69, (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean73 = jSONWriter72.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean75 = jSONWriter72.isEnabled(feature74);
        boolean boolean76 = jSONWriter58.isEnabled(feature74);
        jSONWriter23.config(feature74, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter23);
        boolean boolean80 = jSONWriter79.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(symbolTable56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter0.writeFloat((float) (short) 0, decimalFormat10);
        java.util.Map map12 = null;
        jSONWriter0.write(map12);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        jSONWriter22.writeBool(false);
        jSONWriter22.writeBooleanNull();
        jSONWriter22.writeSymbol("$");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        jSONWriter29.close();
        java.text.DecimalFormat decimalFormat32 = null;
        jSONWriter29.writeFloat((float) 10, decimalFormat32);
        boolean boolean35 = jSONWriter29.isEnabled((long) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray44 = null;
        jSONWriter41.writeHex(byteArray44);
        boolean boolean46 = jSONWriter41.isRefDetect();
        jSONWriter41.writeNumberNull();
        jSONWriter41.writeFloat((java.lang.Float) 0.0f);
        java.time.LocalDateTime localDateTime50 = null;
        jSONWriter41.writeLocalDateTime(localDateTime50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter53.isWriteTypeInfo((java.lang.Object) boolean64, (java.lang.reflect.Type) wildcardClass76, 0L);
        jSONWriter37.checkAndWriteTypeName((java.lang.Object) localDateTime50, (java.lang.Class) wildcardClass76);
        boolean boolean81 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter29, (java.lang.Class) wildcardClass76, 0L);
        jSONWriter22.writeDoubleArray((double) (-1L), (double) (short) 100);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter1.writeBinary(byteArray27);
        int int33 = jSONWriter1.level();
        com.alibaba.fastjson2.JSONWriter.Path path34 = null;
        com.alibaba.fastjson2.JSONWriter.Path path36 = new com.alibaba.fastjson2.JSONWriter.Path(path34, "");
        com.alibaba.fastjson2.JSONWriter.Path path38 = new com.alibaba.fastjson2.JSONWriter.Path(path36, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path40 = new com.alibaba.fastjson2.JSONWriter.Path(path38, "hi!");
        java.lang.String str41 = path38.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        byte[] byteArray52 = new byte[] { (byte) -1 };
        boolean boolean54 = jSONWriter45.writeTypeName(byteArray52, 0L);
        java.util.UUID uUID55 = null;
        jSONWriter45.writeUUID(uUID55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = jSONWriter45.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter58 = context57.getPropertyFilter();
        long long59 = context57.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter60 = null;
        context57.setLabelFilter(labelFilter60);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider62 = context57.provider;
        boolean boolean63 = path38.equals((java.lang.Object) context57);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter64 = context57.getAfterFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        boolean[] booleanArray71 = new boolean[] { false, true, true, true };
        jSONWriter66.writeBool(booleanArray71);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter74);
        boolean boolean76 = jSONWriter74.utf16;
        long long78 = jSONWriter74.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable79 = jSONWriter74.getSymbolTable();
        boolean boolean80 = jSONWriter66.isIgnoreNoneSerializable((java.lang.Object) jSONWriter74);
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        jSONWriter74.writeEnum((java.lang.Enum) feature81);
        boolean boolean83 = context57.isEnabled(feature81);
        jSONWriter1.writeEnum((java.lang.Enum) feature81);
        java.io.Reader reader85 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader85);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1]" + "'", str41, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(context57);
        org.junit.Assert.assertNull(propertyFilter58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(afterFilter64);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L + "'", long78 == 100L);
        org.junit.Assert.assertNull(symbolTable79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        boolean boolean28 = context26.isEnabled(feature27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        jSONWriter29.writeSymbol("[1].hi\\![35]");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        jSONWriter34.close();
        jSONWriter34.writeSymbol("");
        jSONWriter34.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context39 = jSONWriter34.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter40 = null;
        context39.setPropertyPreFilter(propertyPreFilter40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) feature45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature45 };
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray47);
        context39.config(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context39);
        java.lang.String str53 = jSONWriter29.setPath((int) (short) 1, (java.lang.Object) jSONWriter52);
        double[] doubleArray56 = new double[] { 100.0d, 100.0f };
        java.text.DecimalFormat decimalFormat57 = null;
        jSONWriter29.writeDouble(doubleArray56, decimalFormat57);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(context39);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 100.0]");
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) feature20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray22);
        jSONWriter17.config(featureArray22);
        context13.config(featureArray22);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter27 = context13.getContextNameFilter();
        java.lang.String str28 = context13.getDateFormat();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(contextNameFilter27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray46 = null;
        jSONWriter45.writeDouble(doubleArray46);
        jSONWriter45.writeArrayNull();
        short[] shortArray52 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter45.writeInt16(shortArray52);
        jSONWriter3.writeInt16(shortArray52);
        java.time.Instant instant55 = null;
        jSONWriter3.writeInstant(instant55);
        boolean[] booleanArray62 = new boolean[] { true, false, false, true, true };
        jSONWriter3.writeBool(booleanArray62);
        boolean boolean64 = jSONWriter3.isWriteNulls();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = jSONWriter3.symbolTable;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[true, false, false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(symbolTable65);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        java.math.BigDecimal bigDecimal28 = null;
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter14.writeDecimal(bigDecimal28, (long) '#', decimalFormat30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter14.getContext();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context32.getProvider();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat32 = null;
        jSONWriter28.writeDouble(1.0d, decimalFormat32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean40 = jSONWriter35.writeTypeName(byteArray38, (long) 10);
        jSONWriter28.writeStringLatin1(byteArray38);
        jSONWriter28.writeFloat((java.lang.Float) 1.0f);
        int int44 = jSONWriter28.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray46 = null;
        jSONWriter45.writeDouble(doubleArray46);
        boolean boolean48 = jSONWriter45.utf16;
        java.math.BigDecimal bigDecimal49 = null;
        jSONWriter45.writeDecimal(bigDecimal49, 100L);
        boolean boolean52 = jSONWriter45.utf16;
        boolean boolean54 = jSONWriter45.isEnabled((long) '4');
        boolean boolean55 = jSONWriter28.containsReference((java.lang.Object) jSONWriter45);
        java.time.LocalDate localDate56 = null;
        jSONWriter28.writeLocalDate(localDate56);
        jSONWriter28.writeTypeName("[1].hi\\!");
        boolean boolean60 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter28);
        jSONWriter28.writeReference("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray64 = null;
        jSONWriter63.writeDouble(doubleArray64);
        boolean boolean66 = jSONWriter63.utf16;
        java.math.BigDecimal bigDecimal67 = null;
        jSONWriter63.writeDecimal(bigDecimal67, 100L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray70);
        jSONWriter71.close();
        jSONWriter71.writeSymbol("");
        jSONWriter71.writeBooleanNull();
        boolean boolean76 = jSONWriter71.isUTF8();
        double[] doubleArray80 = new double[] { 1L, (byte) -1, (byte) 1 };
        jSONWriter71.writeDouble(doubleArray80);
        java.text.DecimalFormat decimalFormat82 = null;
        jSONWriter63.writeDouble(doubleArray80, decimalFormat82);
        jSONWriter28.writeDouble(doubleArray80);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 1.0]");
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        long long13 = jSONWriter1.getFeatures((long) (short) 1);
        boolean boolean14 = jSONWriter1.isIgnoreNoneSerializable();
        boolean boolean15 = jSONWriter1.isUTF16();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter22 = null;
        context15.setValueFilter(valueFilter22);
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(nameFilter24);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        jSONWriter1.writeChar('a');
        boolean boolean36 = jSONWriter1.isIgnoreNoneSerializable();
        boolean boolean37 = jSONWriter1.utf8;
        int[] intArray38 = null;
        jSONWriter1.writeInt32(intArray38);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = null;
        context22.setPropertyFilter(propertyFilter23);
        boolean boolean25 = context22.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter26 = null;
        context22.setValueFilter(valueFilter26);
        java.lang.String str28 = context22.getDateFormat();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path6, 3);
        java.lang.String str9 = path6.toString();
        java.lang.String str10 = path6.toString();
        java.lang.String str11 = path6.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + ".\\[1\\]\\.hi\\\\\\!" + "'", str9, ".\\[1\\]\\.hi\\\\\\!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + ".\\[1\\]\\.hi\\\\\\!" + "'", str10, ".\\[1\\]\\.hi\\\\\\!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + ".\\[1\\]\\.hi\\\\\\!" + "'", str11, ".\\[1\\]\\.hi\\\\\\!");
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        char[] charArray13 = new char[] {};
        jSONWriter1.writeString(charArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray16 = null;
        jSONWriter15.writeDouble(doubleArray16);
        boolean boolean18 = jSONWriter15.utf16;
        java.math.BigDecimal bigDecimal19 = null;
        jSONWriter15.writeDecimal(bigDecimal19, 100L);
        jSONWriter15.writeReference("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        jSONWriter26.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter43.writeFloat((float) 10, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean54 = jSONWriter49.writeTypeName(byteArray52, (long) 10);
        boolean boolean56 = jSONWriter43.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter43.writeInt16((short) (byte) 100);
        boolean boolean59 = jSONWriter43.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter61);
        long long63 = jSONWriter61.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter61.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass76, (long) (short) 10);
        boolean boolean80 = jSONWriter26.isWriteTypeInfo((java.lang.Object) boolean59, (java.lang.reflect.Type) wildcardClass76, (long) (byte) -1);
        boolean boolean82 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter15, (java.lang.reflect.Type) wildcardClass76, (long) 0);
        long long84 = jSONWriter1.getFeatures((long) (short) 1);
        java.util.UUID uUID85 = null;
        jSONWriter1.writeUUID(uUID85);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        long long13 = jSONWriter3.getFeatures();
        java.time.LocalDate localDate14 = null;
        jSONWriter3.writeLocalDate(localDate14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        byte[] byteArray30 = null;
        jSONWriter20.writeBinary(byteArray30);
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class33 = null;
        jSONWriter20.checkAndWriteTypeName((java.lang.Object) feature32, class33);
        jSONWriter3.popPath((java.lang.Object) feature32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        jSONWriter37.close();
        jSONWriter37.writeSymbol("");
        jSONWriter37.writeBooleanNull();
        boolean boolean43 = jSONWriter37.isEnabled(10L);
        jSONWriter37.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter47);
        boolean boolean49 = jSONWriter47.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter51.writeDouble(1.0d, decimalFormat55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean63 = jSONWriter58.writeTypeName(byteArray61, (long) 10);
        jSONWriter51.writeStringLatin1(byteArray61);
        jSONWriter47.writeStringLatin1(byteArray61);
        boolean boolean66 = jSONWriter47.isUTF16();
        java.lang.String str67 = jSONWriter37.setPath(5, (java.lang.Object) boolean66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray69 = null;
        jSONWriter68.writeDouble(doubleArray69);
        boolean boolean71 = jSONWriter68.utf16;
        java.math.BigDecimal bigDecimal72 = null;
        jSONWriter68.writeDecimal(bigDecimal72, 100L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        jSONWriter76.close();
        jSONWriter76.writeSymbol("");
        jSONWriter76.writeBooleanNull();
        boolean boolean81 = jSONWriter76.isUTF8();
        double[] doubleArray85 = new double[] { 1L, (byte) -1, (byte) 1 };
        jSONWriter76.writeDouble(doubleArray85);
        java.text.DecimalFormat decimalFormat87 = null;
        jSONWriter68.writeDouble(doubleArray85, decimalFormat87);
        java.text.DecimalFormat decimalFormat89 = null;
        jSONWriter37.writeDouble(doubleArray85, decimalFormat89);
        java.text.DecimalFormat decimalFormat91 = null;
        jSONWriter3.writeDouble(doubleArray85, decimalFormat91);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 1.0]");
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        int[] intArray4 = new int[] { (short) -1 };
        jSONWriter2.writeInt32(intArray4);
        boolean boolean6 = jSONWriter2.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        boolean boolean25 = jSONWriter23.hasFilter((long) 0);
        jSONWriter23.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) -1 };
        boolean boolean39 = jSONWriter30.writeTypeName(byteArray37, 0L);
        jSONWriter23.writeBinary(byteArray37);
        jSONWriter2.writeNameRaw(byteArray37, (long) (short) 1);
        boolean boolean43 = jSONWriter2.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        jSONWriter45.close();
        jSONWriter45.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray50 = null;
        jSONWriter49.writeDouble(doubleArray50);
        jSONWriter49.writeArrayNull();
        short[] shortArray56 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter49.writeInt16(shortArray56);
        jSONWriter45.writeInt16(shortArray56);
        jSONWriter2.writeInt16(shortArray56);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[0, 0, 100]");
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.lang.reflect.Type type3 = null;
        boolean boolean5 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (byte) 1, type3, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean19 = jSONWriter14.writeTypeName(byteArray17, (long) 10);
        jSONWriter7.writeStringLatin1(byteArray17);
        jSONWriter1.writeNameRaw(byteArray17);
        boolean boolean23 = jSONWriter1.isEnabled((long) 5);
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter1.context;
        java.time.ZonedDateTime zonedDateTime25 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime25);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context24);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        boolean boolean8 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Path path9 = null;
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path9, "");
        com.alibaba.fastjson2.JSONWriter.Path path13 = new com.alibaba.fastjson2.JSONWriter.Path(path11, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path15 = new com.alibaba.fastjson2.JSONWriter.Path(path13, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path17 = new com.alibaba.fastjson2.JSONWriter.Path(path13, 0);
        boolean boolean18 = jSONWriter1.isWriteTypeInfo((java.lang.Object) path13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter20);
        boolean boolean22 = jSONWriter20.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter24.writeDouble(1.0d, decimalFormat28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean36 = jSONWriter31.writeTypeName(byteArray34, (long) 10);
        jSONWriter24.writeStringLatin1(byteArray34);
        jSONWriter20.writeStringLatin1(byteArray34);
        jSONWriter1.writeRaw(byteArray34);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter40 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        java.util.UUID uUID54 = null;
        jSONWriter44.writeUUID(uUID54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = jSONWriter44.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context56.config(feature57, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean63 = jSONWriter61.isRefDetect((java.lang.Object) feature62);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature62 };
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray64);
        context56.config(featureArray64);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter68 = context56.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter69 = null;
        context56.setContextNameFilter(contextNameFilter69);
        context56.setDateFormat("[1].hi\\![35]");
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean74 = context56.isEnabled(feature73);
        java.lang.String str75 = jSONWriter1.setPath(fieldWriter40, (java.lang.Object) boolean74);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(context56);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNull(contextValueFilter68);
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter19 = null;
        context15.setPropertyPreFilter(propertyPreFilter19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = null;
        jSONWriter22.writeDouble(doubleArray23);
        jSONWriter22.writeArrayNull();
        jSONWriter22.writeSymbol((int) (byte) 10);
        jSONWriter22.close();
        jSONWriter22.writeTypeName("$");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) feature33);
        com.alibaba.fastjson2.SymbolTable symbolTable35 = jSONWriter32.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray40 = null;
        jSONWriter37.writeHex(byteArray40);
        boolean boolean42 = jSONWriter37.isRefDetect();
        jSONWriter37.writeNumberNull();
        jSONWriter37.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean47 = jSONWriter37.isEnabled(feature46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter49);
        long long51 = jSONWriter49.getFeatures();
        java.time.LocalDateTime localDateTime52 = null;
        jSONWriter49.writeLocalDateTime(localDateTime52);
        byte[] byteArray54 = jSONWriter49.getBytes();
        jSONWriter37.writeStringLatin1(byteArray54);
        jSONWriter32.writeNameRaw(byteArray54, (long) (byte) 100);
        jSONWriter22.writeBinary(byteArray54);
        com.alibaba.fastjson2.SymbolTable symbolTable59 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class65 = null;
        boolean boolean67 = jSONWriter60.isWriteTypeInfo((java.lang.Object) jSONWriter62, class65, (long) ' ');
        byte[] byteArray69 = new byte[] { (byte) 100 };
        boolean boolean71 = jSONWriter60.writeTypeName(byteArray69, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        int[] intArray77 = new int[] { (short) -1 };
        jSONWriter75.writeInt32(intArray77);
        java.lang.String str79 = jSONWriter60.setPath("hi!", (java.lang.Object) intArray77);
        jSONWriter22.writeInt32(intArray77);
        jSONWriter21.writeInt32(intArray77);
        boolean boolean82 = jSONWriter21.isWriteNulls();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(symbolTable35);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        char[] charArray21 = new char[] {};
        jSONWriter15.writeString(charArray21);
        jSONWriter1.writeString(charArray21, (int) (byte) -1, 0, true);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter1.getContext();
        jSONWriter1.writeInt32(12);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(context27);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context21.getContextValueFilter();
        boolean boolean23 = context21.isDateFormatISO8601();
        boolean boolean25 = context21.isEnabled(137438953482L);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context21.setLabelFilter(labelFilter26);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        java.time.Instant instant9 = null;
        jSONWriter1.writeInstant(instant9);
        jSONWriter1.writeMillis((long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.of(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        boolean boolean19 = jSONWriter18.isRefDetect();
        java.lang.String str22 = jSONWriter18.setPath("hi!", (java.lang.Object) 1);
        jSONWriter18.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter26);
        long long28 = jSONWriter26.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat35 = null;
        jSONWriter31.writeDouble(1.0d, decimalFormat35);
        boolean boolean38 = jSONWriter31.removeReference((java.lang.Object) (short) -1);
        jSONWriter31.writeArrayNull();
        long long40 = jSONWriter31.getFeatures();
        java.lang.Class<?> wildcardClass41 = jSONWriter31.getClass();
        boolean boolean43 = jSONWriter26.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass41, (long) (short) 10);
        int[] intArray50 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter26.writeInt32(intArray50);
        double[] doubleArray56 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter26.writeDouble(doubleArray56);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter18.writeDouble(doubleArray56, decimalFormat58);
        jSONWriter16.writeDouble(doubleArray56);
        jSONWriter1.writeDouble(doubleArray56);
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Context context63 = jSONWriter1.context;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(context63);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.util.Map map4 = null;
        jSONWriter0.write(map4);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter0.writeDouble((double) 0, decimalFormat7);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.flushTo(writer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        java.lang.String str14 = jSONWriter1.setPath("hi!", (java.lang.Object) feature13);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter1.writeDouble((double) 100, decimalFormat16);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        jSONWriter1.writeName("hi!");
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        boolean boolean12 = jSONWriter11.isRefDetect();
        jSONWriter11.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter20 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        boolean[] booleanArray27 = new boolean[] { false, true, true, true };
        jSONWriter22.writeBool(booleanArray27);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        jSONWriter22.writeBinary(byteArray39);
        java.lang.String str43 = jSONWriter11.setPath(fieldWriter20, (java.lang.Object) jSONWriter22);
        byte[] byteArray44 = jSONWriter11.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal49 = null;
        jSONWriter46.writeDecimal(bigDecimal49);
        java.lang.Object obj51 = null;
        java.lang.Class class52 = null;
        jSONWriter46.checkAndWriteTypeName(obj51, class52);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean55 = jSONWriter46.isEnabled(feature54);
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class62 = null;
        boolean boolean64 = jSONWriter57.isWriteTypeInfo((java.lang.Object) jSONWriter59, class62, (long) ' ');
        boolean boolean66 = jSONWriter57.isEnabled((long) ' ');
        jSONWriter57.writeString("hi!");
        char[] charArray69 = new char[] {};
        jSONWriter57.writeString(charArray69);
        jSONWriter46.writeString(charArray69);
        jSONWriter11.writeString(charArray69, 1, (int) (byte) -1);
        jSONWriter1.writeString(charArray69);
        jSONWriter1.writeChar('4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        boolean boolean82 = jSONWriter80.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray83 = null;
        jSONWriter80.writeHex(byteArray83);
        boolean boolean85 = jSONWriter80.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature feature86 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        jSONWriter80.writeEnum((java.lang.Enum) feature86);
        com.alibaba.fastjson2.JSONWriter jSONWriter88 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter80);
        com.alibaba.fastjson2.JSONWriter jSONWriter89 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter80);
        java.lang.String str90 = jSONWriter1.setPath(".hi\\!", (java.lang.Object) jSONWriter80);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-88, -1, -1, 100, 100, -1, 10, 32, 0]");
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[]");
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + feature86 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature86.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertNotNull(jSONWriter88);
        org.junit.Assert.assertNotNull(jSONWriter89);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter18.writeInt16((short) (byte) 100);
        boolean boolean34 = jSONWriter18.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        long long38 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter41.writeDouble(1.0d, decimalFormat45);
        boolean boolean48 = jSONWriter41.removeReference((java.lang.Object) (short) -1);
        jSONWriter41.writeArrayNull();
        long long50 = jSONWriter41.getFeatures();
        java.lang.Class<?> wildcardClass51 = jSONWriter41.getClass();
        boolean boolean53 = jSONWriter36.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass51, (long) (short) 10);
        boolean boolean55 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean34, (java.lang.reflect.Type) wildcardClass51, (long) (byte) -1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter56 = null;
        com.alibaba.fastjson2.JSONWriter.Path path57 = null;
        com.alibaba.fastjson2.JSONWriter.Path path59 = new com.alibaba.fastjson2.JSONWriter.Path(path57, "");
        com.alibaba.fastjson2.JSONWriter.Path path61 = new com.alibaba.fastjson2.JSONWriter.Path(path59, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path63 = new com.alibaba.fastjson2.JSONWriter.Path(path61, "hi!");
        java.lang.String str64 = path61.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        boolean boolean70 = jSONWriter68.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class71 = null;
        boolean boolean73 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter68, class71, (long) ' ');
        byte[] byteArray75 = new byte[] { (byte) -1 };
        boolean boolean77 = jSONWriter68.writeTypeName(byteArray75, 0L);
        java.util.UUID uUID78 = null;
        jSONWriter68.writeUUID(uUID78);
        com.alibaba.fastjson2.JSONWriter.Context context80 = jSONWriter68.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter81 = context80.getPropertyFilter();
        long long82 = context80.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter83 = null;
        context80.setLabelFilter(labelFilter83);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider85 = context80.provider;
        boolean boolean86 = path61.equals((java.lang.Object) context80);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter87 = context80.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter88 = null;
        context80.setNameFilter(nameFilter88);
        java.lang.String str90 = jSONWriter1.setPath(fieldWriter56, (java.lang.Object) context80);
        boolean boolean91 = jSONWriter1.isUTF8();
        jSONWriter1.writeNumberNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[1]" + "'", str64, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(context80);
        org.junit.Assert.assertNull(propertyFilter81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(afterFilter87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter0.getContext();
        java.lang.Class<?> wildcardClass10 = context9.getClass();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter20 = null;
        context19.setAfterFilter(afterFilter20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = null;
        context19.setContextValueFilter(contextValueFilter22);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = context19.getLabelFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter25 = context19.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(labelFilter24);
        org.junit.Assert.assertNull(afterFilter25);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        context15.setDateFormat("hi!");
        java.time.ZoneId zoneId19 = null;
        context15.setZoneId(zoneId19);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider21 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        jSONWriter24.close();
        jSONWriter24.writeSymbol("");
        jSONWriter24.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter24.context;
        jSONWriter24.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        boolean boolean34 = jSONWriter24.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter36.isWriteTypeInfo((java.lang.Object) jSONWriter38, class41, (long) ' ');
        byte[] byteArray45 = new byte[] { (byte) -1 };
        boolean boolean47 = jSONWriter38.writeTypeName(byteArray45, 0L);
        java.util.UUID uUID48 = null;
        jSONWriter38.writeUUID(uUID48);
        com.alibaba.fastjson2.JSONWriter.Context context50 = jSONWriter38.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter51 = context50.getPropertyFilter();
        long long52 = context50.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter53 = null;
        context50.setLabelFilter(labelFilter53);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider55 = context50.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter56 = null;
        context50.setPropertyPreFilter(propertyPreFilter56);
        com.alibaba.fastjson2.filter.NameFilter nameFilter58 = null;
        context50.setNameFilter(nameFilter58);
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        boolean boolean61 = context50.isEnabled(feature60);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider62 = context50.getProvider();
        com.alibaba.fastjson2.SymbolTable symbolTable63 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable63);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class69 = null;
        boolean boolean71 = jSONWriter64.isWriteTypeInfo((java.lang.Object) jSONWriter66, class69, (long) ' ');
        byte[] byteArray73 = new byte[] { (byte) -1 };
        boolean boolean75 = jSONWriter66.writeTypeName(byteArray73, 0L);
        java.util.UUID uUID76 = null;
        jSONWriter66.writeUUID(uUID76);
        com.alibaba.fastjson2.JSONWriter.Context context78 = jSONWriter66.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context78);
        java.time.format.DateTimeFormatter dateTimeFormatter80 = context78.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider81 = context78.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray82 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context84 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray82);
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray82);
        com.alibaba.fastjson2.JSONWriter jSONWriter86 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider81, featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context87 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider62, featureArray82);
        boolean boolean88 = jSONWriter24.isRefDetect((java.lang.Object) featureArray82);
        com.alibaba.fastjson2.JSONWriter jSONWriter89 = com.alibaba.fastjson2.JSONWriter.of(featureArray82);
        com.alibaba.fastjson2.JSONWriter jSONWriter90 = com.alibaba.fastjson2.JSONWriter.of(featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context91 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider21, featureArray82);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(objectWriterProvider21);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(context50);
        org.junit.Assert.assertNull(propertyFilter51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider55);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider62);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(context78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(objectWriterProvider81);
        org.junit.Assert.assertNotNull(featureArray82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNotNull(jSONWriter86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jSONWriter89);
        org.junit.Assert.assertNotNull(jSONWriter90);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter18 = context15.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter21);
        long long23 = jSONWriter21.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter26.writeDouble(1.0d, decimalFormat30);
        boolean boolean33 = jSONWriter26.removeReference((java.lang.Object) (short) -1);
        jSONWriter26.writeArrayNull();
        long long35 = jSONWriter26.getFeatures();
        java.lang.Class<?> wildcardClass36 = jSONWriter26.getClass();
        boolean boolean38 = jSONWriter21.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass36, (long) (short) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray40 = null;
        jSONWriter39.writeDouble(doubleArray40);
        boolean boolean42 = jSONWriter39.utf16;
        java.math.BigDecimal bigDecimal43 = null;
        jSONWriter39.writeDecimal(bigDecimal43, 100L);
        boolean boolean46 = jSONWriter39.utf16;
        java.lang.Object obj47 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter49.writeDouble(1.0d, decimalFormat53);
        boolean boolean56 = jSONWriter49.removeReference((java.lang.Object) (short) -1);
        jSONWriter49.writeArrayNull();
        long long58 = jSONWriter49.getFeatures();
        java.lang.Class<?> wildcardClass59 = jSONWriter49.getClass();
        boolean boolean61 = jSONWriter39.isWriteTypeInfo(obj47, (java.lang.Class) wildcardClass59, (long) (short) 0);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter62 = jSONWriter19.getObjectWriter((java.lang.reflect.Type) wildcardClass36, (java.lang.Class) wildcardClass59);
        jSONWriter19.writeDateTime14(4, (int) (byte) 100, (int) 'a', 0, 4, (int) (short) 100);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(nameFilter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objectWriter62);
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = null;
        context15.setAfterFilter(afterFilter18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.of(context15);
        boolean boolean21 = jSONWriter20.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) '#');
        jSONWriter1.startArray(0);
        jSONWriter1.writeInt32((int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter1.context;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context29.getProvider();
        long long31 = context29.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        long long13 = jSONWriter1.getFeatures((long) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        boolean boolean16 = jSONWriter15.isRefDetect();
        jSONWriter15.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter24 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        boolean[] booleanArray31 = new boolean[] { false, true, true, true };
        jSONWriter26.writeBool(booleanArray31);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        byte[] byteArray43 = new byte[] { (byte) -1 };
        boolean boolean45 = jSONWriter36.writeTypeName(byteArray43, 0L);
        jSONWriter26.writeBinary(byteArray43);
        java.lang.String str47 = jSONWriter15.setPath(fieldWriter24, (java.lang.Object) jSONWriter26);
        boolean boolean49 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter26, (long) (byte) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = jSONWriter26.getSymbolTable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(symbolTable50);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        char[] charArray13 = new char[] {};
        jSONWriter1.writeString(charArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray16 = null;
        jSONWriter15.writeDouble(doubleArray16);
        boolean boolean18 = jSONWriter15.utf16;
        java.math.BigDecimal bigDecimal19 = null;
        jSONWriter15.writeDecimal(bigDecimal19, 100L);
        jSONWriter15.writeReference("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        jSONWriter26.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter43.writeFloat((float) 10, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean54 = jSONWriter49.writeTypeName(byteArray52, (long) 10);
        boolean boolean56 = jSONWriter43.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter43.writeInt16((short) (byte) 100);
        boolean boolean59 = jSONWriter43.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter61);
        long long63 = jSONWriter61.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter61.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass76, (long) (short) 10);
        boolean boolean80 = jSONWriter26.isWriteTypeInfo((java.lang.Object) boolean59, (java.lang.reflect.Type) wildcardClass76, (long) (byte) -1);
        boolean boolean82 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter15, (java.lang.reflect.Type) wildcardClass76, (long) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        java.time.LocalDate localDate84 = null;
        jSONWriter1.writeLocalDate(localDate84);
        java.text.DecimalFormat decimalFormat87 = null;
        jSONWriter1.writeDouble((double) 0.0f, decimalFormat87);
        com.alibaba.fastjson2.SymbolTable symbolTable89 = jSONWriter1.symbolTable;
        java.math.BigDecimal bigDecimal90 = null;
        jSONWriter1.writeDecimal(bigDecimal90, 10L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNull(symbolTable89);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        java.util.Map map23 = null;
        jSONWriter0.write(map23);
        jSONWriter0.writeRaw((byte) 100);
        jSONWriter0.writeBool(false);
        boolean boolean29 = jSONWriter0.hasFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) 100 };
        boolean boolean42 = jSONWriter31.writeTypeName(byteArray40, (long) (-1));
        jSONWriter31.writeString("");
        long[] longArray46 = new long[] { (short) -1 };
        jSONWriter31.writeInt64(longArray46);
        jSONWriter0.writeInt64(longArray46);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[-1]");
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat33 = null;
        jSONWriter29.writeDouble(1.0d, decimalFormat33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean41 = jSONWriter36.writeTypeName(byteArray39, (long) 10);
        jSONWriter29.writeStringLatin1(byteArray39);
        boolean boolean44 = jSONWriter1.writeTypeName(byteArray39, (long) 'a');
        boolean boolean45 = jSONWriter1.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.lang.Object obj6 = null;
        java.lang.Class class7 = null;
        jSONWriter1.checkAndWriteTypeName(obj6, class7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean10 = jSONWriter1.isEnabled(feature9);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        jSONWriter1.writeInt16((short) (byte) 1);
        jSONWriter1.writeMillis((long) 5);
        jSONWriter1.endObject();
        jSONWriter1.writeTypeName("");
        com.alibaba.fastjson2.SymbolTable symbolTable19 = jSONWriter1.symbolTable;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertNull(symbolTable19);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.util.Map map15 = null;
        jSONWriter3.write(map15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        java.time.LocalTime localTime19 = null;
        jSONWriter18.writeLocalTime(localTime19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        jSONWriter18.writeBinary(byteArray31);
        jSONWriter3.writeBinary(byteArray31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray40 = null;
        jSONWriter37.writeHex(byteArray40);
        boolean boolean42 = jSONWriter37.isRefDetect();
        jSONWriter37.writeNumberNull();
        jSONWriter37.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean47 = jSONWriter37.isEnabled(feature46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter49);
        long long51 = jSONWriter49.getFeatures();
        java.time.LocalDateTime localDateTime52 = null;
        jSONWriter49.writeLocalDateTime(localDateTime52);
        byte[] byteArray54 = jSONWriter49.getBytes();
        jSONWriter37.writeStringLatin1(byteArray54);
        jSONWriter3.writeBinary(byteArray54);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter3.writeFloat((float) (byte) 0, decimalFormat58);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeRaw('4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-81]");
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context26.getPropertyFilter();
        long long28 = context26.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter29 = null;
        context26.setLabelFilter(labelFilter29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context26.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        jSONWriter32.config(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider31, featureArray37);
        boolean boolean42 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) jSONWriter41);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDoubleArray((double) 7, (double) 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.util.Map map4 = null;
        jSONWriter0.write(map4);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter0.writeDouble((double) 0, decimalFormat7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        boolean boolean12 = jSONWriter10.utf16;
        jSONWriter10.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray16 = null;
        jSONWriter15.writeDouble(doubleArray16);
        jSONWriter15.writeArrayNull();
        short[] shortArray22 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter15.writeInt16(shortArray22);
        java.lang.String str24 = jSONWriter10.setPath(fieldWriter14, (java.lang.Object) jSONWriter15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        java.lang.reflect.Type type28 = null;
        boolean boolean30 = jSONWriter26.isWriteTypeInfo((java.lang.Object) (byte) 1, type28, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        jSONWriter32.close();
        jSONWriter32.writeSymbol("");
        jSONWriter32.writeBooleanNull();
        boolean boolean37 = jSONWriter32.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter39);
        long long41 = jSONWriter39.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat48 = null;
        jSONWriter44.writeDouble(1.0d, decimalFormat48);
        boolean boolean51 = jSONWriter44.removeReference((java.lang.Object) (short) -1);
        jSONWriter44.writeArrayNull();
        long long53 = jSONWriter44.getFeatures();
        java.lang.Class<?> wildcardClass54 = jSONWriter44.getClass();
        boolean boolean56 = jSONWriter39.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass54, (long) (short) 10);
        jSONWriter26.checkAndWriteTypeName((java.lang.Object) jSONWriter32, (java.lang.Class) wildcardClass54);
        jSONWriter32.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        jSONWriter61.close();
        jSONWriter61.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray66 = null;
        jSONWriter65.writeDouble(doubleArray66);
        jSONWriter65.writeArrayNull();
        short[] shortArray72 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter65.writeInt16(shortArray72);
        jSONWriter61.writeInt16(shortArray72);
        jSONWriter32.writeInt16(shortArray72);
        jSONWriter15.writeInt16(shortArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter15);
        jSONWriter77.writeSymbol("hi!");
        boolean boolean80 = jSONWriter77.utf16;
        boolean boolean81 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) boolean80);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[0, 0, 100]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context41);
        java.time.format.DateTimeFormatter dateTimeFormatter43 = context41.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider44 = context41.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) feature47);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature47 };
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider44, featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray49);
        float[] floatArray53 = null;
        jSONWriter52.writeFloat(floatArray53);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context59 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.of(context59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        boolean boolean64 = jSONWriter62.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal65 = null;
        jSONWriter62.writeDecimal(bigDecimal65);
        boolean boolean68 = jSONWriter62.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter62.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj73 = null;
        jSONWriter62.startArray(obj73, (-1));
        jSONWriter62.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray85 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        jSONWriter62.writeString((java.util.List<java.lang.String>) strList86);
        jSONWriter60.writeString((java.util.List<java.lang.String>) strList86);
        jSONWriter52.writeString((java.util.List<java.lang.String>) strList86);
        java.math.BigInteger bigInteger91 = null;
        jSONWriter52.writeBigInt(bigInteger91, (long) ' ');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(objectWriterProvider44);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean1 = jSONWriter0.useSingleQuote;
        jSONWriter0.writeRaw(' ');
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        boolean boolean6 = jSONWriter5.isRefDetect();
        java.lang.String str9 = jSONWriter5.setPath("hi!", (java.lang.Object) 1);
        jSONWriter5.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        long long15 = jSONWriter13.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter18.writeDouble(1.0d, decimalFormat22);
        boolean boolean25 = jSONWriter18.removeReference((java.lang.Object) (short) -1);
        jSONWriter18.writeArrayNull();
        long long27 = jSONWriter18.getFeatures();
        java.lang.Class<?> wildcardClass28 = jSONWriter18.getClass();
        boolean boolean30 = jSONWriter13.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass28, (long) (short) 10);
        int[] intArray37 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter13.writeInt32(intArray37);
        double[] doubleArray43 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter13.writeDouble(doubleArray43);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter5.writeDouble(doubleArray43, decimalFormat45);
        jSONWriter0.writeDouble(doubleArray43);
        boolean boolean48 = jSONWriter0.isUTF16();
        jSONWriter0.writeComma();
        jSONWriter0.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter28 = null;
        context15.setLabelFilter(labelFilter28);
        boolean boolean30 = context15.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter18 = context15.getContextValueFilter();
        boolean boolean19 = context15.isDateFormatMillis();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter20 = null;
        context15.setValueFilter(valueFilter20);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter22 = null;
        context15.setValueFilter(valueFilter22);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNull(contextValueFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        jSONWriter9.close();
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter9.writeFloat((float) 10, decimalFormat12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean20 = jSONWriter15.writeTypeName(byteArray18, (long) 10);
        boolean boolean22 = jSONWriter9.writeTypeName(byteArray18, (long) (byte) 100);
        jSONWriter9.writeInt16((short) (byte) 100);
        boolean boolean25 = jSONWriter9.hasFilter();
        java.nio.charset.Charset charset26 = jSONWriter9.getCharset();
        boolean boolean28 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter9, (long) 10);
        jSONWriter1.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        jSONWriter32.close();
        jSONWriter32.writeSymbol("");
        jSONWriter32.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter32.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter38 = null;
        context37.setPropertyPreFilter(propertyPreFilter38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) feature43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature43 };
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray45);
        context37.config(featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray45);
        jSONWriter1.config(featureArray45);
        jSONWriter1.writeFloat((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter50);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        jSONWriter20.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter23.writeDouble(1.0d, decimalFormat27);
        boolean boolean30 = jSONWriter23.removeReference((java.lang.Object) (short) -1);
        jSONWriter23.writeArrayNull();
        long long32 = jSONWriter23.getFeatures();
        java.lang.Class<?> wildcardClass33 = jSONWriter23.getClass();
        boolean boolean34 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter20, (java.lang.reflect.Type) wildcardClass33);
        jSONWriter1.writeMillis((long) '#');
        java.math.BigInteger bigInteger37 = null;
        jSONWriter1.writeBigInt(bigInteger37);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray21 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter14.writeRaw(charArray21);
        jSONWriter3.writeString(charArray21, 100, (int) (short) -1, true);
        java.math.BigInteger bigInteger27 = null;
        jSONWriter3.writeBigInt(bigInteger27, (long) 12);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        jSONWriter18.writeReference(".\\[1\\]\\[0\\]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.lang.reflect.Type type3 = null;
        boolean boolean5 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (byte) 1, type3, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        jSONWriter7.close();
        jSONWriter7.writeSymbol("");
        jSONWriter7.writeBooleanNull();
        boolean boolean12 = jSONWriter7.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter14);
        long long16 = jSONWriter14.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat23 = null;
        jSONWriter19.writeDouble(1.0d, decimalFormat23);
        boolean boolean26 = jSONWriter19.removeReference((java.lang.Object) (short) -1);
        jSONWriter19.writeArrayNull();
        long long28 = jSONWriter19.getFeatures();
        java.lang.Class<?> wildcardClass29 = jSONWriter19.getClass();
        boolean boolean31 = jSONWriter14.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass29, (long) (short) 10);
        jSONWriter1.checkAndWriteTypeName((java.lang.Object) jSONWriter7, (java.lang.Class) wildcardClass29);
        jSONWriter7.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        jSONWriter36.close();
        jSONWriter36.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray41 = null;
        jSONWriter40.writeDouble(doubleArray41);
        jSONWriter40.writeArrayNull();
        short[] shortArray47 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter40.writeInt16(shortArray47);
        jSONWriter36.writeInt16(shortArray47);
        jSONWriter7.writeInt16(shortArray47);
        boolean boolean51 = jSONWriter7.isRefDetect();
        java.io.OutputStream outputStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int53 = jSONWriter7.flushTo(outputStream52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter6.writeDouble(1.0d, decimalFormat10);
        boolean boolean13 = jSONWriter6.removeReference((java.lang.Object) (short) -1);
        jSONWriter6.writeArrayNull();
        long long15 = jSONWriter6.getFeatures();
        java.lang.Class<?> wildcardClass16 = jSONWriter6.getClass();
        boolean boolean18 = jSONWriter1.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass16, (long) (short) 10);
        int[] intArray25 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter1.writeInt32(intArray25);
        com.alibaba.fastjson2.JSONObject jSONObject27 = null;
        jSONWriter1.write(jSONObject27);
        long long30 = jSONWriter1.getFeatures((long) (short) 10);
        jSONWriter1.writeNull();
        java.math.BigDecimal bigDecimal32 = null;
        jSONWriter1.writeDecimal(bigDecimal32);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path1 = path0.parent;
        com.alibaba.fastjson2.JSONWriter.Path path3 = new com.alibaba.fastjson2.JSONWriter.Path(path1, (int) (byte) -1);
        com.alibaba.fastjson2.JSONWriter.Path path5 = new com.alibaba.fastjson2.JSONWriter.Path(path3, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path6 = path5.parent;
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertNull(path1);
        org.junit.Assert.assertNotNull(path6);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        byte[] byteArray14 = new byte[] { (byte) -1 };
        boolean boolean16 = jSONWriter7.writeTypeName(byteArray14, 0L);
        jSONWriter1.writeBinary(byteArray14);
        jSONWriter1.writeArrayNull();
        boolean boolean19 = jSONWriter1.utf8;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        long long20 = context15.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString;
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        java.util.UUID uUID35 = null;
        jSONWriter25.writeUUID(uUID35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter25.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context37);
        boolean boolean40 = jSONWriter38.hasFilter((long) 0);
        jSONWriter38.endArray();
        jSONWriter38.writeString("");
        boolean boolean44 = jSONWriter38.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) feature47);
        jSONWriter38.writeEnum((java.lang.Enum) feature47);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter53.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter66 = context65.getPropertyFilter();
        long long67 = context65.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter68 = null;
        context65.setLabelFilter(labelFilter68);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context65, symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Context context72 = jSONWriter71.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter73 = null;
        context72.setPropertyFilter(propertyFilter73);
        boolean boolean75 = context72.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean77 = jSONWriter76.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean79 = jSONWriter76.isEnabled(feature78);
        boolean boolean80 = context72.isEnabled(feature78);
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature82 = com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray83 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature47, feature78, feature81, feature82 };
        context15.config(featureArray83);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter85 = context15.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString));
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(context65);
        org.junit.Assert.assertNull(propertyFilter66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(context72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature82 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii + "'", feature82.equals(com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii));
        org.junit.Assert.assertNotNull(featureArray83);
        org.junit.Assert.assertNull(afterFilter85);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter9);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        jSONWriter0.writeFloat((java.lang.Float) 1.0f);
        boolean boolean14 = jSONWriter0.useSingleQuote;
        java.lang.Class class15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson2.writer.ObjectWriter objectWriter16 = jSONWriter0.getObjectWriter(class15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray0);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter3.symbolTable;
        boolean boolean5 = jSONWriter3.isUTF16();
        jSONWriter3.writeArrayNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNull(symbolTable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.utf16;
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) feature28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider25, featureArray30);
        jSONWriter1.config(featureArray30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) feature36);
        boolean boolean38 = jSONWriter35.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Path path39 = null;
        com.alibaba.fastjson2.JSONWriter.Path path41 = new com.alibaba.fastjson2.JSONWriter.Path(path39, "");
        com.alibaba.fastjson2.JSONWriter.Path path43 = new com.alibaba.fastjson2.JSONWriter.Path(path41, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path45 = new com.alibaba.fastjson2.JSONWriter.Path(path41, "[1].hi\\!");
        jSONWriter35.writeAny((java.lang.Object) "[1].hi\\!");
        java.time.LocalTime localTime47 = null;
        jSONWriter35.writeLocalTime(localTime47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean50 = jSONWriter49.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray58 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter51.writeRaw(charArray58);
        jSONWriter49.writeString(charArray58);
        jSONWriter35.writeString(charArray58);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeNameRaw(charArray58, 2, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[a, 4, #, 4, 4, a]");
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        com.alibaba.fastjson2.JSONWriter.Context context36 = jSONWriter24.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter37 = context36.getPropertyFilter();
        long long38 = context36.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter39 = null;
        context36.setLabelFilter(labelFilter39);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider41 = context36.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter42 = null;
        context36.setPropertyPreFilter(propertyPreFilter42);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter44 = null;
        context36.setPropertyPreFilter(propertyPreFilter44);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter46 = null;
        context36.setLabelFilter(labelFilter46);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider48 = context36.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter50);
        long long52 = jSONWriter50.getFeatures();
        java.time.LocalDateTime localDateTime53 = null;
        jSONWriter50.writeLocalDateTime(localDateTime53);
        byte[] byteArray55 = jSONWriter50.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context58 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context59 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray56);
        jSONWriter50.config(featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.of(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider48, featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray56);
        boolean boolean64 = jSONWriter63.useSingleQuote;
        jSONWriter63.writeInt16((short) (byte) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        boolean boolean72 = jSONWriter70.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class73 = null;
        boolean boolean75 = jSONWriter68.isWriteTypeInfo((java.lang.Object) jSONWriter70, class73, (long) ' ');
        byte[] byteArray77 = new byte[] { (byte) -1 };
        boolean boolean79 = jSONWriter70.writeTypeName(byteArray77, 0L);
        java.util.UUID uUID80 = null;
        jSONWriter70.writeUUID(uUID80);
        java.time.Instant instant82 = null;
        jSONWriter70.writeInstant(instant82);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray84 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray84);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean90 = jSONWriter85.writeTypeName(byteArray88, (long) 10);
        jSONWriter70.writeRaw(byteArray88);
        jSONWriter63.writeBinary(byteArray88);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(context36);
        org.junit.Assert.assertNull(propertyFilter37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider41);
        org.junit.Assert.assertNotNull(objectWriterProvider48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-81]");
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(featureArray84);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = null;
        context15.setBeforeFilter(beforeFilter25);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter27 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        jSONWriter30.close();
        jSONWriter30.writeSymbol("");
        jSONWriter30.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter30.context;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter36 = null;
        context35.setPropertyPreFilter(propertyPreFilter36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) feature41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41 };
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray43);
        com.alibaba.fastjson2.JSONWriter.Context context46 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray43);
        context35.config(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider28, featureArray43);
        boolean boolean50 = jSONWriter49.utf16;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(nameFilter24);
        org.junit.Assert.assertNull(propertyPreFilter27);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.util.List list3 = null;
        jSONWriter1.write(list3);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = null;
        jSONWriter5.writeDouble(doubleArray6);
        boolean boolean8 = jSONWriter5.utf16;
        boolean boolean9 = jSONWriter1.containsReference((java.lang.Object) boolean8);
        jSONWriter1.writeStringNull();
        boolean boolean11 = jSONWriter1.isUseSingleQuotes();
        jSONWriter1.startObject();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter19 = null;
        context15.setValueFilter(valueFilter19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter22 = null;
        context15.setPropertyFilter(propertyFilter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter24);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        jSONWriter1.writeBinary(byteArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter1.writeDouble((double) 10L, decimalFormat24);
        java.time.ZonedDateTime zonedDateTime26 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime26);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.SymbolTable symbolTable2 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable2);
        boolean[] booleanArray8 = new boolean[] { false, true, true, true };
        jSONWriter3.writeBool(booleanArray8);
        jSONWriter1.writeBool(booleanArray8);
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter28 = context27.getPropertyFilter();
        long long29 = context27.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter30 = null;
        context27.setLabelFilter(labelFilter30);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context27, symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter33.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = null;
        context34.setPropertyFilter(propertyFilter35);
        boolean boolean37 = context34.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider38 = context34.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.of(context34);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter41);
        boolean boolean43 = jSONWriter41.utf16;
        jSONWriter41.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter46);
        long long48 = jSONWriter46.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter51.writeDouble(1.0d, decimalFormat55);
        boolean boolean58 = jSONWriter51.removeReference((java.lang.Object) (short) -1);
        jSONWriter51.writeArrayNull();
        long long60 = jSONWriter51.getFeatures();
        java.lang.Class<?> wildcardClass61 = jSONWriter51.getClass();
        boolean boolean63 = jSONWriter46.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass61, (long) (short) 10);
        int[] intArray70 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter46.writeInt32(intArray70);
        jSONWriter41.writeInt32(intArray70);
        jSONWriter39.writeInt32(intArray70);
        jSONWriter1.writeInt32(intArray70);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw("$[10]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNull(propertyFilter28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0, 0, -1, 100, -1]");
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        boolean boolean7 = jSONWriter1.isEnabled((long) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        boolean[] booleanArray14 = new boolean[] { false, true, true, true };
        jSONWriter9.writeBool(booleanArray14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter17);
        boolean boolean19 = jSONWriter17.utf16;
        long long21 = jSONWriter17.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = jSONWriter17.getSymbolTable();
        boolean boolean23 = jSONWriter9.isIgnoreNoneSerializable((java.lang.Object) jSONWriter17);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
        jSONWriter17.writeEnum((java.lang.Enum) feature24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        char[] charArray33 = new char[] { 'a', '4', '#', '4', '4', 'a' };
        jSONWriter26.writeRaw(charArray33);
        jSONWriter17.writeString(charArray33, (int) (short) 10, (int) (short) -1, true);
        com.alibaba.fastjson2.SymbolTable symbolTable39 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        jSONWriter42.close();
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter42.writeFloat((float) 10, decimalFormat45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean53 = jSONWriter48.writeTypeName(byteArray51, (long) 10);
        boolean boolean55 = jSONWriter42.writeTypeName(byteArray51, (long) (byte) 100);
        jSONWriter40.writeNameRaw(byteArray51, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        char[] charArray62 = new char[] { '#', ' ' };
        jSONWriter59.writeString(charArray62, (int) (byte) 0, (int) (short) 1);
        jSONWriter40.writeString(charArray62);
        boolean boolean67 = jSONWriter17.isIgnoreNoneSerializable((java.lang.Object) jSONWriter40);
        boolean boolean69 = jSONWriter17.hasFilter((long) 8);
        boolean boolean71 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter17, (long) (short) 1);
        jSONWriter17.writeDateTime14((int) (byte) 100, (int) (byte) 100, 1, 0, 1, (int) (short) 10);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNull(symbolTable22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName));
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a4#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a4#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, 4, #, 4, 4, a]");
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[#,  ]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        boolean boolean22 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = null;
        context15.setLabelFilter(labelFilter24);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter26 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal31 = null;
        jSONWriter28.writeDecimal(bigDecimal31);
        boolean boolean34 = jSONWriter28.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat40 = null;
        jSONWriter36.writeDouble(1.0d, decimalFormat40);
        boolean boolean43 = jSONWriter36.removeReference((java.lang.Object) (short) -1);
        jSONWriter36.writeArrayNull();
        boolean boolean45 = jSONWriter28.isRefDetect((java.lang.Object) jSONWriter36);
        java.util.UUID uUID46 = null;
        jSONWriter36.writeUUID(uUID46);
        jSONWriter36.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context50 = jSONWriter36.getContext();
        long long51 = context50.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        context50.config(featureArray52);
        context15.config(featureArray52);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter56 = null;
        context15.setValueFilter(valueFilter56);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(propertyPreFilter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(context50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        byte[] byteArray13 = null;
        jSONWriter3.writeBinary(byteArray13);
        jSONWriter3.endObject();
        java.time.ZonedDateTime zonedDateTime16 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray22 = null;
        jSONWriter19.writeHex(byteArray22);
        boolean boolean24 = jSONWriter19.isRefDetect();
        jSONWriter19.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        java.util.UUID uUID39 = null;
        jSONWriter29.writeUUID(uUID39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = jSONWriter29.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter42 = context41.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        boolean boolean45 = jSONWriter44.isRefDetect();
        java.lang.String str48 = jSONWriter44.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter50);
        long long52 = jSONWriter50.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter55.writeDouble(1.0d, decimalFormat59);
        boolean boolean62 = jSONWriter55.removeReference((java.lang.Object) (short) -1);
        jSONWriter55.writeArrayNull();
        long long64 = jSONWriter55.getFeatures();
        java.lang.Class<?> wildcardClass65 = jSONWriter55.getClass();
        boolean boolean67 = jSONWriter50.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass65, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter68 = jSONWriter44.getObjectWriter((java.lang.Class) wildcardClass65);
        boolean boolean69 = jSONWriter19.isWriteTypeInfo((java.lang.Object) context41, (java.lang.reflect.Type) wildcardClass65);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter70 = jSONWriter3.getObjectWriter((java.lang.Class) wildcardClass65);
        jSONWriter3.writeSymbol("hi!");
        jSONWriter3.writeRaw((byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(context41);
        org.junit.Assert.assertNull(propertyFilter42);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objectWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectWriter70);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        jSONWriter1.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        jSONWriter1.writeRaw((byte) 1);
        java.math.BigInteger bigInteger15 = null;
        jSONWriter1.writeBigInt(bigInteger15, 65536L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        jSONWriter19.close();
        jSONWriter19.writeSymbol("");
        jSONWriter19.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter19.context;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        jSONWriter26.writeSymbol("");
        boolean[] booleanArray31 = new boolean[] { true };
        jSONWriter26.writeBool(booleanArray31);
        jSONWriter19.writeBool(booleanArray31);
        jSONWriter1.writeBool(booleanArray31);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true]");
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        java.util.UUID uUID22 = null;
        jSONWriter12.writeUUID(uUID22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter12.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter25 = context24.getPropertyFilter();
        long long26 = context24.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter27 = null;
        context24.setLabelFilter(labelFilter27);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context24, symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context24.config(feature31, true);
        boolean boolean34 = context24.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter35 = context24.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        java.util.UUID uUID49 = null;
        jSONWriter39.writeUUID(uUID49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter39.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter52 = context51.getPropertyFilter();
        long long53 = context51.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter54 = null;
        context51.setLabelFilter(labelFilter54);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider56 = context51.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter57 = null;
        context51.setPropertyPreFilter(propertyPreFilter57);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter59 = null;
        context51.setPropertyPreFilter(propertyPreFilter59);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter61 = null;
        context51.setLabelFilter(labelFilter61);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider63 = context51.getProvider();
        java.lang.Class<?> wildcardClass64 = context51.getClass();
        boolean boolean65 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context24, (java.lang.Class) wildcardClass64);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter66 = context24.getLabelFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable67 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context24, symbolTable67);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertNull(propertyFilter25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(propertyPreFilter35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNull(propertyFilter52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider56);
        org.junit.Assert.assertNotNull(objectWriterProvider63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(labelFilter66);
        org.junit.Assert.assertNotNull(jSONWriter68);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter6.writeDecimal(bigDecimal9);
        boolean boolean12 = jSONWriter6.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter6.writeArrayNull();
        jSONWriter6.writeChar('a');
        jSONWriter6.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter6.writeNull();
        jSONWriter6.writeInt32((int) (short) 1);
        boolean boolean26 = path2.equals((java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Path path27 = null;
        com.alibaba.fastjson2.JSONWriter.Path path29 = new com.alibaba.fastjson2.JSONWriter.Path(path27, "");
        com.alibaba.fastjson2.JSONWriter.Path path31 = new com.alibaba.fastjson2.JSONWriter.Path(path29, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal36 = null;
        jSONWriter33.writeDecimal(bigDecimal36);
        boolean boolean39 = jSONWriter33.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter33.writeArrayNull();
        jSONWriter33.writeChar('a');
        jSONWriter33.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter33.writeNull();
        jSONWriter33.writeInt32((int) (short) 1);
        boolean boolean53 = path29.equals((java.lang.Object) jSONWriter33);
        com.alibaba.fastjson2.JSONWriter.Path path55 = new com.alibaba.fastjson2.JSONWriter.Path(path29, "[1][0]");
        boolean boolean56 = path2.equals((java.lang.Object) path55);
        java.lang.String str57 = path55.toString();
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + ".\\[1\\]\\[0\\]" + "'", str57, ".\\[1\\]\\[0\\]");
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter2.writeTypeName("");
        jSONWriter2.writeBool(false);
        jSONWriter2.writeInt8((byte) 10);
        jSONWriter2.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        boolean boolean13 = jSONWriter11.utf16;
        jSONWriter11.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter15 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray17 = null;
        jSONWriter16.writeDouble(doubleArray17);
        jSONWriter16.writeArrayNull();
        short[] shortArray23 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter16.writeInt16(shortArray23);
        java.lang.String str25 = jSONWriter11.setPath(fieldWriter15, (java.lang.Object) jSONWriter16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        boolean boolean29 = jSONWriter27.utf16;
        long long31 = jSONWriter27.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable32 = jSONWriter27.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Path path33 = null;
        com.alibaba.fastjson2.JSONWriter.Path path35 = new com.alibaba.fastjson2.JSONWriter.Path(path33, "");
        com.alibaba.fastjson2.JSONWriter.Path path37 = new com.alibaba.fastjson2.JSONWriter.Path(path35, (int) (byte) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        jSONWriter41.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class61 = null;
        boolean boolean63 = jSONWriter56.isWriteTypeInfo((java.lang.Object) jSONWriter58, class61, (long) ' ');
        byte[] byteArray65 = new byte[] { (byte) -1 };
        boolean boolean67 = jSONWriter58.writeTypeName(byteArray65, 0L);
        java.util.UUID uUID68 = null;
        jSONWriter58.writeUUID(uUID68);
        com.alibaba.fastjson2.JSONWriter.Context context70 = jSONWriter58.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context70.config(feature71, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean77 = jSONWriter75.isRefDetect((java.lang.Object) feature76);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature76 };
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray78);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray78);
        context70.config(featureArray78);
        jSONWriter41.config(featureArray78);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.of(featureArray78);
        byte[] byteArray84 = jSONWriter83.getBytes();
        boolean boolean85 = path37.equals((java.lang.Object) byteArray84);
        boolean boolean87 = jSONWriter27.writeTypeName(byteArray84, 97L);
        jSONWriter11.writeNameRaw(byteArray84);
        jSONWriter2.writeRaw(byteArray84);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[0, 0, 100]");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L + "'", long31 == 100L);
        org.junit.Assert.assertNull(symbolTable32);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(context70);
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter19);
        boolean boolean21 = jSONWriter19.utf16;
        jSONWriter19.endObject();
        jSONWriter19.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = jSONWriter19.symbolTable;
        double[] doubleArray36 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter19.writeDouble(doubleArray36);
        jSONWriter3.writeDouble(doubleArray36);
        java.io.Writer writer39 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.flushTo(writer39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(symbolTable30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0, -1.0, 1.0]");
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        boolean boolean20 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter21 = null;
        context15.setValueFilter(valueFilter21);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter23 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context15);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter24.startArray(8);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(contextNameFilter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeChar('#');
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray16 = null;
        jSONWriter15.writeDouble(doubleArray16);
        jSONWriter15.writeArrayNull();
        short[] shortArray22 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter15.writeInt16(shortArray22);
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter15.writeFloat((float) (short) 0, decimalFormat25);
        boolean boolean27 = jSONWriter15.isUTF16();
        jSONWriter15.writeFloat((java.lang.Float) 1.0f);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        java.lang.reflect.Type type33 = null;
        boolean boolean35 = jSONWriter31.isWriteTypeInfo((java.lang.Object) (byte) 1, type33, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        jSONWriter37.close();
        jSONWriter37.writeSymbol("");
        jSONWriter37.writeBooleanNull();
        boolean boolean42 = jSONWriter37.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter44);
        long long46 = jSONWriter44.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter49.writeDouble(1.0d, decimalFormat53);
        boolean boolean56 = jSONWriter49.removeReference((java.lang.Object) (short) -1);
        jSONWriter49.writeArrayNull();
        long long58 = jSONWriter49.getFeatures();
        java.lang.Class<?> wildcardClass59 = jSONWriter49.getClass();
        boolean boolean61 = jSONWriter44.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass59, (long) (short) 10);
        jSONWriter31.checkAndWriteTypeName((java.lang.Object) jSONWriter37, (java.lang.Class) wildcardClass59);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter63 = jSONWriter15.getObjectWriter((java.lang.Class) wildcardClass59);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter64 = jSONWriter3.getObjectWriter((java.lang.Class) wildcardClass59);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objectWriter63);
        org.junit.Assert.assertNotNull(objectWriter64);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        boolean boolean17 = jSONWriter1.jsonb;
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter1.writeDouble((double) (short) -1, decimalFormat19);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.isUTF8();
        double[] doubleArray10 = new double[] { 1L, (byte) -1, (byte) 1 };
        jSONWriter1.writeDouble(doubleArray10);
        jSONWriter1.startObject();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, -1.0, 1.0]");
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeDateYYYMMDD8((int) (short) 10, (int) (short) -1, (int) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter1.symbolTable;
        boolean boolean13 = jSONWriter1.isEnabled((long) 4);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) -1 };
        boolean boolean26 = jSONWriter17.writeTypeName(byteArray24, 0L);
        byte[] byteArray27 = null;
        jSONWriter17.writeBinary(byteArray27);
        jSONWriter17.endObject();
        java.math.BigDecimal bigDecimal30 = null;
        java.text.DecimalFormat decimalFormat32 = null;
        jSONWriter17.writeDecimal(bigDecimal30, (long) (byte) -1, decimalFormat32);
        java.math.BigDecimal bigDecimal34 = null;
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter17.writeDecimal(bigDecimal34, (long) (-1), decimalFormat36);
        com.alibaba.fastjson2.JSONWriter.Path path38 = null;
        com.alibaba.fastjson2.JSONWriter.Path path40 = new com.alibaba.fastjson2.JSONWriter.Path(path38, "");
        com.alibaba.fastjson2.JSONWriter.Path path42 = new com.alibaba.fastjson2.JSONWriter.Path(path40, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path44 = new com.alibaba.fastjson2.JSONWriter.Path(path42, "hi!");
        java.lang.String str45 = path44.toString();
        com.alibaba.fastjson2.JSONWriter.Path path47 = new com.alibaba.fastjson2.JSONWriter.Path(path44, (int) '#');
        java.lang.Object obj48 = null;
        boolean boolean49 = path47.equals(obj48);
        jSONWriter17.writeAny(obj48);
        boolean boolean51 = jSONWriter17.isUseSingleQuotes();
        jSONWriter17.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Path path54 = null;
        com.alibaba.fastjson2.JSONWriter.Path path56 = new com.alibaba.fastjson2.JSONWriter.Path(path54, "");
        com.alibaba.fastjson2.JSONWriter.Path path58 = new com.alibaba.fastjson2.JSONWriter.Path(path56, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path60 = new com.alibaba.fastjson2.JSONWriter.Path(path58, "hi!");
        java.lang.String str61 = path60.toString();
        com.alibaba.fastjson2.JSONWriter.Path path63 = new com.alibaba.fastjson2.JSONWriter.Path(path60, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path65 = new com.alibaba.fastjson2.JSONWriter.Path(path60, "[1]");
        com.alibaba.fastjson2.JSONWriter.Path path67 = new com.alibaba.fastjson2.JSONWriter.Path(path60, (int) (byte) 10);
        boolean boolean68 = jSONWriter17.isIgnoreNoneSerializable((java.lang.Object) (byte) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable69 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable69);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        boolean boolean74 = jSONWriter72.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class75 = null;
        boolean boolean77 = jSONWriter70.isWriteTypeInfo((java.lang.Object) jSONWriter72, class75, (long) ' ');
        byte[] byteArray79 = new byte[] { (byte) -1 };
        boolean boolean81 = jSONWriter72.writeTypeName(byteArray79, 0L);
        byte[] byteArray82 = null;
        jSONWriter72.writeBinary(byteArray82);
        com.alibaba.fastjson2.JSONWriter.Feature feature84 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class85 = null;
        jSONWriter72.checkAndWriteTypeName((java.lang.Object) feature84, class85);
        java.math.BigDecimal bigDecimal87 = null;
        jSONWriter72.writeDecimal(bigDecimal87);
        jSONWriter72.writeTypeName("hi!");
        jSONWriter72.writeArrayNull();
        jSONWriter72.writeInt64((long) (byte) -1);
        java.time.LocalTime localTime94 = null;
        jSONWriter72.writeLocalTime(localTime94);
        boolean boolean96 = jSONWriter17.isRefDetect((java.lang.Object) localTime94);
        boolean boolean97 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) localTime94);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1].hi\\!" + "'", str45, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[1].hi\\!" + "'", str61, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + feature84 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature84.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        double[] doubleArray3 = null;
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeDouble(doubleArray3, decimalFormat4);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class12 = null;
        boolean boolean14 = jSONWriter7.isWriteTypeInfo((java.lang.Object) jSONWriter9, class12, (long) ' ');
        byte[] byteArray16 = new byte[] { (byte) -1 };
        boolean boolean18 = jSONWriter9.writeTypeName(byteArray16, 0L);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = jSONWriter9.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter22 = context21.getPropertyFilter();
        long long23 = context21.getFeatures();
        long long24 = context21.getFeatures();
        boolean boolean25 = context21.isDateFormatHasHour();
        boolean boolean26 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) context21);
        java.io.OutputStream outputStream27 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        byte[] byteArray38 = new byte[] { (byte) -1 };
        boolean boolean40 = jSONWriter31.writeTypeName(byteArray38, 0L);
        java.util.UUID uUID41 = null;
        jSONWriter31.writeUUID(uUID41);
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter31.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context43);
        java.time.format.DateTimeFormatter dateTimeFormatter45 = context43.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider46 = context43.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider46, featureArray47);
        java.math.BigInteger bigInteger52 = null;
        jSONWriter51.writeBigInt(bigInteger52, (long) 1);
        java.nio.charset.Charset charset55 = jSONWriter51.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            int int56 = jSONWriter1.flushTo(outputStream27, charset55);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context21);
        org.junit.Assert.assertNull(propertyFilter22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(objectWriterProvider46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(charset55);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        int int28 = jSONWriter1.level();
        jSONWriter1.writeStringNull();
        jSONWriter1.writeInt8((byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        java.time.LocalTime localTime34 = null;
        jSONWriter33.writeLocalTime(localTime34);
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        jSONWriter33.writeBinary(byteArray46);
        jSONWriter1.writeNameRaw(byteArray46, 0L);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10, (byte) 1 };
        boolean boolean60 = jSONWriter1.writeTypeName(byteArray58, 0L);
        boolean boolean61 = jSONWriter1.isUseSingleQuotes();
        jSONWriter1.writeReference("[1]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, -1, -1, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        jSONWriter14.writeInt8((byte) 1);
        jSONWriter14.close();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) jSONWriter14);
        java.math.BigDecimal bigDecimal28 = null;
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter14.writeDecimal(bigDecimal28, (long) '#', decimalFormat30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat37 = null;
        jSONWriter33.writeDouble(1.0d, decimalFormat37);
        boolean boolean40 = jSONWriter33.removeReference((java.lang.Object) (short) -1);
        jSONWriter33.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable42 = jSONWriter33.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter33.getContext();
        java.nio.charset.Charset charset44 = jSONWriter33.getCharset();
        jSONWriter14.popPath((java.lang.Object) jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(symbolTable42);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertNotNull(charset44);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal23 = null;
        jSONWriter20.writeDecimal(bigDecimal23);
        boolean boolean26 = jSONWriter20.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat32 = null;
        jSONWriter28.writeDouble(1.0d, decimalFormat32);
        boolean boolean35 = jSONWriter28.removeReference((java.lang.Object) (short) -1);
        jSONWriter28.writeArrayNull();
        boolean boolean37 = jSONWriter20.isRefDetect((java.lang.Object) jSONWriter28);
        java.util.UUID uUID38 = null;
        jSONWriter28.writeUUID(uUID38);
        jSONWriter28.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context42 = jSONWriter28.getContext();
        java.math.BigDecimal bigDecimal43 = null;
        jSONWriter28.writeDecimal(bigDecimal43);
        boolean boolean45 = jSONWriter28.isWriteNulls();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter62 = context61.getPropertyFilter();
        long long63 = context61.getFeatures();
        com.alibaba.fastjson2.filter.NameFilter nameFilter64 = context61.getNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        boolean boolean66 = jSONWriter65.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        com.alibaba.fastjson2.JSONWriter.Context context69 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray67);
        jSONWriter65.writeAny((java.lang.Object) featureArray67);
        java.nio.charset.Charset charset71 = jSONWriter65.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        java.lang.reflect.Type type75 = null;
        boolean boolean77 = jSONWriter73.isWriteTypeInfo((java.lang.Object) (byte) 1, type75, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        boolean boolean81 = jSONWriter79.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat83 = null;
        jSONWriter79.writeDouble(1.0d, decimalFormat83);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray85 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter86 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray85);
        byte[] byteArray89 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean91 = jSONWriter86.writeTypeName(byteArray89, (long) 10);
        jSONWriter79.writeStringLatin1(byteArray89);
        jSONWriter73.writeNameRaw(byteArray89);
        jSONWriter65.writeBinary(byteArray89);
        boolean boolean96 = jSONWriter28.isWriteTypeInfo((java.lang.Object) byteArray89, (long) 0);
        jSONWriter1.writeStringLatin1(byteArray89);
        jSONWriter1.writeInt32((int) 'a');
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNull(propertyFilter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNull(nameFilter64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(charset71);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(featureArray85);
        org.junit.Assert.assertNotNull(jSONWriter86);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray40);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter46 = null;
        context45.setContextValueFilter(contextValueFilter46);
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero;
        context45.config(feature48, false);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter51 = null;
        context45.setContextNameFilter(contextNameFilter51);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero));
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        jSONWriter1.writeArrayNull();
        boolean boolean3 = jSONWriter1.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.of(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.of(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter9 = context8.getPropertyFilter();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNull(propertyFilter9);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path7 = path2.parent;
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        boolean boolean18 = jSONWriter9.isEnabled((long) ' ');
        jSONWriter9.writeString("hi!");
        boolean boolean21 = jSONWriter9.isUTF8();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        jSONWriter9.writeString((java.util.List<java.lang.String>) strList25);
        jSONWriter9.writeRaw((byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = jSONWriter9.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        jSONWriter9.writeAny((java.lang.Object) featureArray31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal41 = null;
        jSONWriter38.writeDecimal(bigDecimal41);
        boolean boolean44 = jSONWriter38.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter38.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj49 = null;
        jSONWriter38.startArray(obj49, (-1));
        jSONWriter38.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray61 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        jSONWriter38.writeString((java.util.List<java.lang.String>) strList62);
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter38.context;
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter66 = null;
        context65.setContextValueFilter(contextValueFilter66);
        java.lang.String str68 = jSONWriter9.setPath(".\\[1\\]\\.hi\\\\\\!", (java.lang.Object) contextValueFilter66);
        jSONWriter9.startObject();
        boolean boolean70 = path2.equals((java.lang.Object) jSONWriter9);
        jSONWriter9.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofUTF8();
        jSONWriter72.writeMillis((long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        boolean boolean78 = jSONWriter76.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal79 = null;
        jSONWriter76.writeDecimal(bigDecimal79);
        boolean boolean82 = jSONWriter76.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter76.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        jSONWriter76.endObject();
        java.lang.Class<?> wildcardClass88 = jSONWriter76.getClass();
        boolean boolean89 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter72, (java.lang.Class) wildcardClass88);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(symbolTable30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(context65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        long long6 = jSONWriter1.getFeatures();
        java.text.DecimalFormat decimalFormat8 = null;
        jSONWriter1.writeDouble((double) '#', decimalFormat8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        long long13 = jSONWriter11.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter16.writeDouble(1.0d, decimalFormat20);
        boolean boolean23 = jSONWriter16.removeReference((java.lang.Object) (short) -1);
        jSONWriter16.writeArrayNull();
        long long25 = jSONWriter16.getFeatures();
        java.lang.Class<?> wildcardClass26 = jSONWriter16.getClass();
        boolean boolean28 = jSONWriter11.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass26, (long) (short) 10);
        int[] intArray35 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter11.writeInt32(intArray35);
        double[] doubleArray41 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter11.writeDouble(doubleArray41);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter1.writeDouble(doubleArray41, decimalFormat43);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        jSONWriter22.writeBool(false);
        jSONWriter22.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        jSONWriter29.writeNull();
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter29.writeFloat((float) 0, decimalFormat41);
        boolean boolean43 = jSONWriter29.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter45);
        boolean boolean47 = jSONWriter45.utf16;
        jSONWriter45.endObject();
        jSONWriter45.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable56 = jSONWriter45.symbolTable;
        double[] doubleArray62 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter45.writeDouble(doubleArray62);
        jSONWriter29.writeDouble(doubleArray62);
        java.time.LocalTime localTime65 = null;
        jSONWriter29.writeLocalTime(localTime65);
        boolean boolean67 = jSONWriter29.isUseSingleQuotes();
        boolean boolean68 = jSONWriter22.isWriteTypeInfo((java.lang.Object) boolean67);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(symbolTable56);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray28);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context32.getProvider();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter34 = null;
        context32.setValueFilter(valueFilter34);
        long long36 = context32.getFeatures();
        boolean boolean37 = context32.isDateFormatISO8601();
        boolean boolean38 = context32.isDateFormatHasDay();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.startArray((int) (short) -1);
        boolean boolean10 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray12 = null;
        jSONWriter11.writeDouble(doubleArray12);
        jSONWriter11.writeArrayNull();
        jSONWriter11.writeSymbol((int) (byte) 10);
        jSONWriter11.close();
        jSONWriter11.writeTypeName("$");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) feature22);
        com.alibaba.fastjson2.SymbolTable symbolTable24 = jSONWriter21.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray29 = null;
        jSONWriter26.writeHex(byteArray29);
        boolean boolean31 = jSONWriter26.isRefDetect();
        jSONWriter26.writeNumberNull();
        jSONWriter26.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean36 = jSONWriter26.isEnabled(feature35);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter38);
        long long40 = jSONWriter38.getFeatures();
        java.time.LocalDateTime localDateTime41 = null;
        jSONWriter38.writeLocalDateTime(localDateTime41);
        byte[] byteArray43 = jSONWriter38.getBytes();
        jSONWriter26.writeStringLatin1(byteArray43);
        jSONWriter21.writeNameRaw(byteArray43, (long) (byte) 100);
        jSONWriter11.writeBinary(byteArray43);
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class54 = null;
        boolean boolean56 = jSONWriter49.isWriteTypeInfo((java.lang.Object) jSONWriter51, class54, (long) ' ');
        byte[] byteArray58 = new byte[] { (byte) 100 };
        boolean boolean60 = jSONWriter49.writeTypeName(byteArray58, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        int[] intArray66 = new int[] { (short) -1 };
        jSONWriter64.writeInt32(intArray66);
        java.lang.String str68 = jSONWriter49.setPath("hi!", (java.lang.Object) intArray66);
        jSONWriter11.writeInt32(intArray66);
        jSONWriter1.writeInt32(intArray66);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(symbolTable24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean boolean13 = jSONWriter12.isRefDetect();
        jSONWriter12.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        jSONWriter12.writeFloat((java.lang.Float) (-1.0f));
        java.lang.String str23 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        char[] charArray33 = new char[] {};
        jSONWriter27.writeString(charArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue;
        boolean boolean36 = jSONWriter27.isEnabled(feature35);
        jSONWriter27.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context53);
        java.time.format.DateTimeFormatter dateTimeFormatter55 = context53.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider56 = context53.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider56, featureArray57);
        java.math.BigInteger bigInteger62 = null;
        jSONWriter61.writeBigInt(bigInteger62, (long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        java.time.LocalTime localTime67 = null;
        jSONWriter66.writeLocalTime(localTime67);
        java.time.LocalDateTime localDateTime69 = null;
        jSONWriter66.writeLocalDateTime(localDateTime69);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter72);
        boolean boolean74 = jSONWriter72.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        boolean boolean78 = jSONWriter76.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat80 = null;
        jSONWriter76.writeDouble(1.0d, decimalFormat80);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray82 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray82);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean88 = jSONWriter83.writeTypeName(byteArray86, (long) 10);
        jSONWriter76.writeStringLatin1(byteArray86);
        jSONWriter72.writeStringLatin1(byteArray86);
        jSONWriter66.writeBinary(byteArray86);
        jSONWriter61.writeBinary(byteArray86);
        jSONWriter27.writeStringLatin1(byteArray86);
        boolean boolean95 = jSONWriter1.writeTypeName(byteArray86, (long) (byte) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[]");
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(objectWriterProvider56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(featureArray82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isWriteNulls();
        jSONWriter1.writeInt64((long) 5);
        jSONWriter1.close();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path1 = path0.parent;
        com.alibaba.fastjson2.JSONWriter.Path path3 = new com.alibaba.fastjson2.JSONWriter.Path(path1, (int) (byte) -1);
        com.alibaba.fastjson2.JSONWriter.Path path5 = new com.alibaba.fastjson2.JSONWriter.Path(path1, "[1].hi\\!");
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertNull(path1);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context21.getContextValueFilter();
        boolean boolean23 = context21.isDateFormatISO8601();
        boolean boolean25 = context21.isEnabled(137438953482L);
        boolean boolean26 = context21.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.startArray((int) (short) 1);
        jSONWriter1.endArray();
        java.nio.charset.Charset charset13 = jSONWriter1.getCharset();
        java.time.ZonedDateTime zonedDateTime14 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime14);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset13);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        jSONWriter1.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        jSONWriter11.close();
        jSONWriter11.writeSymbol("");
        jSONWriter11.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable16 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class22 = null;
        boolean boolean24 = jSONWriter17.isWriteTypeInfo((java.lang.Object) jSONWriter19, class22, (long) ' ');
        byte[] byteArray26 = new byte[] { (byte) -1 };
        boolean boolean28 = jSONWriter19.writeTypeName(byteArray26, 0L);
        java.util.UUID uUID29 = null;
        jSONWriter19.writeUUID(uUID29);
        java.util.Map map31 = null;
        jSONWriter19.write(map31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        java.time.LocalTime localTime35 = null;
        jSONWriter34.writeLocalTime(localTime35);
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) -1 };
        boolean boolean49 = jSONWriter40.writeTypeName(byteArray47, 0L);
        jSONWriter34.writeBinary(byteArray47);
        jSONWriter19.writeBinary(byteArray47);
        jSONWriter11.writeStringLatin1(byteArray47);
        jSONWriter1.writeNameRaw(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.startArray((int) (short) 1);
        java.time.Instant instant12 = null;
        jSONWriter1.writeInstant(instant12);
        jSONWriter1.writeBooleanNull();
        java.math.BigInteger bigInteger15 = null;
        jSONWriter1.writeBigInt(bigInteger15);
        boolean boolean17 = jSONWriter1.jsonb;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        java.time.LocalDate localDate4 = null;
        jSONWriter1.writeLocalDate(localDate4);
        jSONWriter1.writeTypeName("");
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        long long26 = context23.getFeatures();
        boolean boolean27 = context23.isDateFormatISO8601();
        java.lang.String str28 = context23.getDateFormat();
        boolean boolean30 = jSONWriter1.isWriteTypeInfo((java.lang.Object) str28, 65536L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        long long34 = jSONWriter32.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        long long46 = jSONWriter37.getFeatures();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean49 = jSONWriter32.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass47, (long) (short) 10);
        int[] intArray56 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter32.writeInt32(intArray56);
        double[] doubleArray62 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter32.writeDouble(doubleArray62);
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter1.writeDouble(doubleArray62, decimalFormat64);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        boolean boolean20 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter21 = null;
        context15.setValueFilter(valueFilter21);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter23 = context15.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context15);
        jSONWriter24.writeDateTimeISO8601((int) (byte) 100, (int) (byte) 100, (-1), (int) (byte) 10, (int) '4', (int) '#', 0, (int) (byte) 1, false);
        java.math.BigDecimal bigDecimal35 = null;
        java.text.DecimalFormat decimalFormat37 = null;
        jSONWriter24.writeDecimal(bigDecimal35, (long) 'a', decimalFormat37);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(contextNameFilter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.startObject();
        jSONWriter1.writeSymbol("[1]");
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        jSONWriter11.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter26.writeFloat((float) 10, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean37 = jSONWriter32.writeTypeName(byteArray35, (long) 10);
        boolean boolean39 = jSONWriter26.writeTypeName(byteArray35, (long) (byte) 100);
        jSONWriter26.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter43.writeFloat((float) 10, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean54 = jSONWriter49.writeTypeName(byteArray52, (long) 10);
        boolean boolean56 = jSONWriter43.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter43.writeInt16((short) (byte) 100);
        boolean boolean59 = jSONWriter43.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter61);
        long long63 = jSONWriter61.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray65 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray65);
        boolean boolean68 = jSONWriter66.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter66.writeDouble(1.0d, decimalFormat70);
        boolean boolean73 = jSONWriter66.removeReference((java.lang.Object) (short) -1);
        jSONWriter66.writeArrayNull();
        long long75 = jSONWriter66.getFeatures();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter61.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass76, (long) (short) 10);
        boolean boolean80 = jSONWriter26.isWriteTypeInfo((java.lang.Object) boolean59, (java.lang.reflect.Type) wildcardClass76, (long) (byte) -1);
        boolean boolean82 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) (short) 10, (java.lang.Class) wildcardClass76, (long) 10);
        boolean boolean83 = jSONWriter1.utf8;
        java.time.LocalDateTime localDateTime84 = null;
        jSONWriter1.writeLocalDateTime(localDateTime84);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray86 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter87 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray86);
        jSONWriter87.close();
        jSONWriter87.writeSymbol("");
        boolean[] booleanArray92 = new boolean[] { true };
        jSONWriter87.writeBool(booleanArray92);
        jSONWriter1.writeBool(booleanArray92);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(featureArray65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(featureArray86);
        org.junit.Assert.assertNotNull(jSONWriter87);
        org.junit.Assert.assertNotNull(booleanArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray92), "[true]");
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context22.getProvider();
        java.lang.String str25 = jSONWriter1.setPath("$", (java.lang.Object) context22);
        jSONWriter1.writeTypeName("");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal32 = null;
        jSONWriter29.writeDecimal(bigDecimal32);
        boolean boolean35 = jSONWriter29.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter29.writeArrayNull();
        jSONWriter29.writeChar('a');
        jSONWriter29.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        jSONWriter47.close();
        java.text.DecimalFormat decimalFormat50 = null;
        jSONWriter47.writeFloat((float) 10, decimalFormat50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean58 = jSONWriter53.writeTypeName(byteArray56, (long) 10);
        boolean boolean60 = jSONWriter47.writeTypeName(byteArray56, (long) (byte) 100);
        jSONWriter47.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        jSONWriter64.close();
        java.text.DecimalFormat decimalFormat67 = null;
        jSONWriter64.writeFloat((float) 10, decimalFormat67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean75 = jSONWriter70.writeTypeName(byteArray73, (long) 10);
        boolean boolean77 = jSONWriter64.writeTypeName(byteArray73, (long) (byte) 100);
        jSONWriter47.writeBinary(byteArray73);
        jSONWriter29.writeHex(byteArray73);
        jSONWriter1.writeHex(byteArray73);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        jSONWriter10.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal16 = null;
        jSONWriter13.writeDecimal(bigDecimal16);
        boolean boolean19 = jSONWriter13.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter13.writeArrayNull();
        jSONWriter13.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        byte[] byteArray35 = null;
        jSONWriter25.writeBinary(byteArray35);
        jSONWriter25.endObject();
        java.time.ZonedDateTime zonedDateTime38 = null;
        jSONWriter25.writeZonedDateTime(zonedDateTime38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray44 = null;
        jSONWriter41.writeHex(byteArray44);
        boolean boolean46 = jSONWriter41.isRefDetect();
        jSONWriter41.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class54 = null;
        boolean boolean56 = jSONWriter49.isWriteTypeInfo((java.lang.Object) jSONWriter51, class54, (long) ' ');
        byte[] byteArray58 = new byte[] { (byte) -1 };
        boolean boolean60 = jSONWriter51.writeTypeName(byteArray58, 0L);
        java.util.UUID uUID61 = null;
        jSONWriter51.writeUUID(uUID61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = jSONWriter51.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter64 = context63.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        boolean boolean67 = jSONWriter66.isRefDetect();
        java.lang.String str70 = jSONWriter66.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter72);
        long long74 = jSONWriter72.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        boolean boolean79 = jSONWriter77.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat81 = null;
        jSONWriter77.writeDouble(1.0d, decimalFormat81);
        boolean boolean84 = jSONWriter77.removeReference((java.lang.Object) (short) -1);
        jSONWriter77.writeArrayNull();
        long long86 = jSONWriter77.getFeatures();
        java.lang.Class<?> wildcardClass87 = jSONWriter77.getClass();
        boolean boolean89 = jSONWriter72.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass87, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter90 = jSONWriter66.getObjectWriter((java.lang.Class) wildcardClass87);
        boolean boolean91 = jSONWriter41.isWriteTypeInfo((java.lang.Object) context63, (java.lang.reflect.Type) wildcardClass87);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter92 = jSONWriter25.getObjectWriter((java.lang.Class) wildcardClass87);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter93 = jSONWriter13.getObjectWriter((java.lang.Class) wildcardClass87);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter94 = jSONWriter10.getObjectWriter((java.lang.Class) wildcardClass87);
        boolean boolean95 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter8, (java.lang.reflect.Type) wildcardClass87);
        com.alibaba.fastjson2.JSONWriter.Feature feature96 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        jSONWriter8.writeEnum((java.lang.Enum) feature96);
        jSONWriter8.writeName("[1].hi\\![35]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(context63);
        org.junit.Assert.assertNull(propertyFilter64);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objectWriter90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objectWriter92);
        org.junit.Assert.assertNotNull(objectWriter93);
        org.junit.Assert.assertNotNull(objectWriter94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + feature96 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature96.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter16 = null;
        context15.setPropertyPreFilter(propertyPreFilter16);
        boolean boolean18 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls;
        boolean boolean20 = context15.isEnabled(feature19);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = context26.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context26.getProvider();
        boolean boolean30 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context26);
        jSONWriter1.endArray();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        long long6 = jSONWriter1.getFeatures();
        jSONWriter1.writeRaw((byte) -1);
        jSONWriter1.writeString("");
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        byte[] byteArray22 = new byte[] { (byte) -1 };
        boolean boolean24 = jSONWriter15.writeTypeName(byteArray22, 0L);
        java.util.UUID uUID25 = null;
        jSONWriter15.writeUUID(uUID25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter15.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context27);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context27, symbolTable29);
        boolean boolean31 = context27.isDateFormatISO8601();
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter35, class38, (long) ' ');
        byte[] byteArray42 = new byte[] { (byte) -1 };
        boolean boolean44 = jSONWriter35.writeTypeName(byteArray42, 0L);
        java.util.UUID uUID45 = null;
        jSONWriter35.writeUUID(uUID45);
        com.alibaba.fastjson2.JSONWriter.Context context47 = jSONWriter35.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter48 = context47.getPropertyFilter();
        long long49 = context47.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter50 = null;
        context47.setLabelFilter(labelFilter50);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter52 = context47.getContextValueFilter();
        boolean boolean53 = context47.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter54 = null;
        context47.setValueFilter(valueFilter54);
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context47.config(feature56, false);
        boolean boolean59 = context27.isEnabled(feature56);
        jSONWriter1.config(feature56, false);
        boolean boolean62 = jSONWriter1.useSingleQuote;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(context47);
        org.junit.Assert.assertNull(propertyFilter48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNull(contextValueFilter52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        int[] intArray4 = new int[] { (short) -1 };
        jSONWriter2.writeInt32(intArray4);
        jSONWriter2.writeDateYYYMMDD8((int) (short) -1, (int) (byte) -1, (int) '4');
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        java.util.UUID uUID23 = null;
        jSONWriter13.writeUUID(uUID23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter13.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter26 = context25.getPropertyFilter();
        long long27 = context25.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter28 = null;
        context25.setLabelFilter(labelFilter28);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context25.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter31 = null;
        context25.setPropertyPreFilter(propertyPreFilter31);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter33 = null;
        context25.setPropertyPreFilter(propertyPreFilter33);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter35 = null;
        context25.setLabelFilter(labelFilter35);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider37 = context25.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter39);
        long long41 = jSONWriter39.getFeatures();
        java.time.LocalDateTime localDateTime42 = null;
        jSONWriter39.writeLocalDateTime(localDateTime42);
        byte[] byteArray44 = jSONWriter39.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Context context47 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray45);
        jSONWriter39.config(featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.of(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider37, featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.of(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter54);
        boolean boolean56 = jSONWriter54.utf16;
        jSONWriter54.endObject();
        jSONWriter54.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable65 = jSONWriter54.symbolTable;
        double[] doubleArray71 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter54.writeDouble(doubleArray71);
        java.text.DecimalFormat decimalFormat73 = null;
        jSONWriter52.writeDouble(doubleArray71, decimalFormat73);
        java.text.DecimalFormat decimalFormat75 = null;
        jSONWriter2.writeDouble(doubleArray71, decimalFormat75);
        java.io.OutputStream outputStream77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int78 = jSONWriter2.flushTo(outputStream77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1]");
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertNull(propertyFilter26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNotNull(objectWriterProvider37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-81]");
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(symbolTable65);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0, -1.0, 1.0]");
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter1.context;
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter13, class16, (long) ' ');
        byte[] byteArray20 = new byte[] { (byte) -1 };
        boolean boolean22 = jSONWriter13.writeTypeName(byteArray20, 0L);
        java.util.UUID uUID23 = null;
        jSONWriter13.writeUUID(uUID23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = jSONWriter13.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter26 = context25.getPropertyFilter();
        long long27 = context25.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter28 = null;
        context25.setLabelFilter(labelFilter28);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter30 = context25.getContextValueFilter();
        boolean boolean31 = context25.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context25);
        java.time.format.DateTimeFormatter dateTimeFormatter33 = context25.getDateFormatter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter34 = null;
        context25.setContextValueFilter(contextValueFilter34);
        boolean boolean36 = jSONWriter1.isRefDetect((java.lang.Object) context25);
        java.lang.Class<?> wildcardClass37 = context25.getClass();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context25);
        org.junit.Assert.assertNull(propertyFilter26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNull(contextValueFilter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        jSONWriter40.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = context61.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context61.getProvider();
        java.lang.String str65 = context61.getDateFormat();
        boolean boolean66 = jSONWriter40.removeReference((java.lang.Object) context61);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = context61.getLabelFilter();
        java.time.ZoneId zoneId68 = context61.getZoneId();
        context38.setZoneId(zoneId68);
        context21.setZoneId(zoneId68);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter71 = null;
        context21.setAfterFilter(afterFilter71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter74 = null;
        context21.setContextValueFilter(contextValueFilter74);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(labelFilter67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(jSONWriter73);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter19 = context15.getContextNameFilter();
        long long20 = context15.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString;
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        java.util.UUID uUID35 = null;
        jSONWriter25.writeUUID(uUID35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter25.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context37);
        boolean boolean40 = jSONWriter38.hasFilter((long) 0);
        jSONWriter38.endArray();
        jSONWriter38.writeString("");
        boolean boolean44 = jSONWriter38.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) feature47);
        jSONWriter38.writeEnum((java.lang.Enum) feature47);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter53.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter66 = context65.getPropertyFilter();
        long long67 = context65.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter68 = null;
        context65.setLabelFilter(labelFilter68);
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context65, symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Context context72 = jSONWriter71.context;
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter73 = null;
        context72.setPropertyFilter(propertyFilter73);
        boolean boolean75 = context72.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean77 = jSONWriter76.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean79 = jSONWriter76.isEnabled(feature78);
        boolean boolean80 = context72.isEnabled(feature78);
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature82 = com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray83 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature47, feature78, feature81, feature82 };
        context15.config(featureArray83);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter85 = null;
        context15.setContextValueFilter(contextValueFilter85);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter87 = null;
        context15.setContextNameFilter(contextNameFilter87);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString));
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(context37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(context65);
        org.junit.Assert.assertNull(propertyFilter66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(context72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature82 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii + "'", feature82.equals(com.alibaba.fastjson2.JSONWriter.Feature.OptimizedForAscii));
        org.junit.Assert.assertNotNull(featureArray83);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        boolean boolean4 = jSONWriter1.useSingleQuote;
        boolean boolean5 = jSONWriter1.utf16;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        int[] intArray4 = new int[] { (short) -1 };
        jSONWriter2.writeInt32(intArray4);
        boolean boolean6 = jSONWriter2.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        boolean boolean25 = jSONWriter23.hasFilter((long) 0);
        jSONWriter23.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) -1 };
        boolean boolean39 = jSONWriter30.writeTypeName(byteArray37, 0L);
        jSONWriter23.writeBinary(byteArray37);
        jSONWriter2.writeNameRaw(byteArray37, (long) (short) 1);
        jSONWriter2.writeMillis((long) 1);
        jSONWriter2.startArray((int) (short) 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        boolean boolean6 = jSONWriter1.isUTF8();
        jSONWriter1.writeInt8((byte) 100);
        jSONWriter1.writeDouble((double) 0.0f);
        boolean boolean11 = jSONWriter1.utf8;
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        jSONWriter1.writeEnum((java.lang.Enum) feature7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        jSONWriter1.writeStringNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        jSONWriter6.writeFloat((float) '#');
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter29 = context28.getPropertyFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(propertyFilter29);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter22 = null;
        context15.setValueFilter(valueFilter22);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter21);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8();
        com.alibaba.fastjson2.JSONWriter.Context context10 = jSONWriter9.context;
        boolean boolean11 = jSONWriter8.removeReference((java.lang.Object) context10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter12 = context10.getPropertyPreFilter();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(context10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(propertyPreFilter12);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        boolean boolean17 = jSONWriter6.hasFilter();
        jSONWriter6.writeColon();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        jSONWriter29.writeInt8((byte) 1);
        jSONWriter29.endArray();
        jSONWriter29.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context64.config(feature65, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) feature70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70 };
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        context64.config(featureArray72);
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray72);
        jSONWriter29.config(featureArray72);
        boolean boolean78 = jSONWriter25.isIgnoreNoneSerializable((java.lang.Object) featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(jSONWriter80);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider17);
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider17);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter20 = context19.getBeforeFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(beforeFilter20);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        jSONWriter3.writeDouble((double) '4');
        boolean boolean19 = jSONWriter3.isWriteNulls();
        boolean boolean20 = jSONWriter3.isWriteNulls();
        boolean boolean21 = jSONWriter3.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter23);
        boolean boolean25 = jSONWriter23.utf16;
        jSONWriter23.endObject();
        jSONWriter23.writeDateTime14(10, 0, (int) '4', (int) 'a', (int) ' ', (int) (byte) -1);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = jSONWriter23.symbolTable;
        double[] doubleArray40 = new double[] { 10, (byte) -1, 0, (-1L), 1.0f };
        jSONWriter23.writeDouble(doubleArray40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        boolean boolean45 = jSONWriter43.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray46 = null;
        jSONWriter43.writeHex(byteArray46);
        boolean boolean48 = jSONWriter43.isRefDetect();
        jSONWriter43.writeNumberNull();
        jSONWriter43.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        jSONWriter53.close();
        jSONWriter53.writeSymbol("");
        jSONWriter53.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable58 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        boolean boolean63 = jSONWriter61.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class64 = null;
        boolean boolean66 = jSONWriter59.isWriteTypeInfo((java.lang.Object) jSONWriter61, class64, (long) ' ');
        byte[] byteArray68 = new byte[] { (byte) -1 };
        boolean boolean70 = jSONWriter61.writeTypeName(byteArray68, 0L);
        java.util.UUID uUID71 = null;
        jSONWriter61.writeUUID(uUID71);
        java.util.Map map73 = null;
        jSONWriter61.write(map73);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        java.time.LocalTime localTime77 = null;
        jSONWriter76.writeLocalTime(localTime77);
        com.alibaba.fastjson2.SymbolTable symbolTable79 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable79);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray81 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray81);
        boolean boolean84 = jSONWriter82.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class85 = null;
        boolean boolean87 = jSONWriter80.isWriteTypeInfo((java.lang.Object) jSONWriter82, class85, (long) ' ');
        byte[] byteArray89 = new byte[] { (byte) -1 };
        boolean boolean91 = jSONWriter82.writeTypeName(byteArray89, 0L);
        jSONWriter76.writeBinary(byteArray89);
        jSONWriter61.writeBinary(byteArray89);
        jSONWriter53.writeStringLatin1(byteArray89);
        jSONWriter43.writeNameRaw(byteArray89);
        boolean boolean97 = jSONWriter23.writeTypeName(byteArray89, (long) ' ');
        boolean boolean99 = jSONWriter3.writeTypeName(byteArray89, (long) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(symbolTable34);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(featureArray81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        jSONWriter0.startArray(0);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class20 = null;
        boolean boolean22 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter17, class20, (long) ' ');
        byte[] byteArray24 = new byte[] { (byte) -1 };
        boolean boolean26 = jSONWriter17.writeTypeName(byteArray24, 0L);
        java.util.UUID uUID27 = null;
        jSONWriter17.writeUUID(uUID27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter17.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context29);
        boolean boolean32 = jSONWriter30.hasFilter((long) 0);
        jSONWriter30.endArray();
        jSONWriter30.writeString("");
        boolean boolean36 = jSONWriter30.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) feature39);
        jSONWriter30.writeEnum((java.lang.Enum) feature39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter43);
        long long45 = jSONWriter43.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat52 = null;
        jSONWriter48.writeDouble(1.0d, decimalFormat52);
        boolean boolean55 = jSONWriter48.removeReference((java.lang.Object) (short) -1);
        jSONWriter48.writeArrayNull();
        long long57 = jSONWriter48.getFeatures();
        java.lang.Class<?> wildcardClass58 = jSONWriter48.getClass();
        boolean boolean60 = jSONWriter43.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass58, (long) (short) 10);
        int[] intArray67 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter43.writeInt32(intArray67);
        double[] doubleArray73 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter43.writeDouble(doubleArray73);
        java.text.DecimalFormat decimalFormat75 = null;
        jSONWriter30.writeDouble(doubleArray73, decimalFormat75);
        jSONWriter0.writeDouble(doubleArray73);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue;
        boolean boolean21 = jSONWriter1.isEnabled(feature20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean23 = jSONWriter22.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean30 = jSONWriter25.writeTypeName(byteArray28, (long) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        long long34 = jSONWriter32.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        long long46 = jSONWriter37.getFeatures();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean49 = jSONWriter32.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass47, (long) (short) 10);
        int[] intArray56 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter32.writeInt32(intArray56);
        jSONWriter25.writeInt32(intArray56);
        jSONWriter22.writeInt32(intArray56);
        jSONWriter22.writeInt8((byte) 10);
        boolean boolean62 = jSONWriter1.removeReference((java.lang.Object) jSONWriter22);
        jSONWriter22.writeDateYYYMMDD8(2, (int) (byte) 0, 12);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.SymbolTable symbolTable3 = jSONWriter2.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        boolean boolean7 = jSONWriter5.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter5.writeDecimal(bigDecimal8);
        long long11 = jSONWriter5.getFeatures((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = null;
        jSONWriter5.writeZonedDateTime(zonedDateTime12);
        boolean boolean15 = jSONWriter5.isEnabled((long) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray17 = null;
        jSONWriter16.writeDouble(doubleArray17);
        boolean boolean19 = jSONWriter16.utf16;
        java.util.Map map20 = null;
        jSONWriter16.write(map20);
        java.text.DecimalFormat decimalFormat23 = null;
        jSONWriter16.writeDouble((double) 0, decimalFormat23);
        boolean boolean25 = jSONWriter16.isBeanToArray();
        jSONWriter16.writeInt32(0);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        boolean boolean33 = jSONWriter31.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter31, class34, (long) ' ');
        byte[] byteArray38 = new byte[] { (byte) -1 };
        boolean boolean40 = jSONWriter31.writeTypeName(byteArray38, 0L);
        java.util.UUID uUID41 = null;
        jSONWriter31.writeUUID(uUID41);
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter31.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context43);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context43, symbolTable45);
        com.alibaba.fastjson2.SymbolTable symbolTable47 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable47);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray49);
        boolean boolean52 = jSONWriter50.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class53 = null;
        boolean boolean55 = jSONWriter48.isWriteTypeInfo((java.lang.Object) jSONWriter50, class53, (long) ' ');
        byte[] byteArray57 = new byte[] { (byte) -1 };
        boolean boolean59 = jSONWriter50.writeTypeName(byteArray57, 0L);
        java.util.UUID uUID60 = null;
        jSONWriter50.writeUUID(uUID60);
        com.alibaba.fastjson2.JSONWriter.Context context62 = jSONWriter50.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context62);
        java.time.LocalTime localTime64 = null;
        jSONWriter63.writeLocalTime(localTime64);
        boolean boolean66 = jSONWriter63.isBeanToArray();
        boolean boolean67 = jSONWriter63.isIgnoreNoneSerializable();
        byte[] byteArray68 = jSONWriter63.getBytes();
        boolean boolean70 = jSONWriter46.writeTypeName(byteArray68, (long) (byte) 10);
        boolean boolean72 = jSONWriter16.isWriteTypeInfo((java.lang.Object) jSONWriter46, (long) (byte) 0);
        byte[] byteArray73 = jSONWriter16.getBytes();
        boolean boolean75 = jSONWriter5.writeTypeName(byteArray73, 5L);
        jSONWriter2.writeBinary(byteArray73);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNull(symbolTable3);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(context62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-81, -81, -78, 0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path6, "[1]");
        com.alibaba.fastjson2.JSONWriter.Path path13 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Path path15 = new com.alibaba.fastjson2.JSONWriter.Path(path13, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Path path17 = new com.alibaba.fastjson2.JSONWriter.Path(path15, "[1].hi\\!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1].hi\\!" + "'", str7, "[1].hi\\!");
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeChar('#');
        short[] shortArray18 = new short[] { (byte) 1, (short) 10, (short) 1 };
        jSONWriter3.writeInt16(shortArray18);
        jSONWriter3.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        byte[] byteArray35 = null;
        jSONWriter25.writeBinary(byteArray35);
        jSONWriter25.endObject();
        java.time.ZonedDateTime zonedDateTime38 = null;
        jSONWriter25.writeZonedDateTime(zonedDateTime38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray44 = null;
        jSONWriter41.writeHex(byteArray44);
        boolean boolean46 = jSONWriter41.isRefDetect();
        jSONWriter41.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class54 = null;
        boolean boolean56 = jSONWriter49.isWriteTypeInfo((java.lang.Object) jSONWriter51, class54, (long) ' ');
        byte[] byteArray58 = new byte[] { (byte) -1 };
        boolean boolean60 = jSONWriter51.writeTypeName(byteArray58, 0L);
        java.util.UUID uUID61 = null;
        jSONWriter51.writeUUID(uUID61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = jSONWriter51.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter64 = context63.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable65 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable65);
        boolean boolean67 = jSONWriter66.isRefDetect();
        java.lang.String str70 = jSONWriter66.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter72);
        long long74 = jSONWriter72.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        boolean boolean79 = jSONWriter77.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat81 = null;
        jSONWriter77.writeDouble(1.0d, decimalFormat81);
        boolean boolean84 = jSONWriter77.removeReference((java.lang.Object) (short) -1);
        jSONWriter77.writeArrayNull();
        long long86 = jSONWriter77.getFeatures();
        java.lang.Class<?> wildcardClass87 = jSONWriter77.getClass();
        boolean boolean89 = jSONWriter72.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass87, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter90 = jSONWriter66.getObjectWriter((java.lang.Class) wildcardClass87);
        boolean boolean91 = jSONWriter41.isWriteTypeInfo((java.lang.Object) context63, (java.lang.reflect.Type) wildcardClass87);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter92 = jSONWriter25.getObjectWriter((java.lang.Class) wildcardClass87);
        boolean boolean93 = jSONWriter3.isRefDetect((java.lang.Object) jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1, 10, 1]");
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(context63);
        org.junit.Assert.assertNull(propertyFilter64);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objectWriter90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objectWriter92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        java.nio.charset.Charset charset17 = jSONWriter6.getCharset();
        jSONWriter6.writeComma();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(charset17);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        long long8 = jSONWriter6.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter11.writeDouble(1.0d, decimalFormat15);
        boolean boolean18 = jSONWriter11.removeReference((java.lang.Object) (short) -1);
        jSONWriter11.writeArrayNull();
        long long20 = jSONWriter11.getFeatures();
        java.lang.Class<?> wildcardClass21 = jSONWriter11.getClass();
        boolean boolean23 = jSONWriter6.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass21, (long) (short) 10);
        int[] intArray30 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter6.writeInt32(intArray30);
        jSONWriter1.writeInt32(intArray30);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        boolean[] booleanArray39 = new boolean[] { false, true, true, true };
        jSONWriter34.writeBool(booleanArray39);
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        jSONWriter34.writeBinary(byteArray51);
        byte[] byteArray55 = jSONWriter34.getBytes();
        jSONWriter1.writeRaw(byteArray55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = jSONWriter1.context;
        long long58 = context57.getFeatures();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-104, -80, -79, -79, -79, -111, 1, -1]");
        org.junit.Assert.assertNotNull(context57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        boolean boolean17 = jSONWriter1.jsonb;
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter34 = context33.getPropertyFilter();
        long long35 = context33.getFeatures();
        long long36 = context33.getFeatures();
        jSONWriter1.startArray((java.lang.Object) long36, (int) (short) 100);
        boolean boolean39 = jSONWriter1.isWriteNulls();
        boolean boolean40 = jSONWriter1.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertNull(propertyFilter34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        boolean boolean27 = jSONWriter26.isRefDetect();
        java.lang.String str30 = jSONWriter26.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        long long34 = jSONWriter32.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter37.writeDouble(1.0d, decimalFormat41);
        boolean boolean44 = jSONWriter37.removeReference((java.lang.Object) (short) -1);
        jSONWriter37.writeArrayNull();
        long long46 = jSONWriter37.getFeatures();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean49 = jSONWriter32.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass47, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter50 = jSONWriter26.getObjectWriter((java.lang.Class) wildcardClass47);
        boolean boolean51 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context23, (java.lang.reflect.Type) wildcardClass47);
        com.alibaba.fastjson2.SymbolTable symbolTable52 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class58 = null;
        boolean boolean60 = jSONWriter53.isWriteTypeInfo((java.lang.Object) jSONWriter55, class58, (long) ' ');
        byte[] byteArray62 = new byte[] { (byte) -1 };
        boolean boolean64 = jSONWriter55.writeTypeName(byteArray62, 0L);
        java.util.UUID uUID65 = null;
        jSONWriter55.writeUUID(uUID65);
        com.alibaba.fastjson2.JSONWriter.Context context67 = jSONWriter55.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context67.config(feature68, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean74 = jSONWriter72.isRefDetect((java.lang.Object) feature73);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature73 };
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray75);
        context67.config(featureArray75);
        boolean boolean79 = context67.isDateFormatHasDay();
        boolean boolean81 = context67.isEnabled(97L);
        boolean boolean82 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) boolean81);
        boolean boolean83 = jSONWriter1.isWriteNulls();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objectWriter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(context67);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        boolean[] booleanArray6 = new boolean[] { true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        boolean boolean18 = jSONWriter9.isEnabled((long) ' ');
        jSONWriter9.writeString("hi!");
        char[] charArray21 = new char[] {};
        jSONWriter9.writeString(charArray21);
        jSONWriter1.writeString(charArray21, 10, (int) (short) 0);
        com.alibaba.fastjson2.JSONObject jSONObject26 = null;
        jSONWriter1.write(jSONObject26);
        java.math.BigDecimal bigDecimal28 = null;
        jSONWriter1.writeDecimal(bigDecimal28);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.of(context15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        jSONWriter9.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter9.getContext();
        long long24 = context23.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter25 = null;
        context23.setContextValueFilter(contextValueFilter25);
        boolean boolean27 = context23.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.of(context23);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider0 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider0, featureArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: objectWriterProvider must not null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray0);
        jSONWriter3.writeString("[1][0]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter5.isWriteTypeInfo((java.lang.Object) jSONWriter7, class10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) boolean12, (java.lang.reflect.Type) wildcardClass24, 0L);
        jSONWriter1.writeStringNull();
        int int28 = jSONWriter1.level();
        jSONWriter1.writeStringNull();
        jSONWriter1.writeInt8((byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        java.time.LocalTime localTime34 = null;
        jSONWriter33.writeLocalTime(localTime34);
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter39, class42, (long) ' ');
        byte[] byteArray46 = new byte[] { (byte) -1 };
        boolean boolean48 = jSONWriter39.writeTypeName(byteArray46, 0L);
        jSONWriter33.writeBinary(byteArray46);
        jSONWriter1.writeNameRaw(byteArray46, 0L);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10, (byte) 1 };
        boolean boolean60 = jSONWriter1.writeTypeName(byteArray58, 0L);
        boolean boolean61 = jSONWriter1.isUseSingleQuotes();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName((long) (short) 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, -1, -1, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context15.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.filter.NameFilter nameFilter22 = null;
        context15.setNameFilter(nameFilter22);
        boolean boolean24 = context15.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextValueFilter19);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter27 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter28 = null;
        context15.setContextNameFilter(contextNameFilter28);
        boolean boolean30 = context15.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(contextValueFilter27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        jSONWriter0.writeFloat((java.lang.Float) 1.0f);
        jSONWriter0.writeBool(false);
        boolean boolean16 = jSONWriter0.isUTF16();
        boolean boolean17 = jSONWriter0.isIgnoreErrorGetter();
        jSONWriter0.writeInt32((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeName((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeName("[1].hi\\!");
        jSONWriter3.writeInt8((byte) 1);
        long long18 = jSONWriter3.getFeatures((long) 'a');
        jSONWriter3.writeChar(' ');
        boolean boolean21 = jSONWriter3.utf16;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) '#');
        jSONWriter1.startArray(0);
        jSONWriter1.writeInt32((int) (short) 100);
        long long29 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable30 = jSONWriter1.getSymbolTable();
        java.util.Map map31 = null;
        jSONWriter1.write(map31);
        boolean boolean33 = jSONWriter1.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNull(symbolTable30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context15.setContextValueFilter(contextValueFilter17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = context34.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider36 = context34.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter37 = context34.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray39);
        context34.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        context15.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray39);
        jSONWriter46.writeDoubleArray((double) (short) 0, (double) 137438953482L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNull(propertyFilter35);
        org.junit.Assert.assertNotNull(objectWriterProvider36);
        org.junit.Assert.assertNull(afterFilter37);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter46);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        byte[] byteArray40 = new byte[] { (byte) -1 };
        boolean boolean42 = jSONWriter33.writeTypeName(byteArray40, 0L);
        byte[] byteArray43 = null;
        jSONWriter33.writeBinary(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) -1, (byte) 1, (byte) -1 };
        jSONWriter33.writeHex(byteArray51);
        jSONWriter25.writeBinary(byteArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter25.containsReference(obj54);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        jSONWriter57.close();
        jSONWriter57.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable61 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        boolean boolean66 = jSONWriter64.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class67 = null;
        boolean boolean69 = jSONWriter62.isWriteTypeInfo((java.lang.Object) jSONWriter64, class67, (long) ' ');
        boolean boolean71 = jSONWriter62.isEnabled((long) ' ');
        jSONWriter62.writeString("hi!");
        boolean boolean74 = jSONWriter62.isUTF8();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        jSONWriter62.writeString((java.util.List<java.lang.String>) strList78);
        jSONWriter57.writeString((java.util.List<java.lang.String>) strList78);
        jSONWriter25.write((java.util.List) strList78);
        boolean boolean83 = jSONWriter25.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 1, -1, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        long long13 = jSONWriter1.getFeatures((long) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        boolean boolean16 = jSONWriter15.isRefDetect();
        jSONWriter15.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter24 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        boolean[] booleanArray31 = new boolean[] { false, true, true, true };
        jSONWriter26.writeBool(booleanArray31);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        byte[] byteArray43 = new byte[] { (byte) -1 };
        boolean boolean45 = jSONWriter36.writeTypeName(byteArray43, 0L);
        jSONWriter26.writeBinary(byteArray43);
        java.lang.String str47 = jSONWriter15.setPath(fieldWriter24, (java.lang.Object) jSONWriter26);
        boolean boolean49 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter26, (long) (byte) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        boolean boolean55 = jSONWriter53.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class56 = null;
        boolean boolean58 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter53, class56, (long) ' ');
        byte[] byteArray60 = new byte[] { (byte) -1 };
        boolean boolean62 = jSONWriter53.writeTypeName(byteArray60, 0L);
        java.util.UUID uUID63 = null;
        jSONWriter53.writeUUID(uUID63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter53.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter66 = context65.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter67 = null;
        context65.setContextValueFilter(contextValueFilter67);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter69 = context65.getContextValueFilter();
        boolean boolean70 = context65.isDateFormatHasDay();
        boolean boolean71 = context65.isDateFormatHasHour();
        boolean boolean72 = jSONWriter26.isRefDetect((java.lang.Object) context65);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(context65);
        org.junit.Assert.assertNull(propertyFilter66);
        org.junit.Assert.assertNull(contextValueFilter69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        java.lang.String str23 = context21.getDateFormat();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter24 = null;
        context21.setValueFilter(valueFilter24);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter26 = null;
        context21.setBeforeFilter(beforeFilter26);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter28 = context21.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(contextNameFilter28);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        long long6 = jSONWriter1.getFeatures();
        jSONWriter1.writeDateTime19((-1), (int) (byte) 1, (int) (short) 1, 8, 5, (int) (byte) 10);
        jSONWriter1.close();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter1.writeBinary(byteArray27);
        int int33 = jSONWriter1.level();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDateTimeISO8601((int) 'a', (int) 'a', (int) (short) 100, 12, 12, 10, (int) '#', (int) (byte) 0, false);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) '#');
        jSONWriter1.startArray(0);
        jSONWriter1.writeInt32((int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter1.context;
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = null;
        context29.setAfterFilter(afterFilter30);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter32 = context29.getPropertyFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNull(propertyFilter32);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 0);
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path4, (int) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, (int) (byte) 0);
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path12, "");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter16);
        boolean boolean18 = jSONWriter16.utf16;
        jSONWriter16.endObject();
        com.alibaba.fastjson2.JSONWriter.Context context20 = jSONWriter16.getContext();
        boolean boolean21 = path12.equals((java.lang.Object) context20);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        jSONWriter1.writeString("");
        long[] longArray16 = new long[] { (short) -1 };
        jSONWriter1.writeInt64(longArray16);
        boolean boolean18 = jSONWriter1.utf8;
        java.io.Reader reader19 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader19);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        jSONWriter3.close();
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter3.writeFloat((float) 10, decimalFormat6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean14 = jSONWriter9.writeTypeName(byteArray12, (long) 10);
        boolean boolean16 = jSONWriter3.writeTypeName(byteArray12, (long) (byte) 100);
        jSONWriter1.writeNameRaw(byteArray12, 0L);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        char[] charArray23 = new char[] { '#', ' ' };
        jSONWriter20.writeString(charArray23, (int) (byte) 0, (int) (short) 1);
        jSONWriter1.writeString(charArray23);
        boolean boolean28 = jSONWriter1.isUTF16();
        boolean boolean30 = jSONWriter1.isEnabled((long) (short) 0);
        java.time.LocalDate localDate31 = null;
        jSONWriter1.writeLocalDate(localDate31);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#,  ]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path4.toString();
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        java.util.UUID uUID21 = null;
        jSONWriter11.writeUUID(uUID21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter11.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context23.getPropertyFilter();
        long long25 = context23.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context23.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context23.provider;
        boolean boolean29 = path4.equals((java.lang.Object) context23);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = context23.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter31 = null;
        context23.setNameFilter(nameFilter31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context23);
        long long34 = context23.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context23.config(feature35, false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1]" + "'", str7, "[1]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(afterFilter30);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        java.util.Map map15 = null;
        jSONWriter3.write(map15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        java.time.LocalTime localTime19 = null;
        jSONWriter18.writeLocalTime(localTime19);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        jSONWriter18.writeBinary(byteArray31);
        jSONWriter3.writeBinary(byteArray31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray40 = null;
        jSONWriter37.writeHex(byteArray40);
        boolean boolean42 = jSONWriter37.isRefDetect();
        jSONWriter37.writeNumberNull();
        jSONWriter37.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean47 = jSONWriter37.isEnabled(feature46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter49);
        long long51 = jSONWriter49.getFeatures();
        java.time.LocalDateTime localDateTime52 = null;
        jSONWriter49.writeLocalDateTime(localDateTime52);
        byte[] byteArray54 = jSONWriter49.getBytes();
        jSONWriter37.writeStringLatin1(byteArray54);
        jSONWriter3.writeBinary(byteArray54);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter3.writeFloat((float) (byte) 0, decimalFormat58);
        jSONWriter3.writeMillis((long) (byte) 100);
        int int62 = jSONWriter3.size();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-81]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 21 + "'", int62 == 21);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj12 = null;
        jSONWriter1.startArray(obj12, (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean16 = jSONWriter15.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean18 = jSONWriter15.isEnabled(feature17);
        boolean boolean19 = jSONWriter1.isEnabled(feature17);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        boolean[] booleanArray26 = new boolean[] { false, true, true, true };
        jSONWriter21.writeBool(booleanArray26);
        jSONWriter1.writeBool(booleanArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        jSONWriter29.writeString("[1]");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter29);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.time.Instant instant4 = null;
        jSONWriter0.writeInstant(instant4);
        jSONWriter0.writeBool(false);
        jSONWriter0.writeString("[1].hi\\!");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        jSONWriter1.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        jSONWriter18.close();
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter18.writeFloat((float) 10, decimalFormat21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean29 = jSONWriter24.writeTypeName(byteArray27, (long) 10);
        boolean boolean31 = jSONWriter18.writeTypeName(byteArray27, (long) (byte) 100);
        jSONWriter1.writeBinary(byteArray27);
        boolean boolean34 = jSONWriter1.hasFilter((long) 100);
        com.alibaba.fastjson2.JSONObject jSONObject35 = null;
        jSONWriter1.write(jSONObject35);
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        boolean[] booleanArray43 = new boolean[] { false, true, true, true };
        jSONWriter38.writeBool(booleanArray43);
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray47);
        boolean boolean50 = jSONWriter48.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter46.isWriteTypeInfo((java.lang.Object) jSONWriter48, class51, (long) ' ');
        byte[] byteArray55 = new byte[] { (byte) -1 };
        boolean boolean57 = jSONWriter48.writeTypeName(byteArray55, 0L);
        jSONWriter38.writeBinary(byteArray55);
        jSONWriter1.writeStringLatin1(byteArray55);
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.SymbolTable symbolTable61 = jSONWriter1.getSymbolTable();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(symbolTable61);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        jSONWriter1.writeDateYYYMMDD8((int) 'a', (int) '4', 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray12 = null;
        jSONWriter11.writeDouble(doubleArray12);
        jSONWriter11.writeArrayNull();
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter11.writeFloat((float) (short) 1, decimalFormat16);
        boolean boolean18 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (short) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter36 = context35.getPropertyFilter();
        long long37 = context35.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context35.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context35, symbolTable40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter41);
        java.lang.String str43 = jSONWriter1.setPath((int) (byte) 1, (java.lang.Object) jSONWriter41);
        jSONWriter41.writeMillis((long) (short) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter62 = context61.getPropertyFilter();
        long long63 = context61.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter64 = null;
        context61.setLabelFilter(labelFilter64);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider66 = context61.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        com.alibaba.fastjson2.JSONWriter.Context context69 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.of(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider66, featureArray67);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        com.alibaba.fastjson2.JSONWriter.Context context77 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray74);
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider66, featureArray74);
        jSONWriter41.config(featureArray74);
        com.alibaba.fastjson2.JSONWriter.Context context80 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNull(propertyFilter36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNull(propertyFilter62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider66);
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter76);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        boolean boolean25 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context15.provider;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider27);
        context28.setDateFormat("[1][10]");
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        jSONWriter27.close();
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter27.writeFloat((float) 10, decimalFormat30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean38 = jSONWriter33.writeTypeName(byteArray36, (long) 10);
        boolean boolean40 = jSONWriter27.writeTypeName(byteArray36, (long) (byte) 100);
        jSONWriter27.writeInt16((short) (byte) 100);
        boolean boolean43 = jSONWriter27.hasFilter();
        java.nio.charset.Charset charset44 = jSONWriter27.getCharset();
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        boolean[] booleanArray51 = new boolean[] { false, true, true, true };
        jSONWriter46.writeBool(booleanArray51);
        jSONWriter27.writeBool(booleanArray51);
        jSONWriter25.writeBool(booleanArray51);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, true, true, true]");
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) '#');
        jSONWriter1.startArray(0);
        jSONWriter1.writeInt32((int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter31);
        boolean boolean34 = jSONWriter32.hasFilter(0L);
        java.lang.String str35 = jSONWriter1.setPath((int) (byte) 1, (java.lang.Object) jSONWriter32);
        jSONWriter1.close();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeInt16((short) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path17 = null;
        com.alibaba.fastjson2.JSONWriter.Path path19 = new com.alibaba.fastjson2.JSONWriter.Path(path17, "");
        com.alibaba.fastjson2.JSONWriter.Path path21 = new com.alibaba.fastjson2.JSONWriter.Path(path19, (int) (byte) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class28 = null;
        boolean boolean30 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter25, class28, (long) ' ');
        byte[] byteArray32 = new byte[] { (byte) -1 };
        boolean boolean34 = jSONWriter25.writeTypeName(byteArray32, 0L);
        java.util.UUID uUID35 = null;
        jSONWriter25.writeUUID(uUID35);
        jSONWriter25.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable39 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        boolean boolean44 = jSONWriter42.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class45 = null;
        boolean boolean47 = jSONWriter40.isWriteTypeInfo((java.lang.Object) jSONWriter42, class45, (long) ' ');
        byte[] byteArray49 = new byte[] { (byte) -1 };
        boolean boolean51 = jSONWriter42.writeTypeName(byteArray49, 0L);
        java.util.UUID uUID52 = null;
        jSONWriter42.writeUUID(uUID52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = jSONWriter42.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context54.config(feature55, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray58);
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean61 = jSONWriter59.isRefDetect((java.lang.Object) feature60);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature60 };
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray62);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray62);
        context54.config(featureArray62);
        jSONWriter25.config(featureArray62);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.of(featureArray62);
        byte[] byteArray68 = jSONWriter67.getBytes();
        boolean boolean69 = path21.equals((java.lang.Object) byteArray68);
        com.alibaba.fastjson2.JSONWriter.Path path71 = new com.alibaba.fastjson2.JSONWriter.Path(path21, "[1].hi\\![35][100]");
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeNameAny((java.lang.Object) path71);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(context54);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) feature24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24 };
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        jSONWriter21.config(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray26);
        jSONWriter30.writeComma();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter30);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        java.nio.charset.Charset charset4 = jSONWriter1.getCharset();
        boolean boolean5 = jSONWriter1.jsonb;
        boolean boolean6 = jSONWriter1.isRefDetect();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) 100 };
        boolean boolean12 = jSONWriter1.writeTypeName(byteArray10, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int[] intArray18 = new int[] { (short) -1 };
        jSONWriter16.writeInt32(intArray18);
        java.lang.String str20 = jSONWriter1.setPath("hi!", (java.lang.Object) intArray18);
        jSONWriter1.startObject();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isRefDetect();
        jSONWriter1.writeNumberNull();
        jSONWriter1.writeFloat((java.lang.Float) 0.0f);
        java.time.LocalDateTime localDateTime10 = null;
        jSONWriter1.writeLocalDateTime(localDateTime10);
        boolean boolean13 = jSONWriter1.hasFilter((long) 2);
        long long14 = jSONWriter1.getFeatures();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.of(context4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        boolean boolean14 = jSONWriter7.removeReference((java.lang.Object) (short) -1);
        jSONWriter7.writeArrayNull();
        jSONWriter7.startArray((int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = null;
        jSONWriter18.writeDouble(doubleArray19);
        jSONWriter18.writeArrayNull();
        short[] shortArray25 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter18.writeInt16(shortArray25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal31 = null;
        jSONWriter28.writeDecimal(bigDecimal31);
        boolean boolean34 = jSONWriter28.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter28.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        char[] charArray43 = new char[] { '#', ' ' };
        jSONWriter40.writeString(charArray43, (int) (byte) 0, (int) (short) 1);
        jSONWriter28.writeString(charArray43);
        jSONWriter18.writeString(charArray43);
        jSONWriter7.writeString(charArray43);
        jSONWriter5.writeString(charArray43);
        com.alibaba.fastjson2.SymbolTable symbolTable51 = jSONWriter5.symbolTable;
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#,  ]");
        org.junit.Assert.assertNull(symbolTable51);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        short[] shortArray7 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter0.writeInt16(shortArray7);
        boolean boolean9 = jSONWriter0.isWriteNulls();
        boolean boolean11 = jSONWriter0.isEnabled((long) (byte) -1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray16 = null;
        jSONWriter13.writeHex(byteArray16);
        boolean boolean18 = jSONWriter13.isWriteNulls();
        jSONWriter13.writeInt64((long) 5);
        boolean boolean21 = jSONWriter0.removeReference((java.lang.Object) jSONWriter13);
        boolean boolean22 = jSONWriter0.isIgnoreNoneSerializable();
        boolean boolean23 = jSONWriter0.useSingleQuote;
        com.alibaba.fastjson2.JSONObject jSONObject24 = null;
        jSONWriter0.write(jSONObject24);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        jSONWriter1.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        com.alibaba.fastjson2.JSONObject jSONObject13 = null;
        jSONWriter1.write(jSONObject13);
        jSONWriter1.writeBool(true);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        java.util.UUID uUID14 = null;
        jSONWriter4.writeUUID(uUID14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter4.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter17 = context16.getPropertyFilter();
        long long18 = context16.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter19 = null;
        context16.setLabelFilter(labelFilter19);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter21 = null;
        context16.setValueFilter(valueFilter21);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter23 = context16.getContextNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        byte[] byteArray35 = new byte[] { (byte) -1 };
        boolean boolean37 = jSONWriter28.writeTypeName(byteArray35, 0L);
        byte[] byteArray38 = null;
        jSONWriter28.writeBinary(byteArray38);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        java.lang.Class class41 = null;
        jSONWriter28.checkAndWriteTypeName((java.lang.Object) feature40, class41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature40 };
        context16.config(featureArray43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context("[1]", featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(propertyFilter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(contextNameFilter23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter46);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray5);
        boolean boolean9 = jSONWriter8.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        boolean boolean17 = jSONWriter3.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter19.writeDecimal(bigDecimal22);
        java.lang.Object obj24 = null;
        java.lang.Class class25 = null;
        jSONWriter19.checkAndWriteTypeName(obj24, class25);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean28 = jSONWriter19.isEnabled(feature27);
        boolean boolean30 = jSONWriter3.isWriteTypeInfo((java.lang.Object) boolean28, 100L);
        boolean boolean32 = jSONWriter3.hasFilter((long) (short) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        java.util.UUID uUID14 = null;
        jSONWriter4.writeUUID(uUID14);
        jSONWriter4.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter21, class24, (long) ' ');
        byte[] byteArray28 = new byte[] { (byte) -1 };
        boolean boolean30 = jSONWriter21.writeTypeName(byteArray28, 0L);
        java.util.UUID uUID31 = null;
        jSONWriter21.writeUUID(uUID31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = jSONWriter21.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context33.config(feature34, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) feature39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature39 };
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray41);
        context33.config(featureArray41);
        jSONWriter4.config(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.of(featureArray41);
        com.alibaba.fastjson2.JSONWriter.Context context47 = new com.alibaba.fastjson2.JSONWriter.Context("[52]", featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter48);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        long long6 = jSONWriter1.getFeatures();
        jSONWriter1.writeRaw((byte) -1);
        jSONWriter1.writeString("");
        jSONWriter1.endArray();
        boolean boolean12 = jSONWriter1.isRefDetect();
        int int13 = jSONWriter1.size();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter7);
        long long9 = jSONWriter7.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter12.writeDouble(1.0d, decimalFormat16);
        boolean boolean19 = jSONWriter12.removeReference((java.lang.Object) (short) -1);
        jSONWriter12.writeArrayNull();
        long long21 = jSONWriter12.getFeatures();
        java.lang.Class<?> wildcardClass22 = jSONWriter12.getClass();
        boolean boolean24 = jSONWriter7.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass22, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter25 = jSONWriter1.getObjectWriter((java.lang.Class) wildcardClass22);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue;
        jSONWriter1.config(feature26, false);
        jSONWriter1.writeNumberNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectWriter25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteDefaultValue));
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        long long18 = context15.getFeatures();
        boolean boolean19 = context15.isDateFormatHasHour();
        java.time.ZoneId zoneId20 = context15.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter21 = context15.getBeforeFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter;
        context15.config(feature22, true);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter));
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.SymbolTable symbolTable21 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter24, class27, (long) ' ');
        byte[] byteArray31 = new byte[] { (byte) -1 };
        boolean boolean33 = jSONWriter24.writeTypeName(byteArray31, 0L);
        java.util.UUID uUID34 = null;
        jSONWriter24.writeUUID(uUID34);
        jSONWriter24.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray40);
        boolean boolean43 = jSONWriter41.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter41, class44, (long) ' ');
        byte[] byteArray48 = new byte[] { (byte) -1 };
        boolean boolean50 = jSONWriter41.writeTypeName(byteArray48, 0L);
        java.util.UUID uUID51 = null;
        jSONWriter41.writeUUID(uUID51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter41.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context53.config(feature54, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) feature59);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature59 };
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray61);
        context53.config(featureArray61);
        jSONWriter24.config(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context66 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.of(featureArray61);
        jSONWriter67.writeInt16((short) (byte) -1);
        jSONWriter67.writeInt16((short) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter67);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        java.math.BigInteger bigInteger11 = null;
        jSONWriter1.writeBigInt(bigInteger11, (-1L));
        java.util.Map map14 = null;
        jSONWriter1.write(map14);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean19 = jSONWriter17.isRefDetect((java.lang.Object) feature18);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature18 };
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean26 = jSONWriter24.isRefDetect((java.lang.Object) feature25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature25 };
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray27);
        java.time.ZoneId zoneId30 = null;
        context29.setZoneId(zoneId30);
        jSONWriter22.popPath((java.lang.Object) context29);
        float[] floatArray33 = new float[] {};
        jSONWriter22.writeFloat(floatArray33);
        jSONWriter1.writeFloat(floatArray33);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw("[1][0].\\[1\\]\\.hi\\\\\\!");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[]");
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        boolean boolean22 = context15.isDateFormatHasHour();
        boolean boolean23 = context15.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter24 = context15.getContextValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(contextValueFilter24);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.util.Map map4 = null;
        jSONWriter0.write(map4);
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter0.writeDouble((double) 0, decimalFormat7);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDateTimeISO8601((int) (short) 0, (int) (short) 100, (int) (short) 1, (int) (byte) 10, 12, (int) ' ', 100, 21, true);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context22);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = context22.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context22.getProvider();
        java.lang.String str26 = context22.getDateFormat();
        boolean boolean27 = jSONWriter1.removeReference((java.lang.Object) context22);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter28 = context22.getLabelFilter();
        java.time.ZoneId zoneId29 = context22.getZoneId();
        java.time.ZoneId zoneId30 = context22.getZoneId();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter31 = null;
        context22.setContextNameFilter(contextNameFilter31);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(labelFilter28);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertNotNull(zoneId30);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        jSONWriter3.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter20.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context32.config(feature33, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean39 = jSONWriter37.isRefDetect((java.lang.Object) feature38);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context32.config(featureArray40);
        jSONWriter3.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray40);
        context45.setDateFormat("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal52 = null;
        jSONWriter49.writeDecimal(bigDecimal52);
        boolean boolean55 = jSONWriter49.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter49.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj60 = null;
        jSONWriter49.startArray(obj60, (-1));
        jSONWriter49.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        java.lang.String[] strArray72 = new java.lang.String[] { "[1].hi\\!", "[1].hi\\!", "hi!", "[1]", "$" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        jSONWriter49.writeString((java.util.List<java.lang.String>) strList73);
        jSONWriter49.writeDateYYYMMDD8((int) (short) 1, (int) (byte) 0, (int) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature80 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter49.writeAny((java.lang.Object) feature80);
        boolean boolean82 = context45.isEnabled(feature80);
        boolean boolean83 = context45.isDateFormatMillis();
        com.alibaba.fastjson2.JSONWriter.Feature feature84 = null;
        // The following exception was thrown during execution in test generation
        try {
            context45.config(feature84, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature80.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        jSONWriter1.writeMillis((long) (byte) 10);
        jSONWriter1.writeDateTime14(3, (int) (short) 100, 0, 100, (int) (short) 0, (int) (byte) 0);
        jSONWriter1.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        java.util.UUID uUID19 = null;
        jSONWriter9.writeUUID(uUID19);
        jSONWriter9.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter9.getContext();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter27, class30, (long) ' ');
        byte[] byteArray34 = new byte[] { (byte) -1 };
        boolean boolean36 = jSONWriter27.writeTypeName(byteArray34, 0L);
        java.util.UUID uUID37 = null;
        jSONWriter27.writeUUID(uUID37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = jSONWriter27.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter40 = context39.getPropertyFilter();
        long long41 = context39.getFeatures();
        long long42 = context39.getFeatures();
        boolean boolean43 = context39.isDateFormatHasHour();
        java.time.ZoneId zoneId44 = context39.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter45 = context39.getBeforeFilter();
        boolean boolean46 = jSONWriter9.isWriteTypeInfo((java.lang.Object) beforeFilter45);
        boolean boolean48 = jSONWriter9.hasFilter(97L);
        jSONWriter9.writeDateYYYMMDD8(10, 12, 4);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(context23);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(context39);
        org.junit.Assert.assertNull(propertyFilter40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertNull(beforeFilter45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter19 = null;
        context15.setNameFilter(nameFilter19);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter21 = context15.getAfterFilter();
        boolean boolean22 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter23 = null;
        context15.setLabelFilter(labelFilter23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNull(afterFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        jSONWriter1.writeBinary(byteArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter1.writeDouble((double) 10L, decimalFormat24);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        boolean boolean29 = jSONWriter27.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal30 = null;
        jSONWriter27.writeDecimal(bigDecimal30);
        java.lang.Object obj32 = null;
        java.lang.Class class33 = null;
        jSONWriter27.checkAndWriteTypeName(obj32, class33);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean36 = jSONWriter27.isEnabled(feature35);
        com.alibaba.fastjson2.SymbolTable symbolTable37 = jSONWriter27.symbolTable;
        jSONWriter27.writeInt16((short) (byte) 1);
        jSONWriter27.writeMillis((long) 5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        jSONWriter43.close();
        jSONWriter43.writeSymbol("");
        jSONWriter43.writeBooleanNull();
        jSONWriter43.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context64);
        java.time.format.DateTimeFormatter dateTimeFormatter66 = context64.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider67 = context64.getProvider();
        java.lang.String str68 = context64.getDateFormat();
        boolean boolean69 = jSONWriter43.removeReference((java.lang.Object) context64);
        short[] shortArray76 = new short[] { (byte) 1, (byte) 100, (short) 10, (byte) 10, (byte) 0, (byte) 1 };
        jSONWriter43.writeInt16(shortArray76);
        jSONWriter27.writeInt16(shortArray76);
        jSONWriter27.writeChar('#');
        jSONWriter27.startArray((int) (byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray84 = null;
        jSONWriter83.writeDouble(doubleArray84);
        jSONWriter83.writeArrayNull();
        jSONWriter83.writeSymbol((int) (byte) 10);
        jSONWriter83.close();
        java.math.BigInteger bigInteger90 = null;
        jSONWriter83.writeBigInt(bigInteger90, 100L);
        jSONWriter83.writeRaw((byte) 10);
        byte[] byteArray95 = jSONWriter83.getBytes();
        jSONWriter27.writeHex(byteArray95);
        jSONWriter1.writeHex(byteArray95);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(symbolTable37);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(objectWriterProvider67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(shortArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray76), "[1, 100, 10, 10, 0, 1]");
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-81, -81, 127, 10, -81, 10]");
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        java.util.UUID uUID23 = null;
        jSONWriter22.writeUUID(uUID23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        boolean[] booleanArray17 = new boolean[] { false, true, true, true };
        jSONWriter12.writeBool(booleanArray17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        jSONWriter12.writeBinary(byteArray29);
        java.lang.String str33 = jSONWriter1.setPath(fieldWriter10, (java.lang.Object) jSONWriter12);
        jSONWriter1.writeChar('a');
        boolean boolean36 = jSONWriter1.isIgnoreNoneSerializable();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        char[] charArray13 = new char[] {};
        jSONWriter1.writeString(charArray13);
        boolean boolean15 = jSONWriter1.isUTF8();
        boolean boolean16 = jSONWriter1.isBeanToArray();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.endArray();
        boolean boolean21 = jSONWriter1.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter1.getContext();
        jSONWriter1.writeTypeName(".\\[1\\]\\.hi\\\\\\!");
        jSONWriter1.writeSymbol(0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(context22);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        long long9 = jSONWriter1.getFeatures();
        int int10 = jSONWriter1.level();
        boolean boolean11 = jSONWriter1.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.SymbolTable symbolTable5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter6.isWriteTypeInfo((java.lang.Object) jSONWriter8, class11, (long) ' ');
        byte[] byteArray15 = new byte[] { (byte) -1 };
        boolean boolean17 = jSONWriter8.writeTypeName(byteArray15, 0L);
        java.util.UUID uUID18 = null;
        jSONWriter8.writeUUID(uUID18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = jSONWriter8.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context20);
        java.time.LocalTime localTime22 = null;
        jSONWriter21.writeLocalTime(localTime22);
        boolean boolean24 = jSONWriter21.isBeanToArray();
        boolean boolean25 = jSONWriter21.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter.Path path26 = null;
        com.alibaba.fastjson2.JSONWriter.Path path28 = new com.alibaba.fastjson2.JSONWriter.Path(path26, "");
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path28, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path32 = new com.alibaba.fastjson2.JSONWriter.Path(path30, "hi!");
        java.lang.String str33 = path32.toString();
        com.alibaba.fastjson2.JSONWriter.Path path35 = new com.alibaba.fastjson2.JSONWriter.Path(path32, (int) '#');
        boolean boolean36 = jSONWriter21.isRefDetect((java.lang.Object) path35);
        com.alibaba.fastjson2.SymbolTable symbolTable37 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable37);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        boolean boolean42 = jSONWriter40.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class43 = null;
        boolean boolean45 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter40, class43, (long) ' ');
        byte[] byteArray47 = new byte[] { (byte) -1 };
        boolean boolean49 = jSONWriter40.writeTypeName(byteArray47, 0L);
        java.util.UUID uUID50 = null;
        jSONWriter40.writeUUID(uUID50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = jSONWriter40.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context52.config(feature53, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean59 = jSONWriter57.isRefDetect((java.lang.Object) feature58);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature58 };
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray60);
        context52.config(featureArray60);
        boolean boolean64 = context52.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray66 = null;
        jSONWriter65.writeDouble(doubleArray66);
        boolean boolean68 = jSONWriter65.utf16;
        java.math.BigDecimal bigDecimal69 = null;
        jSONWriter65.writeDecimal(bigDecimal69, 100L);
        boolean boolean72 = jSONWriter65.utf16;
        java.lang.Object obj73 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        boolean boolean77 = jSONWriter75.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat79 = null;
        jSONWriter75.writeDouble(1.0d, decimalFormat79);
        boolean boolean82 = jSONWriter75.removeReference((java.lang.Object) (short) -1);
        jSONWriter75.writeArrayNull();
        long long84 = jSONWriter75.getFeatures();
        java.lang.Class<?> wildcardClass85 = jSONWriter75.getClass();
        boolean boolean87 = jSONWriter65.isWriteTypeInfo(obj73, (java.lang.Class) wildcardClass85, (long) (short) 0);
        boolean boolean89 = jSONWriter21.isWriteMapTypeInfo((java.lang.Object) boolean64, (java.lang.Class) wildcardClass85, (long) '#');
        jSONWriter21.startObject();
        boolean boolean91 = jSONWriter4.removeReference((java.lang.Object) jSONWriter21);
        jSONWriter21.writeMillis(137438953482L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(context20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1].hi\\!" + "'", str33, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(context52);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isWriteNulls();
        jSONWriter1.writeInt64((long) 5);
        jSONWriter1.writeNull();
        jSONWriter1.writeArrayNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeTimeHHMMSS8(5, 13, (int) 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter1.symbolTable;
        jSONWriter1.writeFloat((java.lang.Float) 1.0f);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean8 = jSONWriter1.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        jSONWriter10.close();
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter10.writeFloat((float) 10, decimalFormat13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean21 = jSONWriter16.writeTypeName(byteArray19, (long) 10);
        boolean boolean23 = jSONWriter10.writeTypeName(byteArray19, (long) (byte) 100);
        jSONWriter10.writeInt16((short) (byte) 100);
        boolean boolean26 = jSONWriter10.hasFilter();
        java.nio.charset.Charset charset27 = jSONWriter10.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = jSONWriter1.getBytes(charset27);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: not support operator");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(symbolTable4);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charset27);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        jSONWriter1.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        boolean boolean13 = jSONWriter1.isWriteNulls();
        java.time.LocalDateTime localDateTime14 = null;
        jSONWriter1.writeLocalDateTime(localDateTime14);
        java.time.LocalDate localDate16 = null;
        jSONWriter1.writeLocalDate(localDate16);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.lang.reflect.Type type3 = null;
        boolean boolean5 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (byte) 1, type3, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean19 = jSONWriter14.writeTypeName(byteArray17, (long) 10);
        jSONWriter7.writeStringLatin1(byteArray17);
        jSONWriter1.writeNameRaw(byteArray17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter23.writeFloat((float) 10, decimalFormat26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter23.context;
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable29);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        boolean boolean34 = jSONWriter32.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter32, class35, (long) ' ');
        byte[] byteArray39 = new byte[] { (byte) -1 };
        boolean boolean41 = jSONWriter32.writeTypeName(byteArray39, 0L);
        java.util.UUID uUID42 = null;
        jSONWriter32.writeUUID(uUID42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter32.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context44);
        java.time.format.DateTimeFormatter dateTimeFormatter46 = context44.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider47 = context44.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) feature50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature50 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider47, featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        jSONWriter23.setRootObject((java.lang.Object) jSONWriter55);
        com.alibaba.fastjson2.SymbolTable symbolTable57 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        boolean boolean62 = jSONWriter60.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class63 = null;
        boolean boolean65 = jSONWriter58.isWriteTypeInfo((java.lang.Object) jSONWriter60, class63, (long) ' ');
        byte[] byteArray67 = new byte[] { (byte) 100 };
        boolean boolean69 = jSONWriter58.writeTypeName(byteArray67, (long) (-1));
        jSONWriter23.writeNameRaw(byteArray67);
        jSONWriter1.writeHex(byteArray67);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(objectWriterProvider47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        boolean[] booleanArray6 = new boolean[] { true };
        jSONWriter1.writeBool(booleanArray6);
        int int8 = jSONWriter1.size();
        java.math.BigInteger bigInteger9 = null;
        jSONWriter1.writeBigInt(bigInteger9);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        boolean boolean4 = jSONWriter3.isIgnoreErrorGetter();
        jSONWriter3.close();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        boolean boolean14 = jSONWriter7.removeReference((java.lang.Object) (short) -1);
        jSONWriter7.writeArrayNull();
        jSONWriter7.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        java.lang.String str20 = jSONWriter7.setPath("hi!", (java.lang.Object) feature19);
        boolean boolean21 = jSONWriter1.isEnabled(feature19);
        int int22 = jSONWriter1.level();
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString;
        boolean boolean25 = jSONWriter1.isEnabled(feature24);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        jSONWriter1.endArray();
        jSONWriter1.writeNumberNull();
        jSONWriter1.endArray();
        java.math.BigDecimal bigDecimal9 = null;
        jSONWriter1.writeDecimal(bigDecimal9, 65536L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean9 = jSONWriter7.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter7.writeDouble(1.0d, decimalFormat11);
        boolean boolean14 = jSONWriter7.removeReference((java.lang.Object) (short) -1);
        jSONWriter7.writeArrayNull();
        jSONWriter7.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        java.lang.String str20 = jSONWriter7.setPath("hi!", (java.lang.Object) feature19);
        boolean boolean21 = jSONWriter1.isEnabled(feature19);
        jSONWriter1.writeDateYYYMMDD8(8, (int) (byte) 10, 2);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        long long8 = jSONWriter6.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter11.writeDouble(1.0d, decimalFormat15);
        boolean boolean18 = jSONWriter11.removeReference((java.lang.Object) (short) -1);
        jSONWriter11.writeArrayNull();
        long long20 = jSONWriter11.getFeatures();
        java.lang.Class<?> wildcardClass21 = jSONWriter11.getClass();
        boolean boolean23 = jSONWriter6.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass21, (long) (short) 10);
        int[] intArray30 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter6.writeInt32(intArray30);
        jSONWriter1.writeInt32(intArray30);
        java.nio.charset.Charset charset33 = jSONWriter1.getCharset();
        boolean boolean35 = jSONWriter1.hasFilter((long) '#');
        java.nio.charset.Charset charset36 = jSONWriter1.getCharset();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset36);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        int int17 = jSONWriter16.size();
        jSONWriter16.writeBooleanNull();
        boolean boolean19 = jSONWriter16.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.JSONWriter.Context context5 = jSONWriter1.getContext();
        java.time.ZoneId zoneId6 = context5.getZoneId();
        java.time.format.DateTimeFormatter dateTimeFormatter7 = context5.getDateFormatter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(context5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNull(dateTimeFormatter7);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter1.writeFloat((float) (-1), decimalFormat16);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw(' ', 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.close();
        jSONWriter40.writeSymbol("");
        jSONWriter40.writeBooleanNull();
        jSONWriter40.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        byte[] byteArray56 = new byte[] { (byte) -1 };
        boolean boolean58 = jSONWriter49.writeTypeName(byteArray56, 0L);
        java.util.UUID uUID59 = null;
        jSONWriter49.writeUUID(uUID59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = jSONWriter49.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context61);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = context61.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider64 = context61.getProvider();
        java.lang.String str65 = context61.getDateFormat();
        boolean boolean66 = jSONWriter40.removeReference((java.lang.Object) context61);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = context61.getLabelFilter();
        java.time.ZoneId zoneId68 = context61.getZoneId();
        context38.setZoneId(zoneId68);
        context21.setZoneId(zoneId68);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context21);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter72 = null;
        context21.setPropertyFilter(propertyFilter72);
        java.lang.String str74 = context21.getDateFormat();
        boolean boolean75 = context21.isDateFormatMillis();
        boolean boolean76 = context21.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(objectWriterProvider64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(labelFilter67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray1);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter5 = context4.getContextValueFilter();
        boolean boolean7 = context4.isEnabled((long) ' ');
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter8 = context4.getPropertyFilter();
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNull(contextValueFilter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(propertyFilter8);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeChar('a');
        jSONWriter1.writeDateTime19((int) (short) 0, (int) (byte) 1, 0, (int) 'a', 100, (int) '4');
        jSONWriter1.writeNull();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        jSONWriter20.close();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter23.writeDouble(1.0d, decimalFormat27);
        boolean boolean30 = jSONWriter23.removeReference((java.lang.Object) (short) -1);
        jSONWriter23.writeArrayNull();
        long long32 = jSONWriter23.getFeatures();
        java.lang.Class<?> wildcardClass33 = jSONWriter23.getClass();
        boolean boolean34 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter20, (java.lang.reflect.Type) wildcardClass33);
        jSONWriter1.writeMillis((long) '#');
        jSONWriter1.writeNumberNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        java.util.Map map23 = null;
        jSONWriter0.write(map23);
        jSONWriter0.writeRaw((byte) 100);
        jSONWriter0.writeBool(false);
        boolean boolean29 = jSONWriter0.hasFilter();
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter0.context;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(context30);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        jSONWriter6.writeArrayNull();
        short[] shortArray13 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter6.writeInt16(shortArray13);
        java.lang.String str15 = jSONWriter1.setPath(fieldWriter5, (java.lang.Object) jSONWriter6);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        java.lang.reflect.Type type19 = null;
        boolean boolean21 = jSONWriter17.isWriteTypeInfo((java.lang.Object) (byte) 1, type19, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        jSONWriter23.close();
        jSONWriter23.writeSymbol("");
        jSONWriter23.writeBooleanNull();
        boolean boolean28 = jSONWriter23.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter30);
        long long32 = jSONWriter30.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        boolean boolean42 = jSONWriter35.removeReference((java.lang.Object) (short) -1);
        jSONWriter35.writeArrayNull();
        long long44 = jSONWriter35.getFeatures();
        java.lang.Class<?> wildcardClass45 = jSONWriter35.getClass();
        boolean boolean47 = jSONWriter30.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass45, (long) (short) 10);
        jSONWriter17.checkAndWriteTypeName((java.lang.Object) jSONWriter23, (java.lang.Class) wildcardClass45);
        jSONWriter23.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        jSONWriter52.close();
        jSONWriter52.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray57 = null;
        jSONWriter56.writeDouble(doubleArray57);
        jSONWriter56.writeArrayNull();
        short[] shortArray63 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter56.writeInt16(shortArray63);
        jSONWriter52.writeInt16(shortArray63);
        jSONWriter23.writeInt16(shortArray63);
        jSONWriter6.writeInt16(shortArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter68.writeTypeName("hi!");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 0, 100]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(jSONWriter68);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context9 = jSONWriter0.getContext();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter10 = null;
        context9.setLabelFilter(labelFilter10);
        long long12 = context9.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(context9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 137438953472L + "'", long12 == 137438953472L);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        java.time.LocalDate localDate6 = null;
        jSONWriter1.writeLocalDate(localDate6);
        jSONWriter1.writeName("hi!");
        java.time.LocalTime localTime10 = null;
        jSONWriter1.writeLocalTime(localTime10);
        java.util.UUID uUID12 = null;
        jSONWriter1.writeUUID(uUID12);
        jSONWriter1.writeNull();
        java.util.UUID uUID15 = null;
        jSONWriter1.writeUUID(uUID15);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.getContext();
        boolean boolean8 = jSONWriter1.hasFilter((long) (byte) 100);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider21 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider21, featureArray23);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter28 = null;
        context27.setBeforeFilter(beforeFilter28);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter30 = null;
        context27.setLabelFilter(labelFilter30);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertNotNull(objectWriterProvider21);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context15.config(feature16, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        context15.config(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable26);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        boolean boolean31 = jSONWriter29.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class32 = null;
        boolean boolean34 = jSONWriter27.isWriteTypeInfo((java.lang.Object) jSONWriter29, class32, (long) ' ');
        byte[] byteArray36 = new byte[] { (byte) -1 };
        boolean boolean38 = jSONWriter29.writeTypeName(byteArray36, 0L);
        jSONWriter29.writeInt8((byte) 1);
        jSONWriter29.endArray();
        jSONWriter29.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable49);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter52, class55, (long) ' ');
        byte[] byteArray59 = new byte[] { (byte) -1 };
        boolean boolean61 = jSONWriter52.writeTypeName(byteArray59, 0L);
        java.util.UUID uUID62 = null;
        jSONWriter52.writeUUID(uUID62);
        com.alibaba.fastjson2.JSONWriter.Context context64 = jSONWriter52.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context64.config(feature65, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray68);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean71 = jSONWriter69.isRefDetect((java.lang.Object) feature70);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70 };
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        context64.config(featureArray72);
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray72);
        jSONWriter29.config(featureArray72);
        boolean boolean78 = jSONWriter25.isIgnoreNoneSerializable((java.lang.Object) featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        java.math.BigDecimal bigDecimal80 = null;
        java.text.DecimalFormat decimalFormat82 = null;
        jSONWriter79.writeDecimal(bigDecimal80, 1L, decimalFormat82);
        boolean boolean84 = jSONWriter79.isWriteNulls();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(context64);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean boolean2 = jSONWriter1.isRefDetect();
        java.lang.String str5 = jSONWriter1.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONObject jSONObject6 = null;
        jSONWriter1.write(jSONObject6);
        jSONWriter1.writeDateTime14(4, (int) 'a', 3, (int) (byte) 100, 1, (-1));
        jSONWriter1.writeRaw((byte) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter39 = context38.getPropertyFilter();
        long long40 = context38.getFeatures();
        long long41 = context38.getFeatures();
        boolean boolean42 = context38.isDateFormatHasHour();
        java.time.ZoneId zoneId43 = context38.getZoneId();
        context15.setZoneId(zoneId43);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter45 = null;
        context15.setPropertyPreFilter(propertyPreFilter45);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter47 = null;
        context15.setValueFilter(valueFilter47);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable49);
        java.time.Instant instant51 = null;
        jSONWriter50.writeInstant(instant51);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray53);
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean56 = jSONWriter54.isRefDetect((java.lang.Object) feature55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature55 };
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean63 = jSONWriter61.isRefDetect((java.lang.Object) feature62);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature62 };
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray64);
        com.alibaba.fastjson2.JSONWriter.Context context66 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray64);
        java.time.ZoneId zoneId67 = null;
        context66.setZoneId(zoneId67);
        jSONWriter59.popPath((java.lang.Object) context66);
        jSONWriter59.writeName((int) (byte) 100);
        long long73 = jSONWriter59.getFeatures(0L);
        com.alibaba.fastjson2.SymbolTable symbolTable74 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable74);
        boolean[] booleanArray80 = new boolean[] { false, true, true, true };
        jSONWriter75.writeBool(booleanArray80);
        com.alibaba.fastjson2.SymbolTable symbolTable82 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable82);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray84 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray84);
        boolean boolean87 = jSONWriter85.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class88 = null;
        boolean boolean90 = jSONWriter83.isWriteTypeInfo((java.lang.Object) jSONWriter85, class88, (long) ' ');
        byte[] byteArray92 = new byte[] { (byte) -1 };
        boolean boolean94 = jSONWriter85.writeTypeName(byteArray92, 0L);
        jSONWriter75.writeBinary(byteArray92);
        jSONWriter59.writeBase64(byteArray92);
        jSONWriter50.writeBinary(byteArray92);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNull(propertyFilter39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneId43);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 137438953472L + "'", long73 == 137438953472L);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray80), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(featureArray84);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        boolean boolean9 = jSONWriter0.isEnabled((long) '4');
        boolean boolean10 = jSONWriter0.isUTF16();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter12);
        boolean boolean14 = jSONWriter12.utf16;
        long long16 = jSONWriter12.getFeatures((long) 100);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter12.writeDouble((double) 1.0f, decimalFormat18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        long long33 = jSONWriter23.getFeatures();
        boolean boolean34 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter23);
        boolean boolean35 = jSONWriter12.utf16;
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        boolean boolean38 = jSONWriter37.isRefDetect();
        jSONWriter37.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter46 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable47 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable47);
        boolean[] booleanArray53 = new boolean[] { false, true, true, true };
        jSONWriter48.writeBool(booleanArray53);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable55);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class61 = null;
        boolean boolean63 = jSONWriter56.isWriteTypeInfo((java.lang.Object) jSONWriter58, class61, (long) ' ');
        byte[] byteArray65 = new byte[] { (byte) -1 };
        boolean boolean67 = jSONWriter58.writeTypeName(byteArray65, 0L);
        jSONWriter48.writeBinary(byteArray65);
        java.lang.String str69 = jSONWriter37.setPath(fieldWriter46, (java.lang.Object) jSONWriter48);
        jSONWriter37.writeChar('a');
        boolean boolean72 = jSONWriter37.isIgnoreNoneSerializable();
        byte[] byteArray73 = jSONWriter37.getBytes();
        jSONWriter12.writeHex(byteArray73);
        jSONWriter0.writeRaw(byteArray73);
        jSONWriter0.writeSymbol("hi!");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-88, -1, -1, 100, 100, -1, 10, 32, 0, -112, 56, 97]");
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeInt8((byte) 1);
        jSONWriter3.endArray();
        jSONWriter3.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter3);
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter23.getContext();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context24.provider;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        jSONWriter8.writeName((int) (short) 100);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        boolean boolean14 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter4);
        java.math.BigInteger bigInteger15 = null;
        jSONWriter4.writeBigInt(bigInteger15);
        jSONWriter4.writeFloat((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        context22.setDateFormat("hi!");
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter25 = null;
        context22.setPropertyPreFilter(propertyPreFilter25);
        boolean boolean27 = context22.isDateFormatMillis();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        jSONWriter29.writeName("[1].hi\\![35]");
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        jSONWriter29.config(feature32, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean36 = jSONWriter35.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean38 = jSONWriter35.isEnabled(feature37);
        jSONWriter29.config(feature37, true);
        boolean boolean41 = context22.isEnabled(feature37);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatHasHour();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context15);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.of(featureArray1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter7.startArray(0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter10.writeFloat((float) (-1), decimalFormat12);
        boolean boolean14 = jSONWriter10.utf8;
        jSONWriter10.writeTimeHHMMSS8(10, (int) ' ', (int) (short) 100);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalDate localDate2 = null;
        jSONWriter1.writeLocalDate(localDate2);
        boolean boolean4 = jSONWriter1.utf8;
        java.util.UUID uUID5 = null;
        jSONWriter1.writeUUID(uUID5);
        jSONWriter1.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        long long11 = jSONWriter9.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter14.writeDouble(1.0d, decimalFormat18);
        boolean boolean21 = jSONWriter14.removeReference((java.lang.Object) (short) -1);
        jSONWriter14.writeArrayNull();
        long long23 = jSONWriter14.getFeatures();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        boolean boolean26 = jSONWriter9.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass24, (long) (short) 10);
        int[] intArray33 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter9.writeInt32(intArray33);
        double[] doubleArray39 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter9.writeDouble(doubleArray39);
        jSONWriter1.writeDouble(doubleArray39);
        java.time.LocalDate localDate42 = null;
        jSONWriter1.writeLocalDate(localDate42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter1.context;
        boolean boolean45 = context44.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        context15.setDateFormat("hi!");
        boolean boolean19 = context15.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        boolean boolean11 = jSONWriter9.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble(1.0d, decimalFormat13);
        boolean boolean16 = jSONWriter9.removeReference((java.lang.Object) (short) -1);
        jSONWriter9.writeArrayNull();
        boolean boolean18 = jSONWriter1.isRefDetect((java.lang.Object) jSONWriter9);
        boolean boolean19 = jSONWriter9.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        jSONWriter22.writeTypeName("");
        boolean boolean25 = jSONWriter22.isUseSingleQuotes();
        jSONWriter22.startObject();
        boolean boolean27 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter22);
        byte[] byteArray28 = jSONWriter9.getBytes();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-77, -81]");
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        boolean boolean9 = jSONWriter1.hasFilter(100L);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        jSONWriter1.writeDateYYYMMDD8((-1), (int) (short) 100, 100);
        boolean boolean11 = jSONWriter1.hasFilter((long) 100);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter18 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter19 = null;
        context15.setAfterFilter(afterFilter19);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNull(valueFilter18);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofUTF8();
        com.alibaba.fastjson2.JSONWriter.Context context1 = jSONWriter0.context;
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter2 = null;
        context1.setContextNameFilter(contextNameFilter2);
        boolean boolean4 = context1.isDateFormatMillis();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider5 = context1.getProvider();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter6 = context1.getPropertyPreFilter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(context1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider5);
        org.junit.Assert.assertNull(propertyPreFilter6);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        java.time.ZonedDateTime zonedDateTime7 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime7);
        long long10 = jSONWriter1.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        boolean boolean16 = jSONWriter14.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class17 = null;
        boolean boolean19 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter14, class17, (long) ' ');
        byte[] byteArray21 = new byte[] { (byte) -1 };
        boolean boolean23 = jSONWriter14.writeTypeName(byteArray21, 0L);
        java.util.UUID uUID24 = null;
        jSONWriter14.writeUUID(uUID24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter14.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = context26.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context26.getProvider();
        boolean boolean30 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context26);
        jSONWriter1.endArray();
        java.util.Map map32 = null;
        jSONWriter1.write(map32);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(context26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class23 = null;
        boolean boolean25 = jSONWriter18.isWriteTypeInfo((java.lang.Object) jSONWriter20, class23, (long) ' ');
        byte[] byteArray27 = new byte[] { (byte) -1 };
        boolean boolean29 = jSONWriter20.writeTypeName(byteArray27, 0L);
        java.util.UUID uUID30 = null;
        jSONWriter20.writeUUID(uUID30);
        java.time.Instant instant32 = null;
        jSONWriter20.writeInstant(instant32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean40 = jSONWriter35.writeTypeName(byteArray38, (long) 10);
        jSONWriter20.writeRaw(byteArray38);
        jSONWriter3.writeStringLatin1(byteArray38);
        jSONWriter3.writeFloat(0.0f);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        jSONWriter1.writeSymbol((-1));
        jSONWriter1.writeDateTime19((-1), (-1), 0, 0, 1, (int) (short) 100);
        com.alibaba.fastjson2.JSONObject jSONObject13 = null;
        jSONWriter1.write(jSONObject13);
        boolean boolean16 = jSONWriter1.isEnabled((long) 5);
        java.math.BigDecimal bigDecimal17 = null;
        jSONWriter1.writeDecimal(bigDecimal17, 100L);
        jSONWriter1.writeNumberNull();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context22);
        boolean boolean24 = jSONWriter23.isBeanToArray();
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        boolean boolean30 = jSONWriter28.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter28, class31, (long) ' ');
        char[] charArray34 = new char[] {};
        jSONWriter28.writeString(charArray34);
        jSONWriter23.writeString(charArray34, (int) (short) 0, 0);
        boolean boolean39 = jSONWriter23.utf16;
        jSONWriter23.writeMillis((long) 6);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        boolean boolean1 = jSONWriter0.isUseSingleQuotes();
        jSONWriter0.writeDateTime19((-1), (int) ' ', 1, (int) '4', 10, 8);
        boolean boolean9 = jSONWriter0.jsonb;
        java.math.BigInteger bigInteger10 = null;
        jSONWriter0.writeBigInt(bigInteger10, 97L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter10.writeDouble((double) (-1L), decimalFormat12);
        java.lang.Class<?> wildcardClass14 = jSONWriter10.getClass();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context15.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray20);
        context15.config(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        java.math.BigDecimal bigDecimal26 = null;
        jSONWriter25.writeDecimal(bigDecimal26, 0L);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = jSONWriter25.symbolTable;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(symbolTable29);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        boolean[] booleanArray6 = new boolean[] { false, true, true, true };
        jSONWriter1.writeBool(booleanArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class14 = null;
        boolean boolean16 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter11, class14, (long) ' ');
        byte[] byteArray18 = new byte[] { (byte) -1 };
        boolean boolean20 = jSONWriter11.writeTypeName(byteArray18, 0L);
        jSONWriter1.writeBinary(byteArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = jSONWriter22.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter22.context;
        java.time.format.DateTimeFormatter dateTimeFormatter25 = context24.getDateFormatter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter26 = context24.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNull(symbolTable23);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(afterFilter26);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider0 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter2);
        long long4 = jSONWriter2.getFeatures();
        java.time.LocalDateTime localDateTime5 = null;
        jSONWriter2.writeLocalDateTime(localDateTime5);
        byte[] byteArray7 = jSONWriter2.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray8 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray8);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray8);
        com.alibaba.fastjson2.JSONWriter.Context context11 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray8);
        jSONWriter2.config(featureArray8);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.of(featureArray8);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider0, featureArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: objectWriterProvider must not null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-81]");
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter13);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean4 = jSONWriter2.isRefDetect((java.lang.Object) feature3);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3 };
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        jSONWriter0.config(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue;
        boolean boolean11 = jSONWriter9.isEnabled(feature10);
        jSONWriter9.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable13 = jSONWriter9.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(symbolTable13);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter17 = context13.getPropertyFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNull(propertyFilter17);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        boolean boolean21 = context15.isDateFormatISO8601();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter22 = null;
        context15.setLabelFilter(labelFilter22);
        com.alibaba.fastjson2.filter.NameFilter nameFilter24 = null;
        context15.setNameFilter(nameFilter24);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter21.context;
        jSONWriter21.writeBool(false);
        jSONWriter21.startArray((int) (short) 1);
        boolean boolean27 = jSONWriter21.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable17);
        com.alibaba.fastjson2.SymbolTable symbolTable19 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable19);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean24 = jSONWriter22.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class25 = null;
        boolean boolean27 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter22, class25, (long) ' ');
        byte[] byteArray29 = new byte[] { (byte) -1 };
        boolean boolean31 = jSONWriter22.writeTypeName(byteArray29, 0L);
        java.util.UUID uUID32 = null;
        jSONWriter22.writeUUID(uUID32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = jSONWriter22.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context34);
        java.time.format.DateTimeFormatter dateTimeFormatter36 = context34.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider37 = context34.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean41 = jSONWriter39.isRefDetect((java.lang.Object) feature40);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature40 };
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider37, featureArray42);
        context15.config(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray42);
        jSONWriter47.writeName((long) 0);
        int int50 = jSONWriter47.size();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(objectWriterProvider37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        jSONWriter5.writeDateTime19(4, (int) (short) 0, (int) (short) -1, (int) 'a', (int) '#', (int) (byte) 100);
        boolean boolean13 = jSONWriter5.utf8;
        java.time.LocalDateTime localDateTime14 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter5.writeLocalDateTime(localDateTime14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        context15.config(feature22, true);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter25 = context15.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(context15);
        java.lang.String str27 = context15.getDateFormat();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter28 = null;
        context15.setContextValueFilter(contextValueFilter28);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertNull(valueFilter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        jSONWriter0.writeArrayNull();
        jSONWriter0.writeSymbol((int) (byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray7 = null;
        jSONWriter6.writeDouble(doubleArray7);
        boolean boolean9 = jSONWriter6.utf16;
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter6.writeDecimal(bigDecimal10, 100L);
        boolean boolean13 = jSONWriter6.utf16;
        jSONWriter0.writeAny((java.lang.Object) boolean13);
        com.alibaba.fastjson2.SymbolTable symbolTable15 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable15);
        boolean boolean17 = jSONWriter16.isRefDetect();
        java.lang.String str20 = jSONWriter16.setPath("hi!", (java.lang.Object) 1);
        boolean boolean21 = jSONWriter16.isUTF8();
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable22);
        boolean boolean24 = jSONWriter23.isRefDetect();
        java.lang.String str27 = jSONWriter23.setPath("hi!", (java.lang.Object) 1);
        jSONWriter23.writeMillis((long) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter31);
        long long33 = jSONWriter31.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat40 = null;
        jSONWriter36.writeDouble(1.0d, decimalFormat40);
        boolean boolean43 = jSONWriter36.removeReference((java.lang.Object) (short) -1);
        jSONWriter36.writeArrayNull();
        long long45 = jSONWriter36.getFeatures();
        java.lang.Class<?> wildcardClass46 = jSONWriter36.getClass();
        boolean boolean48 = jSONWriter31.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass46, (long) (short) 10);
        int[] intArray55 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter31.writeInt32(intArray55);
        double[] doubleArray61 = new double[] { (short) -1, 0, 100, 100.0f };
        jSONWriter31.writeDouble(doubleArray61);
        java.text.DecimalFormat decimalFormat63 = null;
        jSONWriter23.writeDouble(doubleArray61, decimalFormat63);
        jSONWriter16.writeDouble(doubleArray61);
        jSONWriter0.writeDouble(doubleArray61);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        com.alibaba.fastjson2.JSONWriter.Context context69 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray67);
        boolean boolean71 = jSONWriter0.containsReference((java.lang.Object) jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable20);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = context15.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter23 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter24 = null;
        context15.setContextNameFilter(contextNameFilter24);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNull(propertyPreFilter22);
        org.junit.Assert.assertNull(contextValueFilter23);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        jSONWriter1.writeRaw((byte) -1);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) '#');
        jSONWriter1.startArray(0);
        jSONWriter1.writeInt32((int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter1.context;
        jSONWriter1.writeName("[1][0]");
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter32 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter34.writeDouble(1.0d, decimalFormat38);
        boolean boolean41 = jSONWriter34.removeReference((java.lang.Object) (short) -1);
        jSONWriter34.writeArrayNull();
        long long43 = jSONWriter34.getFeatures();
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        jSONWriter34.writeNameRaw(byteArray54);
        java.time.ZonedDateTime zonedDateTime58 = null;
        jSONWriter34.writeZonedDateTime(zonedDateTime58);
        jSONWriter34.writeArrayNull();
        java.lang.String str61 = jSONWriter1.setPath(fieldWriter32, (java.lang.Object) jSONWriter34);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter34.writeRaw('#');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        jSONWriter1.writeEnum((java.lang.Enum) feature7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        com.alibaba.fastjson2.JSONWriter.Path path11 = null;
        com.alibaba.fastjson2.JSONWriter.Path path13 = new com.alibaba.fastjson2.JSONWriter.Path(path11, "");
        com.alibaba.fastjson2.JSONWriter.Path path15 = new com.alibaba.fastjson2.JSONWriter.Path(path13, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path17 = new com.alibaba.fastjson2.JSONWriter.Path(path13, "[1].hi\\!");
        java.lang.String str18 = jSONWriter1.setPath((int) (byte) -1, (java.lang.Object) "[1].hi\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        long long7 = jSONWriter1.getFeatures((long) 10);
        java.time.ZonedDateTime zonedDateTime8 = null;
        jSONWriter1.writeZonedDateTime(zonedDateTime8);
        boolean boolean11 = jSONWriter1.isEnabled((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeRaw('4');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter20 = context19.getBeforeFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context19);
        jSONWriter21.writeTypeName(".\\[1\\]\\[0\\]");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean27 = jSONWriter25.isRefDetect((java.lang.Object) feature26);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = jSONWriter25.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray33 = null;
        jSONWriter30.writeHex(byteArray33);
        boolean boolean35 = jSONWriter30.isRefDetect();
        jSONWriter30.writeNumberNull();
        jSONWriter30.writeFloat((java.lang.Float) 0.0f);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean40 = jSONWriter30.isEnabled(feature39);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter42);
        long long44 = jSONWriter42.getFeatures();
        java.time.LocalDateTime localDateTime45 = null;
        jSONWriter42.writeLocalDateTime(localDateTime45);
        byte[] byteArray47 = jSONWriter42.getBytes();
        jSONWriter30.writeStringLatin1(byteArray47);
        jSONWriter25.writeNameRaw(byteArray47, (long) (byte) 100);
        jSONWriter21.writeStringLatin1(byteArray47);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(beforeFilter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(symbolTable28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-81]");
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.of(featureArray0);
        jSONWriter4.writeName("[1].hi\\!.\\[1\\].\\[1\\]\\.hi\\\\\\!");
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray4 = null;
        jSONWriter1.writeHex(byteArray4);
        boolean boolean6 = jSONWriter1.isWriteNulls();
        jSONWriter1.writeInt64((long) 5);
        jSONWriter1.writeNull();
        jSONWriter1.writeSymbol((int) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        boolean boolean15 = jSONWriter13.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal16 = null;
        jSONWriter13.writeDecimal(bigDecimal16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        jSONWriter19.close();
        jSONWriter19.writeSymbol("");
        jSONWriter19.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter19.context;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        jSONWriter26.close();
        jSONWriter26.writeSymbol("");
        boolean[] booleanArray31 = new boolean[] { true };
        jSONWriter26.writeBool(booleanArray31);
        jSONWriter19.writeBool(booleanArray31);
        jSONWriter13.writeBool(booleanArray31);
        jSONWriter1.writeBool(booleanArray31);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true]");
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        java.time.ZoneId zoneId23 = context15.getZoneId();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter24 = context15.getValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNull(valueFilter24);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter19 = context15.getValueFilter();
        java.time.format.DateTimeFormatter dateTimeFormatter20 = context15.getDateFormatter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter21 = context15.getAfterFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNull(valueFilter19);
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(afterFilter21);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean13 = jSONWriter8.writeTypeName(byteArray11, (long) 10);
        jSONWriter1.writeStringLatin1(byteArray11);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        java.time.LocalDateTime localDateTime19 = null;
        jSONWriter16.writeLocalDateTime(localDateTime19);
        byte[] byteArray21 = jSONWriter16.getBytes();
        jSONWriter1.writeNameRaw(byteArray21);
        jSONWriter1.writeInt8((byte) 0);
        jSONWriter1.writeDateTime19(13, 6, 2, (int) (byte) 10, (int) (short) 10, 13);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-81, -81]");
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        com.alibaba.fastjson2.SymbolTable symbolTable1 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        boolean boolean6 = jSONWriter4.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class7 = null;
        boolean boolean9 = jSONWriter2.isWriteTypeInfo((java.lang.Object) jSONWriter4, class7, (long) ' ');
        byte[] byteArray11 = new byte[] { (byte) -1 };
        boolean boolean13 = jSONWriter4.writeTypeName(byteArray11, 0L);
        java.util.UUID uUID14 = null;
        jSONWriter4.writeUUID(uUID14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter4.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter17 = context16.getPropertyFilter();
        long long18 = context16.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter19 = null;
        context16.setLabelFilter(labelFilter19);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider21 = context16.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = null;
        context16.setPropertyPreFilter(propertyPreFilter22);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter24 = null;
        context16.setPropertyPreFilter(propertyPreFilter24);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter26 = null;
        context16.setLabelFilter(labelFilter26);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider28 = context16.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter30);
        long long32 = jSONWriter30.getFeatures();
        java.time.LocalDateTime localDateTime33 = null;
        jSONWriter30.writeLocalDateTime(localDateTime33);
        byte[] byteArray35 = jSONWriter30.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray36);
        jSONWriter30.config(featureArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(featureArray36);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28, featureArray36);
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray45);
        boolean boolean48 = jSONWriter46.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class49 = null;
        boolean boolean51 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter46, class49, (long) ' ');
        byte[] byteArray53 = new byte[] { (byte) -1 };
        boolean boolean55 = jSONWriter46.writeTypeName(byteArray53, 0L);
        java.util.UUID uUID56 = null;
        jSONWriter46.writeUUID(uUID56);
        jSONWriter46.writeMillis((long) (short) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable60 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable60);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        boolean boolean65 = jSONWriter63.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class66 = null;
        boolean boolean68 = jSONWriter61.isWriteTypeInfo((java.lang.Object) jSONWriter63, class66, (long) ' ');
        byte[] byteArray70 = new byte[] { (byte) -1 };
        boolean boolean72 = jSONWriter63.writeTypeName(byteArray70, 0L);
        java.util.UUID uUID73 = null;
        jSONWriter63.writeUUID(uUID73);
        com.alibaba.fastjson2.JSONWriter.Context context75 = jSONWriter63.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        context75.config(feature76, false);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean82 = jSONWriter80.isRefDetect((java.lang.Object) feature81);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray83 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature81 };
        com.alibaba.fastjson2.JSONWriter jSONWriter84 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray83);
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray83);
        context75.config(featureArray83);
        jSONWriter46.config(featureArray83);
        com.alibaba.fastjson2.JSONWriter jSONWriter88 = com.alibaba.fastjson2.JSONWriter.of(featureArray83);
        com.alibaba.fastjson2.JSONWriter.Context context89 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider28, featureArray83);
        com.alibaba.fastjson2.JSONWriter.Context context90 = new com.alibaba.fastjson2.JSONWriter.Context("[1].hi\\![35]", featureArray83);
        boolean boolean92 = context90.isEnabled((long) 4);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter93 = context90.getLabelFilter();
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(context16);
        org.junit.Assert.assertNull(propertyFilter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider21);
        org.junit.Assert.assertNotNull(objectWriterProvider28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-81]");
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(context75);
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(featureArray83);
        org.junit.Assert.assertNotNull(jSONWriter84);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNotNull(jSONWriter88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(labelFilter93);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 0);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        jSONWriter12.writeInt8((byte) 1);
        jSONWriter12.endArray();
        jSONWriter12.writeDateTime14((int) (byte) -1, (-1), (int) (short) 0, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        jSONWriter12.endObject();
        boolean boolean33 = path4.equals((java.lang.Object) jSONWriter12);
        java.lang.String str34 = path4.toString();
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1]" + "'", str34, "[1]");
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        jSONWriter3.writeNull();
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter3.writeFloat((float) 0, decimalFormat15);
        java.time.ZonedDateTime zonedDateTime17 = null;
        jSONWriter3.writeZonedDateTime(zonedDateTime17);
        java.math.BigInteger bigInteger19 = null;
        jSONWriter3.writeBigInt(bigInteger19, (long) (byte) 10);
        jSONWriter3.writeInt8((byte) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray19);
        java.math.BigInteger bigInteger24 = null;
        jSONWriter23.writeBigInt(bigInteger24, (long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        java.time.LocalTime localTime29 = null;
        jSONWriter28.writeLocalTime(localTime29);
        java.time.LocalDateTime localDateTime31 = null;
        jSONWriter28.writeLocalDateTime(localDateTime31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        boolean boolean36 = jSONWriter34.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        boolean boolean40 = jSONWriter38.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter38.writeDouble(1.0d, decimalFormat42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean50 = jSONWriter45.writeTypeName(byteArray48, (long) 10);
        jSONWriter38.writeStringLatin1(byteArray48);
        jSONWriter34.writeStringLatin1(byteArray48);
        jSONWriter28.writeBinary(byteArray48);
        jSONWriter23.writeBinary(byteArray48);
        jSONWriter23.writeBooleanNull();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = jSONWriter23.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        boolean boolean60 = jSONWriter58.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal61 = null;
        jSONWriter58.writeDecimal(bigDecimal61);
        boolean boolean64 = jSONWriter58.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter58.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj69 = null;
        jSONWriter58.startArray(obj69, (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.of();
        boolean boolean73 = jSONWriter72.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        boolean boolean75 = jSONWriter72.isEnabled(feature74);
        boolean boolean76 = jSONWriter58.isEnabled(feature74);
        jSONWriter23.config(feature74, false);
        long long80 = jSONWriter23.getFeatures((-1L));
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(symbolTable56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray20);
        boolean boolean23 = jSONWriter21.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter21.writeDecimal(bigDecimal24);
        boolean boolean27 = jSONWriter21.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter21.writeArrayNull();
        jSONWriter21.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray32);
        boolean boolean35 = jSONWriter33.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class36 = null;
        boolean boolean38 = jSONWriter31.isWriteTypeInfo((java.lang.Object) jSONWriter33, class36, (long) ' ');
        boolean boolean40 = jSONWriter31.isEnabled((long) ' ');
        jSONWriter31.writeString("hi!");
        boolean boolean43 = jSONWriter31.isUTF8();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        jSONWriter31.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter21.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList47);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean53 = jSONWriter52.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        jSONWriter1.writeInt32((int) (byte) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context21.getContextValueFilter();
        boolean boolean23 = context21.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) feature27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        jSONWriter24.config(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        context21.config(featureArray29);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter35 = context21.getValueFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter36 = null;
        context21.setAfterFilter(afterFilter36);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNull(valueFilter35);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        byte[] byteArray17 = new byte[] { (byte) -1 };
        boolean boolean19 = jSONWriter10.writeTypeName(byteArray17, 0L);
        java.util.UUID uUID20 = null;
        jSONWriter10.writeUUID(uUID20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter23 = context22.getPropertyFilter();
        long long24 = context22.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context22.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider27 = context22.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter28 = null;
        context22.setPropertyPreFilter(propertyPreFilter28);
        com.alibaba.fastjson2.filter.NameFilter nameFilter30 = null;
        context22.setNameFilter(nameFilter30);
        java.time.format.DateTimeFormatter dateTimeFormatter32 = context22.getDateFormatter();
        jSONWriter6.setRootObject((java.lang.Object) context22);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter34 = null;
        context22.setLabelFilter(labelFilter34);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context22);
        org.junit.Assert.assertNull(propertyFilter23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider27);
        org.junit.Assert.assertNull(dateTimeFormatter32);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = null;
        jSONWriter0.writeDouble(doubleArray1);
        boolean boolean3 = jSONWriter0.utf16;
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 100L);
        boolean boolean7 = jSONWriter0.utf16;
        java.lang.Object obj8 = null;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        boolean boolean17 = jSONWriter10.removeReference((java.lang.Object) (short) -1);
        jSONWriter10.writeArrayNull();
        long long19 = jSONWriter10.getFeatures();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean22 = jSONWriter0.isWriteTypeInfo(obj8, (java.lang.Class) wildcardClass20, (long) (short) 0);
        java.util.Map map23 = null;
        jSONWriter0.write(map23);
        jSONWriter0.writeRaw((byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        byte[] byteArray37 = new byte[] { (byte) 100 };
        boolean boolean39 = jSONWriter28.writeTypeName(byteArray37, (long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        int[] intArray45 = new int[] { (short) -1 };
        jSONWriter43.writeInt32(intArray45);
        java.lang.String str47 = jSONWriter28.setPath("hi!", (java.lang.Object) intArray45);
        jSONWriter0.writeInt32(intArray45);
        boolean boolean49 = jSONWriter0.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        boolean boolean53 = jSONWriter51.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter51.writeDouble(1.0d, decimalFormat55);
        boolean boolean58 = jSONWriter51.removeReference((java.lang.Object) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Context context59 = jSONWriter51.context;
        com.alibaba.fastjson2.JSONObject jSONObject60 = null;
        jSONWriter51.write(jSONObject60);
        jSONWriter51.startArray((int) (byte) 0);
        boolean boolean64 = jSONWriter0.containsReference((java.lang.Object) (byte) 0);
        boolean boolean66 = jSONWriter0.hasFilter(137438953472L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1]");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(context59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider20, featureArray21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20, featureArray28);
        java.time.format.DateTimeFormatter dateTimeFormatter33 = context32.getDateFormatter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter34 = null;
        context32.setPropertyFilter(propertyFilter34);
        java.time.ZoneId zoneId36 = context32.getZoneId();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(zoneId36);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context15.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context15.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context15.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        com.alibaba.fastjson2.SymbolTable symbolTable26 = jSONWriter25.getSymbolTable();
        java.math.BigDecimal bigDecimal27 = null;
        jSONWriter25.writeDecimal(bigDecimal27, (long) 'a');
        boolean boolean30 = jSONWriter25.utf8;
        byte[] byteArray31 = jSONWriter25.getBytes();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(symbolTable26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-81]");
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter6.writeDouble(1.0d, decimalFormat10);
        boolean boolean13 = jSONWriter6.removeReference((java.lang.Object) (short) -1);
        jSONWriter6.writeArrayNull();
        long long15 = jSONWriter6.getFeatures();
        java.lang.Class<?> wildcardClass16 = jSONWriter6.getClass();
        boolean boolean18 = jSONWriter1.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass16, (long) (short) 10);
        int[] intArray25 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter1.writeInt32(intArray25);
        com.alibaba.fastjson2.JSONObject jSONObject27 = null;
        jSONWriter1.write(jSONObject27);
        long long30 = jSONWriter1.getFeatures((long) (short) 10);
        jSONWriter1.writeNull();
        byte[] byteArray32 = null;
        jSONWriter1.writeHex(byteArray32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        boolean boolean42 = jSONWriter35.removeReference((java.lang.Object) (short) -1);
        jSONWriter35.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable44 = jSONWriter35.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter35.getContext();
        boolean boolean46 = context45.isDateFormatMillis();
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty;
        context45.config(feature47, false);
        boolean boolean51 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context45, (long) 0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(symbolTable44);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter1.writeDecimal(bigDecimal4);
        boolean boolean7 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) (byte) 1);
        jSONWriter1.writeDateYYYMMDD8(100, (int) ' ', (int) (short) -1);
        java.lang.Object obj12 = null;
        jSONWriter1.startArray(obj12, (-1));
        jSONWriter1.writeDateYYYMMDD8((int) '4', (int) (byte) 1, (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray20 = null;
        jSONWriter19.writeDouble(doubleArray20);
        boolean boolean22 = jSONWriter19.utf16;
        java.math.BigDecimal bigDecimal23 = null;
        jSONWriter19.writeDecimal(bigDecimal23, 100L);
        boolean boolean26 = jSONWriter19.hasFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        boolean boolean32 = jSONWriter30.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class33 = null;
        boolean boolean35 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter30, class33, (long) ' ');
        boolean boolean37 = jSONWriter28.isEnabled((long) ' ');
        boolean boolean38 = jSONWriter28.isBeanToArray();
        jSONWriter28.writeTypeName("[1]");
        byte[] byteArray42 = new byte[] { (byte) 100 };
        jSONWriter28.writeRaw(byteArray42);
        jSONWriter19.writeBinary(byteArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray46 = null;
        jSONWriter45.writeDouble(doubleArray46);
        jSONWriter45.writeArrayNull();
        short[] shortArray52 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter45.writeInt16(shortArray52);
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter45.writeFloat((float) (short) 0, decimalFormat55);
        java.lang.Class<?> wildcardClass57 = jSONWriter45.getClass();
        boolean boolean59 = jSONWriter1.isWriteTypeInfo((java.lang.Object) byteArray42, (java.lang.Class) wildcardClass57, (long) 2);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[0, 0, 100]");
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context15.getPropertyFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(context15);
        jSONWriter25.writeFloat((float) 1L);
        jSONWriter25.writeInt8((byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        jSONWriter5.close();
        java.text.DecimalFormat decimalFormat8 = null;
        jSONWriter5.writeFloat((float) 10, decimalFormat8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean16 = jSONWriter11.writeTypeName(byteArray14, (long) 10);
        boolean boolean18 = jSONWriter5.writeTypeName(byteArray14, (long) (byte) 100);
        jSONWriter5.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        jSONWriter22.close();
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter22.writeFloat((float) 10, decimalFormat25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean33 = jSONWriter28.writeTypeName(byteArray31, (long) 10);
        boolean boolean35 = jSONWriter22.writeTypeName(byteArray31, (long) (byte) 100);
        jSONWriter22.writeInt16((short) (byte) 100);
        boolean boolean38 = jSONWriter22.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter40);
        long long42 = jSONWriter40.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter45.writeDouble(1.0d, decimalFormat49);
        boolean boolean52 = jSONWriter45.removeReference((java.lang.Object) (short) -1);
        jSONWriter45.writeArrayNull();
        long long54 = jSONWriter45.getFeatures();
        java.lang.Class<?> wildcardClass55 = jSONWriter45.getClass();
        boolean boolean57 = jSONWriter40.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass55, (long) (short) 10);
        boolean boolean59 = jSONWriter5.isWriteTypeInfo((java.lang.Object) boolean38, (java.lang.reflect.Type) wildcardClass55, (long) (byte) -1);
        jSONWriter5.writeSymbol("[1].hi\\!");
        boolean boolean63 = jSONWriter1.isWriteTypeInfo((java.lang.Object) "[1].hi\\!", 1L);
        jSONWriter1.writeRaw((byte) 0);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        boolean boolean4 = jSONWriter1.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Path path5 = null;
        com.alibaba.fastjson2.JSONWriter.Path path7 = new com.alibaba.fastjson2.JSONWriter.Path(path5, "");
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path7, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path7, "[1].hi\\!");
        jSONWriter1.writeAny((java.lang.Object) "[1].hi\\!");
        java.time.LocalTime localTime13 = null;
        jSONWriter1.writeLocalTime(localTime13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        boolean boolean18 = jSONWriter16.isRefDetect((java.lang.Object) 1L);
        byte[] byteArray19 = null;
        jSONWriter16.writeHex(byteArray19);
        boolean boolean21 = jSONWriter16.isRefDetect();
        jSONWriter16.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        java.util.UUID uUID36 = null;
        jSONWriter26.writeUUID(uUID36);
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter26.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter39 = context38.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable40);
        boolean boolean42 = jSONWriter41.isRefDetect();
        java.lang.String str45 = jSONWriter41.setPath("hi!", (java.lang.Object) 1);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter47);
        long long49 = jSONWriter47.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        boolean boolean54 = jSONWriter52.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter52.writeDouble(1.0d, decimalFormat56);
        boolean boolean59 = jSONWriter52.removeReference((java.lang.Object) (short) -1);
        jSONWriter52.writeArrayNull();
        long long61 = jSONWriter52.getFeatures();
        java.lang.Class<?> wildcardClass62 = jSONWriter52.getClass();
        boolean boolean64 = jSONWriter47.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass62, (long) (short) 10);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter65 = jSONWriter41.getObjectWriter((java.lang.Class) wildcardClass62);
        boolean boolean66 = jSONWriter16.isWriteTypeInfo((java.lang.Object) context38, (java.lang.reflect.Type) wildcardClass62);
        boolean boolean67 = jSONWriter16.isUTF8();
        jSONWriter1.setRootObject((java.lang.Object) jSONWriter16);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertNull(propertyFilter39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objectWriter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        long long5 = jSONWriter1.getFeatures((long) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable6 = jSONWriter1.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable7 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable7);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class13 = null;
        boolean boolean15 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter10, class13, (long) ' ');
        boolean boolean17 = jSONWriter8.isEnabled((long) ' ');
        jSONWriter8.writeString("hi!");
        char[] charArray20 = new char[] {};
        jSONWriter8.writeString(charArray20);
        jSONWriter1.writeString(charArray20);
        com.alibaba.fastjson2.SymbolTable symbolTable23 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable23);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        boolean boolean28 = jSONWriter26.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter26, class29, (long) ' ');
        byte[] byteArray33 = new byte[] { (byte) -1 };
        boolean boolean35 = jSONWriter26.writeTypeName(byteArray33, 0L);
        byte[] byteArray36 = null;
        jSONWriter26.writeBinary(byteArray36);
        jSONWriter26.endObject();
        jSONWriter26.close();
        jSONWriter26.writeInt32(3);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable42);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class48 = null;
        boolean boolean50 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter45, class48, (long) ' ');
        byte[] byteArray52 = new byte[] { (byte) -1 };
        boolean boolean54 = jSONWriter45.writeTypeName(byteArray52, 0L);
        java.util.UUID uUID55 = null;
        jSONWriter45.writeUUID(uUID55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = jSONWriter45.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter58 = context57.getPropertyFilter();
        long long59 = context57.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter60 = null;
        context57.setLabelFilter(labelFilter60);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider62 = context57.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Context context65 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.of(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider62, featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray70 = null;
        jSONWriter69.writeDouble(doubleArray70);
        boolean boolean73 = jSONWriter69.containsReference((java.lang.Object) 5);
        float[] floatArray77 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter69.writeFloat(floatArray77);
        jSONWriter68.writeFloat(floatArray77);
        jSONWriter26.writeFloat(floatArray77);
        java.text.DecimalFormat decimalFormat81 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeFloat(floatArray77, decimalFormat81);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNull(symbolTable6);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(context57);
        org.junit.Assert.assertNull(propertyFilter58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider62);
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[10.0, 10.0, 10.0]");
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter20 = context15.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter21 = null;
        context15.setPropertyFilter(propertyFilter21);
        boolean boolean23 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context15);
        jSONWriter24.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(contextValueFilter20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) feature2);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean10 = jSONWriter8.isRefDetect((java.lang.Object) feature9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        java.time.ZoneId zoneId14 = null;
        context13.setZoneId(zoneId14);
        jSONWriter6.popPath((java.lang.Object) context13);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray17);
        boolean boolean20 = jSONWriter18.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter18.writeDouble(1.0d, decimalFormat22);
        boolean boolean25 = jSONWriter18.removeReference((java.lang.Object) (short) -1);
        jSONWriter18.writeArrayNull();
        jSONWriter18.startArray((int) (short) 1);
        java.time.Instant instant29 = null;
        jSONWriter18.writeInstant(instant29);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        java.util.UUID uUID44 = null;
        jSONWriter34.writeUUID(uUID44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = jSONWriter34.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter47 = context46.getPropertyFilter();
        long long48 = context46.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter49 = null;
        context46.setLabelFilter(labelFilter49);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider51 = context46.provider;
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter52 = null;
        context46.setPropertyPreFilter(propertyPreFilter52);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        boolean boolean55 = context46.isEnabled(feature54);
        boolean boolean56 = jSONWriter18.isEnabled(feature54);
        context13.config(feature54, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.of(context13);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter60 = context13.getAfterFilter();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(context46);
        org.junit.Assert.assertNull(propertyFilter47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider51);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNull(afterFilter60);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        long long17 = context15.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context15.setLabelFilter(labelFilter18);
        java.lang.String str20 = context15.getDateFormat();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter21 = context15.getValueFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = context15.getNameFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter24 = context15.getContextNameFilter();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(valueFilter21);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertNull(nameFilter23);
        org.junit.Assert.assertNull(contextNameFilter24);
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        boolean boolean4 = jSONWriter3.isIgnoreErrorGetter();
        long long6 = jSONWriter3.getFeatures((long) (-1));
        jSONWriter3.startArray();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.lang.reflect.Type type3 = null;
        boolean boolean5 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (byte) 1, type3, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        jSONWriter7.close();
        jSONWriter7.writeSymbol("");
        jSONWriter7.writeBooleanNull();
        boolean boolean12 = jSONWriter7.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter14);
        long long16 = jSONWriter14.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat23 = null;
        jSONWriter19.writeDouble(1.0d, decimalFormat23);
        boolean boolean26 = jSONWriter19.removeReference((java.lang.Object) (short) -1);
        jSONWriter19.writeArrayNull();
        long long28 = jSONWriter19.getFeatures();
        java.lang.Class<?> wildcardClass29 = jSONWriter19.getClass();
        boolean boolean31 = jSONWriter14.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass29, (long) (short) 10);
        jSONWriter1.checkAndWriteTypeName((java.lang.Object) jSONWriter7, (java.lang.Class) wildcardClass29);
        jSONWriter7.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        jSONWriter36.close();
        jSONWriter36.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray41 = null;
        jSONWriter40.writeDouble(doubleArray41);
        jSONWriter40.writeArrayNull();
        short[] shortArray47 = new short[] { (byte) 0, (byte) 0, (byte) 100 };
        jSONWriter40.writeInt16(shortArray47);
        jSONWriter36.writeInt16(shortArray47);
        jSONWriter7.writeInt16(shortArray47);
        boolean boolean51 = jSONWriter7.isUTF16();
        jSONWriter7.writeInt16((short) 1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.LocalTime localTime17 = null;
        jSONWriter16.writeLocalTime(localTime17);
        boolean boolean19 = jSONWriter16.isBeanToArray();
        boolean boolean20 = jSONWriter16.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter.Path path21 = null;
        com.alibaba.fastjson2.JSONWriter.Path path23 = new com.alibaba.fastjson2.JSONWriter.Path(path21, "");
        com.alibaba.fastjson2.JSONWriter.Path path25 = new com.alibaba.fastjson2.JSONWriter.Path(path23, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path27 = new com.alibaba.fastjson2.JSONWriter.Path(path25, "hi!");
        java.lang.String str28 = path27.toString();
        com.alibaba.fastjson2.JSONWriter.Path path30 = new com.alibaba.fastjson2.JSONWriter.Path(path27, (int) '#');
        boolean boolean31 = jSONWriter16.isRefDetect((java.lang.Object) path30);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        jSONWriter39.close();
        jSONWriter39.writeSymbol("");
        boolean[] booleanArray44 = new boolean[] { true };
        jSONWriter39.writeBool(booleanArray44);
        com.alibaba.fastjson2.SymbolTable symbolTable46 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable46);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class52 = null;
        boolean boolean54 = jSONWriter47.isWriteTypeInfo((java.lang.Object) jSONWriter49, class52, (long) ' ');
        boolean boolean56 = jSONWriter47.isEnabled((long) ' ');
        jSONWriter47.writeString("hi!");
        char[] charArray59 = new char[] {};
        jSONWriter47.writeString(charArray59);
        jSONWriter39.writeString(charArray59, 10, (int) (short) 0);
        jSONWriter37.writeString(charArray59);
        jSONWriter16.writeString(charArray59, 5, 0, false);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1].hi\\!" + "'", str28, "[1].hi\\!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[true]");
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[]");
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.time.LocalTime localTime2 = null;
        jSONWriter1.writeLocalTime(localTime2);
        boolean boolean4 = jSONWriter1.isUTF8();
        jSONWriter1.writeTypeName("hi!");
        jSONWriter1.writeFloat((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter1.writeFloat((float) 10, decimalFormat4);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean12 = jSONWriter7.writeTypeName(byteArray10, (long) 10);
        boolean boolean14 = jSONWriter1.writeTypeName(byteArray10, (long) (byte) 100);
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter1.writeFloat((float) (-1), decimalFormat16);
        jSONWriter1.writeInt16((short) (byte) -1);
        boolean boolean20 = jSONWriter1.isRefDetect();
        jSONWriter1.writeDateYYYMMDD8((int) (short) -1, 1, 5);
        jSONWriter1.writeInt16((short) -1);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, "[1].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Path path7 = path2.parent;
        com.alibaba.fastjson2.JSONWriter.Path path8 = path2.parent;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray9);
        boolean boolean12 = jSONWriter10.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter10.writeDouble(1.0d, decimalFormat14);
        java.time.ZonedDateTime zonedDateTime16 = null;
        jSONWriter10.writeZonedDateTime(zonedDateTime16);
        long long19 = jSONWriter10.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable20 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable20);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray22);
        boolean boolean25 = jSONWriter23.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class26 = null;
        boolean boolean28 = jSONWriter21.isWriteTypeInfo((java.lang.Object) jSONWriter23, class26, (long) ' ');
        byte[] byteArray30 = new byte[] { (byte) -1 };
        boolean boolean32 = jSONWriter23.writeTypeName(byteArray30, 0L);
        java.util.UUID uUID33 = null;
        jSONWriter23.writeUUID(uUID33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = jSONWriter23.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context35);
        java.time.format.DateTimeFormatter dateTimeFormatter37 = context35.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider38 = context35.getProvider();
        boolean boolean39 = jSONWriter10.isWriteTypeInfo((java.lang.Object) context35);
        com.alibaba.fastjson2.SymbolTable symbolTable40 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context35, symbolTable40);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider42 = context35.provider;
        com.alibaba.fastjson2.JSONWriter.Context context43 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider42);
        boolean boolean44 = path2.equals((java.lang.Object) objectWriterProvider42);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(context35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(objectWriterProvider38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(objectWriterProvider42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter1.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context11 = jSONWriter1.getContext();
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter1.writeDecimal(bigDecimal12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) feature16);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean22 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context20, 65536L);
        jSONWriter1.close();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(context11);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        java.lang.reflect.Type type3 = null;
        boolean boolean5 = jSONWriter1.isWriteTypeInfo((java.lang.Object) (byte) 1, type3, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        jSONWriter7.close();
        jSONWriter7.writeSymbol("");
        jSONWriter7.writeBooleanNull();
        boolean boolean12 = jSONWriter7.utf16;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter14);
        long long16 = jSONWriter14.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        boolean boolean21 = jSONWriter19.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat23 = null;
        jSONWriter19.writeDouble(1.0d, decimalFormat23);
        boolean boolean26 = jSONWriter19.removeReference((java.lang.Object) (short) -1);
        jSONWriter19.writeArrayNull();
        long long28 = jSONWriter19.getFeatures();
        java.lang.Class<?> wildcardClass29 = jSONWriter19.getClass();
        boolean boolean31 = jSONWriter14.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass29, (long) (short) 10);
        jSONWriter1.checkAndWriteTypeName((java.lang.Object) jSONWriter7, (java.lang.Class) wildcardClass29);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        boolean boolean43 = jSONWriter34.isEnabled((long) ' ');
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        boolean boolean49 = jSONWriter47.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class50 = null;
        boolean boolean52 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter47, class50, (long) ' ');
        byte[] byteArray54 = new byte[] { (byte) -1 };
        boolean boolean56 = jSONWriter47.writeTypeName(byteArray54, 0L);
        jSONWriter47.writeInt8((byte) 1);
        jSONWriter47.close();
        boolean boolean60 = jSONWriter34.removeReference((java.lang.Object) jSONWriter47);
        com.alibaba.fastjson2.SymbolTable symbolTable61 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable61);
        boolean[] booleanArray67 = new boolean[] { false, true, true, true };
        jSONWriter62.writeBool(booleanArray67);
        com.alibaba.fastjson2.SymbolTable symbolTable69 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable69);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray71);
        boolean boolean74 = jSONWriter72.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class75 = null;
        boolean boolean77 = jSONWriter70.isWriteTypeInfo((java.lang.Object) jSONWriter72, class75, (long) ' ');
        byte[] byteArray79 = new byte[] { (byte) -1 };
        boolean boolean81 = jSONWriter72.writeTypeName(byteArray79, 0L);
        jSONWriter62.writeBinary(byteArray79);
        jSONWriter34.writeRaw(byteArray79);
        jSONWriter7.writeHex(byteArray79);
        com.alibaba.fastjson2.JSONObject jSONObject85 = null;
        jSONWriter7.write(jSONObject85);
        java.time.Instant instant87 = null;
        jSONWriter7.writeInstant(instant87);
        jSONWriter7.writeBool(true);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 0);
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path4, (int) (byte) 10);
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, (int) (byte) 0);
        com.alibaba.fastjson2.JSONWriter.Path path13 = path12.parent;
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        boolean boolean16 = jSONWriter15.isRefDetect();
        jSONWriter15.writeDateTime14((-1), (int) (byte) 100, 100, (int) (short) -1, 10, (int) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter24 = null;
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        boolean[] booleanArray31 = new boolean[] { false, true, true, true };
        jSONWriter26.writeBool(booleanArray31);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean38 = jSONWriter36.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter36, class39, (long) ' ');
        byte[] byteArray43 = new byte[] { (byte) -1 };
        boolean boolean45 = jSONWriter36.writeTypeName(byteArray43, 0L);
        jSONWriter26.writeBinary(byteArray43);
        java.lang.String str47 = jSONWriter15.setPath(fieldWriter24, (java.lang.Object) jSONWriter26);
        jSONWriter15.writeChar('a');
        boolean boolean50 = jSONWriter15.isIgnoreNoneSerializable();
        boolean boolean51 = jSONWriter15.utf8;
        jSONWriter15.writeMillis((long) 8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean57 = jSONWriter55.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter55.writeDouble(1.0d, decimalFormat59);
        java.time.ZonedDateTime zonedDateTime61 = null;
        jSONWriter55.writeZonedDateTime(zonedDateTime61);
        boolean boolean63 = jSONWriter55.isIgnoreNoneSerializable();
        boolean boolean64 = jSONWriter55.isUTF16();
        java.lang.String[] strArray74 = new java.lang.String[] { ".\\[1\\]\\.hi\\\\\\!", "[1].hi\\!", "hi!", "[1].hi\\!", "$[10]", "hi!", "[1].hi\\![35][100]", "$", ".hi\\!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        jSONWriter55.writeString((java.util.List<java.lang.String>) strList75);
        jSONWriter15.writeString((java.util.List<java.lang.String>) strList75);
        boolean boolean79 = path12.equals((java.lang.Object) strList75);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        jSONWriter1.close();
        jSONWriter1.writeSymbol("");
        jSONWriter1.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context6 = jSONWriter1.context;
        jSONWriter1.writeInt8((byte) 1);
        com.alibaba.fastjson2.SymbolTable symbolTable9 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable9);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        boolean boolean14 = jSONWriter12.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter12, class15, (long) ' ');
        byte[] byteArray19 = new byte[] { (byte) -1 };
        boolean boolean21 = jSONWriter12.writeTypeName(byteArray19, 0L);
        java.util.UUID uUID22 = null;
        jSONWriter12.writeUUID(uUID22);
        com.alibaba.fastjson2.JSONWriter.Context context24 = jSONWriter12.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter25 = context24.getPropertyFilter();
        long long26 = context24.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter27 = null;
        context24.setLabelFilter(labelFilter27);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context24.provider;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.of(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider29, featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray37 = null;
        jSONWriter36.writeDouble(doubleArray37);
        boolean boolean40 = jSONWriter36.containsReference((java.lang.Object) 5);
        float[] floatArray44 = new float[] { 10.0f, (byte) 10, (byte) 10 };
        jSONWriter36.writeFloat(floatArray44);
        jSONWriter35.writeFloat(floatArray44);
        jSONWriter1.writeFloat(floatArray44);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean51 = jSONWriter49.isRefDetect((java.lang.Object) feature50);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature50 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean58 = jSONWriter56.isRefDetect((java.lang.Object) feature57);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature57 };
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        java.time.ZoneId zoneId62 = null;
        context61.setZoneId(zoneId62);
        jSONWriter54.popPath((java.lang.Object) context61);
        jSONWriter54.writeName((int) (byte) 100);
        long long68 = jSONWriter54.getFeatures(0L);
        com.alibaba.fastjson2.SymbolTable symbolTable69 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable69);
        boolean[] booleanArray75 = new boolean[] { false, true, true, true };
        jSONWriter70.writeBool(booleanArray75);
        com.alibaba.fastjson2.SymbolTable symbolTable77 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable77);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        boolean boolean82 = jSONWriter80.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class83 = null;
        boolean boolean85 = jSONWriter78.isWriteTypeInfo((java.lang.Object) jSONWriter80, class83, (long) ' ');
        byte[] byteArray87 = new byte[] { (byte) -1 };
        boolean boolean89 = jSONWriter80.writeTypeName(byteArray87, 0L);
        jSONWriter70.writeBinary(byteArray87);
        jSONWriter54.writeBase64(byteArray87);
        jSONWriter1.writeRaw(byteArray87);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context6);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(context24);
        org.junit.Assert.assertNull(propertyFilter25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 137438953472L + "'", long68 == 137438953472L);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray75), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        boolean boolean3 = jSONWriter1.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat5 = null;
        jSONWriter1.writeDouble(1.0d, decimalFormat5);
        boolean boolean8 = jSONWriter1.removeReference((java.lang.Object) (short) -1);
        jSONWriter1.writeArrayNull();
        jSONWriter1.writeAny((java.lang.Object) 1.0d);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        boolean boolean17 = jSONWriter15.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class18 = null;
        boolean boolean20 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter15, class18, (long) ' ');
        char[] charArray21 = new char[] {};
        jSONWriter15.writeString(charArray21);
        jSONWriter1.writeString(charArray21, (int) (byte) -1, 0, true);
        com.alibaba.fastjson2.JSONWriter.Context context27 = jSONWriter1.getContext();
        jSONWriter1.writeInt32(12);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable31);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray33);
        boolean boolean36 = jSONWriter34.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter32.isWriteTypeInfo((java.lang.Object) jSONWriter34, class37, (long) ' ');
        byte[] byteArray41 = new byte[] { (byte) -1 };
        boolean boolean43 = jSONWriter34.writeTypeName(byteArray41, 0L);
        java.util.UUID uUID44 = null;
        jSONWriter34.writeUUID(uUID44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = jSONWriter34.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter47 = context46.getPropertyFilter();
        long long48 = context46.getFeatures();
        long long49 = context46.getFeatures();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter50 = context46.getContextValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable51 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context46, symbolTable51);
        jSONWriter52.startArray(0);
        boolean boolean55 = jSONWriter52.useSingleQuote;
        java.lang.String str56 = jSONWriter1.setPath("", (java.lang.Object) jSONWriter52);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(context27);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(context46);
        org.junit.Assert.assertNull(propertyFilter47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNull(contextValueFilter50);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        boolean boolean3 = jSONWriter1.utf16;
        jSONWriter1.endObject();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter6);
        long long8 = jSONWriter6.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        boolean boolean13 = jSONWriter11.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat15 = null;
        jSONWriter11.writeDouble(1.0d, decimalFormat15);
        boolean boolean18 = jSONWriter11.removeReference((java.lang.Object) (short) -1);
        jSONWriter11.writeArrayNull();
        long long20 = jSONWriter11.getFeatures();
        java.lang.Class<?> wildcardClass21 = jSONWriter11.getClass();
        boolean boolean23 = jSONWriter6.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass21, (long) (short) 10);
        int[] intArray30 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter6.writeInt32(intArray30);
        jSONWriter1.writeInt32(intArray30);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable33);
        boolean[] booleanArray39 = new boolean[] { false, true, true, true };
        jSONWriter34.writeBool(booleanArray39);
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        boolean boolean46 = jSONWriter44.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter44, class47, (long) ' ');
        byte[] byteArray51 = new byte[] { (byte) -1 };
        boolean boolean53 = jSONWriter44.writeTypeName(byteArray51, 0L);
        jSONWriter34.writeBinary(byteArray51);
        byte[] byteArray55 = jSONWriter34.getBytes();
        jSONWriter1.writeRaw(byteArray55);
        java.time.Instant instant57 = null;
        jSONWriter1.writeInstant(instant57);
        java.math.BigDecimal bigDecimal59 = null;
        jSONWriter1.writeDecimal(bigDecimal59);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-104, -80, -79, -79, -79, -111, 1, -1]");
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        boolean boolean10 = jSONWriter1.isEnabled((long) ' ');
        jSONWriter1.writeString("hi!");
        boolean boolean13 = jSONWriter1.isUTF8();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList17);
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter1.writeFloat((float) ' ', decimalFormat21);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDoubleArray((double) 1L, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        long long3 = jSONWriter1.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        boolean boolean8 = jSONWriter6.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter6.writeDouble(1.0d, decimalFormat10);
        boolean boolean13 = jSONWriter6.removeReference((java.lang.Object) (short) -1);
        jSONWriter6.writeArrayNull();
        long long15 = jSONWriter6.getFeatures();
        java.lang.Class<?> wildcardClass16 = jSONWriter6.getClass();
        boolean boolean18 = jSONWriter1.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass16, (long) (short) 10);
        int[] intArray25 = new int[] { (short) -1, (short) 0, 0, (-1), (short) 100, (-1) };
        jSONWriter1.writeInt32(intArray25);
        com.alibaba.fastjson2.JSONObject jSONObject27 = null;
        jSONWriter1.write(jSONObject27);
        long long30 = jSONWriter1.getFeatures((long) (short) 10);
        jSONWriter1.writeNull();
        byte[] byteArray32 = null;
        jSONWriter1.writeHex(byteArray32);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        boolean boolean37 = jSONWriter35.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter35.writeDouble(1.0d, decimalFormat39);
        boolean boolean42 = jSONWriter35.removeReference((java.lang.Object) (short) -1);
        jSONWriter35.writeArrayNull();
        com.alibaba.fastjson2.SymbolTable symbolTable44 = jSONWriter35.symbolTable;
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter35.getContext();
        boolean boolean46 = context45.isDateFormatMillis();
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty;
        context45.config(feature47, false);
        boolean boolean51 = jSONWriter1.isWriteTypeInfo((java.lang.Object) context45, (long) 0);
        boolean boolean52 = context45.isDateFormatHasHour();
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(symbolTable44);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = context15.getDateFormatter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean22 = jSONWriter20.isRefDetect((java.lang.Object) feature21);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider18, featureArray23);
        jSONWriter25.writeRaw(' ');
        jSONWriter25.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Context context30 = jSONWriter25.getContext();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter31 = context30.getAfterFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter32 = null;
        context30.setPropertyPreFilter(propertyPreFilter32);
        boolean boolean35 = context30.isEnabled((long) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(context30);
        org.junit.Assert.assertNull(afterFilter31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        boolean boolean5 = jSONWriter3.isRefDetect((java.lang.Object) 1L);
        java.lang.Class class6 = null;
        boolean boolean8 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter3, class6, (long) ' ');
        byte[] byteArray10 = new byte[] { (byte) -1 };
        boolean boolean12 = jSONWriter3.writeTypeName(byteArray10, 0L);
        java.util.UUID uUID13 = null;
        jSONWriter3.writeUUID(uUID13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter3.getContext();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = context15.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider17 = context15.getProvider();
        boolean boolean18 = context15.isDateFormatUnixTime();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        context15.config(feature19, true);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider22 = context15.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider22);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNull(propertyFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(objectWriterProvider22);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Context context2 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray0);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray4 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray4);
        jSONWriter5.close();
        java.text.DecimalFormat decimalFormat8 = null;
        jSONWriter5.writeFloat((float) 10, decimalFormat8);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean16 = jSONWriter11.writeTypeName(byteArray14, (long) 10);
        boolean boolean18 = jSONWriter5.writeTypeName(byteArray14, (long) (byte) 100);
        jSONWriter5.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        jSONWriter22.close();
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter22.writeFloat((float) 10, decimalFormat25);
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray27);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 100 };
        boolean boolean33 = jSONWriter28.writeTypeName(byteArray31, (long) 10);
        boolean boolean35 = jSONWriter22.writeTypeName(byteArray31, (long) (byte) 100);
        jSONWriter22.writeInt16((short) (byte) 100);
        boolean boolean38 = jSONWriter22.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter40);
        long long42 = jSONWriter40.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] {};
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray44);
        boolean boolean47 = jSONWriter45.isRefDetect((java.lang.Object) 1L);
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter45.writeDouble(1.0d, decimalFormat49);
        boolean boolean52 = jSONWriter45.removeReference((java.lang.Object) (short) -1);
        jSONWriter45.writeArrayNull();
        long long54 = jSONWriter45.getFeatures();
        java.lang.Class<?> wildcardClass55 = jSONWriter45.getClass();
        boolean boolean57 = jSONWriter40.isWriteTypeInfo((java.lang.Object) '4', (java.lang.Class) wildcardClass55, (long) (short) 10);
        boolean boolean59 = jSONWriter5.isWriteTypeInfo((java.lang.Object) boolean38, (java.lang.reflect.Type) wildcardClass55, (long) (byte) -1);
        boolean[] booleanArray66 = new boolean[] { false, false, false, true, true, true };
        jSONWriter5.writeBool(booleanArray66);
        jSONWriter3.writeBool(booleanArray66);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter3.writeDouble((double) 0.0f, decimalFormat70);
        org.junit.Assert.assertNotNull(featureArray0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(featureArray4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[false, false, false, true, true, true]");
    }
}

