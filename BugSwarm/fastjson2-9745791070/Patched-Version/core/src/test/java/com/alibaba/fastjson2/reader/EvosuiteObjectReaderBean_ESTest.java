/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 18:58:54 GMT 2024
 */

package com.alibaba.fastjson2.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.JSONReader;
import com.alibaba.fastjson2.JSONWriter;
import com.alibaba.fastjson2.SymbolTable;
import com.alibaba.fastjson2.schema.JSONSchema;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Locale;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class EvosuiteObjectReaderBean_ESTest extends EvosuiteObjectReaderBean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      Integer integer0 = new Integer((-110));
      objectReaderException0.initDefaultValue(integer0);
      assertEquals(3044221079117626727L, objectReaderException0.getTypeKeyHash());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[1];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0);
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) class0, (long) (byte) (-119));
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // fieldName not support input type INT32 0, offset 1
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      // Undeclared exception!
      try {
        objectReaderException0.readObject((JSONReader) null, (Type) class0, (Object) class0, 1L);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, 0, (int) (byte)100);
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) null, (-17L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      // Undeclared exception!
      try {
        objectReaderException0.readObject((JSONReader) null, (Object) null, 579L);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[8];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, (int) (byte) (-100), (int) (byte)100);
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.OptimizedForAscii;
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader0, (Object) jSONWriter_Feature0, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -100
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      char[] charArray0 = new char[8];
      JSONReader jSONReader0 = JSONReader.of(charArray0, (-1056), (-1056));
      // Undeclared exception!
      try {
        objectReaderException0.processObjectInputSingleItemArray(jSONReader0, class0, "4qgMHn/-x(yc", (-1056));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-100);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0);
      jSONReader0.endArray();
      Integer integer0 = Integer.valueOf((int) (byte)123);
      // Undeclared exception!
      try {
        objectReaderException0.processExtra(jSONReader0, integer0);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // readInt32Value not support ARRAY -100, offset 3/8
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0);
      Integer integer0 = Integer.valueOf((int) (byte)123);
      // Undeclared exception!
      try {
        objectReaderException0.processExtra(jSONReader0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      JSONReader jSONReader0 = JSONReader.of("4qgMHn/-x(yc");
      Class<JSONWriter.Feature> class1 = JSONWriter.Feature.class;
      // Undeclared exception!
      try {
        objectReaderException0.checkAutoType(jSONReader0, class1, 0L);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // UnsupportedOperation
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[8];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, (int) (byte)108, (int) (byte)108, (SymbolTable) null);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try {
        objectReaderException0.checkAutoType(jSONReader0, class1, 593L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 108
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[8];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0);
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.OptimizedForAscii;
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader0, (Object) jSONWriter_Feature0, 0L);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // UnsupportedOperation
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      char[] charArray0 = new char[9];
      byte[] byteArray0 = new byte[8];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0);
      JSONReader.Context jSONReader_Context0 = jSONReader0.getContext();
      JSONReader jSONReader1 = JSONReader.of(charArray0, jSONReader_Context0);
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader1, (Object) jSONReader_Context0, 3042L);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // offset 1, character \u0000, line 1, column 2, fastjson-version 2.0.21 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      byte[] byteArray0 = new byte[1];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0);
      Class<JSONWriter.Feature> class1 = JSONWriter.Feature.class;
      ObjectReader objectReader0 = objectReaderException0.checkAutoType(jSONReader0, class1, 0L);
      assertNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      Class<Integer> class1 = Integer.class;
      Locale locale0 = Locale.CHINA;
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context((ObjectReaderProvider) null, (SymbolTable) null);
      JSONReader jSONReader0 = JSONReader.of("4qgMHn/-x(yc", jSONReader_Context0);
      Long long0 = jSONReader0.readInt64();
      FieldReaderInt64Method<Object> fieldReaderInt64Method0 = new FieldReaderInt64Method<Object>("4qgMHn/-x(yc", class0, class1, 0, (-2514L), "4qgMHn/-x(yc", locale0, long0, (JSONSchema) null, (Method) null);
      objectReaderException0.extraFieldReader = (FieldReader) fieldReaderInt64Method0;
      objectReaderException0.acceptExtra(class0, "4qgMHn/-x(yc", (Object) null);
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      objectReaderException0.acceptExtra(class0, "4qgMHn/-x(yc", (Object) null);
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[8];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0);
      Integer integer0 = Integer.valueOf((int) (byte)123);
      objectReaderException0.processExtra(jSONReader0, integer0);
      assertEquals((byte)0, jSONReader0.getType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      char[] charArray0 = new char[5];
      JSONReader jSONReader0 = JSONReader.of(charArray0, (JSONReader.Context) null);
      // Undeclared exception!
      try {
        objectReaderException0.processObjectInputSingleItemArray(jSONReader0, class0, class0, (-1664L));
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      String[] stringArray0 = new String[8];
      ObjectReaderSeeAlso<Integer> objectReaderSeeAlso0 = null;
      try {
        objectReaderSeeAlso0 = new ObjectReaderSeeAlso<Integer>(class0, (Supplier<Integer>) null, "4qgMHn/-x(yc", (Class[]) null, stringArray0, (FieldReader[]) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<JSONWriter.Feature> class0 = JSONWriter.Feature.class;
      ObjectReaderException<JSONWriter.Feature> objectReaderException0 = new ObjectReaderException<JSONWriter.Feature>(class0);
      Class<JSONWriter.Feature> class1 = objectReaderException0.getObjectClass();
      assertNotNull(class1);
      assertEquals(0L, objectReaderException0.getFeatures());
  }
}
