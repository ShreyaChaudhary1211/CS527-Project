/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 30 03:30:09 GMT 2024
 */

package com.coremedia.iso.boxes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.coremedia.iso.BoxParser;
import com.coremedia.iso.PropertyBoxParserImpl;
import com.googlecode.mp4parser.DataSource;
import com.googlecode.mp4parser.DirectFileReadDataSource;
import com.googlecode.mp4parser.FileDataSourceViaHeapImpl;
import com.googlecode.mp4parser.MemoryDataSourceImpl;
import com.googlecode.mp4parser.MultiFileDataSourceImpl;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PrintStream;
import java.net.ProtocolFamily;
import java.net.StandardProtocolFamily;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.WritableByteChannel;
import java.util.LinkedList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MetaBox_ESTest extends MetaBox_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      File[] fileArray0 = new File[0];
      MultiFileDataSourceImpl multiFileDataSourceImpl0 = new MultiFileDataSourceImpl(fileArray0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(227);
      Properties properties0 = new Properties();
      PropertyBoxParserImpl propertyBoxParserImpl0 = new PropertyBoxParserImpl(properties0);
      // Undeclared exception!
      try { 
        metaBox0.parse(multiFileDataSourceImpl0, byteBuffer0, 227, propertyBoxParserImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.googlecode.mp4parser.MultiFileDataSourceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      Class<ClassificationBox> class0 = ClassificationBox.class;
      metaBox0.getBoxes(class0);
      metaBox0.getFlags();
      Integer integer0 = new Integer(0);
      metaBox0.getVersion();
      metaBox0.getFlags();
      metaBox0.setFlags(1930);
      LinkedList<Box> linkedList0 = new LinkedList<Box>();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      MemoryDataSourceImpl memoryDataSourceImpl0 = new MemoryDataSourceImpl(byteBuffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyBoxParserImpl propertyBoxParserImpl0 = new PropertyBoxParserImpl((Properties) null);
      // Undeclared exception!
      try { 
        metaBox0.parse(memoryDataSourceImpl0, byteBuffer0, 0, propertyBoxParserImpl0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      long long0 = metaBox0.getSize();
      assertEquals(12L, long0);
      
      File file0 = MockFile.createTempFile("meta", "meta", (File) null);
      DirectFileReadDataSource directFileReadDataSource0 = new DirectFileReadDataSource(file0);
      ByteBuffer byteBuffer0 = metaBox0.getByteBuffer(12L, 12L);
      Properties properties0 = new Properties();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      properties0.list((PrintStream) mockPrintStream0);
      metaBox0.parse(directFileReadDataSource0, byteBuffer0, 12L, (BoxParser) null);
      // Undeclared exception!
      try { 
        metaBox0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.mp4parser.BasicContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      FileChannel.MapMode fileChannel_MapMode0 = FileChannel.MapMode.READ_WRITE;
      metaBox0.setVersion(53);
      metaBox0.setFlags((-59));
      metaBox0.setVersion((-59));
      int int0 = metaBox0.getVersion();
      assertEquals((-59), metaBox0.getFlags());
      assertEquals((-59), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      long long0 = metaBox0.getSize();
      assertEquals(12L, long0);
      
      File file0 = MockFile.createTempFile("meta", "meta", (File) null);
      DirectFileReadDataSource directFileReadDataSource0 = new DirectFileReadDataSource(file0);
      ByteBuffer byteBuffer0 = metaBox0.getByteBuffer(12L, 12L);
      Properties properties0 = new Properties();
      PropertyBoxParserImpl propertyBoxParserImpl0 = new PropertyBoxParserImpl(properties0);
      metaBox0.parse(directFileReadDataSource0, byteBuffer0, 12L, propertyBoxParserImpl0);
      assertEquals(12, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=12 cap=12]", byteBuffer0.toString());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        metaBox0.getBox(fileChannel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No box object found for \u0000\u0000\u0000\u0000
         //
         verifyException("com.coremedia.iso.PropertyBoxParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.getSize();
      File file0 = MockFile.createTempFile("meta", "meta", (File) null);
      DirectFileReadDataSource directFileReadDataSource0 = new DirectFileReadDataSource(file0);
      ByteBuffer byteBuffer0 = metaBox0.getByteBuffer(12L, 12L);
      Properties properties0 = new Properties();
      PropertyBoxParserImpl propertyBoxParserImpl0 = new PropertyBoxParserImpl(properties0);
      metaBox0.parse(directFileReadDataSource0, byteBuffer0, 12L, propertyBoxParserImpl0);
      // Undeclared exception!
      try { 
        metaBox0.parse(directFileReadDataSource0, byteBuffer0, 4294967296L, propertyBoxParserImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A cast to int has gone wrong. Please contact the mp4parser discussion group (4294967296)
         //
         verifyException("com.googlecode.mp4parser.util.CastUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-60);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.duplicate();
      metaBox0.parseVersionAndFlags(byteBuffer0);
      metaBox0.setFlags(16);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      mockFile0.setWritable(false, true);
      try { 
        metaBox0.getBox(fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-60);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.duplicate();
      metaBox0.parseVersionAndFlags(byteBuffer0);
      metaBox0.setFlags(16);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFileOutputStream0.write(1);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.close();
      try { 
        metaBox0.getBox(fileChannel0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.getSize();
      File file0 = MockFile.createTempFile("meta", "meta", (File) null);
      DirectFileReadDataSource directFileReadDataSource0 = new DirectFileReadDataSource(file0);
      ByteBuffer byteBuffer0 = metaBox0.getByteBuffer(12L, 12L);
      Properties properties0 = new Properties();
      PropertyBoxParserImpl propertyBoxParserImpl0 = new PropertyBoxParserImpl(properties0);
      // Undeclared exception!
      try { 
        metaBox0.parse(directFileReadDataSource0, byteBuffer0, 4L, propertyBoxParserImpl0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.getSize();
      File file0 = MockFile.createTempFile("meta", "meta", (File) null);
      DirectFileReadDataSource directFileReadDataSource0 = new DirectFileReadDataSource(file0);
      ByteBuffer byteBuffer0 = metaBox0.getByteBuffer(12L, 12L);
      Properties properties0 = new Properties();
      PropertyBoxParserImpl propertyBoxParserImpl0 = new PropertyBoxParserImpl(properties0);
      metaBox0.parse(directFileReadDataSource0, byteBuffer0, 12L, propertyBoxParserImpl0);
      // Undeclared exception!
      try { 
        metaBox0.getSize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No box object found for \u0000\u0000\u0000\u0000
         //
         verifyException("com.coremedia.iso.PropertyBoxParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.getSize();
      File file0 = MockFile.createTempFile("meta", "meta", (File) null);
      DirectFileReadDataSource directFileReadDataSource0 = new DirectFileReadDataSource(file0);
      ByteBuffer byteBuffer0 = metaBox0.getByteBuffer(12L, 12L);
      directFileReadDataSource0.close();
      Properties properties0 = new Properties();
      PropertyBoxParserImpl propertyBoxParserImpl0 = new PropertyBoxParserImpl(properties0);
      try { 
        metaBox0.parse(directFileReadDataSource0, byteBuffer0, 12L, propertyBoxParserImpl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.getSize();
      File file0 = MockFile.createTempFile("meta", "meta", (File) null);
      DirectFileReadDataSource directFileReadDataSource0 = new DirectFileReadDataSource(file0);
      ByteBuffer byteBuffer0 = metaBox0.getByteBuffer(12L, 12L);
      Properties properties0 = new Properties();
      PropertyBoxParserImpl propertyBoxParserImpl0 = new PropertyBoxParserImpl(properties0);
      // Undeclared exception!
      try { 
        metaBox0.parse(directFileReadDataSource0, byteBuffer0, (-12L), propertyBoxParserImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.hasNext();
      metaBox0.getVersion();
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("meta", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileDataSourceViaHeapImpl fileDataSourceViaHeapImpl0 = new FileDataSourceViaHeapImpl(fileChannel0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1198);
      Properties properties0 = new Properties();
      PropertyBoxParserImpl propertyBoxParserImpl0 = new PropertyBoxParserImpl(properties0);
      // Undeclared exception!
      try { 
        metaBox0.parse(fileDataSourceViaHeapImpl0, byteBuffer0, 1198, propertyBoxParserImpl0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MetaBox metaBox0 = new MetaBox();
      Class<ClassificationBox> class0 = ClassificationBox.class;
      metaBox0.getBoxes(class0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      metaBox0.hasNext();
      metaBox0.setFlags((-984));
      metaBox0.getFlags();
      metaBox0.getVersion();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-40);
      byteArray1[2] = (byte)80;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-35);
      byteArray1[5] = (byte)77;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray1, (-2546), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.setVersion(2727);
      FreeBox freeBox0 = new FreeBox();
      metaBox0.addBox(freeBox0);
      metaBox0.getSize();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)19;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MemoryDataSourceImpl memoryDataSourceImpl0 = new MemoryDataSourceImpl(byteArray0);
      MockFile mockFile0 = new MockFile("\"utW8q'JNBITHG-[C", "6");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "\"utW8q'JNBITHG-[C", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      LinkedList<Box> linkedList0 = new LinkedList<Box>();
      linkedList0.add((Box) metaBox0);
      metaBox0.setBoxes(linkedList0);
      // Undeclared exception!
      try { 
        metaBox0.getSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-60);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.duplicate();
      metaBox0.parseVersionAndFlags(byteBuffer0);
      metaBox0.setFlags(16);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      metaBox0.getBox(fileChannel0);
      assertEquals(12L, fileChannel0.size());
      assertEquals(16, metaBox0.getFlags());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-60);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      metaBox0.parseVersionAndFlags(byteBuffer0);
      metaBox0.setFlags(16);
      assertEquals(16, metaBox0.getFlags());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      int int0 = 0;
      FreeBox freeBox0 = new FreeBox(160);
      ByteBuffer byteBuffer0 = freeBox0.getData();
      Properties properties0 = new Properties();
      byteBuffer0.mark();
      PropertyBoxParserImpl propertyBoxParserImpl0 = new PropertyBoxParserImpl(properties0);
      // Undeclared exception!
      try { 
        metaBox0.parse((DataSource) null, byteBuffer0, 0L, propertyBoxParserImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coremedia.iso.boxes.MetaBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      ByteBuffer byteBuffer0 = null;
      // Undeclared exception!
      try { 
        metaBox0.writeVersionAndFlags((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coremedia.iso.IsoTypeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      int int0 = 493;
      metaBox0.setVersion(493);
      metaBox0.getFlags();
      int int1 = 67;
      metaBox0.setFlags(67);
      metaBox0.getFlags();
      String string0 = null;
      // Undeclared exception!
      try { 
        StandardProtocolFamily.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.setVersion(8192);
      metaBox0.getVersion();
      metaBox0.getFlags();
      FreeBox freeBox0 = new FreeBox();
      ByteBuffer byteBuffer0 = freeBox0.data;
      // Undeclared exception!
      try { 
        metaBox0.parseVersionAndFlags(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.getBoxes();
      int int0 = (-3147);
      metaBox0.setVersion((-3147));
      metaBox0.getFlags();
      metaBox0.setFlags((-3147));
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      // Undeclared exception!
      try { 
        metaBox0.getBox(datagramChannel0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      // Undeclared exception!
      try { 
        metaBox0.getBox((WritableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coremedia.iso.boxes.MetaBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      FreeBox freeBox0 = new FreeBox();
      metaBox0.getByteBuffer(661L, 661L);
      ByteBuffer byteBuffer0 = freeBox0.data;
      // Undeclared exception!
      try { 
        metaBox0.parseVersionAndFlags(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        metaBox0.getBox(fileChannel0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.getSize();
      metaBox0.getVersion();
      // Undeclared exception!
      try { 
        metaBox0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.mp4parser.BasicContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      int int0 = metaBox0.getVersion();
      assertEquals(0, int0);
      
      metaBox0.getFlags();
      metaBox0.setFlags(0);
      assertEquals(0, metaBox0.getFlags());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.setVersion(1);
      assertEquals(1, metaBox0.getVersion());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      FreeBox freeBox0 = new FreeBox();
      freeBox0.getSize();
      ByteBuffer byteBuffer0 = freeBox0.getData();
      Class<ClassificationBox> class0 = ClassificationBox.class;
      MetaBox metaBox1 = new MetaBox();
      metaBox0.setParent(metaBox1);
      // Undeclared exception!
      try { 
        metaBox0.writeVersionAndFlags(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.setFlags((-1));
      // Undeclared exception!
      try { 
        metaBox0.parseVersionAndFlags((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coremedia.iso.IsoTypeReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2095);
      metaBox0.writeVersionAndFlags(byteBuffer0);
      assertEquals(4, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      // Undeclared exception!
      try { 
        metaBox0.parseVersionAndFlags((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coremedia.iso.IsoTypeReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      int int0 = metaBox0.getFlags();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.setFlags(0);
      assertEquals(0, metaBox0.getFlags());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.getSize();
      File file0 = MockFile.createTempFile("meta", "meta", (File) null);
      DirectFileReadDataSource directFileReadDataSource0 = new DirectFileReadDataSource(file0);
      ByteBuffer byteBuffer0 = metaBox0.getByteBuffer(12L, 12L);
      Properties properties0 = new Properties();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(']');
      properties0.list((PrintStream) mockPrintStream0);
      PropertyBoxParserImpl propertyBoxParserImpl0 = new PropertyBoxParserImpl(properties0);
      metaBox0.parse(directFileReadDataSource0, byteBuffer0, 12L, propertyBoxParserImpl0);
      assertEquals(2960672, metaBox0.getFlags());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("meta");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      metaBox0.getBox(fileChannel0);
      metaBox0.getBox(fileChannel0);
      assertEquals(24L, fileChannel0.size());
      assertEquals(24L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MetaBox metaBox0 = new MetaBox();
      metaBox0.setVersion((-14));
      assertEquals((-14), metaBox0.getVersion());
  }
}
